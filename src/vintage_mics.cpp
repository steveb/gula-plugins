/* ------------------------------------------------------------
name: "vintage_mics"
Code generated with Faust 2.21.1 (https://faust.grame.fr)
Compilation options: -lang cpp -scal -ftz 0
------------------------------------------------------------ */

#ifndef  __vintage_mics_H__
#define  __vintage_mics_H__

/************************************************************************
 ************************************************************************
    FAUST Architecture File
    Copyright (C) 2009-2016 Albert Graef <aggraef@gmail.com>
    ---------------------------------------------------------------------
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation; either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with the GNU C Library; if not, write to the Free
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.
 ************************************************************************
 ************************************************************************/

/* LV2 architecture for Faust synths. */

/* NOTE: This requires one of the Boost headers (boost/circular_buffer.hpp),
   so to compile Faust programs created with this architecture you need to
   have at least the Boost headers installed somewhere on your include path
   (the Boost libraries aren't needed). */

#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <list>
#include <map>
#include <set>

// generic Faust dsp and UI classes
/************************** BEGIN dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __dsp__
#define __dsp__

#include <string>
#include <vector>

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

class UI;
struct Meta;

/**
 * DSP memory manager.
 */

struct dsp_memory_manager {
    
    virtual ~dsp_memory_manager() {}
    
    virtual void* allocate(size_t size) = 0;
    virtual void destroy(void* ptr) = 0;
    
};

/**
* Signal processor definition.
*/

class dsp {

    public:

        dsp() {}
        virtual ~dsp() {}

        /* Return instance number of audio inputs */
        virtual int getNumInputs() = 0;
    
        /* Return instance number of audio outputs */
        virtual int getNumOutputs() = 0;
    
        /**
         * Trigger the ui_interface parameter with instance specific calls
         * to 'addBtton', 'addVerticalSlider'... in order to build the UI.
         *
         * @param ui_interface - the user interface builder
         */
        virtual void buildUserInterface(UI* ui_interface) = 0;
    
        /* Returns the sample rate currently used by the instance */
        virtual int getSampleRate() = 0;
    
        /**
         * Global init, calls the following methods:
         * - static class 'classInit': static tables initialization
         * - 'instanceInit': constants and instance state initialization
         *
         * @param sample_rate - the sampling rate in Hertz
         */
        virtual void init(int sample_rate) = 0;

        /**
         * Init instance state
         *
         * @param sample_rate - the sampling rate in Hertz
         */
        virtual void instanceInit(int sample_rate) = 0;

        /**
         * Init instance constant state
         *
         * @param sample_rate - the sampling rate in Hertz
         */
        virtual void instanceConstants(int sample_rate) = 0;
    
        /* Init default control parameters values */
        virtual void instanceResetUserInterface() = 0;
    
        /* Init instance state (delay lines...) */
        virtual void instanceClear() = 0;
 
        /**
         * Return a clone of the instance.
         *
         * @return a copy of the instance on success, otherwise a null pointer.
         */
        virtual dsp* clone() = 0;
    
        /**
         * Trigger the Meta* parameter with instance specific calls to 'declare' (key, value) metadata.
         *
         * @param m - the Meta* meta user
         */
        virtual void metadata(Meta* m) = 0;
    
        /**
         * DSP instance computation, to be called with successive in/out audio buffers.
         *
         * @param count - the number of frames to compute
         * @param inputs - the input audio buffers as an array of non-interleaved FAUSTFLOAT samples (eiher float, double or quad)
         * @param outputs - the output audio buffers as an array of non-interleaved FAUSTFLOAT samples (eiher float, double or quad)
         *
         */
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) = 0;
    
        /**
         * DSP instance computation: alternative method to be used by subclasses.
         *
         * @param date_usec - the timestamp in microsec given by audio driver.
         * @param count - the number of frames to compute
         * @param inputs - the input audio buffers as an array of non-interleaved FAUSTFLOAT samples (either float, double or quad)
         * @param outputs - the output audio buffers as an array of non-interleaved FAUSTFLOAT samples (either float, double or quad)
         *
         */
        virtual void compute(double /*date_usec*/, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { compute(count, inputs, outputs); }
       
};

/**
 * Generic DSP decorator.
 */

class decorator_dsp : public dsp {

    protected:

        dsp* fDSP;

    public:

        decorator_dsp(dsp* dsp = nullptr):fDSP(dsp) {}
        virtual ~decorator_dsp() { delete fDSP; }

        virtual int getNumInputs() { return fDSP->getNumInputs(); }
        virtual int getNumOutputs() { return fDSP->getNumOutputs(); }
        virtual void buildUserInterface(UI* ui_interface) { fDSP->buildUserInterface(ui_interface); }
        virtual int getSampleRate() { return fDSP->getSampleRate(); }
        virtual void init(int sample_rate) { fDSP->init(sample_rate); }
        virtual void instanceInit(int sample_rate) { fDSP->instanceInit(sample_rate); }
        virtual void instanceConstants(int sample_rate) { fDSP->instanceConstants(sample_rate); }
        virtual void instanceResetUserInterface() { fDSP->instanceResetUserInterface(); }
        virtual void instanceClear() { fDSP->instanceClear(); }
        virtual decorator_dsp* clone() { return new decorator_dsp(fDSP->clone()); }
        virtual void metadata(Meta* m) { fDSP->metadata(m); }
        // Beware: subclasses usually have to overload the two 'compute' methods
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { fDSP->compute(count, inputs, outputs); }
        virtual void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { fDSP->compute(date_usec, count, inputs, outputs); }
    
};

/**
 * DSP factory class.
 */

class dsp_factory {
    
    protected:
    
        // So that to force sub-classes to use deleteDSPFactory(dsp_factory* factory);
        virtual ~dsp_factory() {}
    
    public:
    
        virtual std::string getName() = 0;
        virtual std::string getSHAKey() = 0;
        virtual std::string getDSPCode() = 0;
        virtual std::string getCompileOptions() = 0;
        virtual std::vector<std::string> getLibraryList() = 0;
        virtual std::vector<std::string> getIncludePathnames() = 0;
    
        virtual dsp* createDSPInstance() = 0;
    
        virtual void setMemoryManager(dsp_memory_manager* manager) = 0;
        virtual dsp_memory_manager* getMemoryManager() = 0;
    
};

/**
 * On Intel set FZ (Flush to Zero) and DAZ (Denormals Are Zero)
 * flags to avoid costly denormals.
 */

#ifdef __SSE__
    #include <xmmintrin.h>
    #ifdef __SSE2__
        #define AVOIDDENORMALS _mm_setcsr(_mm_getcsr() | 0x8040)
    #else
        #define AVOIDDENORMALS _mm_setcsr(_mm_getcsr() | 0x8000)
    #endif
#else
    #define AVOIDDENORMALS
#endif

#endif
/**************************  END  dsp.h **************************/
/************************** BEGIN UI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __UI_H__
#define __UI_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

/*******************************************************************************
 * UI : Faust DSP User Interface
 * User Interface as expected by the buildUserInterface() method of a DSP.
 * This abstract class contains only the method that the Faust compiler can
 * generate to describe a DSP user interface.
 ******************************************************************************/

struct Soundfile;

template <typename REAL>
class UIReal
{
    
    public:
        
        UIReal() {}
        virtual ~UIReal() {}
        
        // -- widget's layouts
        
        virtual void openTabBox(const char* label) = 0;
        virtual void openHorizontalBox(const char* label) = 0;
        virtual void openVerticalBox(const char* label) = 0;
        virtual void closeBox() = 0;
        
        // -- active widgets
        
        virtual void addButton(const char* label, REAL* zone) = 0;
        virtual void addCheckButton(const char* label, REAL* zone) = 0;
        virtual void addVerticalSlider(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step) = 0;
        virtual void addHorizontalSlider(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step) = 0;
        virtual void addNumEntry(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step) = 0;
        
        // -- passive widgets
        
        virtual void addHorizontalBargraph(const char* label, REAL* zone, REAL min, REAL max) = 0;
        virtual void addVerticalBargraph(const char* label, REAL* zone, REAL min, REAL max) = 0;
        
        // -- soundfiles
        
        virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) = 0;
        
        // -- metadata declarations
        
        virtual void declare(REAL* zone, const char* key, const char* val) {}
};

class UI : public UIReal<FAUSTFLOAT>
{

    public:

        UI() {}
        virtual ~UI() {}
};

#endif
/**************************  END  UI.h **************************/

using namespace std;

typedef pair<const char*,const char*> strpair;

struct Meta : std::map<const char*, const char*>
{
  void declare(const char *key, const char *value)
  {
    (*this)[key] = value;
  }
  const char* get(const char *key, const char *def)
  {
    if (this->find(key) != this->end())
      return (*this)[key];
    else
      return def;
  }
};

/******************************************************************************
*******************************************************************************

		       VECTOR INTRINSICS

*******************************************************************************
*******************************************************************************/


/***************************************************************************
   LV2 UI interface
 ***************************************************************************/

enum ui_elem_type_t {
  UI_BUTTON, UI_CHECK_BUTTON,
  UI_V_SLIDER, UI_H_SLIDER, UI_NUM_ENTRY,
  UI_V_BARGRAPH, UI_H_BARGRAPH,
  UI_END_GROUP, UI_V_GROUP, UI_H_GROUP, UI_T_GROUP
};

struct ui_elem_t {
  ui_elem_type_t type;
  const char *label;
  int port;
  float *zone;
  void *ref;
  float init, min, max, step;
};

class LV2UI : public UI
{
public:
  bool is_instr;
  int nelems, nports;
  ui_elem_t *elems;
  map< int, list<strpair> > metadata;

  LV2UI(int maxvoices = 0);
  virtual ~LV2UI();

protected:
  void add_elem(ui_elem_type_t type, const char *label = NULL);
  void add_elem(ui_elem_type_t type, const char *label, float *zone);
  void add_elem(ui_elem_type_t type, const char *label, float *zone,
		float init, float min, float max, float step);
  void add_elem(ui_elem_type_t type, const char *label, float *zone,
		float min, float max);

  bool have_freq, have_gain, have_gate;
  bool is_voice_ctrl(const char *label);

public:
  virtual void addButton(const char* label, float* zone);
  virtual void addCheckButton(const char* label, float* zone);
  virtual void addVerticalSlider(const char* label, float* zone, float init, float min, float max, float step);
  virtual void addHorizontalSlider(const char* label, float* zone, float init, float min, float max, float step);
  virtual void addNumEntry(const char* label, float* zone, float init, float min, float max, float step);

  virtual void addHorizontalBargraph(const char* label, float* zone, float min, float max);
  virtual void addVerticalBargraph(const char* label, float* zone, float min, float max);
    
  virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) {}

  virtual void openTabBox(const char* label);
  virtual void openHorizontalBox(const char* label);
  virtual void openVerticalBox(const char* label);
  virtual void closeBox();

  virtual void run();

  virtual void declare(float* zone, const char* key, const char* value);
};

LV2UI::LV2UI(int maxvoices)
{
  is_instr = maxvoices>0;
  have_freq = have_gain = have_gate = false;
  nelems = nports = 0;
  elems = NULL;
}

LV2UI::~LV2UI()
{
  if (elems) free(elems);
}

void LV2UI::declare(float* zone, const char* key, const char* value)
{
  map< int, list<strpair> >::iterator it = metadata.find(nelems);
  if (it != metadata.end())
    it->second.push_back(strpair(key, value));
  else
    metadata[nelems] = list<strpair>(1, strpair(key, value));
}

inline void LV2UI::add_elem(ui_elem_type_t type, const char *label)
{
  ui_elem_t *elems1 = (ui_elem_t*)realloc(elems, (nelems+1)*sizeof(ui_elem_t));
  if (elems1)
    elems = elems1;
  else
    return;
  elems[nelems].type = type;
  elems[nelems].label = label;
  elems[nelems].port = -1;
  elems[nelems].zone = NULL;
  elems[nelems].ref = NULL;
  elems[nelems].init = 0.0;
  elems[nelems].min = 0.0;
  elems[nelems].max = 0.0;
  elems[nelems].step = 0.0;
  nelems++;
}

#define portno(label) (is_voice_ctrl(label)?-1:nports++)

inline void LV2UI::add_elem(ui_elem_type_t type, const char *label, float *zone)
{
  ui_elem_t *elems1 = (ui_elem_t*)realloc(elems, (nelems+1)*sizeof(ui_elem_t));
  if (elems1)
    elems = elems1;
  else
    return;
  elems[nelems].type = type;
  elems[nelems].label = label;
  elems[nelems].port = portno(label);
  elems[nelems].zone = zone;
  elems[nelems].ref = NULL;
  elems[nelems].init = 0.0;
  elems[nelems].min = 0.0;
  elems[nelems].max = 0.0;
  elems[nelems].step = 0.0;
  nelems++;
}

inline void LV2UI::add_elem(ui_elem_type_t type, const char *label, float *zone,
			     float init, float min, float max, float step)
{
  ui_elem_t *elems1 = (ui_elem_t*)realloc(elems, (nelems+1)*sizeof(ui_elem_t));
  if (elems1)
    elems = elems1;
  else
    return;
  elems[nelems].type = type;
  elems[nelems].label = label;
  elems[nelems].port = portno(label);
  elems[nelems].zone = zone;
  elems[nelems].ref = NULL;
  elems[nelems].init = init;
  elems[nelems].min = min;
  elems[nelems].max = max;
  elems[nelems].step = step;
  nelems++;
}

inline void LV2UI::add_elem(ui_elem_type_t type, const char *label, float *zone,
			     float min, float max)
{
  ui_elem_t *elems1 = (ui_elem_t*)realloc(elems, (nelems+1)*sizeof(ui_elem_t));
  if (elems1)
    elems = elems1;
  else
    return;
  elems[nelems].type = type;
  elems[nelems].label = label;
  elems[nelems].port = portno(label);
  elems[nelems].zone = zone;
  elems[nelems].ref = NULL;
  elems[nelems].init = 0.0;
  elems[nelems].min = min;
  elems[nelems].max = max;
  elems[nelems].step = 0.0;
  nelems++;
}

inline bool LV2UI::is_voice_ctrl(const char *label)
{
  if (!is_instr)
    return false;
  else if (!have_freq && !strcmp(label, "freq"))
    return (have_freq = true);
  else if (!have_gain && !strcmp(label, "gain"))
    return (have_gain = true);
  else if (!have_gate && !strcmp(label, "gate"))
    return (have_gate = true);
  else
    return false;
}

void LV2UI::addButton(const char* label, float* zone)
{ add_elem(UI_BUTTON, label, zone); }
void LV2UI::addCheckButton(const char* label, float* zone)
{ add_elem(UI_CHECK_BUTTON, label, zone); }
void LV2UI::addVerticalSlider(const char* label, float* zone, float init, float min, float max, float step)
{ add_elem(UI_V_SLIDER, label, zone, init, min, max, step); }
void LV2UI::addHorizontalSlider(const char* label, float* zone, float init, float min, float max, float step)
{ add_elem(UI_H_SLIDER, label, zone, init, min, max, step); }
void LV2UI::addNumEntry(const char* label, float* zone, float init, float min, float max, float step)
{ add_elem(UI_NUM_ENTRY, label, zone, init, min, max, step); }

void LV2UI::addHorizontalBargraph(const char* label, float* zone, float min, float max)
{ add_elem(UI_H_BARGRAPH, label, zone, min, max); }
void LV2UI::addVerticalBargraph(const char* label, float* zone, float min, float max)
{ add_elem(UI_V_BARGRAPH, label, zone, min, max); }

void LV2UI::openTabBox(const char* label)
{ add_elem(UI_T_GROUP, label); }
void LV2UI::openHorizontalBox(const char* label)
{ add_elem(UI_H_GROUP, label); }
void LV2UI::openVerticalBox(const char* label)
{ add_elem(UI_V_GROUP, label); }
void LV2UI::closeBox()
{ add_elem(UI_END_GROUP); }

void LV2UI::run() {}

//----------------------------------------------------------------------------
//  FAUST generated signal processor
//----------------------------------------------------------------------------

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>

static float vintage_mics_faustpower2_f(float value) {
	return (value * value);
}

#ifndef FAUSTCLASS 
#define FAUSTCLASS vintage_mics
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

class vintage_mics : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	float fRec0[2];
	FAUSTFLOAT fEntry0;
	int IOTA;
	float fVec0[512];
	int fSampleRate;
	
 public:
	
	void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.1");
		m->declare("filename", "vintage_mics.dsp");
		m->declare("filters.lib/fir:author", "Julius O. Smith III");
		m->declare("filters.lib/fir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/fir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/lowpass0_highpass1", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("name", "vintage_mics");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() {
		return 1;
	}
	virtual int getNumOutputs() {
		return 1;
	}
	virtual int getInputRate(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	virtual int getOutputRate(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(1.0f);
		fEntry0 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; (l0 < 2); l0 = (l0 + 1)) {
			fRec0[l0] = 0.0f;
		}
		IOTA = 0;
		for (int l1 = 0; (l1 < 512); l1 = (l1 + 1)) {
			fVec0[l1] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual vintage_mics* clone() {
		return new vintage_mics();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("vintage_mics");
		ui_interface->declare(&fHslider0, "name", "Gain");
		ui_interface->addHorizontalSlider("gain", &fHslider0, 1.0f, 0.0f, 2.0f, 0.00999999978f);
		ui_interface->declare(&fEntry0, "name", "Impulse Response");
		ui_interface->declare(&fEntry0, "style", "menu{'AKGD12':0;'AKG FaultyD12':1;'Altec 639':2;'Altec 670A':3;'Altec 670B':4;'American R331':5;'Amperite RA':6;'Astatic77':7;'BBCmarconi B':8;'BeO BM2':9;'BeO BM6':10;'Beomic 1000':11;'Beyer M260':12;'Beyer M360':13;'BeyerM500Stock':14;'Coles 4038':15;'Doremi 351':16;'EMI ribbon':17;'EV RE20 Flat':18;'EV RE20 HPF':19;'FilmIndustries M8':20;'FosterDynamicDF1':21;'Framez':22;'GaumontKalee':23;'GEC 2373 Ribbon':24;'GEC bigdynamic':25;'Grampian GR2':26;'Lomo52A5M':27;'Meazzi':28;'Melodium 42B 1':29;'Melodium Model12':30;'MelodiumRM6':31;'OktavaMK18 Overload':32;'OktavaMK18Silver':33;'OktavaML16':34;'Oktava ML19':35;'RCA 44BX 1':36;'RCA 44BX 2':37;'RCA 74B':38;'RCA 77DX 1':39;'RCA 77DX 2':40;'RCA KU3a 1':41;'RCAKU3a':42;'RCA PB90':43;'RCA varacoustic fig8':44;'ResloCR600':45;'ResloDynamic':46;'Reslo RB250':47;'Reslo RB RedLabel':48;'Reslo RV':49;'Reslo SR1':50;'ResloURA':51;'Reslo VMC2':52;'Shure315 flat':53;'Shure315 HPF':54;'Shure510C':55;'Sony C37Fet':56;'STC4033 Cardioid':57;'STC4033 Pressure':58;'STC4033 Ribbon':59;'Telefunken M201':60;'Toshiba TypeG':61;'Toshiba TypeH BK5':62;'Toshiba TypeK flat':63;'Toshiba TypeK HPF':64}");
		ui_interface->addNumEntry("ir", &fEntry0, 0.0f, 0.0f, 64.0f, 1.0f);
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* output0 = outputs[0];
		float fSlow0 = (0.00100000005f * vintage_mics_faustpower2_f(float(fHslider0)));
		float fSlow1 = float(fEntry0);
		int iSlow2 = (fSlow1 >= 33.0f);
		int iSlow3 = (fSlow1 >= 17.0f);
		int iSlow4 = (fSlow1 >= 9.0f);
		int iSlow5 = (fSlow1 >= 5.0f);
		int iSlow6 = (fSlow1 >= 3.0f);
		int iSlow7 = (fSlow1 >= 2.0f);
		int iSlow8 = (fSlow1 >= 1.0f);
		int iSlow9 = (fSlow1 >= 4.0f);
		int iSlow10 = (fSlow1 >= 7.0f);
		int iSlow11 = (fSlow1 >= 6.0f);
		int iSlow12 = (fSlow1 >= 8.0f);
		int iSlow13 = (fSlow1 >= 13.0f);
		int iSlow14 = (fSlow1 >= 11.0f);
		int iSlow15 = (fSlow1 >= 10.0f);
		int iSlow16 = (fSlow1 >= 12.0f);
		int iSlow17 = (fSlow1 >= 15.0f);
		int iSlow18 = (fSlow1 >= 14.0f);
		int iSlow19 = (fSlow1 >= 16.0f);
		int iSlow20 = (fSlow1 >= 25.0f);
		int iSlow21 = (fSlow1 >= 21.0f);
		int iSlow22 = (fSlow1 >= 19.0f);
		int iSlow23 = (fSlow1 >= 18.0f);
		int iSlow24 = (fSlow1 >= 20.0f);
		int iSlow25 = (fSlow1 >= 23.0f);
		int iSlow26 = (fSlow1 >= 22.0f);
		int iSlow27 = (fSlow1 >= 24.0f);
		int iSlow28 = (fSlow1 >= 29.0f);
		int iSlow29 = (fSlow1 >= 27.0f);
		int iSlow30 = (fSlow1 >= 26.0f);
		int iSlow31 = (fSlow1 >= 28.0f);
		int iSlow32 = (fSlow1 >= 31.0f);
		int iSlow33 = (fSlow1 >= 30.0f);
		int iSlow34 = (fSlow1 >= 32.0f);
		int iSlow35 = (fSlow1 >= 49.0f);
		int iSlow36 = (fSlow1 >= 41.0f);
		int iSlow37 = (fSlow1 >= 37.0f);
		int iSlow38 = (fSlow1 >= 35.0f);
		int iSlow39 = (fSlow1 >= 34.0f);
		int iSlow40 = (fSlow1 >= 36.0f);
		int iSlow41 = (fSlow1 >= 39.0f);
		int iSlow42 = (fSlow1 >= 38.0f);
		int iSlow43 = (fSlow1 >= 40.0f);
		int iSlow44 = (fSlow1 >= 45.0f);
		int iSlow45 = (fSlow1 >= 43.0f);
		int iSlow46 = (fSlow1 >= 42.0f);
		int iSlow47 = (fSlow1 >= 44.0f);
		int iSlow48 = (fSlow1 >= 47.0f);
		int iSlow49 = (fSlow1 >= 46.0f);
		int iSlow50 = (fSlow1 >= 48.0f);
		int iSlow51 = (fSlow1 >= 57.0f);
		int iSlow52 = (fSlow1 >= 53.0f);
		int iSlow53 = (fSlow1 >= 51.0f);
		int iSlow54 = (fSlow1 >= 50.0f);
		int iSlow55 = (fSlow1 >= 52.0f);
		int iSlow56 = (fSlow1 >= 55.0f);
		int iSlow57 = (fSlow1 >= 54.0f);
		int iSlow58 = (fSlow1 >= 56.0f);
		int iSlow59 = (fSlow1 >= 61.0f);
		int iSlow60 = (fSlow1 >= 59.0f);
		int iSlow61 = (fSlow1 >= 58.0f);
		int iSlow62 = (fSlow1 >= 60.0f);
		int iSlow63 = (fSlow1 >= 63.0f);
		int iSlow64 = (fSlow1 >= 62.0f);
		int iSlow65 = (fSlow1 >= 64.0f);
		for (int i = 0; (i < count); i = (i + 1)) {
			fRec0[0] = (fSlow0 + (0.999000013f * fRec0[1]));
			float fTemp0 = float(input0[i]);
			fVec0[(IOTA & 511)] = fTemp0;
			float fTemp1 = fVec0[((IOTA - 5) & 511)];
			float fTemp2 = fVec0[((IOTA - 12) & 511)];
			float fTemp3 = fVec0[((IOTA - 33) & 511)];
			float fTemp4 = fVec0[((IOTA - 45) & 511)];
			float fTemp5 = fVec0[((IOTA - 49) & 511)];
			float fTemp6 = fVec0[((IOTA - 53) & 511)];
			float fTemp7 = fVec0[((IOTA - 61) & 511)];
			float fTemp8 = fVec0[((IOTA - 319) & 511)];
			float fTemp9 = (0.00332651753f * fTemp8);
			float fTemp10 = fVec0[((IOTA - 320) & 511)];
			float fTemp11 = fVec0[((IOTA - 321) & 511)];
			float fTemp12 = fVec0[((IOTA - 362) & 511)];
			float fTemp13 = fVec0[((IOTA - 371) & 511)];
			float fTemp14 = fVec0[((IOTA - 372) & 511)];
			float fTemp15 = fVec0[((IOTA - 378) & 511)];
			float fTemp16 = fVec0[((IOTA - 380) & 511)];
			float fTemp17 = fVec0[((IOTA - 381) & 511)];
			float fTemp18 = fVec0[((IOTA - 393) & 511)];
			float fTemp19 = fVec0[((IOTA - 394) & 511)];
			float fTemp20 = fVec0[((IOTA - 396) & 511)];
			float fTemp21 = (0.0054933317f * fTemp20);
			float fTemp22 = fVec0[((IOTA - 406) & 511)];
			float fTemp23 = fVec0[((IOTA - 407) & 511)];
			float fTemp24 = fVec0[((IOTA - 421) & 511)];
			float fTemp25 = (0.00357066561f * fTemp24);
			float fTemp26 = fVec0[((IOTA - 422) & 511)];
			float fTemp27 = fVec0[((IOTA - 424) & 511)];
			float fTemp28 = fVec0[((IOTA - 167) & 511)];
			float fTemp29 = fVec0[((IOTA - 166) & 511)];
			float fTemp30 = fVec0[((IOTA - 159) & 511)];
			float fTemp31 = fVec0[((IOTA - 158) & 511)];
			float fTemp32 = fVec0[((IOTA - 151) & 511)];
			float fTemp33 = fVec0[((IOTA - 150) & 511)];
			float fTemp34 = fVec0[((IOTA - 118) & 511)];
			float fTemp35 = fVec0[((IOTA - 114) & 511)];
			float fTemp36 = fVec0[((IOTA - 113) & 511)];
			float fTemp37 = fVec0[((IOTA - 112) & 511)];
			float fTemp38 = fVec0[((IOTA - 111) & 511)];
			float fTemp39 = fVec0[((IOTA - 110) & 511)];
			float fTemp40 = fVec0[((IOTA - 109) & 511)];
			float fTemp41 = fVec0[((IOTA - 108) & 511)];
			float fTemp42 = fVec0[((IOTA - 107) & 511)];
			float fTemp43 = fVec0[((IOTA - 105) & 511)];
			float fTemp44 = fVec0[((IOTA - 104) & 511)];
			float fTemp45 = fVec0[((IOTA - 103) & 511)];
			float fTemp46 = fVec0[((IOTA - 102) & 511)];
			float fTemp47 = fVec0[((IOTA - 101) & 511)];
			float fTemp48 = fVec0[((IOTA - 100) & 511)];
			float fTemp49 = fVec0[((IOTA - 99) & 511)];
			float fTemp50 = fVec0[((IOTA - 88) & 511)];
			float fTemp51 = fVec0[((IOTA - 87) & 511)];
			float fTemp52 = fVec0[((IOTA - 86) & 511)];
			float fTemp53 = fVec0[((IOTA - 85) & 511)];
			float fTemp54 = fVec0[((IOTA - 78) & 511)];
			float fTemp55 = fVec0[((IOTA - 77) & 511)];
			float fTemp56 = fVec0[((IOTA - 76) & 511)];
			float fTemp57 = fVec0[((IOTA - 75) & 511)];
			float fTemp58 = fVec0[((IOTA - 62) & 511)];
			float fTemp59 = fVec0[((IOTA - 60) & 511)];
			float fTemp60 = fVec0[((IOTA - 59) & 511)];
			float fTemp61 = fVec0[((IOTA - 54) & 511)];
			float fTemp62 = fVec0[((IOTA - 52) & 511)];
			float fTemp63 = fVec0[((IOTA - 51) & 511)];
			float fTemp64 = fVec0[((IOTA - 50) & 511)];
			float fTemp65 = fVec0[((IOTA - 48) & 511)];
			float fTemp66 = fVec0[((IOTA - 47) & 511)];
			float fTemp67 = fVec0[((IOTA - 46) & 511)];
			float fTemp68 = fVec0[((IOTA - 36) & 511)];
			float fTemp69 = fVec0[((IOTA - 35) & 511)];
			float fTemp70 = fVec0[((IOTA - 34) & 511)];
			float fTemp71 = fVec0[((IOTA - 32) & 511)];
			float fTemp72 = fVec0[((IOTA - 31) & 511)];
			float fTemp73 = fVec0[((IOTA - 24) & 511)];
			float fTemp74 = fVec0[((IOTA - 23) & 511)];
			float fTemp75 = fVec0[((IOTA - 22) & 511)];
			float fTemp76 = fVec0[((IOTA - 21) & 511)];
			float fTemp77 = fVec0[((IOTA - 20) & 511)];
			float fTemp78 = fVec0[((IOTA - 17) & 511)];
			float fTemp79 = fVec0[((IOTA - 16) & 511)];
			float fTemp80 = fVec0[((IOTA - 15) & 511)];
			float fTemp81 = fVec0[((IOTA - 14) & 511)];
			float fTemp82 = fVec0[((IOTA - 13) & 511)];
			float fTemp83 = fVec0[((IOTA - 11) & 511)];
			float fTemp84 = fVec0[((IOTA - 10) & 511)];
			float fTemp85 = fVec0[((IOTA - 8) & 511)];
			float fTemp86 = fVec0[((IOTA - 7) & 511)];
			float fTemp87 = fVec0[((IOTA - 6) & 511)];
			float fTemp88 = fVec0[((IOTA - 511) & 511)];
			float fTemp89 = fVec0[((IOTA - 428) & 511)];
			float fTemp90 = fVec0[((IOTA - 384) & 511)];
			float fTemp91 = fVec0[((IOTA - 293) & 511)];
			float fTemp92 = fVec0[((IOTA - 231) & 511)];
			float fTemp93 = fVec0[((IOTA - 353) & 511)];
			float fTemp94 = fVec0[((IOTA - 232) & 511)];
			float fTemp95 = fVec0[((IOTA - 157) & 511)];
			float fTemp96 = fVec0[((IOTA - 280) & 511)];
			float fTemp97 = fVec0[((IOTA - 429) & 511)];
			float fTemp98 = fVec0[((IOTA - 506) & 511)];
			float fTemp99 = fVec0[((IOTA - 457) & 511)];
			float fTemp100 = fVec0[((IOTA - 445) & 511)];
			float fTemp101 = fVec0[((IOTA - 505) & 511)];
			float fTemp102 = fVec0[((IOTA - 462) & 511)];
			float fTemp103 = fVec0[((IOTA - 337) & 511)];
			float fTemp104 = fVec0[((IOTA - 305) & 511)];
			float fTemp105 = fVec0[((IOTA - 288) & 511)];
			float fTemp106 = fVec0[((IOTA - 501) & 511)];
			float fTemp107 = fVec0[((IOTA - 504) & 511)];
			float fTemp108 = fVec0[((IOTA - 458) & 511)];
			float fTemp109 = fVec0[((IOTA - 448) & 511)];
			float fTemp110 = fVec0[((IOTA - 313) & 511)];
			float fTemp111 = fVec0[((IOTA - 240) & 511)];
			float fTemp112 = fVec0[((IOTA - 482) & 511)];
			float fTemp113 = fVec0[((IOTA - 492) & 511)];
			float fTemp114 = fVec0[((IOTA - 498) & 511)];
			float fTemp115 = fVec0[((IOTA - 436) & 511)];
			float fTemp116 = fVec0[((IOTA - 330) & 511)];
			float fTemp117 = (fTemp115 + fTemp116);
			float fTemp118 = fVec0[((IOTA - 491) & 511)];
			float fTemp119 = fVec0[((IOTA - 460) & 511)];
			float fTemp120 = fVec0[((IOTA - 447) & 511)];
			float fTemp121 = fVec0[((IOTA - 443) & 511)];
			float fTemp122 = fVec0[((IOTA - 403) & 511)];
			float fTemp123 = fVec0[((IOTA - 385) & 511)];
			float fTemp124 = fVec0[((IOTA - 488) & 511)];
			float fTemp125 = fVec0[((IOTA - 476) & 511)];
			float fTemp126 = fVec0[((IOTA - 336) & 511)];
			float fTemp127 = fVec0[((IOTA - 473) & 511)];
			float fTemp128 = fVec0[((IOTA - 303) & 511)];
			float fTemp129 = fVec0[((IOTA - 302) & 511)];
			float fTemp130 = fVec0[((IOTA - 471) & 511)];
			float fTemp131 = fVec0[((IOTA - 470) & 511)];
			float fTemp132 = fVec0[((IOTA - 441) & 511)];
			float fTemp133 = fVec0[((IOTA - 367) & 511)];
			float fTemp134 = fVec0[((IOTA - 468) & 511)];
			float fTemp135 = fVec0[((IOTA - 30) & 511)];
			float fTemp136 = fVec0[((IOTA - 465) & 511)];
			float fTemp137 = fVec0[((IOTA - 333) & 511)];
			float fTemp138 = fVec0[((IOTA - 296) & 511)];
			float fTemp139 = fVec0[((IOTA - 464) & 511)];
			float fTemp140 = fVec0[((IOTA - 435) & 511)];
			float fTemp141 = fVec0[((IOTA - 266) & 511)];
			float fTemp142 = fVec0[((IOTA - 459) & 511)];
			float fTemp143 = fVec0[((IOTA - 215) & 511)];
			float fTemp144 = fVec0[((IOTA - 74) & 511)];
			float fTemp145 = fVec0[((IOTA - 450) & 511)];
			float fTemp146 = fVec0[((IOTA - 414) & 511)];
			float fTemp147 = fVec0[((IOTA - 274) & 511)];
			float fTemp148 = fVec0[((IOTA - 449) & 511)];
			float fTemp149 = fVec0[((IOTA - 392) & 511)];
			float fTemp150 = fVec0[((IOTA - 444) & 511)];
			float fTemp151 = fVec0[((IOTA - 402) & 511)];
			float fTemp152 = fVec0[((IOTA - 442) & 511)];
			float fTemp153 = fVec0[((IOTA - 358) & 511)];
			float fTemp154 = fVec0[((IOTA - 267) & 511)];
			float fTemp155 = fVec0[((IOTA - 439) & 511)];
			float fTemp156 = fVec0[((IOTA - 432) & 511)];
			float fTemp157 = fVec0[((IOTA - 347) & 511)];
			float fTemp158 = fVec0[((IOTA - 304) & 511)];
			float fTemp159 = fVec0[((IOTA - 84) & 511)];
			float fTemp160 = fVec0[((IOTA - 300) & 511)];
			float fTemp161 = fVec0[((IOTA - 434) & 511)];
			float fTemp162 = fVec0[((IOTA - 425) & 511)];
			float fTemp163 = fVec0[((IOTA - 433) & 511)];
			float fTemp164 = fVec0[((IOTA - 399) & 511)];
			float fTemp165 = fVec0[((IOTA - 276) & 511)];
			float fTemp166 = fVec0[((IOTA - 419) & 511)];
			float fTemp167 = fVec0[((IOTA - 408) & 511)];
			float fTemp168 = fVec0[((IOTA - 361) & 511)];
			float fTemp169 = fVec0[((IOTA - 152) & 511)];
			float fTemp170 = fVec0[((IOTA - 417) & 511)];
			float fTemp171 = fVec0[((IOTA - 299) & 511)];
			float fTemp172 = fVec0[((IOTA - 411) & 511)];
			float fTemp173 = fVec0[((IOTA - 264) & 511)];
			float fTemp174 = fVec0[((IOTA - 200) & 511)];
			float fTemp175 = fVec0[((IOTA - 199) & 511)];
			float fTemp176 = fVec0[((IOTA - 254) & 511)];
			float fTemp177 = fVec0[((IOTA - 404) & 511)];
			float fTemp178 = fVec0[((IOTA - 329) & 511)];
			float fTemp179 = fVec0[((IOTA - 401) & 511)];
			float fTemp180 = fVec0[((IOTA - 175) & 511)];
			float fTemp181 = fVec0[((IOTA - 270) & 511)];
			float fTemp182 = fVec0[((IOTA - 398) & 511)];
			float fTemp183 = fVec0[((IOTA - 350) & 511)];
			float fTemp184 = fVec0[((IOTA - 310) & 511)];
			float fTemp185 = fVec0[((IOTA - 397) & 511)];
			float fTemp186 = fVec0[((IOTA - 161) & 511)];
			float fTemp187 = fVec0[((IOTA - 395) & 511)];
			float fTemp188 = fVec0[((IOTA - 160) & 511)];
			float fTemp189 = fVec0[((IOTA - 382) & 511)];
			float fTemp190 = fVec0[((IOTA - 286) & 511)];
			float fTemp191 = fVec0[((IOTA - 391) & 511)];
			float fTemp192 = fVec0[((IOTA - 360) & 511)];
			float fTemp193 = fVec0[((IOTA - 309) & 511)];
			float fTemp194 = fVec0[((IOTA - 259) & 511)];
			float fTemp195 = fVec0[((IOTA - 366) & 511)];
			float fTemp196 = fVec0[((IOTA - 364) & 511)];
			float fTemp197 = fVec0[((IOTA - 357) & 511)];
			float fTemp198 = fVec0[((IOTA - 331) & 511)];
			float fTemp199 = fVec0[((IOTA - 58) & 511)];
			float fTemp200 = fVec0[((IOTA - 272) & 511)];
			float fTemp201 = fVec0[((IOTA - 354) & 511)];
			float fTemp202 = fVec0[((IOTA - 352) & 511)];
			float fTemp203 = fVec0[((IOTA - 239) & 511)];
			float fTemp204 = fVec0[((IOTA - 256) & 511)];
			float fTemp205 = fVec0[((IOTA - 335) & 511)];
			float fTemp206 = fVec0[((IOTA - 328) & 511)];
			float fTemp207 = fVec0[((IOTA - 334) & 511)];
			float fTemp208 = fVec0[((IOTA - 311) & 511)];
			float fTemp209 = fVec0[((IOTA - 308) & 511)];
			float fTemp210 = fVec0[((IOTA - 332) & 511)];
			float fTemp211 = fVec0[((IOTA - 275) & 511)];
			float fTemp212 = fVec0[((IOTA - 63) & 511)];
			float fTemp213 = fVec0[((IOTA - 97) & 511)];
			float fTemp214 = fVec0[((IOTA - 106) & 511)];
			float fTemp215 = fVec0[((IOTA - 138) & 511)];
			float fTemp216 = fVec0[((IOTA - 207) & 511)];
			float fTemp217 = fVec0[((IOTA - 315) & 511)];
			float fTemp218 = fVec0[((IOTA - 26) & 511)];
			float fTemp219 = fVec0[((IOTA - 37) & 511)];
			float fTemp220 = fVec0[((IOTA - 41) & 511)];
			float fTemp221 = fVec0[((IOTA - 57) & 511)];
			float fTemp222 = fVec0[((IOTA - 65) & 511)];
			float fTemp223 = fVec0[((IOTA - 73) & 511)];
			float fTemp224 = fVec0[((IOTA - 260) & 511)];
			float fTemp225 = fVec0[((IOTA - 283) & 511)];
			float fTemp226 = fVec0[((IOTA - 284) & 511)];
			float fTemp227 = fVec0[((IOTA - 340) & 511)];
			float fTemp228 = fVec0[((IOTA - 374) & 511)];
			float fTemp229 = fVec0[((IOTA - 375) & 511)];
			float fTemp230 = fVec0[((IOTA - 390) & 511)];
			float fTemp231 = fVec0[((IOTA - 507) & 511)];
			float fTemp232 = fVec0[((IOTA - 252) & 511)];
			float fTemp233 = fVec0[((IOTA - 236) & 511)];
			float fTemp234 = fVec0[((IOTA - 235) & 511)];
			float fTemp235 = fVec0[((IOTA - 228) & 511)];
			float fTemp236 = fVec0[((IOTA - 227) & 511)];
			float fTemp237 = fVec0[((IOTA - 224) & 511)];
			float fTemp238 = fVec0[((IOTA - 223) & 511)];
			float fTemp239 = fVec0[((IOTA - 222) & 511)];
			float fTemp240 = fVec0[((IOTA - 221) & 511)];
			float fTemp241 = fVec0[((IOTA - 219) & 511)];
			float fTemp242 = fVec0[((IOTA - 218) & 511)];
			float fTemp243 = fVec0[((IOTA - 217) & 511)];
			float fTemp244 = fVec0[((IOTA - 212) & 511)];
			float fTemp245 = (0.00512710959f * fTemp244);
			float fTemp246 = fVec0[((IOTA - 211) & 511)];
			float fTemp247 = fVec0[((IOTA - 210) & 511)];
			float fTemp248 = fVec0[((IOTA - 197) & 511)];
			float fTemp249 = fVec0[((IOTA - 196) & 511)];
			float fTemp250 = fVec0[((IOTA - 195) & 511)];
			float fTemp251 = fVec0[((IOTA - 194) & 511)];
			float fTemp252 = fVec0[((IOTA - 193) & 511)];
			float fTemp253 = fVec0[((IOTA - 190) & 511)];
			float fTemp254 = fVec0[((IOTA - 189) & 511)];
			float fTemp255 = fVec0[((IOTA - 188) & 511)];
			float fTemp256 = fVec0[((IOTA - 187) & 511)];
			float fTemp257 = fVec0[((IOTA - 186) & 511)];
			float fTemp258 = fVec0[((IOTA - 185) & 511)];
			float fTemp259 = fVec0[((IOTA - 184) & 511)];
			float fTemp260 = fVec0[((IOTA - 183) & 511)];
			float fTemp261 = fVec0[((IOTA - 182) & 511)];
			float fTemp262 = fVec0[((IOTA - 181) & 511)];
			float fTemp263 = fVec0[((IOTA - 180) & 511)];
			float fTemp264 = fVec0[((IOTA - 179) & 511)];
			float fTemp265 = fVec0[((IOTA - 178) & 511)];
			float fTemp266 = fVec0[((IOTA - 173) & 511)];
			float fTemp267 = fVec0[((IOTA - 171) & 511)];
			float fTemp268 = fVec0[((IOTA - 170) & 511)];
			float fTemp269 = fVec0[((IOTA - 169) & 511)];
			float fTemp270 = fVec0[((IOTA - 164) & 511)];
			float fTemp271 = fVec0[((IOTA - 163) & 511)];
			float fTemp272 = fVec0[((IOTA - 155) & 511)];
			float fTemp273 = fVec0[((IOTA - 154) & 511)];
			float fTemp274 = fVec0[((IOTA - 153) & 511)];
			float fTemp275 = fVec0[((IOTA - 148) & 511)];
			float fTemp276 = fVec0[((IOTA - 147) & 511)];
			float fTemp277 = fVec0[((IOTA - 146) & 511)];
			float fTemp278 = fVec0[((IOTA - 145) & 511)];
			float fTemp279 = fVec0[((IOTA - 141) & 511)];
			float fTemp280 = fVec0[((IOTA - 140) & 511)];
			float fTemp281 = fVec0[((IOTA - 139) & 511)];
			float fTemp282 = fVec0[((IOTA - 136) & 511)];
			float fTemp283 = fVec0[((IOTA - 135) & 511)];
			float fTemp284 = fVec0[((IOTA - 132) & 511)];
			float fTemp285 = fVec0[((IOTA - 131) & 511)];
			float fTemp286 = fVec0[((IOTA - 130) & 511)];
			float fTemp287 = fVec0[((IOTA - 129) & 511)];
			float fTemp288 = fVec0[((IOTA - 128) & 511)];
			float fTemp289 = fVec0[((IOTA - 127) & 511)];
			float fTemp290 = fVec0[((IOTA - 126) & 511)];
			float fTemp291 = fVec0[((IOTA - 123) & 511)];
			float fTemp292 = fVec0[((IOTA - 122) & 511)];
			float fTemp293 = fVec0[((IOTA - 121) & 511)];
			float fTemp294 = fVec0[((IOTA - 120) & 511)];
			float fTemp295 = fVec0[((IOTA - 98) & 511)];
			float fTemp296 = fVec0[((IOTA - 96) & 511)];
			float fTemp297 = fVec0[((IOTA - 94) & 511)];
			float fTemp298 = fVec0[((IOTA - 93) & 511)];
			float fTemp299 = fVec0[((IOTA - 92) & 511)];
			float fTemp300 = fVec0[((IOTA - 91) & 511)];
			float fTemp301 = fVec0[((IOTA - 90) & 511)];
			float fTemp302 = fVec0[((IOTA - 89) & 511)];
			float fTemp303 = fVec0[((IOTA - 83) & 511)];
			float fTemp304 = fVec0[((IOTA - 82) & 511)];
			float fTemp305 = fVec0[((IOTA - 81) & 511)];
			float fTemp306 = fVec0[((IOTA - 80) & 511)];
			float fTemp307 = fVec0[((IOTA - 79) & 511)];
			float fTemp308 = fVec0[((IOTA - 71) & 511)];
			float fTemp309 = fVec0[((IOTA - 70) & 511)];
			float fTemp310 = fVec0[((IOTA - 68) & 511)];
			float fTemp311 = fVec0[((IOTA - 67) & 511)];
			float fTemp312 = fVec0[((IOTA - 66) & 511)];
			float fTemp313 = fVec0[((IOTA - 64) & 511)];
			float fTemp314 = fVec0[((IOTA - 56) & 511)];
			float fTemp315 = fVec0[((IOTA - 55) & 511)];
			float fTemp316 = fVec0[((IOTA - 44) & 511)];
			float fTemp317 = (0.0353709534f * fTemp316);
			float fTemp318 = fVec0[((IOTA - 43) & 511)];
			float fTemp319 = fVec0[((IOTA - 42) & 511)];
			float fTemp320 = fVec0[((IOTA - 40) & 511)];
			float fTemp321 = fVec0[((IOTA - 39) & 511)];
			float fTemp322 = fVec0[((IOTA - 38) & 511)];
			float fTemp323 = fVec0[((IOTA - 29) & 511)];
			float fTemp324 = fVec0[((IOTA - 28) & 511)];
			float fTemp325 = fVec0[((IOTA - 27) & 511)];
			float fTemp326 = fVec0[((IOTA - 25) & 511)];
			float fTemp327 = fVec0[((IOTA - 9) & 511)];
			float fTemp328 = fVec0[((IOTA - 4) & 511)];
			float fTemp329 = fVec0[((IOTA - 3) & 511)];
			float fTemp330 = (1.00003052f * fTemp329);
			float fTemp331 = fVec0[((IOTA - 2) & 511)];
			float fTemp332 = fVec0[((IOTA - 1) & 511)];
			float fTemp333 = fVec0[((IOTA - 509) & 511)];
			float fTemp334 = fVec0[((IOTA - 508) & 511)];
			float fTemp335 = fVec0[((IOTA - 269) & 511)];
			float fTemp336 = fVec0[((IOTA - 503) & 511)];
			float fTemp337 = fVec0[((IOTA - 500) & 511)];
			float fTemp338 = fVec0[((IOTA - 456) & 511)];
			float fTemp339 = fVec0[((IOTA - 323) & 511)];
			float fTemp340 = fVec0[((IOTA - 461) & 511)];
			float fTemp341 = fVec0[((IOTA - 502) & 511)];
			float fTemp342 = fVec0[((IOTA - 387) & 511)];
			float fTemp343 = fVec0[((IOTA - 317) & 511)];
			float fTemp344 = fVec0[((IOTA - 446) & 511)];
			float fTemp345 = fVec0[((IOTA - 499) & 511)];
			float fTemp346 = fVec0[((IOTA - 489) & 511)];
			float fTemp347 = fVec0[((IOTA - 355) & 511)];
			float fTemp348 = fVec0[((IOTA - 345) & 511)];
			float fTemp349 = fVec0[((IOTA - 287) & 511)];
			float fTemp350 = fVec0[((IOTA - 386) & 511)];
			float fTemp351 = fVec0[((IOTA - 413) & 511)];
			float fTemp352 = fVec0[((IOTA - 497) & 511)];
			float fTemp353 = fVec0[((IOTA - 487) & 511)];
			float fTemp354 = fVec0[((IOTA - 481) & 511)];
			float fTemp355 = fVec0[((IOTA - 455) & 511)];
			float fTemp356 = fVec0[((IOTA - 316) & 511)];
			float fTemp357 = fVec0[((IOTA - 255) & 511)];
			float fTemp358 = fVec0[((IOTA - 297) & 511)];
			float fTemp359 = fVec0[((IOTA - 400) & 511)];
			float fTemp360 = fVec0[((IOTA - 496) & 511)];
			float fTemp361 = fVec0[((IOTA - 485) & 511)];
			float fTemp362 = fVec0[((IOTA - 174) & 511)];
			float fTemp363 = fVec0[((IOTA - 322) & 511)];
			float fTemp364 = fVec0[((IOTA - 416) & 511)];
			float fTemp365 = fVec0[((IOTA - 495) & 511)];
			float fTemp366 = fVec0[((IOTA - 494) & 511)];
			float fTemp367 = fVec0[((IOTA - 338) & 511)];
			float fTemp368 = fVec0[((IOTA - 262) & 511)];
			float fTemp369 = fVec0[((IOTA - 241) & 511)];
			float fTemp370 = fVec0[((IOTA - 162) & 511)];
			float fTemp371 = fVec0[((IOTA - 493) & 511)];
			float fTemp372 = fVec0[((IOTA - 480) & 511)];
			float fTemp373 = fVec0[((IOTA - 426) & 511)];
			float fTemp374 = fVec0[((IOTA - 490) & 511)];
			float fTemp375 = fVec0[((IOTA - 479) & 511)];
			float fTemp376 = fVec0[((IOTA - 453) & 511)];
			float fTemp377 = fVec0[((IOTA - 298) & 511)];
			float fTemp378 = fVec0[((IOTA - 292) & 511)];
			float fTemp379 = fVec0[((IOTA - 289) & 511)];
			float fTemp380 = fVec0[((IOTA - 301) & 511)];
			float fTemp381 = fVec0[((IOTA - 306) & 511)];
			float fTemp382 = fVec0[((IOTA - 438) & 511)];
			float fTemp383 = fVec0[((IOTA - 486) & 511)];
			float fTemp384 = fVec0[((IOTA - 454) & 511)];
			float fTemp385 = fVec0[((IOTA - 165) & 511)];
			float fTemp386 = fVec0[((IOTA - 206) & 511)];
			float fTemp387 = fVec0[((IOTA - 263) & 511)];
			float fTemp388 = fVec0[((IOTA - 324) & 511)];
			float fTemp389 = fVec0[((IOTA - 484) & 511)];
			float fTemp390 = fVec0[((IOTA - 483) & 511)];
			float fTemp391 = fVec0[((IOTA - 271) & 511)];
			float fTemp392 = fVec0[((IOTA - 268) & 511)];
			float fTemp393 = fVec0[((IOTA - 463) & 511)];
			float fTemp394 = fVec0[((IOTA - 477) & 511)];
			float fTemp395 = fVec0[((IOTA - 243) & 511)];
			float fTemp396 = fVec0[((IOTA - 475) & 511)];
			float fTemp397 = fVec0[((IOTA - 253) & 511)];
			float fTemp398 = fVec0[((IOTA - 351) & 511)];
			float fTemp399 = fVec0[((IOTA - 474) & 511)];
			float fTemp400 = fVec0[((IOTA - 249) & 511)];
			float fTemp401 = fVec0[((IOTA - 192) & 511)];
			float fTemp402 = fVec0[((IOTA - 19) & 511)];
			float fTemp403 = fVec0[((IOTA - 472) & 511)];
			float fTemp404 = fVec0[((IOTA - 191) & 511)];
			float fTemp405 = fVec0[((IOTA - 469) & 511)];
			float fTemp406 = fVec0[((IOTA - 247) & 511)];
			float fTemp407 = fVec0[((IOTA - 359) & 511)];
			float fTemp408 = fVec0[((IOTA - 466) & 511)];
			float fTemp409 = fVec0[((IOTA - 467) & 511)];
			float fTemp410 = fVec0[((IOTA - 452) & 511)];
			float fTemp411 = fVec0[((IOTA - 356) & 511)];
			float fTemp412 = fVec0[((IOTA - 216) & 511)];
			float fTemp413 = fVec0[((IOTA - 279) & 511)];
			float fTemp414 = fVec0[((IOTA - 373) & 511)];
			float fTemp415 = fVec0[((IOTA - 265) & 511)];
			float fTemp416 = fVec0[((IOTA - 214) & 511)];
			float fTemp417 = fVec0[((IOTA - 451) & 511)];
			float fTemp418 = fVec0[((IOTA - 344) & 511)];
			float fTemp419 = fVec0[((IOTA - 234) & 511)];
			float fTemp420 = fVec0[((IOTA - 440) & 511)];
			float fTemp421 = fVec0[((IOTA - 278) & 511)];
			float fTemp422 = fVec0[((IOTA - 233) & 511)];
			float fTemp423 = fVec0[((IOTA - 205) & 511)];
			float fTemp424 = fVec0[((IOTA - 377) & 511)];
			float fTemp425 = fVec0[((IOTA - 427) & 511)];
			float fTemp426 = fVec0[((IOTA - 431) & 511)];
			float fTemp427 = fVec0[((IOTA - 437) & 511)];
			float fTemp428 = fVec0[((IOTA - 430) & 511)];
			float fTemp429 = fVec0[((IOTA - 176) & 511)];
			float fTemp430 = fVec0[((IOTA - 95) & 511)];
			float fTemp431 = fVec0[((IOTA - 423) & 511)];
			float fTemp432 = fVec0[((IOTA - 376) & 511)];
			float fTemp433 = fVec0[((IOTA - 370) & 511)];
			float fTemp434 = fVec0[((IOTA - 420) & 511)];
			float fTemp435 = fVec0[((IOTA - 285) & 511)];
			float fTemp436 = fVec0[((IOTA - 237) & 511)];
			float fTemp437 = fVec0[((IOTA - 349) & 511)];
			float fTemp438 = fVec0[((IOTA - 418) & 511)];
			float fTemp439 = fVec0[((IOTA - 314) & 511)];
			float fTemp440 = fVec0[((IOTA - 230) & 511)];
			float fTemp441 = fVec0[((IOTA - 117) & 511)];
			float fTemp442 = fVec0[((IOTA - 346) & 511)];
			float fTemp443 = fVec0[((IOTA - 415) & 511)];
			float fTemp444 = fVec0[((IOTA - 290) & 511)];
			float fTemp445 = fVec0[((IOTA - 198) & 511)];
			float fTemp446 = fVec0[((IOTA - 412) & 511)];
			float fTemp447 = fVec0[((IOTA - 257) & 511)];
			float fTemp448 = fVec0[((IOTA - 245) & 511)];
			float fTemp449 = fVec0[((IOTA - 244) & 511)];
			float fTemp450 = fVec0[((IOTA - 307) & 511)];
			float fTemp451 = fVec0[((IOTA - 410) & 511)];
			float fTemp452 = fVec0[((IOTA - 343) & 511)];
			float fTemp453 = fVec0[((IOTA - 318) & 511)];
			float fTemp454 = fVec0[((IOTA - 368) & 511)];
			float fTemp455 = fVec0[((IOTA - 409) & 511)];
			float fTemp456 = fVec0[((IOTA - 282) & 511)];
			float fTemp457 = fVec0[((IOTA - 203) & 511)];
			float fTemp458 = fVec0[((IOTA - 405) & 511)];
			float fTemp459 = fVec0[((IOTA - 389) & 511)];
			float fTemp460 = fVec0[((IOTA - 261) & 511)];
			float fTemp461 = fVec0[((IOTA - 250) & 511)];
			float fTemp462 = fVec0[((IOTA - 327) & 511)];
			float fTemp463 = fVec0[((IOTA - 388) & 511)];
			float fTemp464 = fVec0[((IOTA - 339) & 511)];
			float fTemp465 = fVec0[((IOTA - 204) & 511)];
			float fTemp466 = fVec0[((IOTA - 295) & 511)];
			float fTemp467 = fVec0[((IOTA - 312) & 511)];
			float fTemp468 = fVec0[((IOTA - 137) & 511)];
			float fTemp469 = fVec0[((IOTA - 379) & 511)];
			float fTemp470 = fVec0[((IOTA - 213) & 511)];
			float fTemp471 = fVec0[((IOTA - 142) & 511)];
			float fTemp472 = fVec0[((IOTA - 369) & 511)];
			float fTemp473 = fVec0[((IOTA - 291) & 511)];
			float fTemp474 = fVec0[((IOTA - 281) & 511)];
			float fTemp475 = fVec0[((IOTA - 294) & 511)];
			float fTemp476 = fVec0[((IOTA - 365) & 511)];
			float fTemp477 = fVec0[((IOTA - 134) & 511)];
			float fTemp478 = fVec0[((IOTA - 363) & 511)];
			float fTemp479 = fVec0[((IOTA - 115) & 511)];
			float fTemp480 = fVec0[((IOTA - 325) & 511)];
			float fTemp481 = (fTemp479 - fTemp480);
			float fTemp482 = fVec0[((IOTA - 348) & 511)];
			float fTemp483 = fVec0[((IOTA - 342) & 511)];
			float fTemp484 = fVec0[((IOTA - 119) & 511)];
			float fTemp485 = fVec0[((IOTA - 116) & 511)];
			float fTemp486 = fVec0[((IOTA - 341) & 511)];
			float fTemp487 = fVec0[((IOTA - 209) & 511)];
			float fTemp488 = fVec0[((IOTA - 143) & 511)];
			float fTemp489 = fVec0[((IOTA - 326) & 511)];
			float fTemp490 = fVec0[((IOTA - 277) & 511)];
			float fTemp491 = fVec0[((IOTA - 202) & 511)];
			float fTemp492 = fVec0[((IOTA - 149) & 511)];
			float fTemp493 = fVec0[((IOTA - 258) & 511)];
			float fTemp494 = fVec0[((IOTA - 246) & 511)];
			float fTemp495 = fVec0[((IOTA - 242) & 511)];
			float fTemp496 = fVec0[((IOTA - 251) & 511)];
			float fTemp497 = fVec0[((IOTA - 177) & 511)];
			float fTemp498 = fVec0[((IOTA - 248) & 511)];
			float fTemp499 = fVec0[((IOTA - 229) & 511)];
			float fTemp500 = fVec0[((IOTA - 226) & 511)];
			float fTemp501 = fVec0[((IOTA - 144) & 511)];
			float fTemp502 = fVec0[((IOTA - 225) & 511)];
			float fTemp503 = fVec0[((IOTA - 156) & 511)];
			float fTemp504 = fVec0[((IOTA - 220) & 511)];
			float fTemp505 = fVec0[((IOTA - 125) & 511)];
			float fTemp506 = fVec0[((IOTA - 172) & 511)];
			float fTemp507 = fVec0[((IOTA - 18) & 511)];
			float fTemp508 = fVec0[((IOTA - 72) & 511)];
			float fTemp509 = fVec0[((IOTA - 69) & 511)];
			float fTemp510 = fVec0[((IOTA - 133) & 511)];
			float fTemp511 = fVec0[((IOTA - 124) & 511)];
			float fTemp512 = (fTemp510 + fTemp511);
			float fTemp513 = fVec0[((IOTA - 510) & 511)];
			float fTemp514 = fVec0[((IOTA - 273) & 511)];
			float fTemp515 = fVec0[((IOTA - 238) & 511)];
			float fTemp516 = fVec0[((IOTA - 208) & 511)];
			float fTemp517 = (fTemp515 + fTemp516);
			float fTemp518 = (0.00344859157f * fTemp195);
			float fTemp519 = (0.00357066561f * fTemp267);
			float fTemp520 = fVec0[((IOTA - 168) & 511)];
			float fTemp521 = fVec0[((IOTA - 383) & 511)];
			float fTemp522 = (0.000762962736f * fTemp8);
			float fTemp523 = (0.00210577715f * fTemp437);
			float fTemp524 = (0.00286873989f * fTemp459);
			float fTemp525 = (0.00668355357f * fTemp504);
			float fTemp526 = fVec0[((IOTA - 201) & 511)];
			float fTemp527 = (0.0135502182f * fTemp501);
			float fTemp528 = (0.10724204f * fTemp303);
			float fTemp529 = fVec0[((IOTA - 478) & 511)];
			float fTemp530 = (fTemp463 + fTemp367);
			float fTemp531 = (fTemp457 - fTemp173);
			float fTemp532 = (fTemp480 + fTemp239);
			float fTemp533 = (0.00997955259f * fTemp465);
			float fTemp534 = (0.0252998453f * fTemp95);
			float fTemp535 = (0.156346321f * fTemp159);
			float fTemp536 = (fTemp327 + fTemp85);
			float fTemp537 = (fTemp127 + fTemp340);
			float fTemp538 = (fTemp2 + fTemp332);
			float fTemp539 = (fTemp82 + fTemp538);
			float fTemp540 = (fTemp10 + fTemp419);
			float fTemp541 = (fTemp4 + fTemp3);
			float fTemp542 = (fTemp1 + fTemp328);
			float fTemp543 = (fTemp86 + fTemp87);
			float fTemp544 = (fTemp84 + fTemp543);
			float fTemp545 = (fTemp76 + fTemp77);
			float fTemp546 = (0.00167851802f * fTemp406);
			float fTemp547 = (0.0104068117f * fTemp203);
			float fTemp548 = (0.00448622089f * fTemp58);
			float fTemp549 = (fTemp457 + fTemp491);
			float fTemp550 = (fTemp253 + fTemp506);
			float fTemp551 = (fTemp262 + fTemp313);
			float fTemp552 = (fTemp499 - fTemp11);
			float fTemp553 = (fTemp0 + fTemp332);
			float fTemp554 = (fTemp487 - fTemp10);
			float fTemp555 = (fTemp162 + fTemp27);
			float fTemp556 = (0.00378429517f * fTemp491);
			float fTemp557 = (fTemp489 + fTemp421);
			float fTemp558 = (fTemp173 + fTemp387);
			float fTemp559 = (fTemp206 + fTemp380);
			float fTemp560 = (fTemp526 + fTemp259);
			float fTemp561 = (0.000976592302f * fTemp193);
			float fTemp562 = (0.0042115543f * fTemp486);
			float fTemp563 = (0.00772118289f * fTemp230);
			float fTemp564 = (0.00814844202f * fTemp146);
			float fTemp565 = (fTemp402 + fTemp507);
			float fTemp566 = (fTemp77 + fTemp565);
			float fTemp567 = (fTemp328 + fTemp329);
			float fTemp568 = (fTemp65 + (fTemp66 + fTemp67));
			float fTemp569 = (fTemp428 + fTemp97);
			float fTemp570 = (fTemp0 + fTemp331);
			float fTemp571 = (fTemp321 + fTemp69);
			float fTemp572 = (0.00671407208f * fTemp181);
			float fTemp573 = (0.00512710959f * fTemp410);
			float fTemp574 = (0.00643940549f * fTemp143);
			float fTemp575 = (fTemp279 - fTemp363);
			float fTemp576 = (0.00219733268f * fTemp126);
			float fTemp577 = (0.0019531846f * fTemp418);
			float fTemp578 = (0.00592059083f * fTemp344);
			float fTemp579 = (fTemp328 + (fTemp329 + fTemp332));
			float fTemp580 = (fTemp219 + fTemp325);
			float fTemp581 = (fTemp210 + fTemp243);
			float fTemp582 = (fTemp68 + fTemp3);
			float fTemp583 = (0.00396740623f * fTemp458);
			float fTemp584 = (0.00915555283f * fTemp502);
			float fTemp585 = (0.00573747978f * fTemp252);
			float fTemp586 = (0.00860621966f * fTemp260);
			float fTemp587 = (fTemp148 - fTemp211);
			float fTemp588 = (0.00057985168f * fTemp482);
			float fTemp589 = (0.0300912503f * fTemp135);
			float fTemp590 = (fTemp502 + fTemp237);
			float fTemp591 = (fTemp435 + fTemp226);
			float fTemp592 = (fTemp461 + fTemp498);
			float fTemp593 = (fTemp259 + fTemp287);
			float fTemp594 = (fTemp240 + fTemp242);
			float fTemp595 = (0.00473036896f * fTemp465);
			float fTemp596 = (0.00296029542f * fTemp491);
			float fTemp597 = (0.0309457686f * fTemp54);
			float fTemp598 = (0.0383617654f * fTemp60);
			float fTemp599 = (1.00003052f * fTemp86);
			float fTemp600 = (fTemp265 + fTemp295);
			float fTemp601 = (fTemp457 - fTemp19);
			float fTemp602 = (0.0573747978f * fTemp29);
			float fTemp603 = (fTemp70 + fTemp324);
			float fTemp604 = (fTemp465 - fTemp493);
			float fTemp605 = (fTemp339 + fTemp496);
			float fTemp606 = (fTemp63 + fTemp323);
			float fTemp607 = (fTemp445 + fTemp401);
			float fTemp608 = (0.00537125766f * fTemp246);
			float fTemp609 = (0.0125736259f * fTemp273);
			float fTemp610 = (0.0248725861f * fTemp58);
			float fTemp611 = (fTemp521 + fTemp422);
			float fTemp612 = (fTemp236 - fTemp476);
			float fTemp613 = (fTemp497 + fTemp304);
			float fTemp614 = (0.00509659108f * fTemp217);
			float fTemp615 = (0.00241096225f * fTemp464);
			float fTemp616 = (0.00616473891f * fTemp399);
			float fTemp617 = (1.00003052f * fTemp308);
			float fTemp618 = (0.0155644398f * fTemp472);
			float fTemp619 = (0.0114749596f * fTemp270);
			float fTemp620 = (0.0294808801f * fTemp277);
			float fTemp621 = (fTemp116 + fTemp208);
			float fTemp622 = (fTemp461 + fTemp400);
			float fTemp623 = (0.00616473891f * fTemp275);
			float fTemp624 = (fTemp324 + fTemp507);
			float fTemp625 = (fTemp402 + fTemp86);
			float fTemp626 = (fTemp64 + fTemp5);
			float fTemp627 = (fTemp0 + fTemp72);
			float fTemp628 = (0.00408948027f * fTemp211);
			float fTemp629 = (0.00720236823f * fTemp491);
			float fTemp630 = (fTemp340 + fTemp142);
			float fTemp631 = (0.00125125889f * fTemp177);
			float fTemp632 = (0.00155644398f * fTemp490);
			float fTemp633 = (0.00360118411f * fTemp190);
			float fTemp634 = (0.00390636921f * fTemp243);
			float fTemp635 = (0.0252693258f * fTemp45);
			float fTemp636 = (0.0481276885f * fTemp49);
			float fTemp637 = (fTemp427 + fTemp185);
			float fTemp638 = (fTemp193 + fTemp392);
			float fTemp639 = (fTemp178 + fTemp368);
			float fTemp640 = (fTemp381 + fTemp233);
			float fTemp641 = (fTemp225 + fTemp494);
			float fTemp642 = (fTemp251 + fTemp254);
			float fTemp643 = (fTemp87 + fTemp328);
			float fTemp644 = (0.00845362712f * fTemp242);
			float fTemp645 = (fTemp424 + fTemp181);
			float fTemp646 = (0.00103762932f * fTemp121);
			float fTemp647 = (fTemp440 - fTemp209);
			float fTemp648 = (0.00314340647f * fTemp247);
			float fTemp649 = (0.00830103457f * fTemp278);
			float fTemp650 = (fTemp241 + fTemp31);
			float fTemp651 = (fTemp363 + fTemp11);
			float fTemp652 = (fTemp104 + fTemp395);
			float fTemp653 = (fTemp467 + fTemp208);
			float fTemp654 = (0.0012817774f * fTemp96);
			float fTemp655 = (1.00003052f * fTemp87);
			float fTemp656 = (fTemp129 + fTemp379);
			float fTemp657 = (fTemp474 + fTemp165);
			float fTemp658 = (fTemp341 + fTemp106);
			float fTemp659 = (0.00180059206f * fTemp480);
			float fTemp660 = (0.0133060701f * fTemp369);
			float fTemp661 = (fTemp454 + fTemp176);
			float fTemp662 = (0.00173955504f * fTemp202);
			float fTemp663 = (0.00283822138f * fTemp346);
			float fTemp664 = (0.00360118411f * fTemp400);
			float fTemp665 = (0.0112308115f * fTemp250);
			float fTemp666 = (0.0213934761f * fTemp37);
			float fTemp667 = (fTemp124 - fTemp138);
			float fTemp668 = (fTemp182 + fTemp251);
			float fTemp669 = (0.0218512528f * fTemp95);
			float fTemp670 = (0.0676595345f * fTemp505);
			float fTemp671 = (0.0487990975f * fTemp301);
			float fTemp672 = (0.0192571804f * fTemp60);
			float fTemp673 = (fTemp375 + fTemp89);
			float fTemp674 = (fTemp177 - fTemp205);
			float fTemp675 = (fTemp87 + (fTemp1 + fTemp579));
			float fTemp676 = (fTemp85 + fTemp86);
			float fTemp677 = (0.000671407208f * fTemp206);
			float fTemp678 = (0.000762962736f * fTemp178);
			float fTemp679 = (0.144016847f * fTemp49);
			float fTemp680 = (fTemp16 + fTemp391);
			float fTemp681 = (fTemp339 + fTemp184);
			float fTemp682 = (fTemp368 + fTemp460);
			float fTemp683 = (0.000518814661f * fTemp64);
			float fTemp684 = (fTemp76 + fTemp78);
			float fTemp685 = (fTemp228 + fTemp377);
			float fTemp686 = (fTemp69 + fTemp3);
			float fTemp687 = (fTemp329 + (fTemp331 + fTemp332));
			float fTemp688 = (0.0035401471f * fTemp391);
			float fTemp689 = (fTemp210 + fTemp325);
			float fTemp690 = (fTemp402 + fTemp80);
			float fTemp691 = (fTemp205 + fTemp207);
			float fTemp692 = (fTemp86 + fTemp329);
			float fTemp693 = (fTemp204 + fTemp176);
			float fTemp694 = (fTemp105 + fTemp96);
			float fTemp695 = (0.0236518458f * fTemp279);
			float fTemp696 = (0.00299081393f * fTemp116);
			float fTemp697 = (0.00851466414f * fTemp407);
			float fTemp698 = (0.000823999755f * fTemp115);
			float fTemp699 = (0.00546281319f * fTemp120);
			float fTemp700 = (0.00338755455f * fTemp130);
			float fTemp701 = (fTemp78 + fTemp79);
			float fTemp702 = (fTemp379 + fTemp181);
			float fTemp703 = (0.00747703481f * fTemp516);
			float fTemp704 = (fTemp432 - fTemp391);
			float fTemp705 = (fTemp107 + fTemp422);
			float fTemp706 = (fTemp156 - fTemp91);
			float fTemp707 = (0.00524918362f * fTemp204);
			float fTemp708 = (0.00735496078f * fTemp358);
			float fTemp709 = (0.00375377666f * fTemp472);
			float fTemp710 = (0.00384533219f * fTemp167);
			float fTemp711 = (0.00744651631f * fTemp429);
			float fTemp712 = (0.0505691692f * fTemp53);
			float fTemp713 = (fTemp406 + fTemp494);
			float fTemp714 = (0.00363170262f * fTemp234);
			float fTemp715 = (0.116458632f * fTemp5);
			float fTemp716 = (0.00546281319f * fTemp456);
			float fTemp717 = (0.00180059206f * fTemp521);
			float fTemp718 = (fTemp356 + fTemp217);
			float fTemp719 = (fTemp10 + fTemp253);
			float fTemp720 = (fTemp250 - fTemp415);
			float fTemp721 = (0.00207525864f * fTemp115);
			float fTemp722 = (0.00598162785f * fTemp355);
			float fTemp723 = (0.00411999878f * fTemp390);
			float fTemp724 = (0.00466933195f * fTemp136);
			float fTemp725 = (0.00836207159f * fTemp131);
			float fTemp726 = (0.00106814783f * fTemp334);
			float fTemp727 = (0.000732444227f * fTemp199);
			float fTemp728 = (0.00436414685f * fTemp211);
			float fTemp729 = (0.00299081393f * fTemp453);
			float fTemp730 = (0.00726340525f * fTemp432);
			float fTemp731 = (0.00885036774f * fTemp495);
			float fTemp732 = (0.00842310861f * fTemp238);
			float fTemp733 = (fTemp103 + fTemp339);
			float fTemp734 = (fTemp412 - fTemp166);
			float fTemp735 = (fTemp131 + fTemp409);
			float fTemp736 = (0.00250251777f * fTemp431);
			float fTemp737 = (fTemp87 + fTemp542);
			float fTemp738 = (0.0140995514f * fTemp279);
			float fTemp739 = (fTemp341 + fTemp167);
			float fTemp740 = (fTemp526 - fTemp208);
			float fTemp741 = (fTemp99 - fTemp105);
			float fTemp742 = (fTemp77 + fTemp80);
			float fTemp743 = (0.0087282937f * fTemp358);
			float fTemp744 = (0.00247199927f * fTemp434);
			float fTemp745 = (0.00375377666f * fTemp176);
			float fTemp746 = (fTemp111 + fTemp515);
			float fTemp747 = (0.00445570238f * fTemp120);
			float fTemp748 = (0.0147404401f * fTemp289);
			float fTemp749 = (0.0744956806f * fTemp507);
			float fTemp750 = (fTemp447 + fTemp436);
			float fTemp751 = (0.0102237007f * fTemp278);
			float fTemp752 = (fTemp414 + fTemp8);
			float fTemp753 = (fTemp92 - fTemp515);
			float fTemp754 = (0.00262459181f * fTemp211);
			float fTemp755 = (0.00314340647f * fTemp191);
			float fTemp756 = (0.000701925717f * fTemp182);
			float fTemp757 = (0.0139164403f * fTemp37);
			float fTemp758 = (0.0132450331f * fTemp39);
			float fTemp759 = (0.025879696f * fTemp55);
			float fTemp760 = (0.0489822067f * fTemp36);
			float fTemp761 = (fTemp399 + fTemp425);
			float fTemp762 = (0.00909451582f * fTemp368);
			float fTemp763 = (0.0042115543f * fTemp154);
			float fTemp764 = (0.00198370311f * fTemp453);
			float fTemp765 = (0.00750755332f * fTemp164);
			float fTemp766 = (0.00668355357f * fTemp368);
			float fTemp767 = (0.00311288796f * fTemp116);
			float fTemp768 = (0.00729392376f * fTemp207);
			float fTemp769 = (fTemp432 + fTemp448);
			float fTemp770 = (0.00576799829f * fTemp89);
			float fTemp771 = (0.00659199804f * fTemp529);
			float fTemp772 = (fTemp161 - fTemp170);
			float fTemp773 = (fTemp399 + fTemp136);
			float fTemp774 = (fTemp99 + fTemp335);
			float fTemp775 = (fTemp93 + fTemp202);
			float fTemp776 = (fTemp29 + fTemp511);
			float fTemp777 = (0.00427259132f * fTemp424);
			float fTemp778 = (0.0179448836f * fTemp370);
			float fTemp779 = (0.00570696127f * fTemp19);
			float fTemp780 = (0.0171208847f * fTemp479);
			float fTemp781 = (fTemp345 + fTemp100);
			float fTemp782 = (fTemp461 - fTemp194);
			float fTemp783 = (fTemp482 + fTemp210);
			float fTemp784 = (0.0138554033f * fTemp46);
			float fTemp785 = (0.0307626575f * fTemp312);
			float fTemp786 = (fTemp353 + fTemp383);
			float fTemp787 = (0.0110477004f * fTemp216);
			float fTemp788 = (fTemp16 - fTemp183);
			float fTemp789 = (fTemp497 + fTemp283);
			float fTemp790 = (fTemp266 - fTemp176);
			float fTemp791 = (fTemp126 + fTemp141);
			float fTemp792 = (fTemp209 + fTemp450);
			float fTemp793 = (fTemp88 + fTemp513);
			float fTemp794 = (0.027680289f * fTemp250);
			float fTemp795 = (0.00122074038f * fTemp353);
			float fTemp796 = (fTemp82 + fTemp2);
			float fTemp797 = (fTemp329 + fTemp570);
			float fTemp798 = (0.00726340525f * fTemp474);
			float fTemp799 = (0.00601214636f * fTemp138);
			float fTemp800 = (0.00369273964f * fTemp366);
			float fTemp801 = (0.00057985168f * fTemp416);
			float fTemp802 = (0.0104678487f * fTemp445);
			float fTemp803 = (0.00424207281f * fTemp460);
			float fTemp804 = (0.00518814661f * fTemp112);
			float fTemp805 = (fTemp193 + fTemp105);
			float fTemp806 = (fTemp343 + fTemp516);
			float fTemp807 = (0.00988799706f * fTemp414);
			float fTemp808 = (fTemp221 + fTemp316);
			float fTemp809 = (0.00589007232f * fTemp483);
			float fTemp810 = (fTemp439 + fTemp110);
			float fTemp811 = (0.00271614734f * fTemp334);
			float fTemp812 = (fTemp340 - fTemp452);
			float fTemp813 = (0.0122074038f * fTemp102);
			float fTemp814 = (fTemp316 + fTemp87);
			float fTemp815 = (0.0159001444f * fTemp244);
			float fTemp816 = (fTemp141 - fTemp447);
			float fTemp817 = (fTemp411 + fTemp494);
			float fTemp818 = (fTemp462 + fTemp453);
			float fTemp819 = (0.00848414563f * fTemp436);
			float fTemp820 = (0.00573747978f * fTemp411);
			float fTemp821 = (0.00900296029f * fTemp279);
			float fTemp822 = (fTemp154 + fTemp238);
			float fTemp823 = (0.00296029542f * fTemp16);
			float fTemp824 = (0.00405896176f * fTemp163);
			float fTemp825 = (0.0285348073f * fTemp292);
			float fTemp826 = (0.0124210333f * fTemp430);
			float fTemp827 = (fTemp70 + fTemp3);
			float fTemp828 = (fTemp156 - fTemp204);
			float fTemp829 = (0.00411999878f * fTemp173);
			float fTemp830 = (0.0051576281f * fTemp381);
			float fTemp831 = (0.00991851557f * fTemp123);
			float fTemp832 = (fTemp176 - fTemp372);
			float fTemp833 = (fTemp450 + fTemp271);
			float fTemp834 = (fTemp466 + fTemp91);
			float fTemp835 = (0.0409253202f * fTemp293);
			float fTemp836 = (fTemp11 + fTemp226);
			float fTemp837 = (fTemp358 + fTemp422);
			float fTemp838 = (fTemp440 - fTemp406);
			float fTemp839 = (0.00454725791f * fTemp224);
			float fTemp840 = (fTemp192 + fTemp407);
			float fTemp841 = (fTemp423 - fTemp420);
			float fTemp842 = (fTemp493 + fTemp248);
			float fTemp843 = (0.00244148076f * fTemp99);
			float fTemp844 = (fTemp416 + fTemp423);
			float fTemp845 = (0.00830103457f * fTemp446);
			float fTemp846 = (fTemp131 + fTemp179);
			float fTemp847 = (fTemp241 + fTemp242);
			float fTemp848 = (0.00762962736f * fTemp192);
			float fTemp849 = (fTemp39 - fTemp399);
			float fTemp850 = (0.0224921424f * fTemp520);
			float fTemp851 = (0.0252998453f * fTemp284);
			float fTemp852 = (fTemp529 + fTemp394);
			float fTemp853 = (0.0102847377f * fTemp149);
			float fTemp854 = (0.000976592302f * fTemp103);
			float fTemp855 = (fTemp259 + fTemp268);
			float fTemp856 = (fTemp450 + fTemp368);
			float fTemp857 = (0.000488296151f * fTemp190);
			float fTemp858 = (fTemp449 - fTemp198);
			float fTemp859 = (fTemp348 + fTemp418);
			float fTemp860 = (0.00811792351f * fTemp433);
			float fTemp861 = (0.00152592547f * fTemp361);
			float fTemp862 = (0.0153508103f * fTemp256);
			float fTemp863 = (fTemp338 + fTemp395);
			float fTemp864 = (fTemp515 - fTemp89);
			float fTemp865 = (fTemp411 + fTemp158);
			float fTemp866 = (fTemp355 - fTemp156);
			float fTemp867 = (0.000793481246f * fTemp378);
			float fTemp868 = (fTemp253 + fTemp501);
			float fTemp869 = (fTemp246 + fTemp277);
			float fTemp870 = (0.00537125766f * fTemp194);
			float fTemp871 = (0.0130314035f * fTemp169);
			float fTemp872 = (fTemp126 + fTemp356);
			float fTemp873 = (fTemp326 + fTemp2);
			float fTemp874 = (fTemp124 + fTemp71);
			output0[i] = FAUSTFLOAT((fRec0[0] * (iSlow2 ? (iSlow35 ? (iSlow51 ? (iSlow59 ? (iSlow63 ? (iSlow65 ? (((0.962096035f * fTemp223) + ((0.0045167394f * fTemp447) + ((0.00479140598f * fTemp194) + ((0.00408948027f * fTemp184) + ((0.00134281442f * fTemp217) + ((0.00186162908f * fTemp453) + ((0.00335703604f * fTemp8) + ((0.00543229468f * fTemp363) + ((0.0035401471f * fTemp480) + ((0.00369273964f * fTemp462) + ((0.00228888821f * fTemp205) + ((0.00442518387f * fTemp153) + ((0.00521866512f * fTemp407) + ((0.00955229346f * fTemp13) + (fTemp807 + ((0.0109561449f * fTemp14) + ((0.00820947904f * fTemp350) + ((0.0103457747f * fTemp342) + ((0.0101931822f * fTemp463) + ((0.00863673817f * fTemp459) + ((0.00665303506f * fTemp230) + ((0.004852443f * fTemp191) + ((0.00347911008f * fTemp146) + ((0.00500503555f * fTemp162) + ((0.00616473891f * fTemp373) + ((0.006469924f * fTemp425) + ((0.00558488723f * fTemp89) + ((0.000854518265f * fTemp428) + ((0.00125125889f * fTemp114) + ((0.000488296151f * fTemp236) + ((0.00350962859f * fTemp502) + ((0.00396740623f * fTemp237) + ((0.0119022187f * fTemp240) + ((0.0154423658f * fTemp504) + ((0.0169377737f * fTemp241) + ((0.0175786614f * fTemp242) + ((0.0182805881f * fTemp243) + ((0.0202337727f * fTemp412) + ((0.021149328f * fTemp143) + ((0.0151676992f * fTemp470) + ((0.0123599963f * fTemp246) + ((0.0154118473f * fTemp247) + ((0.0176091809f * fTemp487) + ((0.0182500686f * fTemp516) + ((0.0186162908f * fTemp216) + ((0.0199285876f * fTemp386) + ((0.0223395489f * fTemp423) + ((0.0225531794f * fTemp465) + ((0.0214239936f * fTemp457) + ((0.0202642903f * fTemp491) + ((0.0187383648f * fTemp526) + ((0.0168156996f * fTemp174) + ((0.00933866389f * fTemp445) + ((0.00137333293f * fTemp401) + ((0.00976592302f * fTemp258) + ((0.00689718314f * fTemp259) + ((0.00927762687f * fTemp269) + (fTemp850 + ((0.0312814713f * fTemp28) + ((0.030976288f * fTemp29) + ((0.0305490289f * fTemp385) + ((0.033600878f * fTemp270) + ((0.0435804315f * fTemp271) + ((0.0505691692f * fTemp370) + ((0.0464186519f * fTemp186) + ((0.0244148076f * fTemp188) + ((0.00418103579f * fTemp272) + ((0.00817896053f * fTemp275) + ((0.0139164403f * fTemp276) + ((0.016235847f * fTemp278) + ((0.0210577715f * fTemp501) + ((0.0324106589f * fTemp488) + ((0.0431226529f * fTemp471) + ((0.054811243f * fTemp279) + ((0.058534503f * fTemp280) + ((0.0583208725f * fTemp281) + ((0.048890654f * fTemp215) + ((0.0261543635f * fTemp468) + ((0.0411084332f * fTemp287) + ((0.0638142005f * fTemp288) + ((0.0558488742f * fTemp289) + ((0.0170903653f * fTemp290) + ((0.0239875484f * fTemp479) + ((0.0515152439f * fTemp35) + ((0.0527054667f * fTemp36) + ((0.0675984994f * fTemp37) + ((0.0660725757f * fTemp38) + ((0.0842921212f * fTemp39) + ((0.0523392446f * fTemp40) + ((0.0138554033f * fTemp47) + ((0.0820032358f * fTemp48) + ((0.0586260557f * fTemp49) + ((0.0165715516f * fTemp295) + ((0.549546778f * fTemp57) + (fTemp144 + ((0.507217646f * fTemp508) + ((0.151188701f * fTemp308) + ((0.029053621f * fTemp309) + ((0.00512710959f * fTemp509) + ((0.00317392498f * fTemp62) + ((0.00241096225f * fTemp63) + ((0.00314340647f * fTemp321) + ((0.00256355479f * fTemp322) + ((0.00183111057f * fTemp332) + ((0.00106814783f * (fTemp872 - fTemp88)) + ((0.000732444227f * ((fTemp106 + (fTemp352 - fTemp394)) - fTemp333)) + ((0.00054933317f * (((fTemp323 - fTemp473) - fTemp367) - fTemp334)) + ((0.00057985168f * ((fTemp142 + fTemp227) - fTemp231)) + ((0.00109866634f * ((((fTemp331 - fTemp221) - fTemp250) - fTemp107) - fTemp101)) + ((0.000610370189f * ((fTemp19 + (fTemp229 - fTemp483)) - fTemp336)) + ((9.15555283e-05f * (fTemp341 + fTemp249)) + ((0.00119022187f * (fTemp337 + ((fTemp256 + (fTemp64 + fTemp319)) - fTemp120))) + ((0.00140385143f * (fTemp345 + (fTemp119 + (fTemp219 + (fTemp80 - fTemp69))))) + ((0.00360118411f * ((fTemp208 + (fTemp104 + fTemp248)) - fTemp346)) + ((0.00201422162f * ((fTemp137 + fTemp500) - fTemp353)) + ((0.00115970336f * ((fTemp340 + fTemp343) - fTemp383)) + ((0.000366222113f * (fTemp390 + fTemp368)) + ((0.000305185094f * (fTemp112 + ((fTemp121 + fTemp26) - fTemp399))) + ((0.000244148076f * (fTemp375 + (((fTemp79 - fTemp379) - fTemp438) - fTemp434))) + ((0.000762962736f * ((fTemp210 + (fTemp138 + fTemp252)) - fTemp125)) + ((6.10370189e-05f * (fTemp102 - fTemp116)) + ((0.00274666585f * (fTemp344 + (fTemp129 + fTemp61))) + ((0.0025940733f * ((fTemp82 - fTemp382) - fTemp420)) + ((0.001617481f * ((fTemp23 + (fTemp358 + fTemp83)) - fTemp426)) + ((0.00363170262f * (fTemp97 + (fTemp30 - fTemp348))) + ((0.00152592547f * (fTemp431 + (fTemp22 - fTemp359))) + ((0.000274666585f * ((fTemp177 + (((fTemp74 - fTemp318) - fTemp5) - fTemp251)) - fTemp24)) + ((0.000213629566f * (((fTemp411 + fTemp314) - fTemp90) - fTemp166)) + ((0.000152592547f * (fTemp364 - fTemp164)) + ((0.00457777642f * (fTemp351 - fTemp437)) + ((0.00473036896f * (fTemp446 + fTemp238)) + ((0.00262459181f * (fTemp455 + (fTemp207 + (fTemp325 - fTemp402)))) + ((0.000671407208f * (fTemp182 + fTemp185)) + ((0.000518814661f * (fTemp20 + (fTemp84 - fTemp404))) + ((0.000396740623f * (fTemp187 + fTemp486)) + ((0.00146488845f * (fTemp18 + (fTemp73 - fTemp91))) + ((0.00427259132f * (fTemp123 + fTemp339)) + ((0.00625629444f * ((fTemp273 - fTemp335) - fTemp424)) + ((3.05185094e-05f * ((fTemp127 + (fTemp466 + (fTemp444 + (fTemp329 - fTemp68)))) - fTemp360)) + ((0.00402844325f * (fTemp168 - fTemp442)) + ((0.00509659108f * (fTemp192 + fTemp493)) + ((0.00445570238f * ((fTemp193 + (fTemp209 + fTemp286)) - fTemp157)) + ((0.00592059083f * (fTemp11 - fTemp490)) + ((0.00189214759f * (fTemp439 - fTemp1)) + ((0.00311288796f * (fTemp128 + (fTemp320 - fTemp59))) + ((0.00234992523f * (fTemp380 + (fTemp873 - fTemp253))) + ((0.00213629566f * (fTemp160 + (fTemp171 - fTemp226))) + ((0.00158696249f * ((fTemp315 - fTemp255) - fTemp190)) + ((0.00585955381f * (fTemp257 - fTemp154)) + ((0.00222785119f * (fTemp460 + fTemp81)) + ((0.00177007355f * (fTemp357 + fTemp324)) + ((0.0143436994f * (fTemp277 + fTemp485)) + (0.013061922f * (fTemp175 + fTemp41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00271614734f * fTemp4) + ((0.0028992584f * fTemp7) + ((0.0294198431f * fTemp222) + ((0.00662251655f * fTemp392) + ((0.00488296151f * fTemp181) + ((0.00302133244f * fTemp147) + ((0.00555436872f * fTemp165) + ((0.00552385021f * fTemp421) + ((0.00326548051f * fTemp96) + ((0.000793481246f * fTemp105) + ((0.0012817774f * fTemp378) + ((0.000122074038f * fTemp103) + ((0.0019226661f * fTemp452) + ((0.00299081393f * fTemp418) + ((0.0038758507f * fTemp93) + ((0.00216681417f * fTemp478) + ((0.00738547929f * fTemp196) + ((0.0120242927f * fTemp476) + ((0.0132145146f * fTemp195) + ((0.0100100711f * fTemp133) + ((0.00595110934f * fTemp16) + ((0.00561540574f * fTemp17) + ((0.00494399853f * fTemp189) + ((0.00149540696f * fTemp122) + ((0.000427259132f * fTemp170) + (fTemp824 + ((0.00286873989f * fTemp132) + ((0.00958281197f * fTemp148) + ((0.0106204413f * fTemp145) + ((0.00912503432f * fTemp417) + ((0.00430310983f * fTemp376) + (fTemp843 + ((0.00384533219f * fTemp134) + ((0.00173955504f * fTemp366) + ((0.00448622089f * fTemp498) + ((0.00506607257f * fTemp406) + ((0.00576799829f * fTemp494) + ((0.00640888698f * fTemp395) + ((0.00656147953f * fTemp495) + ((0.00674459059f * fTemp369) + ((0.0077517014f * fTemp515) + (fTemp819 + ((0.008087405f * fTemp233) + ((0.00534073915f * fTemp419) + ((0.00454725791f * fTemp422) + ((0.00366222113f * fTemp440) + ((0.00143436994f * fTemp235) + ((0.00482192449f * fTemp261) + ((0.00772118289f * fTemp263) + ((0.0236823633f * fTemp497) + ((0.0191961434f * fTemp429) + ((0.00698873866f * fTemp362) + ((0.00790429395f * fTemp31) + ((0.00997955259f * fTemp95) + (fTemp871 + ((0.01617481f * fTemp32) + ((0.0117496261f * fTemp33) + ((0.00250251777f * fTemp492) + ((0.00769066438f * fTemp282) + ((0.0394604318f * fTemp283) + ((0.0570696145f * fTemp477) + ((0.0690633878f * fTemp510) + ((0.0635395348f * fTemp284) + ((0.0383312479f * fTemp285) + ((0.0408642851f * fTemp505) + ((0.0889614522f * fTemp511) + ((0.110446483f * fTemp291) + ((0.113773003f * fTemp292) + ((0.105136268f * fTemp293) + ((0.0979033783f * fTemp294) + ((0.088656269f * fTemp484) + ((0.0608539097f * fTemp34) + ((0.025879696f * fTemp441) + ((0.0316171758f * fTemp42) + ((0.0800500512f * fTemp214) + ((0.0888698995f * fTemp43) + ((0.07849361f * fTemp44) + ((0.0651570186f * fTemp45) + ((0.0461745039f * fTemp46) + ((0.0758995339f * fTemp213) + ((0.122653887f * fTemp296) + ((0.167119354f * fTemp430) + ((0.123905152f * fTemp297) + ((0.0782189369f * fTemp298) + ((0.0802331641f * fTemp299) + ((0.11447493f * fTemp300) + ((0.154637292f * fTemp301) + ((0.152348399f * fTemp302) + ((0.191015348f * fTemp50) + ((0.134128854f * fTemp51) + ((0.129154339f * fTemp52) + ((0.034150213f * fTemp53) + ((0.032898955f * fTemp159) + ((0.0209051799f * fTemp303) + ((0.0866725668f * fTemp304) + ((0.112704858f * fTemp305) + ((0.212836087f * fTemp306) + ((0.383037806f * fTemp307) + ((0.444044322f * fTemp54) + ((0.416180909f * fTemp55) + ((0.0261238441f * fTemp56) + ((0.0131534776f * fTemp310) + ((0.0298776217f * fTemp311) + ((0.0335703604f * fTemp312) + ((0.019470809f * fTemp313) + ((0.00100711081f * fTemp75) + ((0.0022583697f * fTemp86) + ((((0.000976592302f * (fTemp365 + fTemp78)) + ((0.00253303628f * (fTemp371 + ((fTemp474 + fTemp397) - fTemp110))) + ((0.00411999878f * (fTemp118 + fTemp374)) + ((0.000335703604f * (fTemp361 - fTemp354)) + ((0.000183111057f * ((fTemp529 + fTemp198) - fTemp389)) + ((0.000640888698f * (fTemp396 + fTemp327)) + ((0.000823999755f * (fTemp130 + fTemp135)) + ((0.00204474013f * (fTemp131 + (fTemp514 + (fTemp72 + (fTemp76 + fTemp507))))) + ((0.00308236945f * (fTemp405 - fTemp467)) + ((0.0042115543f * (fTemp409 + ((fTemp454 - fTemp450) - fTemp172))) + ((0.00415051728f * (fTemp408 + (fTemp183 + fTemp400))) + ((0.00378429517f * (fTemp136 + fTemp415)) + ((0.00292977691f * (fTemp139 - fTemp150)) + ((0.00155644398f * (fTemp393 + fTemp387)) + ((0.00329599902f * (fTemp338 + ((fTemp391 - fTemp6) - fTemp158))) + ((0.00338755455f * (fTemp355 + (fTemp384 + (fTemp521 + fTemp201)))) + ((0.00341807306f * (fTemp113 - fTemp451)) + ((0.00653096102f * (fTemp410 + fTemp234)) + ((0.00601214636f * (fTemp109 - fTemp228)) + ((0.00424207281f * (fTemp496 - fTemp100)) + ((0.0019531846f * (fTemp152 + ((fTemp347 - fTemp377) - fTemp167))) + ((0.00238044374f * (fTemp155 - fTemp220)) + ((0.003234962f * (fTemp427 - fTemp27)) + ((0.00357066561f * (fTemp115 - fTemp388)) + ((0.00375377666f * (fTemp140 + fTemp58)) + ((0.00399792474f * (fTemp161 + ((fTemp274 - fTemp381) - fTemp489))) + ((0.00167851802f * (fTemp65 - fTemp443)) + ((0.00131229591f * ((fTemp349 + fTemp503) - fTemp458)) + ((0.00277718436f * (fTemp151 + fTemp254)) + ((0.00268562883f * (fTemp179 + fTemp66)) + ((0.00305185094f * ((fTemp173 + fTemp67) - fTemp149)) + ((0.00631733146f * (fTemp469 + (fTemp448 - fTemp433))) + ((0.00659199804f * (fTemp15 + fTemp449)) + ((0.00390636921f * (fTemp432 + (fTemp398 + (fTemp232 + fTemp92)))) + ((0.00170903653f * (fTemp316 - fTemp472)) + ((0.00180059206f * ((fTemp435 + fTemp267) - fTemp12)) + ((0.00265511032f * (fTemp77 - fTemp197)) + ((0.00393688772f * (fTemp202 + (fTemp461 + fTemp94))) + ((0.00466933195f * (fTemp482 + fTemp141)) + ((0.00247199927f * (fTemp70 - fTemp206)) + ((0.00503555406f * (fTemp266 - fTemp10)) + ((0.000915555283f * (fTemp475 + fTemp268)) + ((0.00219733268f * (fTemp225 - fTemp0)) + ((0.00231940672f * (fTemp456 + fTemp87)) + ((0.00433362834f * (fTemp413 + fTemp211)) + ((0.00210577715f * (fTemp200 + fTemp199)) + ((0.00372325815f * (fTemp506 - fTemp224)) + ((0.00680562761f * (fTemp111 + fTemp203)) + ((0.00296029542f * (fTemp499 + fTemp3)) + ((0.00714133121f * (fTemp262 - fTemp239)) + ((0.0197759941f * (fTemp265 - fTemp416)) + ((0.0121158483f * (fTemp264 - fTemp244)) + ((0.00164799951f * (fTemp85 - fTemp260)) + ((0.00909451582f * (fTemp180 + fTemp212)) + ((0.00280770287f * (fTemp60 - fTemp218)) + (((0.00332651753f * fTemp828) + (0.000457777642f * fTemp832)) + (0.00283822138f * fTemp874))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000885036774f * (fTemp98 + (fTemp108 - fTemp178)))) + (0.00103762932f * (fTemp513 + fTemp328))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.0045167394f * fTemp6) + ((0.827478886f * fTemp223) + ((0.0054933317f * fTemp204) + ((0.00589007232f * fTemp460) + ((0.00436414685f * fTemp368) + ((0.00250251777f * fTemp387) + ((0.00183111057f * fTemp380) + ((0.00430310983f * fTemp381) + ((0.00482192449f * fTemp8) + ((0.00592059083f * fTemp480) + ((0.00585955381f * fTemp462) + ((0.00454725791f * fTemp206) + ((0.004852443f * fTemp137) + ((0.00546281319f * fTemp207) + ((0.00308236945f * fTemp367) + ((0.00125125889f * fTemp452) + ((0.00537125766f * fTemp197) + ((0.00460829493f * fTemp12) + ((0.00848414563f * fTemp433) + ((0.0110782189f * fTemp13) + ((0.0121768853f * fTemp14) + ((0.0105594043f * fTemp350) + ((0.0122379223f * fTemp342) + ((0.0118717002f * fTemp463) + ((0.0103457747f * fTemp459) + ((0.00854518265f * fTemp230) + ((0.00442518387f * fTemp18) + ((0.00378429517f * fTemp187) + ((0.00283822138f * fTemp164) + ((0.00479140598f * fTemp22) + (fTemp845 + ((0.008087405f * fTemp351) + (fTemp25 + ((0.00894192327f * fTemp162) + ((0.00988799706f * fTemp373) + ((0.0101321451f * fTemp425) + ((0.00778221991f * fTemp97) + ((0.0028992584f * fTemp426) + ((0.001617481f * fTemp155) + ((0.00488296151f * fTemp150) + ((0.00622577593f * fTemp344) + ((0.00335703604f * fTemp120) + ((0.00152592547f * fTemp102) + ((0.0022583697f * fTemp176) + ((0.000335703604f * fTemp422) + ((0.00512710959f * fTemp500) + ((0.00610370189f * fTemp502) + ((0.00576799829f * fTemp237) + ((0.0155034028f * fTemp504) + ((0.0165410321f * fTemp241) + ((0.0160832554f * fTemp242) + ((0.0163579211f * fTemp243) + ((0.0175786614f * fTemp412) + ((0.0148014771f * fTemp416) + ((0.0102542192f * fTemp470) + ((0.00979644153f * fTemp247) + ((0.0110171819f * fTemp487) + ((0.0115054781f * fTemp516) + ((0.0117496261f * fTemp216) + ((0.0127262184f * fTemp386) + ((0.0144047365f * fTemp423) + ((0.0131839961f * fTemp465) + ((0.0117191076f * fTemp457) + ((0.00939970091f * fTemp491) + ((0.0074159978f * fTemp526) + ((0.0113528855f * fTemp520) + ((0.0173039958f * fTemp28) + ((0.0176396985f * fTemp29) + ((0.017914366f * fTemp385) + ((0.0205084383f * fTemp270) + ((0.0268868078f * fTemp271) + ((0.0303048808f * fTemp370) + ((0.022583697f * fTemp186) + ((0.00457777642f * fTemp501) + ((0.0143742179f * fTemp488) + ((0.0229499191f * fTemp471) + ((0.0318918414f * fTemp279) + ((0.0326242857f * fTemp280) + ((0.0307016205f * fTemp281) + ((0.0177922919f * fTemp215) + ((0.027558215f * fTemp287) + ((0.0417493209f * fTemp288) + ((0.0263069551f * fTemp289) + ((0.0148930326f * fTemp485) + ((0.0471816175f * fTemp35) + ((0.0470290221f * fTemp36) + ((0.0591143519f * fTemp37) + ((0.0578020588f * fTemp38) + ((0.0716574639f * fTemp39) + ((0.0310983621f * fTemp40) + ((0.0318002887f * fTemp47) + ((0.0800805688f * fTemp48) + ((0.0455641337f * fTemp49) + ((0.013000885f * fTemp53) + ((0.0102847377f * fTemp303) + ((0.154576257f * fTemp56) + ((0.67534411f * fTemp57) + (fTemp144 + ((0.379345059f * fTemp508) + ((0.0963469371f * fTemp308) + ((0.0148625141f * fTemp309) + ((0.00418103579f * fTemp320) + ((0.00390636921f * fTemp321) + ((0.000915555283f * fTemp79) + ((0.00253303628f * ((fTemp116 + (fTemp332 - fTemp69)) - fTemp98)) + ((0.00271614734f * (((fTemp128 + (fTemp295 + (fTemp63 + fTemp873))) - fTemp405) - fTemp101)) + ((0.000366222113f * ((fTemp163 + fTemp397) - fTemp337)) + ((0.00109866634f * ((fTemp347 + (((fTemp269 + fTemp219) - fTemp157) - fTemp437)) - fTemp352)) + ((0.00491348002f * ((fTemp209 + fTemp174) - fTemp118)) + ((0.00054933317f * (((((fTemp94 + fTemp329) - fTemp419) - fTemp141) - fTemp105) - fTemp390)) + ((0.000213629566f * (fTemp372 + fTemp318)) + ((0.00305185094f * ((fTemp170 + (fTemp90 + (fTemp453 - fTemp165))) - fTemp409)) + ((0.00280770287f * ((fTemp315 + fTemp322) - fTemp408)) + ((0.00234992523f * ((fTemp340 + (fTemp119 + ((fTemp235 - fTemp494) - fTemp181))) - fTemp136)) + ((0.000183111057f * (fTemp108 - fTemp201)) + ((0.00665303506f * (fTemp100 + (fTemp10 + fTemp447))) + ((0.00106814783f * (fTemp152 - fTemp91)) + ((0.00134281442f * (fTemp420 + (fTemp73 - fTemp190))) + ((0.00146488845f * (fTemp382 + fTemp122)) + ((0.000396740623f * (fTemp161 + fTemp514)) + ((0.00531022064f * (fTemp428 + fTemp167)) + ((0.00738547929f * (fTemp27 + fTemp194)) + ((0.00570696127f * (fTemp431 + fTemp339)) + ((0.00433362834f * (fTemp26 + fTemp458)) + ((0.00326548051f * (fTemp438 + (fTemp82 - fTemp335))) + ((0.00369273964f * (fTemp364 + (fTemp182 + fTemp464))) + ((0.00518814661f * (fTemp443 + fTemp205)) + ((0.00695822015f * (fTemp146 + fTemp153)) + ((0.00784325693f * (fTemp172 + fTemp246)) + ((0.00704977568f * (fTemp451 + fTemp191)) + ((0.00607318338f * (fTemp455 - fTemp133)) + ((0.00494399853f * (fTemp23 + fTemp193)) + ((0.00314340647f * (fTemp177 + ((fTemp81 - fTemp402) - fTemp233))) + ((0.00170903653f * (fTemp359 - fTemp211)) + ((0.0038758507f * (fTemp185 + fTemp236)) + ((0.00384533219f * (fTemp20 + fTemp19)) + ((0.00552385021f * (fTemp149 + fTemp388)) + ((0.00781273842f * (fTemp228 + fTemp244)) + ((0.00469985045f * (fTemp472 + (fTemp184 + fTemp450))) + ((0.00674459059f * (fTemp168 + fTemp363)) + ((0.000518814661f * (fTemp499 - fTemp398)) + ((0.000122074038f * (fTemp84 - fTemp348)) + ((0.00363170262f * (fTemp486 + fTemp689)) + ((0.00402844325f * (fTemp227 + (fTemp357 - fTemp3))) + ((0.00320444349f * (fTemp103 + fTemp178)) + ((0.00411999878f * (fTemp126 + fTemp61)) + ((0.00643940549f * (fTemp489 + fTemp238)) + ((0.00732444227f * (fTemp11 + fTemp493)) + ((0.00228888821f * (fTemp217 + (fTemp80 - fTemp395))) + ((0.00277718436f * (fTemp439 + (fTemp324 - fTemp286))) + ((0.00210577715f * (fTemp129 + fTemp319)) + ((0.00173955504f * (fTemp160 + (fTemp331 - fTemp111))) + ((0.00189214759f * (fTemp171 - fTemp154)) + ((0.000976592302f * ((fTemp314 - fTemp474) - fTemp456)) + ((0.000854518265f * ((fTemp64 - fTemp509) - fTemp400)) + ((0.00155644398f * (fTemp175 + (fTemp83 - fTemp258))) + ((0.0252082888f * (fTemp479 - fTemp222)) + ((0.00405896176f * (fTemp159 + fTemp62)) + ((0.0035401471f * (fTemp220 + fTemp218)) + ((0.00317392498f * fTemp865) + (0.00762962736f * fTemp840))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00198370311f * fTemp1) + ((0.00119022187f * fTemp5) + ((0.00393688772f * fTemp7) + ((0.00112918485f * fTemp391) + ((0.000244148076f * fTemp147) + ((0.00149540696f * fTemp435) + (fTemp867 + ((0.00891140476f * fTemp476) + ((0.00952177495f * fTemp195) + ((0.003234962f * fTemp424) + ((0.00341807306f * fTemp469) + (fTemp823 + ((0.00244148076f * fTemp17) + ((0.00497451704f * fTemp148) + ((0.00637836847f * fTemp417) + ((0.00445570238f * fTemp410) + ((0.00238044374f * fTemp376) + ((0.00302133244f * fTemp134) + ((0.00473036896f * fTemp374) + ((0.00448622089f * fTemp113) + ((0.00311288796f * fTemp366) + ((0.0019531846f * fTemp336) + ((0.0025940733f * fTemp107) + ((0.00222785119f * fTemp231) + (fTemp546 + ((0.00265511032f * fTemp448) + ((0.0019226661f * fTemp203) + ((0.00158696249f * fTemp234) + ((0.00216681417f * fTemp445) + ((0.0119937742f * fTemp251) + ((0.0106204413f * fTemp252) + ((0.01126133f * fTemp404) + ((0.0124515519f * fTemp253) + ((0.012878811f * fTemp254) + ((0.00964384899f * fTemp256) + ((0.00350962859f * fTemp257) + ((0.00558488723f * fTemp259) + ((0.0131534776f * fTemp260) + ((0.0182805881f * fTemp261) + ((0.0198675506f * fTemp262) + ((0.0191961434f * fTemp263) + ((0.0232551042f * fTemp264) + ((0.0285958443f * fTemp265) + ((0.0316476934f * fTemp497) + ((0.0247505121f * fTemp429) + ((0.0149540696f * fTemp362) + ((0.0127567369f * fTemp506) + ((0.0106509598f * fTemp268) + ((0.0158085879f * fTemp30) + ((0.0303659178f * fTemp31) + ((0.0294503625f * fTemp95) + ((0.0199285876f * fTemp503) + ((0.0104678487f * fTemp272) + (fTemp609 + ((0.0248725861f * fTemp274) + ((0.0332346559f * fTemp169) + ((0.0349131748f * fTemp32) + ((0.0259712525f * fTemp33) + ((0.0151676992f * fTemp492) + ((0.00500503555f * fTemp468) + ((0.0375072472f * fTemp282) + ((0.0620441288f * fTemp283) + ((0.0755027905f * fTemp477) + ((0.0811487138f * fTemp510) + ((0.0708944947f * fTemp284) + ((0.0421460606f * fTemp285) + ((0.0144657735f * fTemp290) + ((0.104739524f * fTemp511) + ((0.116214484f * fTemp291) + ((0.113193154f * fTemp292) + ((0.100222789f * fTemp293) + ((0.0942106396f * fTemp294) + ((0.0795007199f * fTemp484) + ((0.0520950966f * fTemp34) + ((0.014496292f * fTemp441) + ((0.0468153954f * fTemp42) + ((0.0806299001f * fTemp214) + ((0.0819727182f * fTemp43) + ((0.0552995391f * fTemp45) + ((0.0317392498f * fTemp46) + ((0.0838953853f * fTemp213) + ((0.114108704f * fTemp296) + ((0.14755699f * fTemp430) + ((0.080813013f * fTemp297) + ((0.0587176122f * fTemp298) + ((0.0561540574f * fTemp299) + ((0.102328561f * fTemp300) + ((0.116763815f * fTemp301) + ((0.132786036f * fTemp302) + ((0.141026035f * fTemp50) + ((0.0921353772f * fTemp51) + ((0.0690939054f * fTemp52) + ((0.0600604266f * fTemp304) + ((0.0748619065f * fTemp305) + ((0.199468985f * fTemp306) + ((0.318277538f * fTemp307) + ((0.358867139f * fTemp54) + ((0.268013537f * fTemp55) + ((0.0182195511f * fTemp310) + ((0.0299691763f * fTemp311) + ((0.0308236945f * fTemp312) + ((0.0154728843f * fTemp313) + ((0.00399792474f * fTemp66) + ((0.000488296151f * fTemp135) + ((0.00186162908f * fTemp75) + ((0.000762962736f * fTemp328) + ((((0.00213629566f * (fTemp333 + (fTemp507 - fTemp343))) + ((0.00201422162f * (fTemp334 + fTemp131)) + ((0.00131229591f * (fTemp341 + (fTemp338 + ((fTemp327 - fTemp323) - fTemp358)))) + ((0.000701925717f * (fTemp106 + (fTemp394 + (fTemp183 + fTemp475)))) + ((0.000305185094f * (fTemp345 + ((fTemp74 - fTemp41) - fTemp127))) + ((0.000610370189f * (fTemp114 + fTemp93)) + ((0.00177007355f * (fTemp360 + (fTemp383 + (fTemp189 + (fTemp316 - fTemp377))))) + ((0.00375377666f * (fTemp371 + fTemp436)) + ((0.00415051728f * (fTemp346 + fTemp67)) + ((0.00347911008f * fTemp874) + ((0.00262459181f * (fTemp353 + (fTemp858 - fTemp121))) + ((0.00103762932f * (fTemp361 + ((fTemp432 - fTemp173) - fTemp427))) + ((0.000671407208f * (fTemp389 + ((fTemp461 - fTemp138) - fTemp179))) + ((0.000457777642f * (fTemp112 - fTemp151)) + ((9.15555283e-05f * (fTemp354 + fTemp379)) + ((6.10370189e-05f * ((((fTemp466 - fTemp415) - fTemp393) - fTemp403) - fTemp375)) + ((0.000427259132f * (fTemp529 - fTemp418)) + ((0.00057985168f * (fTemp125 + (fTemp454 - fTemp478))) + ((0.000274666585f * (fTemp396 + fTemp473)) + ((0.000152592547f * ((fTemp521 - fTemp444) - fTemp399)) + ((0.000946073793f * (fTemp130 + (fTemp99 + (fTemp496 + fTemp221)))) + ((0.00140385143f * (fTemp139 - fTemp142)) + ((0.0012817774f * (fTemp384 + fTemp482)) + ((0.00683614612f * (fTemp145 - fTemp224)) + ((0.00100711081f * (fTemp109 + fTemp349)) + ((0.000823999755f * ((fTemp68 - fTemp115) - fTemp132)) + ((0.000640888698f * ((fTemp202 + (fTemp442 + fTemp78)) - fTemp140)) + ((0.00946073793f * (fTemp401 - fTemp89)) + ((0.00344859157f * ((fTemp77 - fTemp166) - fTemp434)) + ((0.00708029419f * (fTemp212 - fTemp123)) + ((0.00366222113f * (fTemp15 + fTemp490)) + ((0.00299081393f * ((fTemp392 + (fTemp515 + fTemp76)) - fTemp229)) + ((0.0112308115f * (fTemp249 - fTemp414)) + ((0.00466933195f * (fTemp196 + fTemp275)) + ((0.00204474013f * (fTemp276 - fTemp356)) + ((0.00332651753f * ((fTemp421 + fTemp4) - fTemp110)) + ((0.00381481368f * (fTemp58 - fTemp467)) + ((0.00427259132f * (fTemp59 - fTemp208)) + ((0.00143436994f * (fTemp226 + fTemp96)) + ((0.00122074038f * (fTemp225 + fTemp498)) + ((0.00241096225f * (fTemp413 + (fTemp495 + fTemp85))) + ((0.00372325815f * ((fTemp60 + fTemp70) - fTemp104)) + ((3.05185094e-05f * (fTemp440 - fTemp200)) + ((0.000885036774f * (fTemp232 + fTemp278)) + ((0.00219733268f * (fTemp369 + fTemp72)) + ((0.00866725668f * (fTemp248 - fTemp239)) + ((0.0130314035f * (fTemp250 - fTemp240)) + ((0.0175481439f * (fTemp180 - fTemp143)) + ((0.0123294778f * (fTemp255 + (fTemp266 + fTemp267))) + ((0.00256355479f * (fTemp199 - fTemp188)) + ((0.0672933161f * (fTemp505 + fTemp44)) + ((0.00292977691f * (fTemp65 + fTemp86)) + ((0.00274666585f * (fTemp87 - fTemp0)) + (0.00115970336f * fTemp866)))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00247199927f * (fTemp513 + (fTemp365 - fTemp483)))) + (0.00268562883f * (fTemp88 + fTemp277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow64 ? (((0.00286873989f * fTemp1) + ((0.00564592425f * fTemp402) + ((0.0102237007f * fTemp221) + ((0.0274361409f * fTemp223) + ((0.00134281442f * fTemp439) + ((0.00180059206f * fTemp343) + ((0.00299081393f * fTemp239) + ((0.00277718436f * fTemp240) + ((0.0022583697f * fTemp243) + ((0.00375377666f * fTemp465) + ((0.00189214759f * fTemp457) + ((0.00265511032f * fTemp248) + ((0.00238044374f * fTemp256) + ((0.00234992523f * fTemp269) + ((0.00531022064f * fTemp520) + ((0.00643940549f * fTemp29) + ((0.00363170262f * fTemp385) + ((0.00274666585f * fTemp276) + ((0.00589007232f * fTemp277) + ((0.0077517014f * fTemp278) + ((0.0101626636f * fTemp501) + ((0.011200293f * fTemp488) + ((0.0109866634f * fTemp471) + ((0.0074159978f * fTemp279) + ((0.0148014771f * fTemp284) + ((0.0144657735f * fTemp285) + ((0.00482192449f * fTemp286) + ((0.00207525864f * fTemp484) + ((0.00805688649f * fTemp34) + ((0.0108035523f * fTemp441) + ((0.0150761437f * fTemp485) + ((0.0245979186f * fTemp479) + ((0.0250556972f * fTemp35) + ((0.0185552537f * fTemp36) + ((0.0119022187f * fTemp37) + ((0.00692770164f * fTemp43) + ((0.0233161412f * fTemp44) + (fTemp635 + ((0.00930814538f * fTemp46) + ((0.0116275521f * fTemp213) + ((0.0237128828f * fTemp51) + ((0.0511490218f * fTemp52) + ((0.0541703552f * fTemp53) + ((0.225592822f * fTemp307) + ((0.28720969f * fTemp54) + ((0.172521129f * fTemp55) + ((0.0494399853f * fTemp56) + ((0.012817774f * fTemp57) + ((0.0230719931f * fTemp144) + ((0.0195623655f * fTemp508) + ((0.00231940672f * fTemp313) + ((0.00314340647f * fTemp199) + ((0.0134891812f * fTemp314) + ((0.0110782189f * fTemp315) + ((0.00408948027f * fTemp61) + ((0.0035401471f * fTemp66) + ((0.00445570238f * fTemp67) + ((0.00311288796f * fTemp316) + ((0.006469924f * fTemp72) + ((0.009704886f * fTemp135) + ((0.0061342204f * fTemp324) + ((0.00418103579f * fTemp77) + ((0.00555436872f * fTemp507) + ((0.0042115543f * fTemp78) + ((0.00210577715f * fTemp79) + ((0.00222785119f * fTemp328) + ((0.000427259132f * ((((((fTemp170 + (fTemp451 + (fTemp164 - fTemp173))) - fTemp431) - fTemp89) - fTemp114) - fTemp106) - fTemp101)) + (((0.000457777642f * (((((((fTemp122 + ((((fTemp94 + (fTemp325 + fTemp85)) - fTemp233) - fTemp203) - fTemp230)) - fTemp23) - fTemp426) - fTemp100) - fTemp120) - fTemp345) - fTemp337)) + ((0.000366222113f * ((fTemp346 + (fTemp112 + (fTemp139 + ((fTemp187 + (fTemp96 + (fTemp249 + (fTemp258 + fTemp273)))) - fTemp97)))) - fTemp352)) + ((0.000244148076f * ((((fTemp18 + (fTemp342 + ((fTemp198 + (fTemp116 + (fTemp206 + ((fTemp491 - fTemp461) - fTemp387)))) - fTemp472))) - fTemp162) - fTemp136) - fTemp360)) + ((0.000152592547f * ((((((((fTemp348 + (fTemp790 - fTemp452)) - fTemp454) - fTemp469) - fTemp443) - fTemp376) - fTemp113) - fTemp371) - fTemp365)) + ((0.000122074038f * ((((fTemp151 + ((((((fTemp205 + (fTemp210 + (fTemp141 + (fTemp460 + (fTemp169 - fTemp419))))) - fTemp418) - fTemp153) - fTemp12) - fTemp414) - fTemp463)) - fTemp146) - fTemp427) - fTemp366)) + ((0.000213629566f * (fTemp374 + (fTemp353 + ((fTemp351 + (fTemp17 + ((((fTemp397 + (fTemp422 + fTemp268)) - fTemp464) - fTemp168) - fTemp433))) - fTemp121)))) + ((0.000823999755f * (fTemp529 + fTemp456)) + ((0.000854518265f * (fTemp125 + (fTemp194 + fTemp216))) + ((6.10370189e-05f * (((fTemp115 + (((fTemp359 + (fTemp14 + ((fTemp133 + (((fTemp126 + (fTemp143 - fTemp368)) - fTemp103) - fTemp486)) - fTemp13))) - fTemp179) - fTemp140)) - fTemp142) - fTemp399)) + ((0.000610370189f * (((fTemp446 + (fTemp182 + (fTemp350 + (fTemp381 + fTemp657)))) - fTemp156) - fTemp127)) + ((0.000946073793f * (((fTemp171 + (fTemp138 + (fTemp378 + fTemp225))) - fTemp229) - fTemp130)) + ((0.000671407208f * ((fTemp393 + (fTemp442 + (fTemp154 + fTemp838))) - fTemp405)) + ((0.000640888698f * (fTemp102 + (fTemp185 + (fTemp401 + fTemp65)))) + ((0.000183111057f * (fTemp119 + (((fTemp178 + (fTemp490 - fTemp204)) - fTemp367) - fTemp227))) + ((0.00164799951f * ((fTemp339 + fTemp208) - fTemp355)) + ((0.00103762932f * (fTemp145 + fTemp160)) + ((0.000274666585f * (((fTemp195 + (fTemp447 + (fTemp496 + (fTemp247 + fTemp321)))) - fTemp24) - fTemp150)) + ((0.000732444227f * ((fTemp177 + (fTemp90 + fTemp174)) - fTemp155)) + ((0.00122074038f * (fTemp93 + (fTemp32 - fTemp222))) + ((0.00112918485f * (fTemp398 + (fTemp211 + (fTemp392 + (fTemp236 + (fTemp306 + (fTemp329 - fTemp327))))))) + ((0.00149540696f * (fTemp437 + (fTemp11 + (fTemp10 + (fTemp475 + fTemp435))))) + ((0.00119022187f * (fTemp157 + fTemp805)) + ((0.00131229591f * (fTemp480 + fTemp466)) + ((0.00155644398f * (fTemp363 + fTemp8)) + ((0.00167851802f * (fTemp356 + fTemp467)) + ((0.00143436994f * (fTemp184 + ((fTemp270 + fTemp510) - fTemp449))) + ((0.00152592547f * (fTemp349 + (fTemp514 + fTemp71))) + ((0.00125125889f * (fTemp226 + fTemp76)) + ((0.00140385143f * (fTemp39 - fTemp495)) + ((0.00100711081f * (fTemp499 + fTemp500)) + ((0.00183111057f * (fTemp237 + (fTemp251 + fTemp492))) + ((0.0025940733f * (fTemp504 + (fTemp241 + (fTemp386 + fTemp175)))) + ((0.00262459181f * (fTemp242 + fTemp252)) + ((0.00402844325f * (fTemp423 + fTemp4)) + ((0.00253303628f * (fTemp33 - fTemp404)) + ((0.003234962f * (fTemp257 - fTemp219)) + ((0.00241096225f * (fTemp318 - fTemp262)) + ((0.00708029419f * (fTemp28 + fTemp308)) + ((0.00329599902f * ((fTemp280 - fTemp188) - fTemp186)) + ((0.00177007355f * (fTemp275 + fTemp220)) + ((0.00964384899f * (fTemp323 - fTemp288)) + ((0.00280770287f * (fTemp295 + fTemp87)) + ((0.0019226661f * (fTemp86 - fTemp81)) + (0.00201422162f * (fTemp212 + fTemp319))))))))))))))))))))))))))))))))))))))))))))) + (0.000335703604f * (((fTemp124 + (fTemp354 + ((((fTemp166 + (fTemp19 + (fTemp189 + ((fTemp104 + (fTemp129 + (((fTemp95 - fTemp526) - fTemp357) - fTemp415))) - fTemp192)))) - fTemp428) - fTemp161) - fTemp152))) - fTemp341) - fTemp107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00512710959f * fTemp218) + ((0.00393688772f * fTemp5) + ((0.00592059083f * fTemp7) + ((0.00436414685f * fTemp253) + ((0.00527970213f * fTemp260) + ((0.00424207281f * fTemp261) + ((0.0090334788f * fTemp265) + ((0.0129093295f * fTemp497) + ((0.0113528855f * fTemp429) + ((0.00524918362f * fTemp180) + ((0.00332651753f * fTemp30) + ((0.0102542192f * fTemp215) + ((0.0191351064f * fTemp468) + ((0.0246894751f * fTemp282) + ((0.0247199927f * fTemp283) + ((0.0149235511f * fTemp477) + ((0.00875881221f * fTemp289) + ((0.00698873866f * fTemp290) + ((0.0126346629f * fTemp505) + ((0.021271402f * fTemp511) + ((0.0250251777f * fTemp291) + ((0.0213934761f * fTemp292) + ((0.0147709586f * fTemp293) + ((0.00723288674f * fTemp294) + ((0.0045167394f * fTemp40) + ((0.0169072542f * fTemp41) + ((0.0301217698f * fTemp42) + ((0.0200201422f * fTemp214) + ((0.019287698f * fTemp47) + ((0.0358592495f * fTemp48) + ((0.0268562883f * fTemp49) + ((0.0398876928f * fTemp430) + ((0.0617389455f * fTemp297) + ((0.0697042793f * fTemp298) + ((0.0415356904f * fTemp299) + ((0.021210365f * fTemp300) + ((0.00296029542f * fTemp301) + ((0.0235908087f * fTemp159) + ((0.145451218f * fTemp303) + ((0.252784818f * fTemp304) + ((0.210333571f * fTemp305) + ((0.00479140598f * fTemp309) + ((0.0120548112f * fTemp509) + ((0.0138859218f * fTemp310) + ((0.0114139225f * fTemp311) + ((0.00662251655f * fTemp312) + ((0.00726340525f * fTemp59) + ((0.00381481368f * fTemp60) + ((0.00991851557f * fTemp62) + ((0.011322367f * fTemp63) + ((0.00869777519f * fTemp64) + ((0.00518814661f * fTemp68) + ((0.00631733146f * fTemp69) + ((0.00857570115f * fTemp326) + ((0.00891140476f * fTemp73) + ((0.00653096102f * fTemp74) + ((0.00326548051f * fTemp83) + (((0.000701925717f * (fTemp513 + (fTemp334 + (fTemp400 - fTemp172)))) + ((0.000762962736f * (fTemp333 + (fTemp131 + (fTemp134 + (fTemp408 + ((((((fTemp494 + fTemp274) - fTemp379) - fTemp358) - fTemp380) - fTemp123) - fTemp410)))))) + ((0.00057985168f * (fTemp231 + (fTemp132 + (fTemp163 + fTemp244)))) + ((0.000488296151f * (fTemp98 + (((fTemp382 + (fTemp26 - fTemp438)) - fTemp148) - fTemp396))) + ((0.000305185094f * (fTemp336 + (((fTemp373 + (fTemp27 + (fTemp191 + (((fTemp234 + fTemp362) - fTemp197) - fTemp476)))) - fTemp372) - fTemp390))) + ((9.15555283e-05f * ((fTemp109 + ((fTemp455 + (((fTemp478 + (fTemp483 + ((((fTemp80 - fTemp413) - fTemp128) - fTemp158) - fTemp207))) - fTemp196) - fTemp16)) - fTemp364)) - fTemp389)) + ((3.05185094e-05f * (((((fTemp149 + ((fTemp246 + (fTemp487 + (fTemp516 + (fTemp331 - fTemp250)))) - fTemp137)) - fTemp22) - fTemp434) - fTemp383) - fTemp118)) + ((0.000518814661f * ((fTemp108 + (fTemp167 + ((fTemp228 + ((((fTemp436 - fTemp232) - fTemp224) - fTemp444) - fTemp462)) - fTemp20))) - fTemp375)) + ((0.000976592302f * ((fTemp369 - fTemp209) - fTemp394)) + ((0.000915555283f * (fTemp403 + fTemp255)) + ((0.000885036774f * (fTemp409 + (fTemp424 - fTemp489))) + ((0.000396740623f * ((fTemp425 + (fTemp459 + (fTemp407 + fTemp296))) - fTemp340)) + ((0.00115970336f * (fTemp99 + (((fTemp332 - fTemp502) - fTemp347) - fTemp417))) + ((0.00106814783f * (fTemp384 + fTemp769)) + ((0.000793481246f * (fTemp420 + ((((fTemp498 - fTemp493) - fTemp377) - fTemp450) - fTemp411))) + ((0.0012817774f * ((((fTemp470 + (fTemp322 - fTemp320)) - fTemp235) - fTemp183) - fTemp201)) + ((0.00109866634f * (fTemp416 - fTemp202)) + ((0.00146488845f * (((((fTemp267 - fTemp335) - fTemp147) - fTemp110) - fTemp217) - fTemp482)) + ((0.00158696249f * (((fTemp263 - fTemp200) - fTemp190) - fTemp388)) + ((0.00170903653f * (((fTemp58 - fTemp181) - fTemp391) - fTemp453)) + ((0.00137333293f * ((fTemp506 - fTemp412) - fTemp91)) + ((0.00268562883f * (fTemp75 - fTemp238)) + ((0.00384533219f * (fTemp264 - fTemp445)) + ((0.00411999878f * (fTemp254 + fTemp6)) + ((0.00347911008f * (fTemp259 + (fTemp50 + fTemp2))) + ((0.00216681417f * (fTemp370 + (fTemp281 - fTemp272))) + ((0.0019531846f * (fTemp0 + fTemp31)) + ((0.00247199927f * (fTemp84 - fTemp503)) + ((0.0057985168f * (fTemp287 + fTemp70)) + ((0.00427259132f * (fTemp302 - fTemp38)) + ((0.00305185094f * (fTemp3 + fTemp82)) + (0.001617481f * fTemp863)))))))))))))))))))))))))))))))) + (0.00054933317f * (fTemp88 + (fTemp344 + (((fTemp15 + ((fTemp111 + (fTemp515 + (fTemp271 - fTemp92))) - fTemp473)) - fTemp521) - fTemp458))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.00103762932f * fTemp1) + ((0.00790429395f * fTemp402) + ((0.0138248848f * fTemp4) + ((0.00930814538f * fTemp6) + ((0.00686666463f * fTemp221) + (fTemp870 + ((0.0067751091f * fTemp224) + ((0.00659199804f * fTemp460) + ((0.00369273964f * fTemp387) + ((0.00241096225f * fTemp173) + ((9.15555283e-05f * fTemp181) + ((0.00238044374f * fTemp435) + ((0.000823999755f * fTemp349) + ((0.00329599902f * fTemp467) + ((0.00418103579f * fTemp343) + ((0.00305185094f * fTemp480) + ((0.00231940672f * fTemp489) + ((0.00302133244f * fTemp367) + (fTemp662 + ((0.000152592547f * fTemp197) + ((0.000732444227f * fTemp454) + ((0.00375377666f * fTemp189) + ((0.00286873989f * fTemp185) + ((0.00183111057f * fTemp359) + ((0.00207525864f * fTemp434) + ((0.00180059206f * fTemp161) + ((0.00546281319f * fTemp148) + ((0.00402844325f * fTemp145) + ((0.00378429517f * fTemp119) + ((0.0012817774f * fTemp389) + ((0.00350962859f * fTemp124) + ((0.0025940733f * fTemp374) + ((0.00164799951f * fTemp336) + ((0.00436414685f * fTemp498) + ((0.00552385021f * fTemp502) + ((0.00817896053f * fTemp237) + ((0.00921658985f * fTemp238) + ((0.00933866389f * fTemp239) + ((0.00894192327f * fTemp240) + ((0.00881984923f * fTemp504) + ((0.006469924f * fTemp243) + ((0.00640888698f * fTemp470) + ((0.00750755332f * fTemp244) + ((0.00561540574f * fTemp246) + ((0.00500503555f * fTemp516) + ((0.0134891812f * fTemp506) + ((0.030976288f * fTemp267) + ((0.0380260646f * fTemp268) + ((0.03234962f * fTemp269) + ((0.0216986611f * fTemp520) + ((0.0158696249f * fTemp28) + ((0.0127567369f * fTemp29) + ((0.00869777519f * fTemp30) + ((0.0183416251f * fTemp31) + ((0.0136112552f * fTemp503) + ((0.00961333048f * fTemp272) + ((0.0173039958f * fTemp277) + ((0.0369579159f * fTemp278) + ((0.0508438386f * fTemp501) + ((0.0545976125f * fTemp488) + ((0.0444959886f * fTemp471) + ((0.0306405835f * fTemp279) + ((0.0416272469f * fTemp284) + ((0.0550859086f * fTemp285) + ((0.032654807f * fTemp286) + ((0.0278634001f * fTemp34) + ((0.0318002887f * fTemp441) + ((0.0394299142f * fTemp485) + ((0.0592059083f * fTemp479) + ((0.0943632349f * fTemp35) + ((0.105044708f * fTemp36) + ((0.0621356852f * fTemp37) + ((0.0221869573f * fTemp38) + ((0.122440264f * fTemp44) + ((0.150547802f * fTemp45) + ((0.0998260453f * fTemp46) + ((0.0256050304f * fTemp50) + ((0.10055849f * fTemp51) + ((0.171300396f * fTemp52) + ((0.131565288f * fTemp53) + ((0.052064579f * fTemp159) + ((0.138401434f * fTemp307) + ((0.774681866f * fTemp54) + (fTemp55 + ((0.680227041f * fTemp56) + ((0.248664811f * fTemp57) + ((0.0538041331f * fTemp144) + ((0.0152897732f * fTemp314) + ((0.019226661f * fTemp315) + ((0.0171514023f * fTemp61) + ((0.014679403f * fTemp316) + ((0.0111697745f * fTemp318) + ((0.00747703481f * fTemp135) + ((0.0120548112f * fTemp323) + ((0.0131534776f * fTemp324) + ((0.0115665151f * fTemp507) + ((0.00411999878f * fTemp328) + ((0.00695822015f * fTemp329) + ((0.00820947904f * fTemp331) + ((0.00701925717f * fTemp332) + ((0.0022583697f * ((fTemp164 + fTemp16) - fTemp333)) + ((0.00222785119f * (fTemp449 - fTemp334)) + ((6.10370189e-05f * (fTemp101 - fTemp350)) + ((0.00146488845f * (fTemp341 + (fTemp115 - fTemp96))) + ((0.00149540696f * (((fTemp347 + fTemp129) - fTemp112) - fTemp352)) + ((0.000671407208f * (fTemp113 + (fTemp22 - fTemp149))) + ((0.00357066561f * (fTemp353 + ((fTemp448 - fTemp222) - fTemp397))) + ((0.00332651753f * (fTemp383 + fTemp90)) + ((0.00253303628f * (fTemp361 - fTemp219)) + ((0.000640888698f * ((fTemp15 + ((fTemp437 + fTemp395) - fTemp229)) - fTemp375)) + ((0.000335703604f * (fTemp529 + (fTemp23 + fTemp834))) + ((0.00131229591f * (fTemp394 + (fTemp469 + fTemp486))) + ((0.000122074038f * (((fTemp167 + ((fTemp432 + (fTemp473 + ((fTemp249 - fTemp225) - fTemp444))) - fTemp18)) - fTemp420) - fTemp127)) + ((0.00296029542f * ((fTemp26 + fTemp490) - fTemp134)) + ((0.00152592547f * (fTemp139 + ((fTemp276 - fTemp392) - fTemp152))) + ((0.00344859157f * (fTemp340 + fTemp217)) + ((0.0028992584f * (fTemp142 + (fTemp11 + fTemp80))) + ((0.000854518265f * (fTemp108 + (fTemp417 + (fTemp411 + fTemp442)))) + ((0.000610370189f * ((fTemp151 + fTemp500) - fTemp344)) + ((0.000915555283f * ((fTemp426 + fTemp157) - fTemp132)) + ((0.00100711081f * (fTemp382 + fTemp77)) + ((0.001617481f * (fTemp140 + ((fTemp184 + fTemp273) - fTemp342))) + ((0.000427259132f * (fTemp428 + fTemp172)) + ((0.000305185094f * (fTemp89 + (fTemp455 + (fTemp475 - fTemp514)))) + ((0.00186162908f * (fTemp162 + fTemp123)) + ((0.00265511032f * (fTemp24 + fTemp380)) + ((0.000793481246f * (fTemp438 + fTemp183)) + ((0.000518814661f * (fTemp451 - fTemp153)) + ((0.00122074038f * (fTemp179 + fTemp461)) + ((0.00268562883f * (fTemp20 + fTemp247)) + ((0.000885036774f * (fTemp19 - fTemp191)) + ((0.00119022187f * ((fTemp398 + fTemp377) - fTemp230)) + ((0.00311288796f * (fTemp17 + fTemp493)) + ((0.00140385143f * (fTemp72 - fTemp14)) + ((0.000183111057f * (fTemp13 + fTemp391)) + ((0.00341807306f * (fTemp0 + fTemp195)) + ((0.0035401471f * (fTemp103 + fTemp388)) + ((0.00396740623f * fTemp872) + ((0.00384533219f * (fTemp205 + fTemp416)) + ((0.00338755455f * (fTemp207 + fTemp363)) + ((0.00320444349f * (fTemp198 + (fTemp165 + (fTemp400 - fTemp357)))) + ((0.00274666585f * (fTemp178 + fTemp208)) + ((0.00326548051f * (fTemp110 + fTemp487)) + ((0.000274666585f * (fTemp128 + (fTemp378 - fTemp200))) + ((0.00439466536f * (fTemp406 + fTemp216)) + ((0.00347911008f * (fTemp484 - fTemp234)) + ((0.0077517014f * (fTemp67 - fTemp499)) + ((0.0100711081f * (fTemp325 - fTemp255)) + ((0.00799584948f * (fTemp79 - fTemp258)) + ((0.0170903653f * (fTemp95 + fTemp508)) + ((0.011383404f * ((fTemp78 - fTemp287) - fTemp492)) + ((0.003234962f * (fTemp510 + fTemp218)) + ((0.00885036774f * fTemp847) + (0.00106814783f * fTemp773)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00518814661f * fTemp2) + ((0.00643940549f * fTemp3) + ((0.0195928831f * fTemp5) + ((0.00875881221f * fTemp7) + ((0.00189214759f * fTemp204) + ((0.00170903653f * fTemp228) + ((0.00589007232f * fTemp376) + ((0.00714133121f * fTemp384) + ((0.00656147953f * fTemp355) + ((0.00415051728f * fTemp422) + ((0.00442518387f * fTemp92) + ((0.00619525742f * fTemp440) + ((0.0074159978f * fTemp235) + ((0.00491348002f * fTemp423) + ((0.00653096102f * fTemp465) + ((0.00988799706f * fTemp526) + ((0.0126041444f * fTemp174) + ((0.0122989593f * fTemp175) + ((0.00787377544f * fTemp445) + ((0.00427259132f * fTemp401) + ((0.00573747978f * fTemp253) + ((0.00637836847f * fTemp254) + ((0.0137638478f * fTemp257) + ((0.00509659108f * fTemp260) + ((0.0108340709f * fTemp261) + ((0.0149540696f * fTemp262) + ((0.012878811f * fTemp263) + ((0.00805688649f * fTemp264) + ((0.00854518265f * fTemp265) + ((0.0163579211f * fTemp497) + ((0.0312814713f * fTemp180) + ((0.0242316965f * fTemp362) + ((0.00692770164f * fTemp266) + ((0.0214850307f * fTemp270) + ((0.0475173183f * fTemp271) + ((0.0572832413f * fTemp370) + ((0.042115543f * fTemp186) + ((0.0142521439f * fTemp188) + ((0.00866725668f * fTemp274) + ((0.0159001444f * fTemp169) + ((0.0150761437f * fTemp32) + ((0.00836207159f * fTemp275) + ((0.028931547f * fTemp281) + ((0.0580156855f * fTemp215) + ((0.0778527185f * fTemp468) + ((0.0830713809f * fTemp282) + ((0.0695822015f * fTemp283) + ((0.0359202847f * fTemp477) + ((0.0531022064f * fTemp288) + ((0.0663472414f * fTemp289) + ((0.0730918273f * fTemp290) + ((0.0719931647f * fTemp505) + ((0.0842005685f * fTemp511) + ((0.0954008624f * fTemp291) + ((0.0858180523f * fTemp292) + ((0.0592669472f * fTemp293) + ((0.0177922919f * fTemp294) + ((0.0446790978f * fTemp39) + ((0.086733602f * fTemp40) + ((0.108829007f * fTemp41) + ((0.106173895f * fTemp42) + ((0.0708944947f * fTemp214) + ((0.00482192449f * fTemp43) + ((0.00473036896f * fTemp47) + ((0.109164707f * fTemp48) + ((0.153721735f * fTemp49) + ((0.124393448f * fTemp295) + ((0.00735496078f * fTemp213) + ((0.0141911069f * fTemp296) + ((0.0253608823f * fTemp430) + ((0.110080265f * fTemp297) + ((0.0952177495f * fTemp298) + ((0.145786926f * fTemp299) + ((0.0972930118f * fTemp300) + ((0.104251228f * fTemp301) + ((0.0585955381f * fTemp302) + ((0.261696219f * fTemp303) + ((0.555497885f * fTemp304) + ((0.72850734f * fTemp305) + ((0.50376904f * fTemp306) + ((0.00503555406f * fTemp308) + ((0.0214545131f * fTemp309) + ((0.0280770287f * fTemp509) + ((0.0249336231f * fTemp310) + ((0.0164189581f * fTemp311) + ((0.00802636798f * fTemp312) + (fTemp548 + ((0.0115054781f * fTemp59) + ((0.00964384899f * fTemp60) + ((0.0129703665f * fTemp63) + ((0.0197454765f * fTemp64) + ((0.012817774f * fTemp65) + ((0.00479140598f * fTemp321) + ((0.00393688772f * fTemp322) + ((0.00595110934f * fTemp70) + ((0.012939848f * fTemp73) + ((0.01617481f * fTemp74) + ((0.0138554033f * fTemp75) + ((0.00720236823f * fTemp76) + ((0.00457777642f * fTemp82) + ((0.00430310983f * fTemp83) + ((0.00250251777f * fTemp327) + (((0.00198370311f * (fTemp513 + (fTemp354 + (((((fTemp62 - fTemp280) - fTemp143) - fTemp190) - fTemp201) - fTemp187)))) + ((0.0019226661f * (fTemp231 + (fTemp251 - fTemp396))) + ((0.00109866634f * (fTemp98 - fTemp433)) + ((0.00115970336f * (fTemp87 - fTemp107)) + ((0.000762962736f * ((fTemp366 + (((fTemp381 + fTemp104) - fTemp482) - fTemp458)) - fTemp106)) + ((0.000213629566f * (fTemp337 + (fTemp371 + ((fTemp379 + fTemp386) - fTemp170)))) + ((0.00112918485f * (fTemp345 + (fTemp365 + ((fTemp443 + fTemp146) - fTemp373)))) + ((0.00134281442f * (fTemp360 - fTemp166)) + ((0.00167851802f * ((fTemp459 + (fTemp313 - fTemp421)) - fTemp118)) + ((0.00317392498f * ((((fTemp84 - fTemp439) - fTemp8) - fTemp116) - fTemp346)) + ((0.000244148076f * (fTemp390 - fTemp97)) + ((0.00158696249f * (fTemp372 + (fTemp456 + fTemp154))) + ((0.0019531846f * ((fTemp99 + (fTemp121 - fTemp227)) - fTemp125)) + ((0.00143436994f * (fTemp403 + (fTemp409 - fTemp156))) + ((0.00283822138f * (fTemp130 + (fTemp410 + ((fTemp248 - fTemp160) - fTemp431)))) + ((0.00381481368f * (fTemp131 + (fTemp419 + (fTemp69 - fTemp385)))) + ((0.00390636921f * (fTemp405 + fTemp94)) + ((3.05185094e-05f * (((fTemp478 + (fTemp452 + fTemp105)) - fTemp446) - fTemp408)) + ((0.00201422162f * (((fTemp100 - fTemp462) - fTemp120) - fTemp393)) + ((0.00262459181f * (((fTemp203 - fTemp196) - fTemp182) - fTemp102)) + ((0.00454725791f * (fTemp338 - fTemp109)) + ((0.00228888821f * (fTemp150 + fTemp66)) + ((0.00054933317f * (((fTemp158 + fTemp335) - fTemp177) - fTemp155)) + ((0.00125125889f * ((fTemp407 + fTemp496) - fTemp427)) + ((0.00177007355f * (((fTemp212 + fTemp81) - fTemp133) - fTemp163)) + ((0.00057985168f * ((fTemp351 - fTemp147) - fTemp425)) + ((0.00247199927f * ((fTemp515 - fTemp464) - fTemp27)) + ((0.000488296151f * (fTemp364 + ((fTemp816 - fTemp483) - fTemp348))) + ((0.000396740623f * ((fTemp250 - fTemp193) - fTemp122)) + ((0.00204474013f * (fTemp463 - fTemp93)) + ((0.0038758507f * ((fTemp71 - fTemp453) - fTemp521)) + ((0.000366222113f * ((fTemp209 - fTemp138) - fTemp424)) + ((0.00216681417f * (fTemp414 + ((fTemp474 + fTemp86) - fTemp171))) + ((0.000976592302f * ((fTemp495 - fTemp415) - fTemp472)) + ((0.00213629566f * (fTemp12 + (fTemp369 - fTemp206))) + ((0.00277718436f * (fTemp168 - fTemp10)) + ((0.00219733268f * (fTemp192 - fTemp211)) + ((0.00299081393f * ((fTemp233 - fTemp210) - fTemp137)) + ((0.00372325815f * (fTemp252 - fTemp339)) + ((0.000701925717f * (fTemp450 - fTemp358)) + ((0.00534073915f * (fTemp404 - fTemp368)) + ((0.00363170262f * (fTemp176 + (fTemp320 - fTemp412))) + ((0.00280770287f * (fTemp232 + fTemp111)) + ((0.0042115543f * (fTemp259 - fTemp494)) + ((0.00271614734f * (fTemp436 + fTemp199)) + ((0.0142216254f * (fTemp256 + fTemp33)) + ((0.0271919928f * (fTemp429 - fTemp223)) + ((0.0054933317f * (fTemp326 - fTemp319)) + ((0.00234992523f * (fTemp68 + fTemp85)) + ((0.00601214636f * fTemp549) + (0.00405896176f * fTemp612))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00155644398f * (fTemp88 + (fTemp114 - fTemp226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow60 ? (iSlow62 ? (((0.0119022187f * fTemp0) + ((0.0208441429f * fTemp402) + ((0.0151982177f * fTemp219) + ((0.0147709586f * fTemp6) + ((0.0365306549f * fTemp7) + ((0.41590625f * fTemp223) + ((0.00292977691f * fTemp154) + ((0.00216681417f * fTemp8) + ((0.000671407208f * fTemp11) + ((0.00213629566f * fTemp483) + ((0.00103762932f * fTemp411) + ((0.00378429517f * fTemp476) + ((0.00311288796f * fTemp133) + ((0.00598162785f * fTemp149) + ((0.00726340525f * fTemp18) + ((0.00781273842f * fTemp19) + ((0.00759910885f * fTemp187) + ((0.000610370189f * fTemp179) + ((0.00170903653f * fTemp446) + ((0.00405896176f * fTemp443) + ((0.00460829493f * fTemp364) + ((0.00509659108f * fTemp170) + ((0.00534073915f * fTemp438) + ((0.00506607257f * fTemp166) + ((0.00433362834f * fTemp434) + (fTemp736 + ((0.00326548051f * fTemp162) + ((0.00607318338f * fTemp97) + ((0.00637836847f * fTemp426) + ((0.00665303506f * fTemp156) + ((0.00674459059f * fTemp163) + ((0.00650044251f * fTemp161) + ((0.00601214636f * fTemp140) + ((0.00546281319f * fTemp115) + ((0.00497451704f * fTemp427) + ((0.00479140598f * fTemp121) + ((0.00424207281f * fTemp344) + ((0.00762962736f * fTemp148) + ((0.00787377544f * fTemp145) + ((0.00390636921f * fTemp410) + ((0.00115970336f * fTemp376) + ((0.00442518387f * fTemp393) + ((0.00552385021f * fTemp409) + ((0.00454725791f * fTemp375) + ((0.00482192449f * fTemp354) + ((0.00360118411f * fTemp383) + ((0.00305185094f * fTemp353) + ((0.00357066561f * fTemp374) + ((0.00234992523f * fTemp365) + ((0.00210577715f * fTemp360) + ((0.00274666585f * fTemp333) + ((0.00668355357f * fTemp496) + ((0.00680562761f * fTemp416) + ((0.0057985168f * fTemp385) + ((0.0536210202f * fTemp270) + ((0.0931424946f * fTemp271) + ((0.0767845735f * fTemp370) + ((0.0128482925f * fTemp186) + ((0.0117496261f * fTemp501) + ((0.0279854741f * fTemp488) + ((0.0366832502f * fTemp471) + ((0.0378124341f * fTemp279) + ((0.0329294726f * fTemp280) + ((0.0238654744f * fTemp281) + ((0.0204168838f * fTemp215) + ((0.0168156996f * fTemp468) + ((0.0136417737f * fTemp282) + ((0.0361644328f * fTemp289) + ((0.0593279824f * fTemp290) + ((0.040070802f * fTemp505) + ((0.0103762932f * fTemp479) + ((0.0435499139f * fTemp35) + ((0.0268257707f * fTemp36) + ((0.0126041444f * fTemp42) + ((0.0292062145f * fTemp46) + ((0.0890224949f * fTemp47) + ((0.0748008639f * fTemp48) + ((0.021332439f * fTemp297) + ((0.106265448f * fTemp298) + ((0.0471205786f * fTemp299) + ((0.0319528803f * fTemp53) + ((0.197668388f * fTemp159) + ((0.283669531f * fTemp303) + ((0.231604964f * fTemp304) + ((0.550889611f * fTemp56) + (fTemp57 + ((0.872127473f * fTemp144) + ((0.121280558f * fTemp508) + ((0.071901612f * fTemp308) + ((0.0800195336f * fTemp309) + ((0.050263986f * fTemp509) + ((0.000823999755f * fTemp310) + ((0.0203863643f * fTemp58) + ((0.0332651772f * fTemp59) + ((0.0148930326f * fTemp60) + ((0.017853329f * fTemp62) + ((0.0115054781f * fTemp63) + (fTemp683 + ((0.00439466536f * fTemp321) + ((0.0122074038f * fTemp322) + ((0.0103457747f * fTemp68) + ((0.0061342204f * fTemp135) + ((0.0205084383f * fTemp323) + ((0.0265511032f * fTemp324) + ((0.0212408826f * fTemp325) + ((0.0121768853f * fTemp77) + ((0.0200506616f * fTemp507) + ((0.0109561449f * fTemp78) + ((0.00662251655f * fTemp83) + ((0.0118717002f * fTemp327) + ((0.00531022064f * fTemp85) + ((0.00894192327f * fTemp331) + ((0.0134586627f * fTemp332) + ((0.00241096225f * (fTemp334 + (fTemp403 + fTemp167))) + ((0.001617481f * (fTemp107 + ((fTemp255 - fTemp474) - fTemp225))) + ((0.00177007355f * (fTemp336 + fTemp337)) + ((0.00198370311f * (fTemp106 + fTemp432)) + ((0.00155644398f * (fTemp114 + ((fTemp197 + (fTemp10 - fTemp493)) - fTemp459))) + ((0.00280770287f * (fTemp366 + fTemp23)) + ((0.00329599902f * (fTemp371 + (fTemp125 - fTemp2))) + ((0.00363170262f * (fTemp113 + (fTemp12 + fTemp198))) + ((0.003234962f * (fTemp346 + fTemp108)) + ((0.00302133244f * (fTemp124 + (fTemp22 - fTemp490))) + ((0.00436414685f * (fTemp361 + (fTemp529 - fTemp14))) + ((0.00500503555f * (fTemp389 + (fTemp112 + (fTemp120 + fTemp316)))) + ((0.00253303628f * (fTemp399 + fTemp157)) + ((0.0025940733f * (fTemp127 + fTemp351)) + ((0.0019226661f * (fTemp130 + fTemp470)) + ((0.00244148076f * (fTemp405 + fTemp137)) + ((0.00576799829f * (fTemp408 + (fTemp89 - fTemp190))) + ((0.00448622089f * (fTemp139 + (fTemp150 + fTemp382))) + ((0.00466933195f * (fTemp102 + fTemp152)) + ((0.00457777642f * (fTemp340 + (fTemp418 - fTemp435))) + ((0.00344859157f * (fTemp142 + fTemp146)) + ((0.00125125889f * (fTemp338 + fTemp172)) + ((0.00659199804f * (fTemp417 + (fTemp20 + (fTemp49 - fTemp349)))) + ((0.00634784997f * (fTemp109 + fTemp143)) + ((0.00415051728f * (fTemp100 + fTemp155)) + ((0.00396740623f * (fTemp420 + (fTemp191 - fTemp138))) + ((0.00622577593f * (fTemp428 + fTemp283)) + ((0.00503555406f * (fTemp425 + fTemp185)) + ((0.00158696249f * (fTemp131 + fTemp183)) + ((0.00277718436f * (fTemp26 - fTemp226)) + ((0.00350962859f * (fTemp24 + fTemp442)) + ((0.00140385143f * (fTemp451 + fTemp400)) + ((0.00189214759f * (fTemp122 - fTemp110)) + ((0.00112918485f * (fTemp151 - fTemp462)) + ((0.00173955504f * (fTemp164 + fTemp521)) + ((0.00332651753f * (fTemp182 + (fTemp424 + (fTemp168 - fTemp379)))) + ((0.0012817774f * (fTemp230 - fTemp208)) + ((0.00283822138f * (fTemp192 - fTemp96)) + ((0.00228888821f * (fTemp407 + fTemp61)) + ((0.000305185094f * (fTemp347 + ((fTemp209 - fTemp387) - fTemp217))) + ((3.05185094e-05f * (fTemp202 + (fTemp227 - fTemp178))) + ((0.00207525864f * (fTemp482 + (fTemp116 + (fTemp453 + fTemp412)))) + ((0.000732444227f * (fTemp486 + (fTemp207 - fTemp104))) + ((0.000152592547f * (fTemp464 + (fTemp103 + (fTemp480 - fTemp363)))) + ((0.00164799951f * (fTemp343 + fTemp448)) + ((0.00054933317f * (fTemp91 + (fTemp329 - fTemp254))) + ((0.000122074038f * (fTemp318 - fTemp204)) + ((0.00735496078f * (fTemp461 + fTemp218)) + ((0.00772118289f * (fTemp449 - fTemp498)) + ((0.0120242927f * (fTemp429 + fTemp32)) + ((0.0132755516f * (fTemp503 + fTemp33)) + ((0.000488296151f * (fTemp67 - fTemp41)) + ((0.0125125889f * (fTemp84 - fTemp82)) + (0.00256355479f * fTemp774))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0123294778f * fTemp1) + ((0.0216376241f * fTemp3) + ((0.00750755332f * fTemp220) + ((0.0230719931f * fTemp221) + ((0.0725730136f * fTemp222) + ((0.00619525742f * fTemp224) + ((0.00488296151f * fTemp460) + ((0.0019531846f * fTemp368) + ((0.00100711081f * fTemp173) + ((0.00567644276f * fTemp391) + ((0.00866725668f * fTemp200) + ((0.00912503432f * fTemp514) + ((0.0054933317f * fTemp211) + ((0.00347911008f * fTemp413) + ((0.00204474013f * fTemp466) + ((0.00537125766f * fTemp358) + ((0.000640888698f * fTemp129) + ((0.000793481246f * fTemp128) + ((0.00131229591f * fTemp439) + ((0.000274666585f * fTemp489) + ((0.00268562883f * fTemp228) + ((0.00122074038f * fTemp90) + ((0.000427259132f * fTemp384) + (fTemp745 + ((0.0127262184f * fTemp406) + ((0.00469985045f * fTemp495) + ((0.00982696004f * fTemp369) + ((0.00817896053f * fTemp111) + ((0.00222785119f * fTemp515) + ((0.00320444349f * fTemp436) + ((0.00521866512f * fTemp233) + ((0.00585955381f * fTemp234) + ((0.00714133121f * fTemp236) + ((0.0125736259f * fTemp502) + ((0.0129093295f * fTemp237) + ((0.0112918485f * fTemp238) + (fTemp245 + ((0.0110477004f * fTemp246) + ((0.0127872555f * fTemp247) + ((0.00729392376f * fTemp487) + ((0.00335703604f * fTemp516) + ((0.00143436994f * fTemp216) + ((0.0115970336f * fTemp423) + ((0.0135807367f * fTemp465) + ((0.0100100711f * fTemp457) + ((0.00930814538f * fTemp175) + ((0.01126133f * fTemp445) + ((0.00955229346f * fTemp248) + ((0.0058290353f * fTemp250) + ((0.00949125644f * fTemp251) + ((0.0140385143f * fTemp252) + ((0.0168462172f * fTemp401) + ((0.0137943663f * fTemp404) + ((0.00717184972f * fTemp253) + ((0.00915555283f * fTemp256) + ((0.0244148076f * fTemp257) + ((0.0397961363f * fTemp258) + ((0.0433057658f * fTemp259) + ((0.0409558415f * fTemp260) + ((0.0294503625f * fTemp261) + ((0.0154118473f * fTemp262) + ((0.0157170333f * fTemp263) + ((0.0152592547f * fTemp264) + ((0.0180059206f * fTemp265) + ((0.000457777642f * fTemp497) + ((0.0300607327f * fTemp266) + ((0.0334788039f * fTemp506) + ((0.0379039906f * fTemp267) + ((0.0231330302f * fTemp268) + ((0.022461623f * fTemp269) + ((0.0262154005f * fTemp520) + ((0.0375072472f * fTemp28) + ((0.0273140669f * fTemp29) + ((0.0684530139f * fTemp188) + ((0.0993377492f * fTemp30) + ((0.0610980578f * fTemp31) + ((0.00616473891f * fTemp95) + ((0.00299081393f * fTemp272) + ((0.0196539201f * fTemp273) + ((0.0175786614f * fTemp274) + ((0.004852443f * fTemp275) + ((0.0118106632f * fTemp276) + ((0.0109256264f * fTemp277) + ((0.0395214707f * fTemp510) + ((0.0743430927f * fTemp284) + ((0.100527972f * fTemp285) + ((0.104495376f * fTemp286) + ((0.0761131644f * fTemp287) + ((0.0209662169f * fTemp288) + ((0.00695822015f * fTemp511) + ((0.0538041331f * fTemp291) + ((0.0791039765f * fTemp292) + ((0.0763878301f * fTemp293) + ((0.0650349408f * fTemp294) + ((0.0657673851f * fTemp484) + ((0.0641193911f * fTemp34) + ((0.0533158369f * fTemp441) + ((0.022766808f * fTemp485) + (fTemp758 + ((0.0077517014f * fTemp214) + ((0.0258491784f * fTemp43) + ((0.053132724f * fTemp44) + ((0.0394909531f * fTemp45) + ((0.0817896053f * fTemp295) + ((0.143620104f * fTemp213) + ((0.157872245f * fTemp296) + ((0.0625629425f * fTemp430) + ((0.0535905026f * fTemp300) + ((0.149906918f * fTemp301) + ((0.207098603f * fTemp302) + ((0.161412403f * fTemp50) + ((0.16101566f * fTemp51) + ((0.0489516892f * fTemp52) + ((0.0202337727f * fTemp305) + ((0.367992193f * fTemp306) + ((0.662739933f * fTemp307) + ((0.669759214f * fTemp54) + ((0.153294474f * fTemp55) + ((0.047090061f * fTemp311) + ((0.0741294622f * fTemp312) + ((0.0463881344f * fTemp313) + ((0.00778221991f * fTemp199) + ((0.0246284381f * fTemp314) + ((0.0137333293f * fTemp315) + ((0.0108035523f * fTemp65) + ((0.00653096102f * fTemp66) + ((0.00372325815f * fTemp320) + ((0.0136112552f * fTemp70) + ((0.0205999948f * fTemp71) + ((0.00988799706f * fTemp72) + ((0.0226142164f * fTemp73) + ((0.0252998453f * fTemp74) + ((0.0173650328f * fTemp75) + ((0.0124515519f * fTemp80) + ((0.0163884405f * fTemp81) + ((0.0107119968f * fTemp87) + ((0.00790429395f * fTemp328) + (((((0.00167851802f * (fTemp440 - fTemp98)) + (((0.00149540696f * (fTemp357 - fTemp345)) + ((0.00186162908f * ((((fTemp241 + fTemp169) - fTemp437) - fTemp455) - fTemp352)) + ((0.00369273964f * ((((fTemp165 + (fTemp86 - fTemp395)) - fTemp210) - fTemp452) - fTemp118)) + ((0.0051576281f * (fTemp419 - fTemp390)) + ((0.00463881344f * ((fTemp40 - fTemp492) - fTemp372)) + ((0.00399792474f * (((fTemp463 + (fTemp123 - fTemp469)) - fTemp119) - fTemp394)) + ((0.00265511032f * (((fTemp397 + fTemp76) - fTemp27) - fTemp396)) + ((0.00411999878f * ((fTemp38 - fTemp373) - fTemp134)) + ((0.00518814661f * ((fTemp377 + fTemp386) - fTemp136)) + ((0.000183111057f * (fTemp355 + fTemp205)) + ((0.00427259132f * (((fTemp171 + (fTemp203 + fTemp491)) - fTemp16) - fTemp132)) + ((0.00296029542f * (fTemp278 - fTemp458)) + ((0.00262459181f * ((fTemp160 + fTemp499) - fTemp177)) + ((0.000762962736f * (((fTemp69 - fTemp398) - fTemp472) - fTemp359)) + ((0.00543229468f * (fTemp342 + (fTemp105 - fTemp4))) + ((0.00555436872f * (fTemp350 + fTemp319)) + ((0.00381481368f * ((fTemp174 - fTemp15) - fTemp189)) + ((0.00445570238f * ((fTemp235 - fTemp348) - fTemp17)) + ((0.000244148076f * (fTemp229 + fTemp126)) + ((0.0042115543f * (fTemp414 - fTemp392)) + ((0.00308236945f * (fTemp13 + fTemp421)) + ((0.00119022187f * (fTemp433 + fTemp559)) + ((0.0022583697f * (fTemp242 - fTemp454)) + ((0.0035401471f * (fTemp526 - fTemp195)) + ((0.00180059206f * ((fTemp467 + fTemp37) - fTemp153)) + ((0.000213629566f * (fTemp201 - fTemp193)) + ((0.000396740623f * (fTemp93 - fTemp367)) + ((0.000885036774f * ((fTemp456 + fTemp181) - fTemp356)) + ((0.0038758507f * ((fTemp422 - fTemp478) - fTemp196)) + ((9.15555283e-05f * ((fTemp378 - fTemp141) - fTemp450)) + ((0.00057985168f * (fTemp381 + fTemp475)) + ((0.000976592302f * (fTemp158 + fTemp473)) + ((0.00738547929f * (fTemp147 + fTemp239)) + ((0.00183111057f * (fTemp415 + fTemp79)) + ((0.00366222113f * (fTemp194 + fTemp240)) + ((0.0083925901f * (fTemp494 + (fTemp249 + fTemp5))) + ((0.00997955259f * (fTemp500 + fTemp326)) + ((0.00943021942f * (fTemp477 - fTemp180)) + ((0.0104373302f * (fTemp362 + fTemp212)) + (0.000366222113f * fTemp681)))))))))))))))))))))))))))))))))))))))) + (0.00152592547f * (fTemp504 - fTemp101)))) + (0.00201422162f * (((fTemp444 + (fTemp92 - fTemp232)) - fTemp341) - fTemp231))) + (0.00271614734f * (fTemp94 - fTemp513))) + (0.00231940672f * (fTemp243 - fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.0686056092f * fTemp0) + ((0.659840703f * fTemp1) + ((0.0434583575f * fTemp3) + ((0.0673543513f * fTemp220) + ((0.0672017559f * fTemp4) + ((0.0302743614f * fTemp223) + ((0.00115970336f * fTemp184) + ((0.0028992584f * fTemp208) + ((0.00408948027f * fTemp467) + ((0.00460829493f * fTemp110) + ((0.013000885f * fTemp388) + ((0.00683614612f * fTemp462) + ((0.00256355479f * fTemp178) + ((0.00131229591f * fTemp116) + ((0.00299081393f * fTemp367) + ((0.00686666463f * fTemp464) + ((0.0115970336f * fTemp486) + ((0.0102847377f * fTemp452) + ((0.00567644276f * fTemp348) + ((0.00399792474f * fTemp442) + ((0.00347911008f * fTemp157) + ((0.00463881344f * fTemp437) + ((0.00534073915f * fTemp183) + ((0.00561540574f * fTemp398) + ((0.00589007232f * fTemp347) + ((0.00643940549f * fTemp197) + ((0.00616473891f * fTemp407) + ((0.00598162785f * fTemp192) + ((0.0058290353f * fTemp168) + ((0.00778221991f * fTemp196) + ((0.00802636798f * fTemp476) + ((0.00695822015f * fTemp454) + (fTemp860 + ((0.0154118473f * fTemp414) + ((0.0131534776f * fTemp14) + ((0.0157780703f * fTemp228) + ((0.0137028107f * fTemp229) + ((0.00585955381f * fTemp424) + ((0.0115359966f * fTemp521) + ((0.0111697745f * fTemp90) + ((0.0112918485f * fTemp123) + ((0.011444441f * fTemp459) + ((0.00946073793f * fTemp230) + ((0.00512710959f * fTemp18) + ((0.00439466536f * fTemp19) + ((0.00595110934f * fTemp185) + ((0.0115665151f * fTemp359) + ((0.0108340709f * fTemp122) + ((0.00933866389f * fTemp458) + ((0.0121158483f * fTemp446) + ((0.0122379223f * fTemp146) + ((0.0108645894f * fTemp170) + ((0.00921658985f * fTemp434) + ((0.00827051606f * fTemp26) + ((0.0100100711f * fTemp428) + ((0.00949125644f * fTemp156) + ((0.00964384899f * fTemp376) + ((0.00982696004f * fTemp338) + ((0.00930814538f * fTemp119) + ((0.00894192327f * fTemp393) + ((0.00842310861f * fTemp408) + ((0.00759910885f * fTemp396) + ((0.0077517014f * fTemp354) + ((0.00790429395f * fTemp112) + ((0.00851466414f * fTemp389) + ((0.00875881221f * fTemp361) + ((0.00897244178f * fTemp383) + ((0.0107119968f * fTemp371) + ((0.0106814783f * fTemp366) + ((0.00973540451f * fTemp114) + ((0.00955229346f * fTemp345) + ((0.0074159978f * fTemp107) + ((0.00671407208f * fTemp98) + ((0.006469924f * fTemp231) + ((0.00302133244f * fTemp50) + ((0.0111392559f * fTemp51) + ((0.00308236945f * fTemp53) + ((0.0102237007f * fTemp144) + ((0.0419324338f * fTemp508) + ((0.0412305072f * fTemp308) + ((0.0315256193f * fTemp309) + ((0.00445570238f * fTemp509) + ((0.0589617603f * fTemp59) + ((0.0704977587f * fTemp60) + ((0.0178228095f * fTemp66) + ((0.0505996905f * fTemp67) + ((0.0734580532f * fTemp316) + ((0.0815149397f * fTemp318) + ((0.0725730136f * fTemp319) + ((0.0445875414f * fTemp320) + ((0.0218512528f * fTemp321) + ((0.00390636921f * fTemp70) + ((0.0864894539f * fTemp71) + ((0.104831077f * fTemp72) + ((0.0931119695f * fTemp135) + ((0.0352793969f * fTemp323) + ((0.076967679f * fTemp507) + ((0.109714039f * fTemp78) + ((0.127048552f * fTemp79) + ((0.0853907913f * fTemp80) + ((0.0732139051f * fTemp81) + ((0.143040255f * fTemp87) + ((0.993102789f * fTemp328) + (fTemp329 + ((0.683675647f * fTemp331) + ((0.282601386f * fTemp332) + ((0.00610370189f * (fTemp333 + fTemp149)) + ((0.00625629444f * (fTemp334 + fTemp411)) + ((0.00698873866f * (fTemp101 + fTemp478)) + ((0.00781273842f * (fTemp336 + (fTemp529 + (fTemp403 + fTemp195)))) + ((0.00881984923f * (fTemp106 + fTemp373)) + ((0.00924710836f * (fTemp337 + fTemp340)) + ((0.00991851557f * (fTemp352 + (fTemp227 + (fTemp489 - fTemp8)))) + ((0.0104068117f * (fTemp365 + fTemp344)) + ((0.0104373302f * (fTemp118 + fTemp438)) + ((0.0100711081f * (fTemp374 + (fTemp97 + fTemp164))) + ((0.00967436749f * (fTemp346 + fTemp115)) + ((0.00823999755f * (fTemp390 + fTemp130)) + ((0.00769066438f * (fTemp372 + fTemp375)) + ((0.00772118289f * (fTemp394 + fTemp125)) + ((0.00753807183f * (fTemp399 + fTemp191)) + ((0.0087282937f * (fTemp405 + fTemp134)) + ((0.00833155308f * (fTemp341 + fTemp162)) + ((0.00866725668f * (fTemp139 + fTemp24)) + ((0.00912503432f * (fTemp102 + fTemp23)) + ((0.00994903408f * (fTemp355 + fTemp455)) + ((0.00985747855f * (fTemp384 + (fTemp132 + fTemp166))) + ((0.0093691824f * (fTemp417 + fTemp425)) + ((0.00988799706f * (fTemp109 + fTemp17)) + ((0.0105288858f * (fTemp100 + fTemp150)) + ((0.0103762932f * (fTemp121 + (fTemp13 + fTemp339))) + ((0.00952177495f * (fTemp140 + fTemp167)) + ((0.00799584948f * (fTemp431 + fTemp418)) + ((0.0090334788f * (fTemp22 - fTemp453)) + ((0.0126651814f * (fTemp342 + (fTemp52 - fTemp404))) + ((0.00708029419f * (fTemp16 + (fTemp472 - fTemp204))) + ((0.00384533219f * (fTemp15 + (fTemp482 - fTemp181))) + ((0.00735496078f * (fTemp133 - fTemp10)) + ((0.00628681295f * (fTemp12 + fTemp153)) + ((0.00570696127f * (fTemp201 + fTemp221)) + ((0.00427259132f * (fTemp206 + fTemp439)) + ((0.00479140598f * (fTemp363 - fTemp224)) + ((0.00262459181f * (fTemp217 - fTemp444)) + ((0.0484939106f * (fTemp199 - fTemp54)) + (((0.00573747978f * fTemp775) + (0.00854518265f * fTemp735)) + (0.00592059083f * fTemp793)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0889919773f * fTemp2) + ((0.141300693f * fTemp218) + ((0.0368663594f * fTemp219) + ((0.0606707968f * fTemp5) + ((0.11447493f * fTemp6) + ((0.11770989f * fTemp222) + ((0.00665303506f * fTemp447) + ((0.00607318338f * fTemp493) + (fTemp870 + ((0.00424207281f * fTemp387) + ((0.00381481368f * fTemp415) + ((0.00357066561f * fTemp154) + ((0.00369273964f * fTemp392) + ((0.00317392498f * fTemp391) + ((0.00244148076f * fTemp200) + ((0.001617481f * fTemp165) + ((0.00152592547f * fTemp490) + ((0.000946073793f * fTemp421) + ((0.000823999755f * fTemp413) + (fTemp654 + ((0.00234992523f * fTemp474) + ((0.00314340647f * fTemp456) + ((0.00341807306f * fTemp225) + ((0.00274666585f * fTemp226) + ((0.00146488845f * fTemp435) + ((0.000366222113f * fTemp190) + ((0.00106814783f * fTemp105) + ((0.00204474013f * fTemp379) + ((0.00241096225f * fTemp473) + ((0.00186162908f * fTemp378) + ((0.00155644398f * fTemp91) + ((0.0038758507f * fTemp138) + ((0.00360118411f * fTemp171) + ((0.00350962859f * fTemp160) + ((0.004852443f * fTemp158) + ((0.00524918362f * fTemp104) + (fTemp830 + (fTemp561 + ((0.000854518265f * fTemp356) + ((0.00527970213f * fTemp343) + ((0.00494399853f * fTemp207) + ((0.00506607257f * fTemp205) + ((0.000885036774f * fTemp103) + ((0.00738547929f * fTemp357) + ((0.00863673817f * fTemp232) + ((0.00909451582f * fTemp496) + ((0.0109256264f * fTemp448) + ((0.0111087374f * fTemp449) + ((0.0101626636f * fTemp436) + ((0.0102542192f * fTemp419) + ((0.012878811f * fTemp440) + ((0.0136417737f * fTemp499) + ((0.0138859218f * fTemp236) + ((0.0133671071f * fTemp502) + ((0.0133365886f * fTemp237) + ((0.0139164403f * fTemp238) + ((0.014679403f * fTemp239) + ((0.0148014771f * fTemp504) + ((0.0143742179f * fTemp241) + ((0.0141300699f * fTemp242) + ((0.0142826624f * fTemp243) + ((0.0149540696f * fTemp412) + ((0.0157475509f * fTemp143) + ((0.0159001444f * fTemp416) + ((0.0154728843f * fTemp470) + ((0.0149845881f * fTemp244) + ((0.013061922f * fTemp247) + (fTemp787 + (fTemp533 + ((0.0129093295f * fTemp174) + ((0.0125125889f * fTemp175) + ((0.0119327372f * fTemp248) + (fTemp665 + ((0.011383404f * fTemp252) + ((0.0181279946f * fTemp255) + ((0.0198980682f * fTemp256) + ((0.0214545131f * fTemp257) + ((0.0222479943f * fTemp258) + ((0.0224005859f * fTemp259) + ((0.0220648833f * fTemp262) + ((0.0217291787f * fTemp263) + ((0.021271402f * fTemp264) + ((0.0205389578f * fTemp265) + ((0.0195928831f * fTemp497) + ((0.0191351064f * fTemp429) + ((0.0216071047f * fTemp266) + ((0.0217596982f * fTemp506) + ((0.0211188085f * fTemp267) + ((0.0196234025f * fTemp268) + ((0.018097477f * fTemp269) + ((0.0178838465f * fTemp520) + ((0.0189519953f * fTemp28) + ((0.0200506616f * fTemp29) + ((0.0208441429f * fTemp385) + ((0.017853329f * fTemp370) + ((0.0159611814f * fTemp186) + ((0.0148930326f * fTemp188) + ((0.0135196997f * fTemp30) + ((0.0106509598f * fTemp95) + ((0.0118717002f * fTemp272) + (fTemp871 + ((0.0134281442f * fTemp32) + ((0.0155644398f * fTemp275) + ((0.0138248848f * fTemp278) + ((0.0145268105f * fTemp471) + ((0.0154423658f * fTemp280) + ((0.0169988107f * fTemp215) + ((0.0173650328f * fTemp468) + ((0.0187383648f * fTemp477) + ((0.0222174749f * fTemp510) + (fTemp851 + ((0.0262154005f * fTemp285) + ((0.0255439933f * fTemp286) + ((0.0242316965f * fTemp287) + ((0.0234382153f * fTemp288) + ((0.0245368816f * fTemp289) + ((0.0270393994f * fTemp290) + ((0.0281380657f * fTemp505) + ((0.0283822138f * fTemp511) + ((0.0291451775f * fTemp291) + (fTemp825 + ((0.0275887325f * fTemp293) + ((0.0264595486f * fTemp294) + ((0.025818659f * fTemp484) + ((0.0239265114f * fTemp34) + ((0.0205999948f * fTemp441) + ((0.01617481f * fTemp485) + ((0.0184331797f * fTemp37) + ((0.0257271044f * fTemp38) + ((0.0324716941f * fTemp39) + ((0.0362865068f * fTemp40) + ((0.0383617654f * fTemp41) + ((0.0385143608f * fTemp42) + ((0.0376598425f * fTemp214) + ((0.0361033976f * fTemp43) + ((0.0350047313f * fTemp44) + ((0.0308847316f * fTemp45) + ((0.0218817722f * fTemp46) + ((0.00521866512f * fTemp48) + ((0.00057985168f * fTemp49) + ((0.000732444227f * fTemp295) + ((0.00433362834f * fTemp213) + (fTemp826 + ((0.0167546626f * fTemp297) + ((0.0217902157f * fTemp298) + ((0.02438429f * fTemp299) + ((0.0246589556f * fTemp300) + ((0.0202032533f * fTemp301) + ((0.0121768853f * fTemp159) + ((0.035950806f * fTemp304) + ((0.0374767296f * fTemp305) + ((0.0378124341f * fTemp306) + ((0.0410779156f * fTemp307) + ((0.0487380587f * fTemp55) + ((0.0383007303f * fTemp56) + ((0.016052736f * fTemp57) + ((0.0339671001f * fTemp310) + ((0.0780358315f * fTemp311) + ((0.108981594f * fTemp312) + ((0.103091523f * fTemp313) + ((0.0661946461f * fTemp212) + ((0.0203558467f * fTemp58) + ((0.0400097668f * fTemp314) + ((0.0759910867f * fTemp315) + ((0.0991851538f * fTemp61) + ((0.119693592f * fTemp62) + ((0.11246071f * fTemp63) + ((0.0881069377f * fTemp64) + ((0.021210365f * fTemp65) + ((0.0150151066f * fTemp322) + ((0.0414746553f * fTemp68) + ((0.0345469527f * fTemp69) + ((0.0633869469f * fTemp324) + ((0.121738337f * fTemp325) + ((0.0878322721f * fTemp326) + ((0.0542313904f * fTemp73) + ((0.00692770164f * fTemp74) + ((0.014435255f * fTemp75) + ((0.0252082888f * fTemp76) + ((0.0359202847f * fTemp77) + ((0.0121463668f * fTemp82) + ((0.210425124f * fTemp83) + ((0.342051446f * fTemp84) + ((0.489028603f * fTemp327) + ((0.516373158f * fTemp85) + ((0.281380653f * fTemp86) + (((0.0105899228f * ((fTemp457 - fTemp451) - fTemp113)) + ((0.00939970091f * (((((fTemp461 - fTemp402) - fTemp163) - fTemp145) - fTemp410) - fTemp124)) + ((0.00915555283f * (fTemp203 - fTemp353)) + ((0.00756859034f * (fTemp176 - fTemp127)) + ((0.00848414563f * (fTemp296 - fTemp136)) + ((0.00943021942f * ((fTemp746 - fTemp161) - fTemp142)) + ((0.00961333048f * ((fTemp423 - fTemp148) - fTemp108)) + ((0.00979644153f * (((((fTemp400 - fTemp89) - fTemp426) - fTemp427) - fTemp382) - fTemp99)) + ((0.00976592302f * (((fTemp369 - fTemp432) - fTemp155) - fTemp420)) + ((0.00796533097f * ((fTemp397 - fTemp182) - fTemp27)) + ((0.0113528855f * (fTemp94 - fTemp364)) + ((0.0117801446f * (fTemp249 - fTemp443)) + ((0.0123599963f * (fTemp526 - fTemp351)) + ((0.0114139225f * ((fTemp491 - fTemp189) - fTemp172)) + ((0.0100405896f * (fTemp386 - fTemp177)) + ((0.0116580706f * (((fTemp516 + fTemp31) - fTemp483) - fTemp151)) + ((0.0120853297f * (fTemp487 - fTemp179)) + ((0.0045167394f * (((fTemp128 + fTemp460) - fTemp469) - fTemp20)) + ((0.00396740623f * ((fTemp377 + (fTemp335 + fTemp173)) - fTemp187)) + ((0.0125431074f * (fTemp481 - fTemp463)) + ((0.0119937742f * (fTemp92 - fTemp350)) + ((0.00378429517f * (fTemp137 + fTemp380)) + ((0.00201422162f * (fTemp210 + fTemp475)) + ((0.000213629566f * (fTemp198 + fTemp349)) + ((0.00183111057f * (fTemp11 + fTemp514)) + ((0.00296029542f * (fTemp209 + fTemp466)) + ((0.0042115543f * (fTemp129 + fTemp358)) + ((0.00149540696f * (fTemp211 + fTemp147)) + ((0.0103152562f * (fTemp498 + fTemp233)) + ((0.0108035523f * (fTemp395 + fTemp422)) + ((0.0101931822f * (fTemp495 + fTemp35)) + ((0.0140079958f * (fTemp235 + fTemp488)) + ((0.0136112552f * (fTemp500 + fTemp33)) + ((0.0151676992f * (fTemp240 + fTemp276)) + ((0.0109866634f * (fTemp251 + fTemp503)) + ((0.0220343638f * (fTemp260 + fTemp261)) + ((0.0197149571f * (fTemp180 + fTemp271)) + ((0.0208746605f * (fTemp362 + fTemp270)) + ((0.0123294778f * (fTemp273 + fTemp36)) + ((0.0126956999f * (fTemp274 + fTemp47)) + ((0.0158696249f * (fTemp254 + fTemp281)) + ((0.0145878475f * (fTemp492 + fTemp279)) + ((0.0166936256f * (fTemp282 + fTemp283)) + ((0.0273445845f * (fTemp303 - fTemp7)) + ((0.0141911069f * fTemp869) + ((0.0138554033f * fTemp868) + ((0.00448622089f * fTemp856) + (((0.0120242927f * fTemp607) + (0.0107730338f * fTemp713)) + (0.00372325815f * fTemp791))))))))))))))))))))))))))))))))))))))))))))))))) + (0.0101321451f * ((((fTemp234 + fTemp302) - fTemp152) - fTemp120) - fTemp360))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow61 ? (((0.196874902f * fTemp0) + ((0.0234992523f * fTemp1) + ((0.030854214f * fTemp2) + ((0.0837427899f * fTemp220) + ((0.0419019125f * fTemp4) + ((0.0433973223f * fTemp221) + ((0.00256355479f * fTemp493) + ((0.00311288796f * fTemp224) + ((0.00283822138f * fTemp368) + ((0.00164799951f * fTemp392) + ((0.00186162908f * fTemp380) + ((0.00476088747f * fTemp381) + ((0.00912503432f * fTemp11) + ((0.00900296029f * fTemp363) + ((0.000732444227f * fTemp198) + ((0.00341807306f * fTemp137) + ((0.00399792474f * fTemp207) + ((0.00494399853f * fTemp126) + ((0.00622577593f * fTemp464) + ((0.0035401471f * fTemp407) + ((0.00326548051f * fTemp12) + ((0.00115970336f * fTemp476) + (fTemp717 + ((0.00558488723f * fTemp164) + ((0.00735496078f * fTemp359) + ((0.00753807183f * fTemp179) + ((0.0061342204f * fTemp151) + ((0.00134281442f * fTemp121) + ((0.00204474013f * fTemp376) + ((0.000793481246f * fTemp346) + ((0.00329599902f * fTemp496) + ((0.00320444349f * fTemp406) + ((0.00222785119f * fTemp422) + ((0.00277718436f * fTemp242) + ((0.0028992584f * fTemp470) + ((0.00375377666f * fTemp244) + ((0.00463881344f * fTemp246) + ((0.00500503555f * fTemp247) + ((0.00445570238f * fTemp487) + ((0.00314340647f * fTemp516) + ((0.00695822015f * fTemp526) + ((0.00726340525f * fTemp174) + ((0.00335703604f * fTemp250) + ((0.0057985168f * fTemp404) + ((0.00732444227f * fTemp254) + ((0.00653096102f * fTemp255) + ((0.004852443f * fTemp256) + ((0.000122074038f * fTemp263) + ((0.000915555283f * fTemp265) + ((0.0054933317f * fTemp169) + ((0.00598162785f * fTemp32) + ((0.00537125766f * fTemp277) + ((0.00772118289f * fTemp280) + ((0.00793481246f * fTemp281) + ((0.00384533219f * fTemp468) + ((0.00357066561f * fTemp477) + ((0.00491348002f * fTemp35) + ((0.00527970213f * fTemp47) + ((0.0148319956f * fTemp48) + ((0.0213934761f * fTemp49) + ((0.0236213263f * fTemp295) + ((0.0245979186f * fTemp213) + ((0.0270393994f * fTemp296) + ((0.0278328806f * fTemp430) + ((0.0215460677f * fTemp297) + ((0.008087405f * fTemp298) + ((0.0175481439f * fTemp50) + ((0.0256050304f * fTemp51) + ((0.0227973275f * fTemp52) + ((0.0207220688f * fTemp53) + ((0.0205084383f * fTemp159) + ((0.0201116987f * fTemp303) + ((0.0148930326f * fTemp304) + ((0.0193182174f * fTemp508) + ((0.0490737632f * fTemp308) + ((0.0780968666f * fTemp309) + ((0.0863063484f * fTemp509) + ((0.0609149449f * fTemp310) + ((0.0435193963f * fTemp59) + ((0.0667439774f * fTemp60) + ((0.0669576079f * fTemp199) + ((0.00604266487f * fTemp314) + ((0.0767845735f * fTemp316) + ((0.103091523f * fTemp318) + ((0.108096562f * fTemp319) + ((0.0356151015f * fTemp320) + ((0.0796533078f * fTemp72) + ((0.150791958f * fTemp135) + ((0.149540693f * fTemp323) + ((0.0516678356f * fTemp324) + ((0.0384228043f * fTemp74) + ((0.0458082817f * fTemp75) + ((0.0174260698f * fTemp79) + ((0.0242316965f * fTemp80) + ((0.00680562761f * fTemp81) + ((0.0611896105f * fTemp83) + ((0.686269701f * fTemp328) + (fTemp329 + ((0.845942557f * fTemp331) + ((0.476149797f * fTemp332) + ((0.000366222113f * ((fTemp354 + (fTemp238 - fTemp22)) - fTemp513)) + ((0.000518814661f * (fTemp264 - fTemp98)) + ((3.05185094e-05f * (fTemp341 + (((fTemp96 + (fTemp413 + fTemp292)) - fTemp155) - fTemp108))) + ((0.00100711081f * (fTemp114 + (fTemp352 + (fTemp366 + (fTemp99 + (fTemp386 + (fTemp302 - fTemp293))))))) + ((0.00112918485f * (fTemp371 + (fTemp118 + fTemp132))) + ((0.00122074038f * (fTemp113 + (fTemp181 + fTemp237))) + ((0.000183111057f * ((fTemp351 + (fTemp421 + fTemp285)) - fTemp529)) + ((0.000854518265f * (fTemp235 - fTemp130)) + ((0.00170903653f * ((fTemp358 + fTemp500) - fTemp408)) + ((0.00173955504f * ((fTemp92 + (fTemp216 + fTemp492)) - fTemp136)) + ((0.00183111057f * ((fTemp338 + fTemp129) - fTemp139)) + ((0.00216681417f * ((fTemp171 + (fTemp449 + (fTemp395 + fTemp515))) - fTemp102)) + ((0.00177007355f * ((((fTemp95 + fTemp291) - fTemp267) - fTemp427) - fTemp119)) + ((0.0022583697f * (fTemp355 + ((fTemp419 + (fTemp311 - fTemp28)) - fTemp437))) + ((0.00231940672f * (fTemp384 + ((fTemp141 + (fTemp173 + (fTemp357 + fTemp448))) - fTemp170))) + ((0.00106814783f * (fTemp417 + fTemp650)) + ((0.000152592547f * (fTemp109 + (fTemp463 - fTemp225))) + ((0.00131229591f * (fTemp152 + (fTemp475 + (fTemp335 + fTemp258)))) + ((0.00238044374f * (fTemp495 - fTemp115)) + ((0.00268562883f * (fTemp416 - fTemp140)) + ((0.00262459181f * (((fTemp369 + (fTemp111 + fTemp479)) - fTemp459) - fTemp163)) + ((0.00241096225f * ((fTemp388 + fTemp203) - fTemp156)) + (((0.00280770287f * (fTemp251 - fTemp431)) + ((0.00363170262f * ((fTemp168 - fTemp217) - fTemp26)) + ((0.0042115543f * (fTemp401 - fTemp434)) + ((0.00140385143f * (fTemp177 + fTemp466)) + ((0.00366222113f * (fTemp122 + fTemp192)) + ((0.00286873989f * (fTemp182 + fTemp194)) + ((0.00125125889f * (fTemp342 + (fTemp189 + ((fTemp440 + (fTemp236 + fTemp423)) - fTemp452)))) + ((0.000762962736f * (fTemp123 + ((fTemp275 + fTemp284) - fTemp362))) + ((0.00561540574f * ((fTemp227 + (fTemp103 + fTemp82)) - fTemp424)) + ((0.00210577715f * (fTemp229 + (fTemp184 + (fTemp160 + fTemp233)))) + ((0.00405896176f * (fTemp228 + (fTemp486 + (fTemp249 - fTemp223)))) + ((0.00430310983f * (fTemp414 - fTemp442)) + ((0.00344859157f * (fTemp14 + fTemp158)) + ((0.00152592547f * (fTemp497 - fTemp454)) + ((0.0019531846f * (fTemp196 + (fTemp512 - fTemp110))) + ((0.003234962f * (fTemp153 + fTemp143)) + ((0.001617481f * (fTemp411 + fTemp272)) + ((0.00360118411f * (fTemp592 - fTemp157)) + ((0.00436414685f * (fTemp205 + fTemp33)) + ((0.00234992523f * (fTemp210 + (fTemp128 + (fTemp514 + (fTemp415 + fTemp447))))) + ((0.00396740623f * (fTemp282 - fTemp206)) + ((0.00167851802f * ((fTemp502 + fTemp36) - fTemp480)) + ((0.00650044251f * (fTemp339 + fTemp305)) + ((0.00390636921f * (fTemp8 + fTemp457)) + ((0.00189214759f * ((fTemp429 + fTemp503) - fTemp343)) + ((0.00305185094f * (fTemp193 + fTemp488)) + ((0.00381481368f * (fTemp209 + fTemp243)) + ((0.000335703604f * (fTemp30 - fTemp226)) + ((0.00207525864f * (fTemp211 + (fTemp154 + (fTemp436 + fTemp273)))) + ((0.00247199927f * (fTemp147 + (fTemp176 + (fTemp471 - fTemp506)))) + ((0.00265511032f * (fTemp397 + fTemp494)) + ((0.00296029542f * (fTemp232 + fTemp71)) + ((0.00439466536f * (fTemp104 + fTemp283)) + ((0.00372325815f * (fTemp400 + fTemp274)) + ((0.00570696127f * (fTemp491 + (fTemp445 + fTemp215))) + ((0.00665303506f * (fTemp175 + fTemp278)) + ((0.00479140598f * (fTemp248 + fTemp279)) + ((0.00299081393f * (fTemp252 + fTemp257)) + (((0.00708029419f * fTemp719) + (0.0038758507f * fTemp734)) + (0.000885036774f * fTemp781)))))))))))))))))))))))))))))))))))))))) + (0.000305185094f * (fTemp106 - fTemp146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.197271645f * fTemp402) + ((0.169194624f * fTemp218) + ((0.0316476934f * fTemp3) + ((0.0683309436f * fTemp219) + ((0.13153477f * fTemp5) + ((0.095858641f * fTemp6) + ((0.0997039676f * fTemp222) + ((0.00332651753f * fTemp356) + ((0.00415051728f * fTemp489) + ((0.00473036896f * fTemp462) + ((0.000976592302f * fTemp116) + ((0.00350962859f * fTemp418) + ((0.0045167394f * fTemp348) + ((0.0083925901f * fTemp15) + ((0.00817896053f * fTemp469) + ((0.00531022064f * fTemp16) + ((0.00610370189f * fTemp230) + ((0.00869777519f * fTemp191) + ((0.00930814538f * fTemp149) + ((0.00833155308f * fTemp18) + ((0.00689718314f * fTemp19) + ((0.00512710959f * fTemp187) + ((0.00317392498f * fTemp438) + ((0.00408948027f * fTemp24) + ((0.00054933317f * fTemp425) + ((0.00271614734f * fTemp161) + ((0.00198370311f * fTemp393) + ((0.00158696249f * fTemp409) + ((0.00274666585f * fTemp520) + ((0.00253303628f * fTemp287) + ((0.00427259132f * fTemp290) + ((0.00976592302f * fTemp34) + ((0.0101321451f * fTemp441) + ((0.00482192449f * fTemp38) + ((0.00668355357f * fTemp39) + ((0.0111392559f * fTemp40) + ((0.0176396985f * fTemp41) + ((0.0238654744f * fTemp42) + ((0.0280465111f * fTemp214) + ((0.0281380657f * fTemp43) + ((0.0235908087f * fTemp44) + ((0.0149845881f * fTemp45) + ((0.00524918362f * fTemp46) + ((0.00698873866f * fTemp299) + ((0.016113773f * fTemp300) + ((0.0141300699f * fTemp301) + ((0.0129093295f * fTemp307) + ((0.0238044374f * fTemp54) + ((0.0355540626f * fTemp55) + ((0.0401623584f * fTemp56) + ((0.0352793969f * fTemp57) + ((0.0209051799f * fTemp144) + ((0.0607318357f * fTemp312) + ((0.102633744f * fTemp313) + ((0.0822473839f * fTemp212) + ((0.0443433933f * fTemp58) + ((0.0372020639f * fTemp315) + ((0.0731528699f * fTemp61) + ((0.10623493f * fTemp62) + ((0.113406785f * fTemp63) + ((0.125614181f * fTemp64) + ((0.110934779f * fTemp65) + ((0.0611285754f * fTemp66) + ((0.0165410321f * fTemp321) + ((0.0550859086f * fTemp322) + ((0.0592669472f * fTemp68) + ((0.0449842848f * fTemp69) + ((0.0396435447f * fTemp70) + ((0.0824610144f * fTemp325) + ((0.157170326f * fTemp326) + ((0.0551164299f * fTemp73) + ((0.0504165776f * fTemp76) + ((0.152806178f * fTemp77) + ((0.145970032f * fTemp507) + ((0.0546586514f * fTemp78) + ((0.0277718436f * fTemp84) + ((0.305337697f * fTemp327) + ((0.67006439f * fTemp85) + ((0.826960027f * fTemp86) + ((0.583269775f * fTemp87) + (((0.000396740623f * (fTemp333 + (fTemp107 + ((fTemp394 - fTemp7) - fTemp361)))) + ((0.000457777642f * (fTemp334 + ((((((fTemp435 + fTemp239) - fTemp446) - fTemp390) - fTemp389) - fTemp383) - fTemp353))) + ((0.000488296151f * (fTemp231 + (fTemp101 + (fTemp23 + fTemp467)))) + ((0.000213629566f * (fTemp336 + (fTemp451 + fTemp185))) + ((0.000671407208f * ((fTemp403 + ((((fTemp105 + fTemp370) - fTemp378) - fTemp453) - fTemp420)) - fTemp337)) + ((0.000946073793f * (((fTemp382 + (fTemp472 - fTemp208)) - fTemp365) - fTemp360)) + ((0.00103762932f * ((fTemp142 + (fTemp97 + ((fTemp133 + (fTemp260 + (fTemp29 - fTemp180))) - fTemp350))) - fTemp374)) + ((0.00057985168f * ((fTemp125 + (((fTemp190 + (fTemp262 + fTemp505)) - fTemp347) - fTemp344)) - fTemp124)) + ((0.000427259132f * (((fTemp444 + (fTemp271 + fTemp186)) - fTemp433) - fTemp112)) + ((0.000640888698f * (fTemp396 + (fTemp398 + (fTemp349 + fTemp286)))) + ((0.000701925717f * (fTemp399 + (fTemp127 + (fTemp89 + (fTemp373 + (fTemp167 + fTemp379)))))) + ((0.00109866634f * (fTemp131 - fTemp91)) + ((0.0012817774f * (fTemp405 - fTemp165)) + ((0.00146488845f * (fTemp134 + fTemp17)) + ((0.00213629566f * (fTemp340 + ((fTemp294 - fTemp94) - fTemp13))) + ((0.00155644398f * ((fTemp428 - fTemp483) - fTemp410)) + ((0.000610370189f * ((fTemp455 - fTemp490) - fTemp145)) + ((0.000274666585f * (((fTemp504 - fTemp172) - fTemp120) - fTemp148)) + ((0.00119022187f * ((fTemp162 + (fTemp261 - fTemp90)) - fTemp150)) + ((0.00201422162f * (fTemp426 - fTemp377)) + ((0.0019226661f * (fTemp27 - fTemp200)) + ((0.00143436994f * (fTemp364 + (fTemp183 - fTemp391))) + ((0.000823999755f * (fTemp443 + (fTemp240 - fTemp499))) + ((6.10370189e-05f * ((fTemp201 + (fTemp385 + fTemp188)) - fTemp458)) + ((0.00292977691f * (fTemp20 + fTemp482)) + ((0.00149540696f * (fTemp432 + (fTemp268 - fTemp138))) + ((9.15555283e-05f * ((fTemp259 - fTemp473) - fTemp195)) + ((0.0025940733f * (((fTemp178 + fTemp306) - fTemp197) - fTemp478)) + ((0.00616473891f * (fTemp289 - fTemp367)) + ((0.00308236945f * (fTemp439 - fTemp460)) + ((0.00448622089f * (fTemp485 - fTemp450)) + ((0.00250251777f * ((fTemp37 - fTemp276) - fTemp387)) + ((0.00228888821f * ((fTemp266 - fTemp465) - fTemp204)) + (((0.00503555406f * (fTemp288 + fTemp67)) + (0.00543229468f * (fTemp484 - fTemp501))) + (0.00219733268f * (fTemp269 - fTemp234)))))))))))))))))))))))))))))))))))) + (0.000244148076f * (fTemp88 + (fTemp775 - fTemp372))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.178716391f * fTemp0) + ((0.211066008f * fTemp1) + ((0.0802331641f * fTemp220) + ((0.0579241328f * fTemp4) + ((0.0173955504f * fTemp221) + ((3.05185094e-05f * fTemp514) + ((0.000274666585f * fTemp147) + ((9.15555283e-05f * fTemp211) + ((0.00149540696f * fTemp8) + ((0.0061342204f * fTemp11) + ((0.00665303506f * fTemp363) + ((0.00277718436f * fTemp137) + ((0.00454725791f * fTemp367) + ((0.00103762932f * fTemp452) + ((0.000396740623f * fTemp437) + ((0.00180059206f * fTemp93) + ((0.0019531846f * fTemp201) + ((0.00488296151f * fTemp12) + ((0.0045167394f * fTemp478) + ((0.00778221991f * fTemp414) + ((0.00668355357f * fTemp14) + ((0.00784325693f * fTemp228) + ((0.00628681295f * fTemp229) + ((0.00497451704f * fTemp90) + (fTemp765 + ((0.00958281197f * fTemp179) + ((0.00863673817f * fTemp151) + ((0.00683614612f * fTemp122) + ((0.00393688772f * fTemp451) + ((0.00463881344f * fTemp351) + ((0.00430310983f * fTemp146) + ((0.00280770287f * fTemp162) + (fTemp721 + (fTemp747 + ((0.00439466536f * fTemp148) + ((0.00500503555f * fTemp417) + ((0.00543229468f * fTemp410) + ((0.00604266487f * fTemp384) + (fTemp722 + ((0.00558488723f * fTemp338) + ((0.00341807306f * fTemp375) + ((0.00381481368f * fTemp112) + ((0.00399792474f * fTemp361) + ((0.00418103579f * fTemp353) + ((0.00518814661f * fTemp118) + ((0.004852443f * fTemp337) + ((0.00817896053f * fTemp48) + ((0.0141605884f * fTemp49) + ((0.0161442924f * fTemp295) + ((0.0166631062f * fTemp213) + ((0.0119937742f * fTemp297) + ((0.0105288858f * fTemp50) + ((0.01617481f * fTemp51) + ((0.0122684408f * fTemp52) + ((0.0090334788f * fTemp53) + ((0.00692770164f * fTemp159) + ((0.000213629566f * fTemp304) + ((0.0123905148f * fTemp508) + ((0.0350657664f * fTemp308) + ((0.0570390932f * fTemp309) + ((0.0607928708f * fTemp509) + ((0.0346995443f * fTemp310) + ((0.0345164351f * fTemp59) + ((0.0506912433f * fTemp60) + ((0.0450148024f * fTemp199) + ((0.0174565874f * fTemp67) + ((0.0853907913f * fTemp316) + ((0.103732415f * fTemp318) + ((0.104525894f * fTemp319) + ((0.0111392559f * fTemp71) + ((0.0717490166f * fTemp72) + ((0.123172708f * fTemp135) + ((0.11224708f * fTemp323) + ((0.02252266f * fTemp324) + ((0.0305795465f * fTemp74) + ((0.0390026569f * fTemp75) + ((0.0321054719f * fTemp83) + ((0.769524217f * fTemp328) + (fTemp329 + ((0.818811595f * fTemp331) + ((0.454542667f * fTemp332) + (((((0.00491348002f * (fTemp374 + (fTemp99 + fTemp407))) + ((0.00311288796f * (fTemp394 - fTemp356)) + ((0.00296029542f * (fTemp125 + (fTemp399 + fTemp97))) + ((0.00466933195f * (fTemp346 + fTemp145)) + ((0.00302133244f * (fTemp403 + (fTemp483 + (fTemp126 - fTemp217)))) + ((0.00247199927f * (fTemp139 - fTemp439)) + ((0.0022583697f * (fTemp102 + (fTemp27 + fTemp17))) + ((0.00320444349f * (fTemp142 - fTemp15)) + ((0.00469985045f * (fTemp344 + fTemp153)) + ((0.0051576281f * (fTemp150 + fTemp303)) + ((0.00473036896f * (fTemp420 + (fTemp446 + fTemp79))) + ((0.00338755455f * (fTemp382 + (fTemp167 + fTemp411))) + ((0.00186162908f * (fTemp156 + fTemp202)) + ((0.00329599902f * (fTemp425 - fTemp469)) + ((0.00119022187f * (fTemp26 + (fTemp450 - fTemp194))) + ((0.000915555283f * (fTemp24 + (fTemp209 - fTemp391))) + ((0.00134281442f * (fTemp166 + ((fTemp381 - fTemp96) - fTemp348))) + ((0.00198370311f * (fTemp438 - fTemp447)) + ((0.00503555406f * (fTemp177 + (fTemp168 + fTemp192))) + ((0.00250251777f * (fTemp185 + fTemp347)) + ((0.000244148076f * (fTemp20 - fTemp171)) + ((0.00457777642f * (fTemp463 + (fTemp189 + fTemp486))) + ((0.00268562883f * (fTemp195 + fTemp205)) + ((0.000152592547f * (fTemp740 - fTemp482)) + ((0.00155644398f * (fTemp198 + fTemp80)) + ((0.00054933317f * (fTemp116 - fTemp138)) + ((((0.0377819166f * (fTemp320 - fTemp56)) + (0.0180669576f * (fTemp296 + fTemp430))) + (0.000183111057f * (fTemp298 - fTemp175))) + (0.000366222113f * (fTemp184 + fTemp174))))))))))))))))))))))))))))) + (0.00531022064f * (fTemp352 + (fTemp366 + (fTemp113 + fTemp521))))) + (0.00448622089f * (fTemp106 + fTemp172))) + (0.00308236945f * (fTemp98 + fTemp432)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.163945436f * fTemp402) + ((0.16101566f * fTemp218) + ((0.01803644f * fTemp3) + ((0.0543229468f * fTemp219) + ((0.106173895f * fTemp5) + ((0.105197303f * fTemp6) + ((0.00131229591f * fTemp7) + ((0.105227821f * fTemp222) + ((0.00057985168f * fTemp415) + ((0.000946073793f * fTemp392) + ((0.00140385143f * fTemp474) + (fTemp867 + ((0.000457777642f * fTemp358) + ((0.000335703604f * fTemp160) + ((0.000885036774f * fTemp467) + ((0.00244148076f * fTemp343) + ((0.00189214759f * fTemp462) + (fTemp755 + ((0.00143436994f * fTemp187) + ((0.0019226661f * fTemp400) + ((0.00347911008f * fTemp436) + (fTemp714 + ((0.0038758507f * fTemp422) + ((0.00424207281f * fTemp94) + ((0.00476088747f * fTemp92) + ((0.00534073915f * fTemp440) + ((0.0057985168f * fTemp499) + ((0.00567644276f * fTemp237) + ((0.00643940549f * fTemp238) + ((0.00717184972f * fTemp239) + ((0.00753807183f * fTemp240) + ((0.00601214636f * fTemp241) + ((0.00460829493f * fTemp242) + ((0.000823999755f * fTemp491) + ((0.00866725668f * fTemp258) + ((0.0104983672f * fTemp260) + ((0.0104373302f * fTemp261) + ((0.00979644153f * fTemp262) + ((0.00875881221f * fTemp264) + ((0.00833155308f * fTemp265) + ((0.00772118289f * fTemp497) + (fTemp711 + ((0.00814844202f * fTemp180) + ((0.00967436749f * fTemp362) + ((0.0109866634f * fTemp266) + ((0.0110171819f * fTemp506) + ((0.0102542192f * fTemp267) + ((0.0101931822f * fTemp269) + ((0.00997955259f * fTemp28) + ((0.00766014587f * fTemp270) + ((0.00756859034f * fTemp271) + ((0.00720236823f * fTemp370) + ((0.00653096102f * fTemp186) + ((0.00595110934f * fTemp188) + ((0.00442518387f * fTemp272) + ((0.00576799829f * fTemp275) + ((0.00106814783f * fTemp278) + ((0.00671407208f * fTemp477) + ((0.00888088625f * fTemp510) + ((0.0113528855f * fTemp285) + ((0.0121768853f * fTemp286) + ((0.0137028107f * fTemp287) + ((0.0155034028f * fTemp288) + ((0.0160832554f * fTemp289) + ((0.0142521439f * fTemp290) + ((0.0111087374f * fTemp505) + ((0.00906399731f * fTemp291) + ((0.0102237007f * fTemp292) + ((0.0106509598f * fTemp293) + ((0.011322367f * fTemp294) + ((0.0138859218f * fTemp484) + ((0.0173039958f * fTemp34) + ((0.0172124393f * fTemp441) + ((0.0124820704f * fTemp485) + ((0.0071108127f * fTemp479) + ((0.00610370189f * fTemp35) + ((0.00952177495f * fTemp36) + ((0.0136417737f * fTemp37) + ((0.016235847f * fTemp38) + ((0.0186162908f * fTemp39) + ((0.0229194015f * fTemp40) + ((0.0282906592f * fTemp41) + ((0.0327463597f * fTemp42) + ((0.0349436924f * fTemp214) + ((0.0334788039f * fTemp43) + ((0.0281685852f * fTemp44) + ((0.0198370311f * fTemp45) + ((0.0107119968f * fTemp46) + ((0.0124515519f * fTemp299) + ((0.0193792544f * fTemp300) + ((0.0165105145f * fTemp301) + ((0.00305185094f * fTemp302) + ((0.00589007232f * fTemp305) + ((0.0117496261f * fTemp306) + ((0.0187078472f * fTemp307) + ((0.0268868078f * fTemp54) + ((0.035828732f * fTemp55) + ((0.0315561406f * fTemp57) + ((0.0184636991f * fTemp144) + ((0.019287698f * fTemp311) + ((0.0745872408f * fTemp312) + ((0.10199286f * fTemp313) + ((0.0782189369f * fTemp212) + ((0.0411694683f * fTemp58) + ((0.0206915494f * fTemp314) + ((0.0604266487f * fTemp315) + ((0.0900906399f * fTemp61) + ((0.108005002f * fTemp62) + ((0.107058935f * fTemp63) + ((0.109683521f * fTemp64) + ((0.0814233869f * fTemp65) + ((0.0332956947f * fTemp66) + ((0.0415356904f * fTemp322) + ((0.0469069481f * fTemp68) + ((0.0335703604f * fTemp69) + ((0.0273445845f * fTemp70) + ((0.0932645649f * fTemp325) + ((0.143620104f * fTemp326) + ((0.0503250211f * fTemp73) + ((0.0415051728f * fTemp76) + ((0.126499221f * fTemp77) + ((0.120975375f * fTemp507) + ((0.0470595434f * fTemp78) + ((0.0220343638f * fTemp81) + ((0.0239570308f * fTemp82) + ((0.0279244371f * fTemp84) + ((0.234107479f * fTemp327) + ((0.501449645f * fTemp85) + ((0.58522296f * fTemp86) + ((0.330393374f * fTemp87) + (((0.00274666585f * (((fTemp404 - fTemp207) - fTemp405) - fTemp513)) + ((0.00283822138f * ((fTemp494 - fTemp131) - fTemp333)) + ((0.00292977691f * (((fTemp203 - fTemp130) - fTemp396) - fTemp334)) + ((0.00299081393f * ((fTemp244 - fTemp127) - fTemp231)) + ((0.003234962f * ((fTemp864 - fTemp529) - fTemp101)) + ((0.00344859157f * ((fTemp465 + fTemp279) - fTemp107)) + ((0.00375377666f * (((fTemp216 - fTemp103) - fTemp354) - fTemp336)) + ((0.00411999878f * (((fTemp95 - fTemp10) - fTemp155) - fTemp341)) + ((0.00512710959f * ((fTemp500 + fTemp468) - fTemp345)) + ((0.00524918362f * (((((fTemp282 - fTemp339) - fTemp152) - fTemp365) - fTemp360) - fTemp114)) + ((0.00537125766f * (fTemp283 - fTemp371)) + ((0.00433362834f * (fTemp488 - fTemp124)) + ((0.00402844325f * (fTemp251 - fTemp383)) + ((0.00396740623f * (fTemp143 - fTemp389)) + ((0.00390636921f * (((fTemp149 + fTemp470) - fTemp443) - fTemp390)) + ((0.00360118411f * (fTemp233 - fTemp372)) + ((0.00262459181f * ((((((fTemp19 + (fTemp516 - fTemp388)) - fTemp428) - fTemp427) - fTemp119) - fTemp409) - fTemp134)) + ((0.00256355479f * ((fTemp249 - fTemp136) - fTemp408)) + ((0.00241096225f * (fTemp397 - fTemp393)) + ((0.00231940672f * (fTemp232 - fTemp340)) + ((0.00405896176f * ((fTemp503 - fTemp458) - fTemp108)) + ((0.0058290353f * (fTemp235 - fTemp376)) + ((0.00436414685f * ((fTemp386 + fTemp276) - fTemp109)) + ((0.00527970213f * ((fTemp256 - fTemp227) - fTemp121)) + ((0.00506607257f * ((((fTemp471 + fTemp223) - fTemp13) - fTemp182) - fTemp132)) + ((0.00494399853f * (fTemp492 - fTemp100)) + ((0.00173955504f * ((fTemp435 + fTemp487) - fTemp140)) + ((0.00167851802f * ((fTemp444 + (fTemp190 + fTemp225)) - fTemp161)) + ((0.00170903653f * (((fTemp110 + fTemp349) - fTemp133) - fTemp163)) + ((0.00219733268f * (((fTemp457 + fTemp868) - fTemp459) - fTemp426)) + ((0.00317392498f * ((fTemp448 + fTemp395) - fTemp373)) + ((0.00164799951f * ((fTemp493 + fTemp281) - fTemp431)) + ((0.000976592302f * (fTemp445 - fTemp434)) + ((0.00335703604f * (fTemp250 - fTemp364)) + ((0.0035401471f * ((fTemp18 + fTemp412) - fTemp455)) + ((0.00357066561f * (((fTemp255 + fTemp215) - fTemp476) - fTemp23)) + ((0.00366222113f * (fTemp401 - fTemp22)) + ((0.00915555283f * (fTemp263 - fTemp359)) + ((0.000854518265f * (fTemp230 + (fTemp453 + (fTemp490 + fTemp224)))) + ((0.00546281319f * ((fTemp236 + fTemp30) - fTemp342)) + ((0.00521866512f * ((fTemp502 - fTemp464) - fTemp350)) + ((0.00482192449f * (fTemp31 - fTemp123)) + ((0.000610370189f * (fTemp424 + (fTemp418 + fTemp380))) + ((0.00326548051f * (fTemp449 - fTemp433)) + ((0.00183111057f * ((fTemp379 + fTemp248) - fTemp472)) + ((0.00125125889f * ((fTemp442 + (fTemp206 + (fTemp473 + fTemp413))) - fTemp454)) + ((0.00415051728f * (fTemp273 - fTemp196)) + ((0.0042115543f * (fTemp252 - fTemp197)) + ((0.001617481f * ((fTemp489 + fTemp2) - fTemp398)) + ((0.00238044374f * ((fTemp176 + fTemp254) - fTemp210)) + ((0.000427259132f * (fTemp178 + ((fTemp475 + (fTemp165 + fTemp200)) - fTemp158))) + ((0.00112918485f * ((fTemp421 + fTemp181) - fTemp104)) + ((0.000671407208f * (fTemp157 + ((fTemp129 + fTemp173) - fTemp193))) + ((0.000305185094f * (fTemp128 + fTemp377)) + ((0.000488296151f * (fTemp466 + (fTemp91 + fTemp141))) + ((0.00177007355f * (fTemp105 + fTemp226)) + ((0.00152592547f * (fTemp456 + fTemp247)) + ((0.00115970336f * (fTemp335 + fTemp32)) + ((0.000640888698f * (fTemp154 + fTemp682)) + ((0.000701925717f * (fTemp387 + fTemp47)) + ((0.00216681417f * (fTemp204 + fTemp496)) + ((0.00234992523f * (fTemp357 + fTemp406)) + ((0.00286873989f * (fTemp495 + fTemp274)) + ((0.00265511032f * (fTemp369 + fTemp111)) + ((0.00369273964f * (fTemp419 + fTemp243)) + ((0.00714133121f * (fTemp504 + fTemp257)) + ((0.00204474013f * fTemp869) + ((0.0104678487f * (fTemp520 + fTemp284)) + ((0.00802636798f * (fTemp385 + fTemp321)) + ((0.00146488845f * (fTemp169 + fTemp280)) + ((0.00988799706f * fTemp855) + ((0.00427259132f * fTemp844) + (((0.00897244178f * fTemp776) + (0.00201422162f * fTemp592)) + (0.00100711081f * fTemp788)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00271614734f * ((fTemp33 - fTemp170) - fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow52 ? (iSlow56 ? (iSlow58 ? (((0.46040222f * fTemp223) + ((0.004852443f * fTemp447) + ((0.000610370189f * fTemp173) + ((0.00170903653f * fTemp141) + ((0.00201422162f * fTemp165) + ((0.00189214759f * fTemp490) + ((0.00347911008f * fTemp456) + ((0.00164799951f * fTemp466) + ((0.00180059206f * fTemp129) + ((0.00531022064f * fTemp209) + ((0.00256355479f * fTemp110) + ((0.00442518387f * fTemp453) + (fTemp767 + ((0.00186162908f * fTemp137) + ((0.000915555283f * fTemp205) + ((0.00405896176f * fTemp442) + ((0.00213629566f * fTemp183) + ((0.00238044374f * fTemp93) + ((0.00375377666f * fTemp192) + ((0.00381481368f * fTemp12) + ((0.0042115543f * fTemp433) + ((0.00057985168f * fTemp414) + ((0.00335703604f * fTemp229) + ((0.0051576281f * fTemp187) + ((0.00527970213f * fTemp20) + ((0.00491348002f * fTemp185) + ((0.00433362834f * fTemp182) + ((0.00415051728f * fTemp359) + ((0.00222785119f * fTemp23) + ((0.00247199927f * fTemp167) + ((0.00250251777f * fTemp364) + ((0.00402844325f * fTemp426) + ((0.00439466536f * fTemp163) + ((0.0057985168f * fTemp109) + ((0.00720236823f * fTemp148) + ((0.00595110934f * fTemp145) + ((0.00357066561f * fTemp340) + ((0.00100711081f * fTemp127) + ((0.00143436994f * fTemp125) + ((0.00137333293f * fTemp341) + ((0.00543229468f * fTemp357) + ((0.0067751091f * fTemp176) + ((0.00836207159f * fTemp496) + ((0.00524918362f * fTemp461) + ((0.00497451704f * fTemp448) + ((0.00601214636f * fTemp449) + (fTemp644 + ((0.0120242927f * fTemp243) + ((0.0145878475f * fTemp412) + ((0.0158696249f * fTemp143) + ((0.00851466414f * fTemp470) + ((0.00219733268f * fTemp244) + ((0.00933866389f * fTemp423) + ((0.00811792351f * fTemp465) + ((0.00894192327f * fTemp457) + ((0.0101016266f * fTemp491) + ((0.008087405f * fTemp526) + ((0.000366222113f * fTemp175) + ((0.0117496261f * fTemp28) + ((0.0238349568f * fTemp29) + ((0.0246894751f * fTemp385) + ((0.0157475509f * fTemp270) + ((0.0175481439f * fTemp271) + ((0.0229499191f * fTemp370) + ((0.030915251f * fTemp186) + ((0.0363780633f * fTemp188) + ((0.0122684408f * fTemp30) + ((0.00946073793f * fTemp273) + ((0.0282296222f * fTemp274) + ((0.0278939176f * fTemp169) + ((0.0176091809f * fTemp32) + ((0.0100100711f * fTemp501) + ((0.0151371807f * fTemp488) + ((0.0175176244f * fTemp471) + ((0.0224005859f * fTemp279) + ((0.0093691824f * fTemp280) + ((0.0108035523f * fTemp281) + ((0.0199285876f * fTemp215) + ((0.0234992523f * fTemp468) + ((0.0148625141f * fTemp282) + ((0.0230414756f * fTemp288) + ((0.0622577593f * fTemp289) + ((0.0462355427f * fTemp290) + ((0.0154423658f * fTemp479) + ((0.0396130271f * fTemp35) + ((0.0214545131f * fTemp36) + ((0.0382702127f * fTemp37) + ((0.054933317f * fTemp38) + ((0.0738853142f * fTemp39) + ((0.074648276f * fTemp40) + ((0.0494094677f * fTemp41) + ((0.0184331797f * fTemp42) + ((0.0879238248f * fTemp47) + ((0.11246071f * fTemp48) + ((0.0646076873f * fTemp49) + ((0.0526444279f * fTemp159) + ((0.155308694f * fTemp303) + ((0.213110745f * fTemp304) + ((0.014557329f * fTemp305) + ((0.422315121f * fTemp56) + (fTemp57 + ((0.941373944f * fTemp144) + ((0.111484118f * fTemp508) + ((0.02438429f * fTemp308) + ((0.0126956999f * fTemp309) + ((6.10370189e-05f * ((fTemp14 + ((fTemp220 + (fTemp68 + (fTemp69 + (fTemp3 + (fTemp71 + (fTemp135 + (fTemp325 + (fTemp83 + (fTemp84 + (fTemp327 + (fTemp86 + fTemp675))))))))))) - fTemp387)) - fTemp513)) + ((0.000793481246f * (fTemp60 - fTemp334)) + ((0.000213629566f * (fTemp101 + fTemp63)) + ((0.000823999755f * (fTemp107 + (fTemp394 + ((fTemp138 + fTemp190) - fTemp405)))) + ((0.00122074038f * (fTemp106 + fTemp171)) + ((0.00134281442f * (((fTemp396 + (fTemp409 + (fTemp132 + fTemp377))) - fTemp371) - fTemp360)) + ((0.00146488845f * (((fTemp207 + fTemp203) - fTemp366) - fTemp365)) + ((0.000946073793f * ((fTemp361 + fTemp459) - fTemp113)) + ((0.00115970336f * (fTemp346 + (fTemp399 + fTemp160))) + ((0.001617481f * (fTemp124 + fTemp142)) + ((0.00152592547f * (fTemp353 + fTemp342)) + ((0.00125125889f * (fTemp383 + fTemp380)) + ((0.000518814661f * (fTemp389 + (fTemp199 - fTemp121))) + ((3.05185094e-05f * (((fTemp320 + (fTemp322 + (fTemp70 + (fTemp326 + (fTemp85 + fTemp570))))) - fTemp134) - fTemp390)) + ((9.15555283e-05f * (((fTemp61 + (fTemp6 + (fTemp316 + (fTemp319 + (fTemp321 + (fTemp219 + (fTemp72 + (fTemp323 + (fTemp324 + (fTemp218 + (fTemp507 + (fTemp78 + (fTemp80 + (fTemp81 + fTemp796)))))))))))))) - fTemp253) - fTemp112)) + ((0.000183111057f * (fTemp372 + ((fTemp62 + fTemp626) - fTemp410))) + ((0.000122074038f * (fTemp375 + (fTemp191 + ((fTemp315 + (fTemp67 + (fTemp4 + (fTemp318 + (fTemp73 + (fTemp75 + (fTemp77 + (fTemp402 + fTemp79)))))))) - fTemp514)))) + ((0.000732444227f * (fTemp403 + (fTemp126 + fTemp200))) + ((0.000152592547f * (fTemp130 + (fTemp344 + (fTemp349 + (fTemp314 + (fTemp65 + (fTemp66 + (fTemp74 + fTemp76)))))))) + ((0.0025940733f * (fTemp408 + (fTemp425 + fTemp467))) + ((0.00302133244f * (fTemp136 + (fTemp417 + (fTemp427 + fTemp225)))) + ((0.00280770287f * (fTemp139 + (fTemp393 + (fTemp177 + fTemp476)))) + ((0.00317392498f * (fTemp102 + (fTemp146 + fTemp195))) + ((0.00305185094f * (fTemp119 + fTemp194)) + ((0.00271614734f * ((fTemp120 + (fTemp431 + fTemp128)) - fTemp376)) + ((0.00106814783f * ((fTemp388 + fTemp358) - fTemp100)) + ((0.00216681417f * (fTemp420 + (fTemp464 + fTemp206))) + ((0.00274666585f * (fTemp155 + fTemp172)) + ((0.00296029542f * (fTemp382 + (fTemp217 + fTemp208))) + ((0.00299081393f * (fTemp115 + fTemp174)) + ((0.003234962f * (fTemp140 + fTemp356)) + ((0.00393688772f * (fTemp161 + fTemp645)) + ((0.00369273964f * (fTemp428 + (fTemp168 + fTemp197))) + ((0.00329599902f * (fTemp97 + (fTemp157 + fTemp486))) + ((0.00283822138f * (fTemp89 + fTemp521)) + ((0.00292977691f * (fTemp26 + fTemp178)) + ((0.00277718436f * (fTemp24 + (fTemp446 + (fTemp227 + (fTemp439 + fTemp474))))) + ((0.00244148076f * (fTemp434 + fTemp18)) + ((0.00231940672f * (fTemp166 + (fTemp438 + (fTemp228 + fTemp210)))) + ((0.00241096225f * (fTemp170 + fTemp264)) + ((0.0028992584f * (fTemp443 + fTemp278)) + ((0.00262459181f * (fTemp455 + fTemp90)) + ((0.00198370311f * (fTemp22 + fTemp398)) + ((0.00210577715f * (fTemp458 + fTemp836)) + ((0.00366222113f * (fTemp122 + fTemp189)) + ((0.00436414685f * (fTemp151 + fTemp452)) + ((0.00454725791f * (fTemp179 + (fTemp386 + fTemp265))) + ((0.00396740623f * (fTemp164 + (fTemp407 + (fTemp153 + fTemp343)))) + ((0.00418103579f * (fTemp19 + fTemp133)) + ((0.000701925717f * (fTemp149 + fTemp59)) + ((0.00204474013f * (fTemp350 + (fTemp202 + fTemp96))) + ((0.00521866512f * (fTemp16 + fTemp454)) + ((0.00534073915f * (fTemp469 + fTemp241)) + ((0.00479140598f * (fTemp15 + (fTemp392 + fTemp204))) + ((0.00350962859f * (fTemp432 + fTemp495)) + ((0.00177007355f * (fTemp13 + (fTemp413 + fTemp421))) + ((0.00555436872f * (fTemp472 + fTemp450)) + ((0.00308236945f * (fTemp196 + (fTemp347 + fTemp475))) + ((0.00341807306f * fTemp865) + ((0.00286873989f * (fTemp201 + (fTemp198 + fTemp111))) + ((0.00457777642f * (fTemp348 + fTemp275)) + ((0.00372325815f * (fTemp483 + fTemp184)) + ((0.00167851802f * (fTemp367 + fTemp211)) + ((0.00158696249f * (fTemp462 - fTemp368)) + ((0.00140385143f * (fTemp489 + fTemp363)) + ((0.00326548051f * (fTemp10 + fTemp369)) + ((0.00424207281f * (fTemp8 + fTemp104)) + ((0.00500503555f * (fTemp381 + (fTemp395 + fTemp492))) + ((0.0038758507f * (fTemp91 + (fTemp378 + fTemp154))) + ((0.00338755455f * (fTemp473 + fTemp276)) + ((0.00103762932f * (fTemp379 + fTemp400)) + ((0.00155644398f * (fTemp435 + fTemp494)) + ((0.00820947904f * (fTemp397 + fTemp33)) + ((0.00915555283f * (fTemp232 + fTemp505)) + ((0.00692770164f * (fTemp295 - fTemp235)) + ((0.000762962736f * (fTemp283 - fTemp445)) + ((0.000244148076f * (fTemp7 + fTemp221)) + (0.000976592302f * fTemp733))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0202337727f * fTemp222) + ((0.00207525864f * fTemp460) + ((0.00411999878f * fTemp384) + ((0.000671407208f * fTemp131) + ((0.000640888698f * fTemp345) + ((0.000854518265f * fTemp231) + ((0.00131229591f * fTemp498) + ((0.00399792474f * fTemp234) + ((0.00589007232f * fTemp422) + ((0.00592059083f * fTemp94) + ((0.00503555406f * fTemp440) + ((0.00656147953f * fTemp499) + ((0.00698873866f * fTemp236) + ((0.00753807183f * fTemp500) + ((0.00866725668f * fTemp502) + ((0.0100711081f * fTemp237) + ((0.00949125644f * fTemp239) + ((0.00476088747f * fTemp240) + ((0.00918607134f * fTemp247) + (fTemp703 + ((0.0054933317f * fTemp248) + ((0.0106204413f * fTemp249) + ((0.0185247362f * fTemp250) + ((0.0222785119f * fTemp251) + ((0.0126651814f * fTemp252) + ((0.00183111057f * fTemp404) + ((0.0116885891f * fTemp255) + (fTemp862 + ((0.0177007355f * fTemp257) + ((0.0235908087f * fTemp258) + ((0.0299996957f * fTemp259) + ((0.032227546f * fTemp260) + ((0.0298471022f * fTemp261) + ((0.0207525864f * fTemp262) + ((0.00619525742f * fTemp263) + ((0.00848414563f * fTemp497) + ((0.0177617725f * fTemp429) + ((0.0147709586f * fTemp180) + ((0.012878811f * fTemp506) + ((0.0288705099f * fTemp267) + ((0.0397045799f * fTemp268) + ((0.0343943611f * fTemp269) + ((0.0560014658f * fTemp31) + ((0.111941896f * fTemp95) + ((0.0995513797f * fTemp503) + ((0.036774803f * fTemp272) + ((0.000457777642f * fTemp277) + ((0.0315866582f * fTemp477) + ((0.0766624957f * fTemp510) + ((0.112094484f * fTemp284) + ((0.118350782f * fTemp285) + ((0.0989410058f * fTemp286) + ((0.0462660603f * fTemp287) + ((0.0440076925f * fTemp511) + ((0.0787682757f * fTemp291) + ((0.0923795253f * fTemp292) + ((0.0784020498f * fTemp293) + ((0.0781273842f * fTemp294) + ((0.0773033872f * fTemp484) + ((0.061830502f * fTemp34) + ((0.0312204361f * fTemp441) + ((0.0123905148f * fTemp485) + ((0.064271979f * fTemp214) + ((0.093081452f * fTemp43) + ((0.113040559f * fTemp44) + ((0.128879666f * fTemp45) + ((0.0397351012f * fTemp46) + ((0.0960417464f * fTemp213) + ((0.187810913f * fTemp296) + ((0.142948702f * fTemp430) + ((0.0607928708f * fTemp297) + ((0.0255745109f * fTemp298) + ((0.0963469371f * fTemp299) + ((0.0692770183f * fTemp300) + ((0.147373885f * fTemp301) + ((0.101565599f * fTemp302) + ((0.108584858f * fTemp50) + ((0.134952843f * fTemp51) + ((0.135837883f * fTemp52) + ((0.0660725757f * fTemp53) + ((0.175115213f * fTemp306) + ((0.487746805f * fTemp307) + ((0.577318668f * fTemp54) + ((0.223792225f * fTemp55) + ((0.0109256264f * fTemp509) + ((0.027741326f * fTemp310) + ((0.0345469527f * fTemp311) + (fTemp785 + ((0.00833155308f * fTemp313) + ((0.0019226661f * fTemp212) + (((0.000488296151f * (fTemp333 - fTemp374)) + ((0.00054933317f * (fTemp98 + (fTemp515 - fTemp147))) + ((0.00119022187f * ((fTemp352 - fTemp463) - fTemp336)) + ((0.000427259132f * ((fTemp108 + ((fTemp216 - fTemp230) - fTemp152)) - fTemp337)) + ((0.00109866634f * (fTemp114 + fTemp150)) + ((0.0022583697f * (fTemp99 - fTemp437)) + ((0.00360118411f * (fTemp338 - fTemp478)) + ((0.00427259132f * fTemp866) + ((0.00253303628f * (((fTemp436 - fTemp27) - fTemp162) - fTemp373)) + ((0.00320444349f * (fTemp233 - fTemp351)) + ((0.00268562883f * (fTemp254 - fTemp451)) + ((0.00234992523f * ((fTemp266 - fTemp444) - fTemp123)) + ((0.0045167394f * ((((fTemp246 - fTemp493) - fTemp335) - fTemp193) - fTemp17)) + ((0.00265511032f * ((fTemp401 - fTemp391) - fTemp482)) + ((0.00466933195f * (fTemp362 - fTemp418)) + ((0.0012817774f * (fTemp406 - fTemp480)) + (((((0.0140385143f * (fTemp520 - fTemp416)) + (0.0106814783f * (fTemp238 + fTemp487))) + (0.00564592425f * (fTemp419 + fTemp92))) + (0.000335703604f * (fTemp58 - fTemp415))) + (0.000274666585f * ((fTemp224 + fTemp504) - fTemp105))))))))))))))))))) + (0.000305185094f * ((fTemp118 - fTemp529) - fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.146397293f * fTemp0) + ((0.948912024f * fTemp1) + ((0.0670186505f * fTemp3) + ((0.119541004f * fTemp220) + ((0.177556694f * fTemp4) + ((0.0896633789f * fTemp221) + ((0.125675216f * fTemp223) + ((0.00201422162f * fTemp379) + ((0.00219733268f * fTemp444) + ((0.00164799951f * fTemp378) + ((0.00460829493f * fTemp193) + ((0.00411999878f * fTemp208) + ((0.00531022064f * fTemp480) + ((0.00296029542f * fTemp462) + ((0.000244148076f * fTemp398) + ((0.000335703604f * fTemp202) + (fTemp853 + (fTemp631 + (fTemp583 + ((0.00680562761f * fTemp23) + ((0.006469924f * fTemp167) + ((0.00292977691f * fTemp382) + ((0.00335703604f * fTemp150) + ((0.00518814661f * fTemp344) + ((0.0058290353f * fTemp109) + ((0.00573747978f * fTemp148) + ((0.00537125766f * fTemp417) + ((0.00372325815f * fTemp384) + ((0.00238044374f * fTemp142) + ((0.00280770287f * fTemp119) + ((0.00332651753f * fTemp139) + ((0.00271614734f * fTemp136) + ((0.00274666585f * fTemp529) + (fTemp861 + ((0.00177007355f * fTemp383) + ((0.00347911008f * fTemp124) + ((0.00476088747f * fTemp346) + ((0.00668355357f * fTemp365) + ((0.00610370189f * fTemp360) + ((0.00503555406f * fTemp114) + ((0.00457777642f * fTemp345) + ((0.00415051728f * fTemp341) + ((0.00454725791f * fTemp107) + ((0.00448622089f * fTemp101) + ((0.00393688772f * fTemp231) + ((0.00326548051f * fTemp334) + ((0.00720236823f * fTemp111) + ((0.00268562883f * fTemp233) + ((0.00793481246f * fTemp440) + ((0.013000885f * fTemp499) + ((0.0152287362f * fTemp235) + ((0.00463881344f * fTemp412) + ((0.00366222113f * fTemp143) + ((0.0116275521f * fTemp457) + ((0.0153508103f * fTemp491) + ((0.0155339213f * fTemp526) + ((0.0121158483f * fTemp174) + ((0.00686666463f * fTemp175) + ((0.0125125889f * fTemp252) + ((0.019409772f * fTemp401) + ((0.0255745109f * fTemp404) + ((0.0296334736f * fTemp253) + ((0.0316782147f * fTemp254) + ((0.0325327329f * fTemp255) + ((0.0321054719f * fTemp256) + ((0.0300912503f * fTemp257) + ((0.0263679922f * fTemp258) + ((0.0215460677f * fTemp259) + ((0.0158696249f * fTemp260) + ((0.009704886f * fTemp261) + ((0.00390636921f * fTemp262) + ((0.0163579211f * fTemp266) + ((0.0101931822f * fTemp370) + ((0.0190740693f * fTemp186) + ((0.0255134739f * fTemp188) + ((0.0291451775f * fTemp30) + ((0.0281685852f * fTemp31) + (fTemp669 + ((0.0123905148f * fTemp503) + ((0.00604266487f * fTemp33) + ((0.0196844395f * fTemp492) + ((0.0338145085f * fTemp275) + ((0.0429395437f * fTemp276) + ((0.0440992452f * fTemp277) + ((0.0386059135f * fTemp278) + ((0.0290841404f * fTemp501) + ((0.0172429588f * fTemp488) + ((0.019531846f * fTemp282) + ((0.0299691763f * fTemp283) + ((0.0372630991f * fTemp477) + ((0.0422681347f * fTemp510) + ((0.045594655f * fTemp284) + ((0.0458693206f * fTemp285) + ((0.0415662117f * fTemp286) + ((0.0342112482f * fTemp287) + ((0.0218817722f * fTemp289) + ((0.0175786614f * fTemp290) + ((0.0132450331f * fTemp505) + ((0.00946073793f * fTemp511) + ((0.00766014587f * fTemp291) + ((0.00805688649f * fTemp292) + ((0.0344553962f * fTemp430) + ((0.0576799847f * fTemp297) + ((0.0792870894f * fTemp298) + ((0.0928067863f * fTemp299) + ((0.0956144929f * fTemp300) + ((0.0903958231f * fTemp301) + ((0.0684224963f * fTemp50) + ((0.0509659126f * fTemp51) + ((0.0293282885f * fTemp52) + ((0.00900296029f * fTemp53) + ((0.019287698f * fTemp54) + ((0.0347605832f * fTemp55) + ((0.0513321348f * fTemp56) + ((0.0733359754f * fTemp57) + ((0.101138338f * fTemp144) + ((0.136814475f * fTemp508) + ((0.129459515f * fTemp308) + ((0.103976563f * fTemp309) + ((0.0622577593f * fTemp509) + ((0.00692770164f * fTemp310) + ((0.0554521307f * fTemp59) + ((0.105624564f * fTemp60) + ((0.11893063f * fTemp199) + ((0.0257881414f * fTemp314) + ((0.0478835404f * fTemp66) + ((0.120975375f * fTemp67) + ((0.206030458f * fTemp316) + ((0.204657122f * fTemp318) + ((0.175695062f * fTemp319) + ((0.0463576168f * fTemp320) + ((0.102450639f * fTemp71) + ((0.0942716748f * fTemp72) + ((0.047090061f * fTemp135) + ((0.00479140598f * fTemp507) + ((0.401593059f * fTemp86) + ((0.746177554f * fTemp87) + (fTemp328 + ((0.906064034f * fTemp329) + ((0.680013418f * fTemp331) + ((0.388805807f * fTemp332) + ((0.00234992523f * (fTemp333 + (fTemp121 + fTemp250))) + ((0.00433362834f * (fTemp98 + (fTemp376 + fTemp70))) + ((0.00436414685f * (fTemp336 + (fTemp100 - fTemp434))) + ((0.00405896176f * (fTemp106 + fTemp307)) + ((0.0042115543f * (fTemp337 - fTemp194)) + ((0.00726340525f * (fTemp366 + fTemp468)) + ((0.00759910885f * (fTemp371 - fTemp425)) + ((0.00595110934f * (fTemp374 + (fTemp22 - fTemp181))) + ((0.00241096225f * (fTemp353 - fTemp405)) + ((0.00173955504f * (fTemp389 + (fTemp155 + fTemp190))) + ((0.00350962859f * (fTemp372 + fTemp20)) + ((0.00170903653f * (fTemp394 + fTemp237)) + ((0.000457777642f * (fTemp125 - fTemp347)) + ((0.000793481246f * ((fTemp416 - fTemp363) - fTemp396)) + ((0.00363170262f * (((fTemp243 - fTemp476) - fTemp130) - fTemp403)) + ((0.0012817774f * ((fTemp268 - fTemp264) - fTemp134)) + ((0.00357066561f * (fTemp393 + fTemp429)) + ((0.00329599902f * (fTemp340 + fTemp230)) + ((0.00216681417f * (fTemp108 + fTemp451)) + ((0.00231940672f * (fTemp99 - fTemp418)) + ((0.00265511032f * fTemp863) + ((0.00488296151f * (fTemp410 - fTemp432)) + ((0.00564592425f * (fTemp145 + (fTemp120 - fTemp96))) + ((0.00149540696f * (fTemp152 - fTemp196)) + ((0.00103762932f * (fTemp420 + (fTemp242 - fTemp456))) + ((0.00546281319f * (fTemp115 + (fTemp465 - fTemp170))) + ((0.00622577593f * (fTemp140 + fTemp161)) + ((0.00381481368f * (fTemp156 - fTemp97)) + ((0.00592059083f * fTemp864) + ((0.00878933072f * (fTemp293 - fTemp373)) + ((0.00469985045f * (fTemp495 - fTemp438)) + ((0.00653096102f * (fTemp251 - fTemp443)) + ((0.00183111057f * ((fTemp469 - fTemp407) - fTemp122)) + ((0.0103152562f * (fTemp19 - fTemp103)) + ((0.00106814783f * (fTemp15 + fTemp467)) + ((0.0140995514f * (fTemp296 - fTemp472)) + ((0.00637836847f * (fTemp369 - fTemp227)) + ((0.00701925717f * (fTemp203 - fTemp464)) + ((0.00491348002f * (fTemp489 - fTemp368)) + ((0.00213629566f * (fTemp339 + (fTemp473 + fTemp445))) + ((0.00674459059f * ((fTemp502 - fTemp400) - fTemp439)) + ((0.000610370189f * (fTemp138 + fTemp466)) + ((0.00186162908f * (fTemp105 + fTemp349)) + ((0.00735496078f * (fTemp294 - fTemp413)) + ((0.000701925717f * (fTemp497 - fTemp147)) + ((0.000671407208f * (fTemp449 + fTemp234)) + ((0.00439466536f * (fTemp436 + fTemp471)) + ((0.0142826624f * (fTemp236 + fTemp506)) + ((0.003234962f * ((fTemp272 + fTemp484) - fTemp470)) + ((0.0137943663f * (fTemp362 - fTemp7)) + (0.00842310861f * (fTemp180 + fTemp267))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.713064969f * fTemp2) + ((0.0427564308f * fTemp402) + ((0.337260038f * fTemp218) + ((0.103030488f * fTemp219) + (fTemp715 + ((0.203161716f * fTemp6) + ((0.145847961f * fTemp222) + (fTemp707 + ((0.00494399853f * fTemp447) + ((0.0045167394f * fTemp493) + ((0.00408948027f * fTemp224) + (fTemp803 + ((0.00616473891f * fTemp387) + ((0.00778221991f * fTemp173) + ((0.00918607134f * fTemp415) + ((0.0101321451f * fTemp141) + ((0.0106509598f * fTemp154) + ((0.0105288858f * fTemp392) + ((0.00894192327f * fTemp335) + ((0.000488296151f * fTemp200) + ((0.00427259132f * fTemp165) + ((0.00753807183f * fTemp421) + ((0.000122074038f * fTemp377) + ((0.00375377666f * fTemp160) + ((0.00708029419f * fTemp380) + ((0.0103457747f * fTemp129) + ((0.0122989593f * fTemp128) + ((0.0122074038f * fTemp158) + ((0.0101016266f * fTemp104) + ((0.00247199927f * fTemp450) + ((0.00286873989f * fTemp110) + ((0.00991851557f * fTemp217) + ((0.0118411817f * fTemp356) + ((0.0122684408f * fTemp343) + ((0.011383404f * fTemp453) + ((0.00949125644f * fTemp8) + ((0.00704977568f * fTemp10) + ((0.00054933317f * fTemp206) + ((0.00506607257f * fTemp178) + ((0.00967436749f * fTemp116) + ((0.0133671071f * fTemp198) + ((0.0155644398f * fTemp210) + ((0.0160222184f * fTemp207) + ((0.0147709586f * fTemp205) + ((0.0127567369f * fTemp126) + ((0.00576799829f * fTemp486) + ((0.000732444227f * fTemp442) + ((0.000976592302f * fTemp411) + ((0.00112918485f * fTemp192) + ((0.00912503432f * fTemp133) + ((0.0156254768f * fTemp433) + ((0.0164189581f * fTemp13) + ((0.0151371807f * fTemp414) + ((0.0126041444f * fTemp228) + ((0.00897244178f * fTemp229) + ((0.0156559963f * fTemp90) + ((0.0173650328f * fTemp123) + ((0.0165715516f * fTemp350) + ((0.00643940549f * fTemp164) + ((0.00683614612f * fTemp179) + ((0.00631733146f * fTemp146) + ((0.00619525742f * fTemp364) + ((0.00509659108f * fTemp24) + ((0.00769066438f * fTemp431) + ((0.00881984923f * fTemp27) + ((0.00921658985f * fTemp162) + ((0.00131229591f * fTemp428) + ((0.00634784997f * fTemp397) + ((0.0071108127f * fTemp232) + ((0.00399792474f * fTemp406) + ((0.00738547929f * fTemp239) + ((0.00823999755f * fTemp240) + ((0.00607318338f * fTemp504) + ((0.00729392376f * fTemp244) + ((0.0109561449f * fTemp246) + ((0.0140385143f * fTemp247) + ((0.0159306619f * fTemp487) + ((0.0155034028f * fTemp516) + ((0.0125431074f * fTemp216) + ((0.000762962736f * fTemp265) + ((0.0165410321f * fTemp28) + ((0.0198675506f * fTemp29) + ((0.0186162908f * fTemp385) + (fTemp619 + ((0.00628681295f * fTemp279) + ((0.0117496261f * fTemp280) + ((0.0108645894f * fTemp281) + ((0.0038758507f * fTemp215) + ((0.00302133244f * fTemp441) + ((0.00250251777f * fTemp485) + ((0.00299081393f * fTemp479) + ((0.0121768853f * fTemp36) + ((0.0186468102f * fTemp37) + ((0.0382091738f * fTemp39) + ((0.0475783572f * fTemp40) + ((0.0517288744f * fTemp41) + ((0.0504165776f * fTemp42) + ((0.0467238389f * fTemp214) + ((0.0420545079f * fTemp43) + ((0.0357982107f * fTemp44) + ((0.0284432508f * fTemp45) + ((0.022583697f * fTemp46) + ((0.0203558467f * fTemp47) + ((0.0204779208f * fTemp48) + ((0.019470809f * fTemp49) + ((0.00442518387f * fTemp159) + ((0.0141911069f * fTemp304) + ((0.0139469588f * fTemp305) + ((0.00799584948f * fTemp306) + ((0.0538651682f * fTemp311) + ((0.108798489f * fTemp312) + ((0.154271066f * fTemp313) + ((0.130985439f * fTemp212) + ((0.0547807254f * fTemp315) + ((0.136234626f * fTemp61) + ((0.238715783f * fTemp62) + ((0.23227638f * fTemp63) + ((0.187902465f * fTemp64) + ((0.033600878f * fTemp65) + ((0.0270393994f * fTemp321) + ((0.0810266435f * fTemp322) + ((0.0925321206f * fTemp68) + ((0.0550859086f * fTemp69) + ((0.0388500616f * fTemp323) + ((0.149723813f * fTemp324) + ((0.258095026f * fTemp325) + ((0.382641077f * fTemp326) + ((0.388958395f * fTemp73) + ((0.356730849f * fTemp74) + ((0.291787475f * fTemp75) + ((0.210882902f * fTemp76) + ((0.12405774f * fTemp77) + ((0.00137333293f * fTemp78) + ((0.0723899081f * fTemp79) + ((0.19733268f * fTemp80) + ((0.378673673f * fTemp81) + ((0.573503852f * fTemp82) + ((0.732291639f * fTemp83) + ((0.617511511f * fTemp84) + ((0.370860934f * fTemp327) + (((0.00122074038f * (fTemp34 - fTemp513)) + ((0.00555436872f * ((fTemp498 - fTemp184) - fTemp352)) + ((0.00750755332f * ((fTemp496 - fTemp187) - fTemp113)) + ((0.00695822015f * (fTemp274 - fTemp118)) + ((0.00210577715f * (fTemp94 - fTemp390)) + ((0.00262459181f * ((fTemp17 + fTemp391) - fTemp112)) + ((0.00317392498f * ((fTemp131 + fTemp474) - fTemp354)) + ((0.00338755455f * (fTemp273 - fTemp375)) + ((0.00204474013f * (fTemp399 + (fTemp153 + (fTemp213 - fTemp92)))) + ((0.00308236945f * (fTemp127 + fTemp422)) + ((0.00158696249f * (fTemp419 - fTemp408)) + ((0.0035401471f * ((fTemp446 + (fTemp452 + fTemp238)) - fTemp102)) + ((0.00314340647f * (fTemp32 - fTemp355)) + ((0.00100711081f * ((fTemp448 - fTemp91) - fTemp132)) + ((0.00430310983f * ((fTemp166 - fTemp388) - fTemp427)) + ((0.0054933317f * (fTemp357 - fTemp163)) + ((0.00143436994f * ((fTemp171 + fTemp423) - fTemp426)) + ((0.00625629444f * (fTemp26 + (fTemp195 + fTemp490))) + ((0.00540177617f * (fTemp351 + fTemp269)) + ((0.000885036774f * (fTemp172 - fTemp226)) + ((0.00482192449f * ((fTemp151 + fTemp483) - fTemp455)) + ((0.0074159978f * (fTemp359 + fTemp461)) + ((0.00402844325f * (fTemp182 + fTemp11)) + ((0.0112308115f * (fTemp520 - fTemp18)) + ((0.00762962736f * (fTemp386 - fTemp191)) + ((0.00228888821f * (fTemp459 + fTemp211)) + ((0.0133976256f * (fTemp342 + fTemp295)) + ((0.0119022187f * (fTemp521 + fTemp454)) + ((0.00057985168f * (fTemp185 - fTemp16)) + ((0.00717184972f * (fTemp189 + fTemp169)) + ((0.00134281442f * (fTemp424 + (fTemp348 - fTemp435))) + ((0.0163274035f * (fTemp14 + fTemp137)) + ((0.000274666585f * ((fTemp482 + (fTemp248 - fTemp225)) - fTemp12)) + ((0.000213629566f * (fTemp168 - fTemp93)) + ((0.001617481f * (fTemp197 - fTemp209)) + ((6.10370189e-05f * (fTemp201 + (((fTemp249 + fTemp263) - fTemp514) - fTemp183))) + ((0.000396740623f * (fTemp157 - fTemp358)) + ((0.00662251655f * (fTemp381 + fTemp35)) + ((0.000640888698f * (fTemp271 - fTemp475)) + ((0.0057985168f * (fTemp176 + fTemp85)) + ((0.00244148076f * (fTemp494 + fTemp241)) + ((0.0111087374f * (fTemp303 - fTemp500)) + ((0.0271919928f * (fTemp38 - fTemp288)) + ((0.0811181962f * (fTemp58 - fTemp302)) + (0.00827051606f * fTemp530))))))))))))))))))))))))))))))))))))))))))))) + (0.000152592547f * (((fTemp478 + fTemp437) - fTemp409) - fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow57 ? (((0.00274666585f * fTemp220) + (fTemp223 + ((0.00418103579f * fTemp204) + (fTemp839 + ((0.00589007232f * fTemp154) + ((0.00402844325f * fTemp335) + ((0.000244148076f * fTemp105) + ((0.000427259132f * fTemp379) + ((0.000335703604f * fTemp466) + ((0.00399792474f * fTemp160) + ((0.00509659108f * fTemp128) + ((0.00534073915f * fTemp168) + ((0.00625629444f * fTemp12) + ((0.00854518265f * fTemp228) + ((0.0100100711f * fTemp229) + ((0.00814844202f * fTemp432) + ((0.00662251655f * fTemp459) + ((0.0119327372f * fTemp191) + ((0.0118106632f * fTemp149) + ((0.00842310861f * fTemp19) + ((0.00555436872f * fTemp425) + (fTemp770 + ((0.00109866634f * fTemp142) + ((0.00292977691f * fTemp375) + ((0.00347911008f * fTemp357) + ((0.00390636921f * fTemp176) + ((0.00494399853f * fTemp397) + ((0.00622577593f * fTemp232) + ((0.00762962736f * fTemp496) + ((0.00863673817f * fTemp461) + ((0.00930814538f * fTemp400) + ((0.0101016266f * fTemp406) + ((0.00881984923f * fTemp448) + ((0.00726340525f * fTemp449) + ((0.00585955381f * fTemp395) + ((0.0045167394f * fTemp495) + ((0.00378429517f * fTemp369) + ((0.00912503432f * fTemp234) + ((0.0113528855f * fTemp419) + ((0.0115665151f * fTemp422) + ((0.009704886f * fTemp94) + ((0.00720236823f * fTemp92) + ((0.00628681295f * fTemp236) + ((0.00878933072f * fTemp500) + ((0.0108340709f * fTemp502) + ((0.0106814783f * fTemp237) + ((0.00894192327f * fTemp238) + ((0.00592059083f * fTemp239) + ((0.00991851557f * fTemp412) + ((0.0141605884f * fTemp143) + ((0.0188299213f * fTemp416) + ((0.0229499191f * fTemp470) + ((0.0250556972f * fTemp244) + ((0.0258491784f * fTemp246) + ((0.0242316965f * fTemp247) + ((0.0218207352f * fTemp487) + ((0.017975403f * fTemp516) + ((0.0134281442f * fTemp216) + ((0.00860621966f * fTemp386) + ((0.0162663665f * fTemp491) + ((0.0232856236f * fTemp526) + ((0.0288399924f * fTemp174) + ((0.0310678426f * fTemp175) + ((0.0293588061f * fTemp445) + ((0.0259712525f * fTemp248) + ((0.0205694754f * fTemp249) + ((0.0166936256f * fTemp250) + ((0.0119022187f * fTemp251) + ((0.00830103457f * fTemp252) + ((0.00527970213f * fTemp362) + ((0.0061342204f * fTemp267) + ((0.0125125889f * fTemp370) + ((0.0300607327f * fTemp186) + ((0.0508438386f * fTemp188) + ((0.0639973134f * fTemp30) + ((0.0600909442f * fTemp31) + ((0.0335398428f * fTemp95) + ((0.0215765871f * fTemp492) + ((0.0143436994f * fTemp275) + ((0.0166631062f * fTemp279) + ((0.0244758446f * fTemp280) + ((0.0283822138f * fTemp281) + ((0.0265205856f * fTemp215) + ((0.0235602893f * fTemp468) + ((0.02252266f * fTemp282) + ((0.0191656239f * fTemp283) + ((0.0215460677f * fTemp290) + (fTemp670 + ((0.0641499087f * fTemp511) + ((0.0202948097f * fTemp291) + ((0.0130314035f * fTemp36) + ((0.0379039906f * fTemp37) + ((0.0312204361f * fTemp38) + ((0.0383007303f * fTemp39) + ((0.0555436872f * fTemp40) + ((0.0557878353f * fTemp41) + ((0.0581682809f * fTemp42) + ((0.0384533219f * fTemp214) + ((0.0889614522f * fTemp49) + ((0.0938749388f * fTemp295) + ((0.040070802f * fTemp213) + ((0.0394604318f * fTemp304) + ((0.137821585f * fTemp305) + ((0.126895964f * fTemp306) + ((0.088656269f * fTemp57) + ((0.732688367f * fTemp144) + ((0.731376052f * fTemp508) + ((0.297677547f * fTemp308) + ((0.0683309436f * fTemp309) + ((0.0208746605f * fTemp509) + ((0.000274666585f * fTemp82) + ((0.00164799951f * fTemp331) + ((0.00106814783f * (((fTemp318 - fTemp5) - fTemp206) - fTemp513)) + ((0.00299081393f * ((((fTemp193 + (fTemp104 + fTemp203)) - fTemp365) - fTemp336) - fTemp107)) + ((0.00241096225f * ((fTemp127 + (fTemp209 + ((fTemp324 - fTemp70) - fTemp69))) - fTemp341)) + ((0.00222785119f * ((fTemp359 + (fTemp196 + ((fTemp467 + (fTemp381 + (fTemp391 + (fTemp80 - fTemp60)))) - fTemp227))) - fTemp352)) + ((0.00271614734f * ((fTemp446 + ((fTemp515 + fTemp242) - fTemp421)) - fTemp118)) + ((0.000671407208f * ((fTemp403 + (fTemp378 + fTemp314)) - fTemp353)) + ((0.000640888698f * (fTemp87 - fTemp361)) + ((0.00103762932f * (fTemp112 + fTemp14)) + ((0.00350962859f * (fTemp396 + fTemp401)) + ((0.00344859157f * (fTemp399 + fTemp20)) + ((0.00311288796f * ((fTemp377 - fTemp7) - fTemp131)) + ((0.00341807306f * ((fTemp424 + fTemp240) - fTemp408)) + ((0.00213629566f * (((fTemp443 - fTemp486) - fTemp431) - fTemp136)) + ((0.000793481246f * (fTemp393 + ((fTemp156 + (fTemp343 - fTemp219)) - fTemp140))) + ((0.00253303628f * (fTemp102 + fTemp320)) + ((0.00134281442f * ((fTemp241 + fTemp63) - fTemp108)) + ((0.0042115543f * (fTemp109 + fTemp373)) + ((0.00595110934f * (fTemp120 - fTemp183)) + ((0.00479140598f * (fTemp344 - fTemp469)) + ((0.00231940672f * (((fTemp358 + fTemp61) - fTemp166) - fTemp132)) + ((9.15555283e-05f * ((fTemp455 + fTemp514) - fTemp163)) + ((0.0035401471f * (fTemp428 + (fTemp171 + fTemp499))) + ((0.00491348002f * (fTemp97 + (fTemp380 + fTemp310))) + ((0.00332651753f * (fTemp111 - fTemp24)) + ((0.00173955504f * (fTemp364 + fTemp182)) + ((0.0022583697f * (fTemp351 + (fTemp323 - fTemp367))) + ((0.00338755455f * (fTemp436 - fTemp177)) + ((0.00219733268f * ((fTemp319 + (fTemp329 - fTemp84)) - fTemp122)) + ((0.0057985168f * (fTemp187 - fTemp201)) + ((0.0104678487f * (fTemp18 + fTemp230)) + ((0.00415051728f * (fTemp235 - fTemp342)) + ((0.00512710959f * (fTemp414 + fTemp415)) + ((0.00531022064f * (fTemp478 + fTemp447)) + ((0.00329599902f * (fTemp192 + fTemp184)) + ((0.000701925717f * (fTemp407 + fTemp332)) + ((0.00424207281f * (fTemp471 - fTemp197)) + ((0.00570696127f * (((fTemp141 + fTemp233) - fTemp93) - fTemp411)) + ((0.001617481f * (((fTemp110 + (fTemp256 + (fTemp315 + fTemp1))) - fTemp8) - fTemp103)) + ((0.000183111057f * (fTemp480 + (fTemp64 - fTemp259))) + ((0.00189214759f * (fTemp325 - fTemp363)) + ((0.00250251777f * ((fTemp79 - fTemp413) - fTemp11)) + ((0.00143436994f * (fTemp439 + fTemp81)) + ((0.00408948027f * (fTemp158 + (fTemp387 + fTemp460))) + ((0.00546281319f * (fTemp129 + fTemp194)) + ((0.000976592302f * (fTemp473 + fTemp218)) + ((0.00506607257f * (fTemp392 + fTemp276)) + ((0.00973540451f * (fTemp498 + fTemp506)) + ((0.0102847377f * (fTemp457 + fTemp266)) + ((0.00982696004f * (fTemp494 + fTemp48)) + ((0.00268562883f * (fTemp257 + fTemp258)) + ((0.000457777642f * (fTemp72 - fTemp268)) + ((0.0135502182f * (fTemp33 - fTemp29)) + ((0.00216681417f * (fTemp62 + fTemp328)) + ((0.00119022187f * (fTemp507 - fTemp77)) + ((0.00158696249f * (fTemp135 - fTemp4)) + (((0.00201422162f * fTemp833) + (0.00357066561f * fTemp812)) + (0.00296029542f * fTemp852))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0312509537f * fTemp222) + ((0.00137333293f * fTemp211) + ((0.00244148076f * fTemp490) + ((0.00131229591f * fTemp474) + ((0.000823999755f * fTemp225) + ((0.000854518265f * fTemp226) + ((0.000732444227f * fTemp435) + (fTemp857 + ((0.00262459181f * fTemp116) + ((0.00280770287f * fTemp198) + ((0.00283822138f * fTemp137) + ((0.00146488845f * fTemp126) + ((0.00265511032f * fTemp483) + ((0.00372325815f * fTemp157) + ((0.0051576281f * fTemp437) + ((0.00619525742f * fTemp398) + ((0.00598162785f * fTemp202) + ((0.008087405f * fTemp195) + ((0.012878811f * fTemp133) + ((0.0150456252f * fTemp454) + ((0.0135196997f * fTemp472) + ((0.00561540574f * fTemp16) + ((0.0058290353f * fTemp17) + ((0.00735496078f * fTemp189) + ((0.00997955259f * fTemp521) + ((0.0119632557f * fTemp90) + ((0.0115054781f * fTemp123) + ((0.00866725668f * fTemp350) + ((0.00320444349f * fTemp458) + ((0.00100711081f * fTemp438) + ((0.00305185094f * fTemp434) + ((0.000396740623f * fTemp27) + ((0.00994903408f * fTemp417) + ((0.0111697745f * fTemp410) + ((0.00955229346f * fTemp376) + ((0.0067751091f * fTemp384) + ((0.00469985045f * fTemp355) + ((0.00488296151f * fTemp134) + ((3.05185094e-05f * fTemp390) + ((0.00186162908f * fTemp346) + ((0.00228888821f * fTemp374) + ((0.00308236945f * fTemp366) + ((0.00360118411f * fTemp254) + ((0.00769066438f * fTemp260) + ((0.0152897732f * fTemp261) + ((0.0191351064f * fTemp262) + ((0.0174260698f * fTemp263) + ((0.0126956999f * fTemp264) + ((0.00933866389f * fTemp265) + ((0.00738547929f * fTemp497) + ((0.00567644276f * fTemp429) + ((0.00845362712f * fTemp269) + ((0.0155949583f * fTemp520) + ((0.0170903653f * fTemp28) + ((0.00714133121f * fTemp385) + ((0.00363170262f * fTemp270) + ((0.0077517014f * fTemp503) + ((0.048341319f * fTemp272) + ((0.0735801235f * fTemp273) + ((0.0726035312f * fTemp274) + ((0.048890654f * fTemp169) + ((0.0142216254f * fTemp32) + ((0.00729392376f * fTemp278) + ((0.0328073986f * fTemp284) + ((0.0782494619f * fTemp285) + ((0.117862485f * fTemp286) + ((0.132877588f * fTemp287) + ((0.108798489f * fTemp288) + ((0.0482802838f * fTemp289) + ((0.0386364348f * fTemp292) + ((0.0808435306f * fTemp293) + ((0.09543138f * fTemp294) + ((0.0886257514f * fTemp484) + ((0.082918793f * fTemp34) + ((0.0866420493f * fTemp441) + ((0.0783104971f * fTemp485) + ((0.057985168f * fTemp479) + ((0.0251167342f * fTemp35) + ((0.0762352347f * fTemp44) + ((0.128421888f * fTemp45) + ((0.150517285f * fTemp46) + ((0.0971709341f * fTemp47) + ((0.0397961363f * fTemp296) + ((0.10388501f * fTemp430) + ((0.128452405f * fTemp297) + ((0.101535082f * fTemp298) + ((0.0810266435f * fTemp299) + ((0.0724204257f * fTemp300) + ((0.131565288f * fTemp301) + ((0.13663137f * fTemp302) + ((0.111331522f * fTemp50) + ((0.0538041331f * fTemp51) + ((0.0307321399f * fTemp52) + ((0.0572527237f * fTemp53) + ((0.0636005774f * fTemp159) + ((0.0775170177f * fTemp303) + ((0.109103672f * fTemp307) + ((0.449171424f * fTemp54) + ((0.678792715f * fTemp55) + ((0.511856437f * fTemp56) + ((0.0163274035f * fTemp311) + ((0.0292062145f * fTemp312) + ((0.0242927335f * fTemp313) + ((0.00234992523f * fTemp75) + (((0.00122074038f * (fTemp333 + fTemp667)) + ((0.0012817774f * (fTemp334 + (fTemp130 + (((fTemp199 + fTemp73) - fTemp356) - fTemp463)))) + ((0.00140385143f * (fTemp231 - fTemp217)) + ((0.00180059206f * (fTemp98 + (fTemp96 + fTemp3))) + ((0.00247199927f * (fTemp101 + (fTemp464 + fTemp10))) + ((0.00155644398f * (fTemp106 + (fTemp114 + fTemp382))) + ((0.000946073793f * (fTemp337 + (fTemp345 + (fTemp167 + fTemp456)))) + ((0.00277718436f * (fTemp360 + ((fTemp277 + fTemp59) - fTemp372))) + ((0.00317392498f * (fTemp371 - fTemp125)) + ((0.00302133244f * (fTemp113 + (fTemp99 + fTemp26))) + ((0.000518814661f * (fTemp383 + (fTemp86 - fTemp322))) + ((0.00057985168f * (fTemp389 + fTemp150)) + ((0.00210577715f * (((fTemp74 + (fTemp327 - fTemp78)) - fTemp426) - fTemp354)) + ((0.00445570238f * (fTemp405 + (fTemp409 - fTemp173))) + ((0.00314340647f * ((fTemp253 - fTemp181) - fTemp119)) + ((0.0038758507f * (fTemp338 - fTemp368)) + ((0.00573747978f * (fTemp145 - fTemp493)) + ((0.000305185094f * (fTemp148 + (fTemp462 + fTemp808))) + ((0.00204474013f * ((fTemp420 + (((fTemp65 + fTemp76) - fTemp164) - fTemp146)) - fTemp100)) + ((0.00198370311f * (fTemp121 - fTemp185)) + ((0.00238044374f * (fTemp152 + (fTemp22 + fTemp67))) + ((0.00183111057f * (fTemp155 + fTemp68)) + ((0.00115970336f * (fTemp427 - fTemp200)) + ((0.000885036774f * (fTemp115 + (fTemp339 + (fTemp510 + fTemp2)))) + ((0.0019226661f * ((fTemp153 + fTemp178) - fTemp162)) + ((0.00256355479f * ((fTemp476 + (fTemp207 + (fTemp66 - fTemp6))) - fTemp172)) + ((0.00152592547f * (fTemp180 - fTemp451)) + ((0.00170903653f * (fTemp23 + fTemp15)) + ((0.000152592547f * (fTemp151 + (fTemp388 - fTemp91))) + ((0.00149540696f * ((fTemp85 - fTemp504) - fTemp179)) + ((0.00375377666f * (fTemp13 + fTemp442)) + ((0.00900296029f * (fTemp433 + fTemp501)) + ((0.00604266487f * (fTemp347 + (fTemp58 - fTemp465))) + ((0.00430310983f * (fTemp482 + fTemp859)) + ((0.0019531846f * (fTemp205 + fTemp165)) + ((0.00286873989f * (fTemp210 - fTemp208)) + ((0.000122074038f * ((fTemp475 + (fTemp349 + fTemp326)) - fTemp489)) + ((0.000366222113f * (fTemp0 + fTemp453)) + ((0.004852443f * (fTemp43 - fTemp440)) + ((0.00558488723f * ((fTemp488 - fTemp423) - fTemp243)) + ((0.00177007355f * (fTemp255 + (fTemp83 - fTemp321))) + ((0.0141911069f * (fTemp212 - fTemp477)) + (0.000610370189f * fTemp772))))))))))))))))))))))))))))))))))))))))))) + (0.000762962736f * (fTemp88 + (fTemp139 + ((fTemp147 + (fTemp404 + fTemp71)) - fTemp444)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.00177007355f * fTemp1) + ((0.00167851802f * fTemp218) + ((0.003234962f * fTemp220) + ((0.928342521f * fTemp223) + ((0.0115359966f * fTemp194) + ((0.0119022187f * fTemp460) + ((0.012817774f * fTemp368) + ((0.0142216254f * fTemp173) + ((0.0153813288f * fTemp141) + ((0.0155644398f * fTemp154) + ((0.0150456252f * fTemp392) + ((0.0114749596f * fTemp391) + ((0.00982696004f * fTemp200) + ((0.00820947904f * fTemp514) + ((0.00720236823f * fTemp165) + ((0.00891140476f * fTemp421) + ((0.0122379223f * fTemp474) + ((0.0100405896f * fTemp226) + ((0.00845362712f * fTemp435) + ((0.00827051606f * fTemp105) + ((0.0132145146f * fTemp475) + ((0.0135502182f * fTemp466) + ((0.0140690329f * fTemp138) + ((0.0137028107f * fTemp377) + ((0.0133365886f * fTemp129) + ((0.0138248848f * fTemp128) + ((0.0141605884f * fTemp158) + ((0.0144047365f * fTemp381) + ((0.0148319956f * fTemp450) + ((0.0137943663f * fTemp193) + ((0.0123905148f * fTemp184) + ((0.0111087374f * fTemp467) + ((0.0109561449f * fTemp217) + ((0.0107425153f * fTemp356) + ((0.0112918485f * fTemp453) + ((0.0112308115f * fTemp8) + ((0.0090334788f * fTemp11) + ((0.00769066438f * fTemp363) + ((0.00701925717f * fTemp339) + ((0.00860621966f * fTemp489) + ((0.00897244178f * fTemp462) + ((0.00885036774f * fTemp206) + ((0.00723288674f * fTemp198) + ((0.00689718314f * fTemp137) + (fTemp768 + ((0.00747703481f * fTemp205) + ((0.00695822015f * fTemp126) + ((0.00576799829f * fTemp367) + ((0.0035401471f * fTemp452) + ((0.00292977691f * fTemp482) + ((0.00149540696f * fTemp398) + ((0.00106814783f * fTemp168) + ((0.0019531846f * fTemp454) + ((0.00671407208f * fTemp424) + ((0.00964384899f * fTemp469) + ((0.0120242927f * fTemp187) + ((0.0120853297f * fTemp20) + ((0.0108645894f * fTemp185) + ((0.00848414563f * fTemp182) + ((0.00564592425f * fTemp164) + ((0.00228888821f * fTemp179) + ((0.00198370311f * fTemp122) + ((0.00280770287f * fTemp428) + ((0.00378429517f * fTemp156) + ((0.001617481f * fTemp161) + ((9.15555283e-05f * fTemp140) + ((0.000274666585f * fTemp120) + ((0.00463881344f * fTemp148) + ((0.000152592547f * fTemp102) + ((0.0114139225f * fTemp232) + ((0.0110782189f * fTemp461) + ((0.0121158483f * fTemp400) + ((0.0136112552f * fTemp498) + ((0.0151066622f * fTemp448) + ((0.0149235511f * fTemp449) + ((0.0126041444f * fTemp495) + ((0.0110171819f * fTemp369) + ((0.0101016266f * fTemp111) + ((0.0093691824f * fTemp203) + ((0.00802636798f * fTemp515) + ((0.00616473891f * fTemp436) + ((0.00448622089f * fTemp233) + ((0.00735496078f * fTemp419) + ((0.014435255f * fTemp94) + ((0.0150151066f * fTemp92) + ((0.0132755516f * fTemp440) + ((0.0105288858f * fTemp499) + ((0.00640888698f * fTemp236) + ((0.00537125766f * fTemp500) + ((0.00521866512f * fTemp502) + ((0.00540177617f * fTemp237) + ((0.004852443f * fTemp240) + ((0.0045167394f * fTemp504) + ((0.00402844325f * fTemp241) + ((0.00308236945f * fTemp243) + ((0.00527970213f * fTemp416) + ((0.00930814538f * fTemp470) + ((0.0166631062f * fTemp246) + ((0.0179448836f * fTemp247) + ((0.0165105145f * fTemp516) + ((0.0140385143f * fTemp216) + (fTemp802 + ((0.0117191076f * fTemp249) + ((0.0124515519f * fTemp250) + ((0.00985747855f * fTemp251) + ((0.00393688772f * fTemp252) + ((0.0238044374f * fTemp31) + ((0.0312814713f * fTemp95) + ((0.0269478448f * fTemp503) + ((0.00842310861f * fTemp275) + ((0.00424207281f * fTemp276) + ((0.00698873866f * fTemp281) + ((0.0525528751f * fTemp511) + ((0.0591448732f * fTemp291) + ((0.0215460677f * fTemp292) + ((0.0197759941f * fTemp37) + ((0.0366832502f * fTemp38) + ((0.032227546f * fTemp39) + ((0.043916136f * fTemp40) + ((0.0511490218f * fTemp41) + ((0.0543839857f * fTemp42) + ((0.0595416129f * fTemp214) + ((0.0363780633f * fTemp43) + ((0.0339365825f * fTemp49) + ((0.0872218981f * fTemp295) + ((0.0730307922f * fTemp213) + ((0.119479962f * fTemp305) + ((0.186956391f * fTemp306) + ((0.109256268f * fTemp307) + ((0.370189518f * fTemp144) + (fTemp508 + ((0.603900254f * fTemp308) + ((0.202398762f * fTemp309) + ((0.042298656f * fTemp509) + ((0.014679403f * fTemp310) + ((0.00146488845f * fTemp135) + ((0.00265511032f * fTemp325) + ((0.00274666585f * fTemp80) + ((0.00103762932f * fTemp332) + ((0.00476088747f * ((fTemp526 - fTemp150) - fTemp336)) + ((0.00469985045f * (fTemp234 - fTemp352)) + ((0.00534073915f * ((fTemp238 - fTemp409) - fTemp366)) + ((0.00497451704f * (fTemp239 - fTemp113)) + ((0.00271614734f * ((fTemp183 + (fTemp412 + ((fTemp329 - fTemp76) - fTemp69))) - fTemp124)) + ((0.00231940672f * (((fTemp319 - fTemp199) - fTemp411) - fTemp383)) + ((0.000183111057f * (fTemp112 - fTemp417)) + ((0.000488296151f * ((fTemp491 + fTemp82) - fTemp529)) + ((0.00119022187f * ((fTemp97 + fTemp322) - fTemp125)) + ((0.000122074038f * (fTemp139 + (fTemp202 + fTemp314))) + ((0.000976592302f * (fTemp393 + (fTemp64 - fTemp192))) + ((0.0127567369f * ((fTemp447 + fTemp176) - fTemp355)) + ((0.00375377666f * (fTemp145 - fTemp373)) + ((0.00302133244f * (fTemp109 + (fTemp157 + fTemp79))) + ((0.00384533219f * (fTemp841 - fTemp100)) + ((0.00305185094f * ((fTemp163 + fTemp437) - fTemp155)) + ((0.00366222113f * (fTemp426 + fTemp242)) + ((0.00238044374f * ((((fTemp468 + (fTemp63 - fTemp4)) - fTemp347) - fTemp197) - fTemp425)) + ((0.000335703604f * ((fTemp188 + (fTemp326 - fTemp0)) - fTemp443)) + ((0.00338755455f * ((fTemp359 + (fTemp12 + fTemp483)) - fTemp451)) + ((0.00213629566f * (fTemp151 + fTemp331)) + ((0.0104068117f * (fTemp19 + fTemp10)) + ((0.00686666463f * (fTemp18 + (fTemp210 + fTemp211))) + ((0.00799584948f * (fTemp235 - fTemp230)) + ((0.0108951079f * (fTemp496 - fTemp459)) + ((0.00943021942f * (fTemp15 + fTemp386)) + ((0.0083925901f * (fTemp195 + fTemp178)) + ((0.00878933072f * (fTemp476 + fTemp215)) + ((0.00122074038f * (fTemp507 - fTemp93)) + ((0.00390636921f * fTemp859) + ((0.00784325693f * (fTemp116 + fTemp480)) + ((0.00714133121f * (fTemp388 + fTemp349)) + ((0.0109256264f * (fTemp343 + fTemp248)) + ((0.0113528855f * (fTemp208 + fTemp422)) + ((0.0147709586f * (fTemp209 + fTemp415)) + ((0.012939848f * (fTemp380 + (fTemp160 + fTemp181))) + ((0.0132450331f * (fTemp171 + (fTemp204 + fTemp357))) + ((0.0141300699f * (fTemp358 + fTemp335)) + ((0.0133671071f * (fTemp473 + fTemp244)) + ((0.0121463668f * (fTemp444 + (fTemp456 + fTemp397))) + ((0.0102542192f * (fTemp379 + fTemp30)) + ((0.011383404f * (fTemp225 + (fTemp96 + fTemp224))) + ((0.0176396985f * (fTemp487 + fTemp296)) + ((0.000610370189f * (fTemp87 - fTemp465)) + ((0.000793481246f * (fTemp318 - fTemp282)) + ((0.00253303628f * (fTemp61 + (fTemp321 + (fTemp323 + (fTemp328 - fTemp327))))) + ((0.00326548051f * (fTemp6 + fTemp320)) + ((0.00241096225f * (fTemp78 - fTemp74)) + ((0.0142521439f * fTemp652) + (0.0111697745f * fTemp810))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.000915555283f * fTemp2) + ((0.000244148076f * fTemp402) + ((0.00250251777f * fTemp3) + ((0.000366222113f * fTemp219) + ((0.00506607257f * fTemp7) + ((0.0325632505f * fTemp222) + ((0.00207525864f * fTemp201) + ((0.00247199927f * fTemp153) + (fTemp860 + ((0.0119937742f * fTemp13) + ((0.0102237007f * fTemp414) + ((0.0128482925f * fTemp14) + ((0.0054933317f * fTemp228) + ((0.000762962736f * fTemp229) + ((0.00405896176f * fTemp189) + ((0.00570696127f * fTemp123) + ((0.00997955259f * fTemp342) + ((0.0116275521f * fTemp463) + ((0.00262459181f * fTemp22) + ((0.00408948027f * fTemp23) + ((0.00286873989f * fTemp172) + ((0.00210577715f * fTemp446) + ((0.000396740623f * fTemp146) + ((0.00125125889f * fTemp434) + ((0.00415051728f * fTemp431) + ((0.00454725791f * fTemp162) + ((0.00173955504f * fTemp427) + ((0.00439466536f * fTemp132) + ((0.00491348002f * fTemp121) + ((0.0111392559f * fTemp376) + ((0.0071108127f * fTemp108) + ((0.00656147953f * fTemp142) + ((0.00372325815f * fTemp408) + ((0.00668355357f * fTemp134) + ((0.00778221991f * fTemp405) + (fTemp725 + ((0.00817896053f * fTemp130) + ((0.00592059083f * fTemp127) + ((0.000427259132f * fTemp372) + (fTemp861 + ((0.00268562883f * fTemp353) + (fTemp663 + ((0.00344859157f * fTemp374) + ((0.00433362834f * fTemp118) + ((0.0051576281f * fTemp365) + ((0.00488296151f * fTemp360) + ((0.00363170262f * fTemp337) + ((0.00357066561f * fTemp106) + ((0.00589007232f * fTemp231) + ((0.00183111057f * fTemp457) + ((0.00546281319f * fTemp401) + ((0.0141911069f * fTemp404) + ((0.0196234025f * fTemp253) + ((0.0198370311f * fTemp254) + ((0.0175176244f * fTemp255) + (fTemp862 + ((0.0148625141f * fTemp257) + ((0.0177617725f * fTemp258) + ((0.0208441429f * fTemp259) + ((0.0228278451f * fTemp260) + ((0.0248115491f * fTemp261) + ((0.0256355479f * fTemp262) + ((0.0270699188f * fTemp263) + ((0.0289010294f * fTemp264) + ((0.0304269549f * fTemp265) + ((0.0301522873f * fTemp497) + ((0.0267647337f * fTemp429) + ((0.0207220688f * fTemp180) + ((0.0106814783f * fTemp266) + ((0.0122074038f * fTemp506) + ((0.014496292f * fTemp268) + ((0.0127262184f * fTemp269) + ((0.0127872555f * fTemp520) + ((0.0204779208f * fTemp28) + ((0.0319223627f * fTemp29) + ((0.0366527289f * fTemp385) + ((0.0319528803f * fTemp270) + ((0.0236823633f * fTemp271) + ((0.000671407208f * fTemp272) + ((0.041993469f * fTemp273) + ((0.0837427899f * fTemp274) + ((0.102481157f * fTemp169) + ((0.0904873833f * fTemp32) + ((0.0524918362f * fTemp33) + ((0.0200811792f * fTemp278) + ((0.0247810297f * fTemp501) + ((0.025940733f * fTemp488) + ((0.0195013285f * fTemp471) + (fTemp821 + ((0.00619525742f * fTemp477) + ((0.0214239936f * fTemp284) + ((0.0502334684f * fTemp285) + ((0.0900601223f * fTemp286) + ((0.129795223f * fTemp287) + ((0.150242627f * fTemp288) + ((0.136326179f * fTemp289) + ((0.0813623443f * fTemp290) + (fTemp835 + ((0.085055083f * fTemp294) + ((0.0991241187f * fTemp484) + ((0.0856959745f * fTemp34) + ((0.0840479732f * fTemp441) + ((0.0851771608f * fTemp485) + ((0.0805383474f * fTemp479) + ((0.0605182052f * fTemp35) + ((0.0243537705f * fTemp36) + ((0.0183721427f * fTemp44) + ((0.0913418978f * fTemp45) + ((0.136722922f * fTemp46) + ((0.139683217f * fTemp47) + ((0.0613116845f * fTemp48) + ((0.0463881344f * fTemp430) + ((0.098422192f * fTemp297) + ((0.11224708f * fTemp298) + ((0.0904568657f * fTemp299) + ((0.0647907928f * fTemp300) + ((0.0683614612f * fTemp301) + ((0.126529738f * fTemp302) + ((0.109408855f * fTemp50) + ((0.0825220495f * fTemp51) + ((0.0163579211f * fTemp52) + ((0.0183111057f * fTemp53) + ((0.0202337727f * fTemp159) + ((0.0377208777f * fTemp303) + ((0.181920841f * fTemp54) + ((0.507553339f * fTemp55) + ((0.635914207f * fTemp56) + ((0.295480222f * fTemp57) + ((0.0234992523f * fTemp312) + ((0.0308236945f * fTemp313) + ((0.0220343638f * fTemp212) + ((0.0117496261f * fTemp58) + ((0.00341807306f * fTemp59) + ((0.00222785119f * fTemp65) + (((((0.00531022064f * (fTemp334 + fTemp371)) + ((0.00625629444f * (fTemp98 - fTemp16)) + ((0.00558488723f * (fTemp107 - fTemp464)) + ((0.00399792474f * (fTemp341 + fTemp345)) + ((0.0061342204f * (fTemp101 - fTemp103)) + ((0.000640888698f * (fTemp389 + (fTemp89 - fTemp17))) + ((3.05185094e-05f * ((fTemp354 + fTemp72) - fTemp390)) + ((0.00054933317f * (fTemp375 + fTemp394)) + ((0.00256355479f * (fTemp396 + (fTemp84 - fTemp280))) + ((0.00430310983f * (fTemp399 + fTemp311)) + ((0.00732444227f * (fTemp403 + (fTemp350 - fTemp190))) + ((0.00180059206f * (fTemp136 + fTemp68)) + ((0.00234992523f * (fTemp340 + fTemp382)) + ((0.00500503555f * (fTemp119 + (fTemp283 - fTemp227))) + ((0.00796533097f * (fTemp99 - fTemp490)) + ((0.0101321451f * (fTemp338 - fTemp413)) + ((0.0136417737f * (fTemp384 - fTemp387)) + ((0.00595110934f * (fTemp410 + (fTemp521 - fTemp133))) + ((0.00219733268f * (fTemp344 + fTemp407)) + ((0.00100711081f * (fTemp115 + fTemp438)) + ((0.00314340647f * (fTemp26 + fTemp66)) + ((0.00201422162f * (fTemp24 + fTemp83)) + ((0.000946073793f * (fTemp166 + fTemp316)) + ((0.00109866634f * (fTemp170 + (fTemp351 - fTemp177))) + ((0.000732444227f * (fTemp364 + fTemp86)) + ((0.00396740623f * (fTemp455 - fTemp486)) + ((0.000701925717f * (fTemp458 + fTemp5)) + ((0.00170903653f * (fTemp77 - fTemp149)) + ((0.00350962859f * (fTemp191 - fTemp442)) + ((0.00573747978f * (fTemp90 - fTemp478)) + ((0.00320444349f * ((fTemp67 - fTemp62) - fTemp432)) + ((0.00296029542f * (fTemp472 + fTemp70)) + ((0.00772118289f * (fTemp277 - fTemp196)) + ((0.0133060701f * (fTemp304 - fTemp91)) + ((0.0135807367f * (fTemp362 - fTemp378)) + ((0.00717184972f * (fTemp505 - fTemp147)) + ((0.0120548112f * (fTemp492 - fTemp493)) + ((0.0147404401f * (fTemp370 - fTemp406)) + ((0.0151676992f * (fTemp267 - fTemp494)) + ((0.00311288796f * (fTemp60 - fTemp143)) + ((0.00833155308f * (fTemp186 - fTemp174)) + ((0.0103152562f * (fTemp510 - fTemp175)) + ((0.00115970336f * (fTemp221 + fTemp73)) + (((0.00186162908f * (fTemp85 - fTemp81)) + (0.00299081393f * (fTemp75 - fTemp324))) + (0.00140385143f * (fTemp71 - fTemp315)))))))))))))))))))))))))))))))))))))))))))))) + (0.00473036896f * (fTemp333 + (fTemp152 + fTemp27)))) + (0.00445570238f * (fTemp513 + fTemp167))) + (0.00442518387f * (fTemp88 + fTemp114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow53 ? (iSlow55 ? (((0.00256355479f * fTemp3) + ((0.0202642903f * fTemp219) + ((0.00253303628f * fTemp220) + ((0.0218207352f * fTemp223) + ((0.0197759941f * fTemp387) + ((0.0249641407f * fTemp173) + ((0.0205389578f * fTemp141) + ((0.0165715516f * fTemp154) + ((0.0157475509f * fTemp392) + ((0.0177922919f * fTemp335) + ((0.0196539201f * fTemp181) + ((0.0188909583f * fTemp391) + ((0.014496292f * fTemp200) + ((0.00985747855f * fTemp514) + ((0.00317392498f * fTemp211) + ((9.15555283e-05f * fTemp456) + ((0.0115359966f * fTemp104) + ((0.0112918485f * fTemp381) + ((0.00384533219f * fTemp193) + ((0.00543229468f * fTemp208) + ((0.016052736f * fTemp439) + ((0.0199591052f * fTemp217) + ((0.0204474013f * fTemp356) + ((0.0168156996f * fTemp343) + ((0.0117496261f * fTemp453) + ((0.00912503432f * fTemp8) + ((0.0124820704f * fTemp11) + ((0.0140079958f * fTemp363) + ((0.0136112552f * fTemp339) + ((0.0110477004f * fTemp388) + ((0.00799584948f * fTemp489) + ((0.00860621966f * fTemp462) + ((0.00964384899f * fTemp178) + ((0.0103152562f * fTemp116) + ((0.00726340525f * fTemp207) + (fTemp854 + ((0.00143436994f * fTemp367) + (fTemp615 + ((0.00344859157f * fTemp227) + ((0.00396740623f * fTemp486) + ((0.00106814783f * fTemp418) + ((0.00372325815f * fTemp179) + ((0.0110171819f * fTemp151) + ((0.0238349568f * fTemp177) + ((0.0266731773f * fTemp458) + ((0.0252998453f * fTemp22) + ((0.0201116987f * fTemp23) + ((0.0120548112f * fTemp167) + ((0.0155339213f * fTemp146) + ((0.0255745109f * fTemp443) + ((0.0328684337f * fTemp364) + ((0.0345469527f * fTemp170) + ((0.0312204361f * fTemp438) + ((0.0242622159f * fTemp166) + ((0.0166020691f * fTemp434) + ((0.00796533097f * fTemp26) + ((0.00784325693f * fTemp431) + ((0.00604266487f * fTemp373) + ((0.00573747978f * fTemp427) + ((0.00054933317f * fTemp344) + ((0.00198370311f * fTemp383) + ((0.00231940672f * fTemp346) + ((0.00674459059f * fTemp366) + ((0.00375377666f * fTemp365) + ((0.000122074038f * fTemp360) + ((0.00219733268f * fTemp345) + ((0.0137638478f * fTemp106) + ((0.0163274035f * fTemp341) + ((0.0151982177f * fTemp336) + ((0.011444441f * fTemp107) + ((0.00445570238f * fTemp98) + ((0.00512710959f * fTemp333) + (((0.024445327f * fTemp92) + ((0.0299386587f * fTemp440) + ((0.0331736207f * fTemp499) + ((0.0277718436f * fTemp236) + ((0.0216986611f * fTemp500) + ((0.0122989593f * fTemp502) + ((0.0185857732f * fTemp504) + ((0.0242927335f * fTemp241) + ((0.0100711081f * fTemp470) + (fTemp815 + ((0.0202337727f * fTemp246) + ((0.0139774773f * fTemp516) + ((0.0128482925f * fTemp216) + ((0.0118411817f * fTemp386) + ((0.0233466607f * fTemp249) + ((0.03234962f * fTemp250) + ((0.0224921424f * fTemp251) + ((0.0151066622f * fTemp254) + ((0.0418408774f * fTemp255) + ((0.061830502f * fTemp256) + ((0.0679036826f * fTemp257) + ((0.0568254665f * fTemp258) + ((0.0321054719f * fTemp259) + ((0.0145878475f * fTemp260) + ((0.0308236945f * fTemp262) + ((0.0537430942f * fTemp263) + ((0.0645466447f * fTemp264) + ((0.0609149449f * fTemp265) + ((0.0462660603f * fTemp497) + ((0.0327463597f * fTemp429) + ((0.0158696249f * fTemp180) + ((0.00335703604f * fTemp362) + ((0.0339976214f * fTemp492) + ((0.0746177584f * fTemp275) + ((0.088656269f * fTemp276) + ((0.0589312427f * fTemp277) + ((0.0360118411f * fTemp501) + ((0.0555131696f * fTemp488) + ((0.0722067952f * fTemp471) + ((0.0754417554f * fTemp279) + ((0.069551684f * fTemp280) + ((0.0657368675f * fTemp281) + ((0.0387279876f * fTemp215) + ((0.0377208777f * fTemp468) + ((0.0323801376f * fTemp282) + ((0.0705587938f * fTemp286) + ((0.104525894f * fTemp287) + ((0.0907315314f * fTemp288) + ((0.0552690215f * fTemp289) + ((0.141270176f * fTemp484) + ((0.21857357f * fTemp34) + ((0.220313117f * fTemp441) + ((0.0777001232f * fTemp485) + ((0.149815366f * fTemp39) + ((0.412091434f * fTemp40) + ((0.55592519f * fTemp41) + ((0.555070639f * fTemp42) + ((0.289864808f * fTemp214) + ((0.301705986f * fTemp48) + ((0.618915379f * fTemp49) + ((0.895626724f * fTemp295) + ((0.916196167f * fTemp213) + ((0.443342388f * fTemp296) + ((0.022705771f * fTemp304) + ((0.0256355479f * fTemp305) + ((0.0261848811f * fTemp306) + ((0.0263985116f * fTemp307) + ((0.0259102155f * fTemp54) + (fTemp759 + ((0.0254829563f * fTemp56) + ((0.0250556972f * fTemp57) + ((0.0238044374f * fTemp144) + ((0.0190435499f * fTemp508) + ((0.00518814661f * fTemp310) + ((0.00875881221f * fTemp321) + ((0.0087282937f * fTemp70) + ((0.00488296151f * fTemp323) + ((0.0083925901f * fTemp324) + ((0.00720236823f * fTemp73) + ((0.00469985045f * fTemp75) + ((0.00164799951f * fTemp76) + ((((0.00842310861f * (fTemp337 + (fTemp115 + (fTemp140 + fTemp450)))) + ((0.00585955381f * (fTemp118 - fTemp145)) + ((0.00378429517f * (fTemp374 + fTemp483)) + ((0.00152592547f * (fTemp124 + fTemp77)) + ((0.00167851802f * (fTemp353 + fTemp361)) + ((0.00851466414f * (fTemp509 - fTemp409)) + ((0.0109256264f * ((fTemp24 + fTemp159) - fTemp119)) + ((0.0111087374f * (fTemp422 - fTemp376)) + ((0.000854518265f * (fTemp100 + (fTemp30 - fTemp437))) + ((0.00302133244f * ((fTemp452 + fTemp128) - fTemp155)) + ((0.00131229591f * (fTemp382 - fTemp224)) + ((0.00894192327f * (fTemp135 - fTemp428)) + ((0.00204474013f * (fTemp425 + fTemp243)) + ((0.00537125766f * (fTemp351 + (fTemp325 - fTemp66))) + ((0.00390636921f * (fTemp455 + fTemp283)) + ((0.0183111057f * (fTemp122 + fTemp303)) + ((0.00827051606f * (((fTemp158 - fTemp6) - fTemp16) - fTemp187)) + ((0.0115665151f * (fTemp261 - fTemp459)) + ((0.00430310983f * (fTemp74 - fTemp172)) + ((0.00500503555f * (fTemp268 - fTemp454)) + ((0.00891140476f * (fTemp47 - fTemp478)) + ((0.00973540451f * ((fTemp10 + fTemp68) - fTemp12)) + ((0.00347911008f * ((fTemp423 + fTemp53) - fTemp93)) + ((0.00314340647f * (fTemp419 - fTemp398)) + ((0.00436414685f * (fTemp205 - fTemp377)) + ((0.00924710836f * (fTemp137 + fTemp206)) + ((0.00439466536f * (fTemp184 + fTemp72)) + ((0.00555436872f * (fTemp209 + ((fTemp326 - fTemp2) - fTemp58))) + ((0.00112918485f * (fTemp165 - fTemp0)) + ((0.0121463668f * (fTemp309 - fTemp448)) + ((0.0328073986f * (fTemp235 + fTemp278)) + ((0.0157170333f * (fTemp487 + fTemp308)) + ((0.00155644398f * (fTemp252 + fTemp520)) + ((0.00930814538f * (fTemp71 - fTemp221)) + (0.00830103457f * fTemp555))))))))))))))))))))))))))))))))))) + (0.00729392376f * (fTemp101 - fTemp97))) + (0.00662251655f * (fTemp513 + fTemp240)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00823999755f * fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.000793481246f * fTemp402) + ((0.00320444349f * fTemp4) + ((0.00634784997f * fTemp5) + ((0.012939848f * fTemp204) + ((0.0108951079f * fTemp447) + ((0.00704977568f * fTemp493) + ((0.000732444227f * fTemp490) + ((0.00311288796f * fTemp421) + ((0.00292977691f * fTemp96) + ((0.00402844325f * fTemp225) + ((0.0104983672f * fTemp226) + ((0.0159611814f * fTemp190) + ((0.0150761437f * fTemp349) + ((0.0194402914f * fTemp379) + ((0.0240180679f * fTemp444) + ((0.0264900662f * fTemp473) + ((0.0256050304f * fTemp378) + ((0.0222174749f * fTemp91) + ((0.01803644f * fTemp475) + ((0.013061922f * fTemp466) + ((0.00888088625f * fTemp138) + ((0.00540177617f * fTemp358) + ((0.00473036896f * fTemp380) + ((0.00207525864f * fTemp129) + ((0.000305185094f * fTemp348) + ((0.00115970336f * fTemp442) + ((0.00329599902f * fTemp202) + ((0.00427259132f * fTemp201) + ((0.006469924f * fTemp347) + ((0.00885036774f * fTemp411) + ((0.0116885891f * fTemp197) + ((0.0129703665f * fTemp153) + ((0.0134586627f * fTemp407) + ((0.0123905148f * fTemp192) + ((0.0110782189f * fTemp168) + ((0.00598162785f * fTemp195) + ((0.00286873989f * fTemp432) + ((0.00408948027f * fTemp424) + ((0.00509659108f * fTemp15) + ((0.00671407208f * fTemp469) + ((0.00982696004f * fTemp17) + ((0.0107119968f * fTemp189) + ((0.0108035523f * fTemp521) + ((0.0103762932f * fTemp90) + (fTemp831 + ((0.0102542192f * fTemp350) + ((0.0109561449f * fTemp342) + ((0.0118106632f * fTemp463) + ((0.00918607134f * fTemp191) + ((0.00762962736f * fTemp18) + ((0.00640888698f * fTemp164) + ((0.00234992523f * fTemp359) + ((0.00210577715f * fTemp451) + ((0.00158696249f * fTemp446) + ((0.00308236945f * fTemp89) + ((0.00369273964f * fTemp156) + ((0.00619525742f * fTemp132) + ((0.00213629566f * fTemp109) + ((0.00781273842f * fTemp417) + ((0.0122379223f * fTemp384) + ((0.0126651814f * fTemp355) + ((0.0125125889f * fTemp338) + ((0.0119937742f * fTemp99) + ((0.0119327372f * fTemp108) + ((0.0116580706f * fTemp142) + ((0.00689718314f * fTemp102) + ((0.0042115543f * fTemp139) + (fTemp724 + ((0.00610370189f * fTemp408) + ((0.0108645894f * fTemp134) + ((0.0127262184f * fTemp405) + ((0.0132755516f * fTemp131) + ((0.0125736259f * fTemp130) + ((0.00814844202f * fTemp127) + ((0.00137333293f * fTemp125) + ((0.00057985168f * fTemp529) + ((0.00149540696f * fTemp375) + ((0.00186162908f * fTemp114) + ((0.0150456252f * fTemp357) + ((0.0174871068f * fTemp176) + ((0.0264595486f * fTemp232) + ((0.0297250282f * fTemp496) + ((0.0307626575f * fTemp461) + ((0.030793177f * fTemp400) + ((0.0295419171f * fTemp498) + ((0.0263374746f * fTemp406) + ((0.019348735f * fTemp494) + ((0.014618366f * fTemp395) + ((0.0233771782f * fTemp495) + ((0.0265205856f * fTemp369) + ((0.0238959938f * fTemp111) + ((0.0166936256f * fTemp203) + ((0.00979644153f * fTemp515) + ((0.00695822015f * fTemp436) + ((0.0028992584f * fTemp239) + ((0.00790429395f * fTemp412) + ((0.00897244178f * fTemp143) + ((0.0236518458f * fTemp457) + ((0.0345164351f * fTemp491) + ((0.0353099145f * fTemp526) + ((0.0309457686f * fTemp174) + ((0.0238654744f * fTemp175) + ((0.0134891812f * fTemp445) + ((0.021210365f * fTemp404) + ((0.00759910885f * fTemp506) + ((0.02438429f * fTemp28) + (fTemp602 + ((0.0975676775f * fTemp385) + ((0.112613298f * fTemp270) + ((0.105716117f * fTemp271) + ((0.0774559751f * fTemp370) + ((0.0431226529f * fTemp186) + ((0.0177617725f * fTemp188) + ((0.0448011719f * fTemp95) + ((0.0838648677f * fTemp503) + ((0.114200264f * fTemp272) + ((0.123966187f * fTemp273) + ((0.125949889f * fTemp274) + ((0.119266339f * fTemp169) + ((0.0919522718f * fTemp32) + ((0.0444959886f * fTemp33) + ((0.0462050252f * fTemp477) + ((0.100497454f * fTemp510) + ((0.0726950914f * fTemp284) + ((0.0220648833f * fTemp285) + ((0.117923521f * fTemp505) + ((0.25452438f * fTemp511) + ((0.355815291f * fTemp291) + ((0.307962269f * fTemp292) + ((0.202612385f * fTemp293) + ((0.0051576281f * fTemp294) + ((0.0786767155f * fTemp479) + ((0.231818601f * fTemp35) + ((0.313028365f * fTemp36) + ((0.23227638f * fTemp37) + ((0.0972624868f * fTemp38) + ((0.00497451704f * fTemp43) + ((0.225501269f * fTemp44) + ((0.282845557f * fTemp45) + ((0.165807068f * fTemp46) + ((0.332316041f * fTemp430) + ((0.939268172f * fTemp297) + ((1.00003052f * fTemp298) + ((0.634937584f * fTemp299) + ((0.254036069f * fTemp300) + ((0.0705282763f * fTemp301) + ((0.0179448836f * fTemp50) + ((0.00527970213f * fTemp52) + ((0.004852443f * fTemp212) + ((0.00854518265f * fTemp199) + ((0.00927762687f * fTemp314) + ((0.00708029419f * fTemp63) + ((0.00631733146f * fTemp65) + ((0.000274666585f * fTemp318) + ((0.0301217698f * fTemp322) + ((0.000671407208f * fTemp507) + ((0.0019531846f * fTemp79) + ((0.00332651753f * fTemp80) + ((0.00665303506f * fTemp83) + ((0.00698873866f * fTemp327) + ((((((0.00747703481f * ((fTemp62 - fTemp269) - fTemp113)) + ((0.000518814661f * ((fTemp157 + fTemp416) - fTemp389)) + ((0.00122074038f * (fTemp390 - fTemp163)) + ((0.00305185094f * (fTemp354 + (fTemp396 + (fTemp234 + fTemp331)))) + ((0.00244148076f * (fTemp372 + fTemp267)) + ((0.000427259132f * (fTemp394 + fTemp482)) + ((0.00561540574f * (fTemp399 + (fTemp13 + (fTemp266 + fTemp87)))) + ((0.0107730338f * (fTemp403 - fTemp210)) + ((0.00506607257f * (fTemp393 + fTemp82)) + ((0.00906399731f * (fTemp340 - fTemp480)) + ((0.00939970091f * (fTemp410 + fTemp315)) + ((0.00411999878f * (fTemp148 + fTemp14)) + ((0.000610370189f * (fTemp120 + fTemp474)) + ((0.000183111057f * (fTemp150 + fTemp312)) + ((0.00216681417f * (fTemp121 + (fTemp78 - fTemp311))) + ((0.00479140598f * (fTemp152 + (fTemp133 + fTemp194))) + ((0.00595110934f * (fTemp420 - fTemp161)) + ((0.00778221991f * (fTemp426 + (fTemp19 + (fTemp253 - fTemp467)))) + ((0.00820947904f * (fTemp182 + (fTemp196 - fTemp218))) + ((0.00869777519f * (fTemp185 + fTemp61)) + ((0.00845362712f * (fTemp20 + fTemp465)) + ((0.0106814783f * (fTemp230 + fTemp858)) + ((0.00222785119f * (fTemp229 - fTemp126)) + ((0.00183111057f * (fTemp228 + fTemp69)) + ((0.0025940733f * (fTemp414 + fTemp319)) + ((0.00637836847f * (fTemp433 + fTemp86)) + ((0.00558488723f * (fTemp472 + fTemp233)) + ((0.0071108127f * (fTemp476 + fTemp59)) + ((0.0022583697f * (fTemp183 + (fTemp222 + fTemp332))) + ((0.0109866634f * (fTemp31 - fTemp110)) + ((0.00546281319f * (fTemp160 - fTemp147)) + ((0.00448622089f * (fTemp171 + fTemp413)) + ((0.0154118473f * (fTemp105 + fTemp435)) + ((0.0247199927f * (fTemp302 - fTemp415)) + ((0.011383404f * (fTemp51 - fTemp368)) + ((0.00357066561f * ((fTemp81 - fTemp237) - fTemp460)) + ((0.021332439f * (fTemp397 + fTemp290)) + ((0.0175786614f * (((fTemp401 - fTemp247) - fTemp242) - fTemp94)) + ((((0.00454725791f * (fTemp320 + fTemp328)) + ((0.00531022064f * (fTemp67 + fTemp1)) + (0.00668355357f * (fTemp64 + fTemp84)))) + (0.00650044251f * (fTemp7 + fTemp85))) + (0.00363170262f * ((fTemp313 + fTemp316) - fTemp248))))))))))))))))))))))))))))))))))))))))) + (0.008087405f * ((fTemp149 + fTemp60) - fTemp371))) + (0.00247199927f * (fTemp352 + fTemp112))) + (0.00366222113f * (fTemp238 - fTemp231))) + (0.00399792474f * (fTemp329 - fTemp334)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.0979644135f * fTemp0) + ((0.183782458f * fTemp1) + ((0.336313963f * fTemp2) + ((0.102603227f * fTemp219) + ((0.0415356904f * fTemp220) + ((0.080813013f * fTemp221) + ((0.0589922778f * fTemp222) + ((0.00408948027f * fTemp368) + ((0.00286873989f * fTemp141) + ((0.0074159978f * fTemp138) + (fTemp743 + ((0.00933866389f * fTemp377) + ((0.00662251655f * fTemp160) + ((0.00479140598f * fTemp450) + ((0.0101016266f * fTemp193) + ((0.00955229346f * fTemp184) + ((0.00796533097f * fTemp208) + ((0.00518814661f * fTemp467) + ((0.00186162908f * fTemp110) + ((0.00817896053f * fTemp489) + ((0.0061342204f * fTemp178) + ((0.00494399853f * fTemp367) + ((0.00442518387f * fTemp464) + ((0.00357066561f * fTemp227) + ((0.00265511032f * fTemp93) + ((0.00427259132f * fTemp12) + ((0.00497451704f * fTemp478) + ((0.00512710959f * fTemp196) + ((0.00405896176f * fTemp195) + ((0.00262459181f * fTemp414) + ((0.00762962736f * fTemp229) + ((0.00994903408f * fTemp432) + ((0.0104678487f * fTemp424) + ((0.00854518265f * fTemp15) + ((0.0045167394f * fTemp469) + ((0.00482192449f * fTemp459) + ((0.00234992523f * fTemp177) + ((0.00378429517f * fTemp146) + ((0.0042115543f * fTemp443) + ((0.00415051728f * fTemp364) + ((0.00402844325f * fTemp99) + ((0.00143436994f * fTemp374) + ((0.0012817774f * fTemp352) + ((0.000305185094f * fTemp400) + ((0.00601214636f * fTemp504) + ((0.00976592302f * fTemp260) + ((0.00894192327f * fTemp262) + ((0.00747703481f * fTemp263) + ((0.00595110934f * fTemp264) + ((0.00509659108f * fTemp429) + ((0.00668355357f * fTemp362) + ((0.00726340525f * fTemp266) + ((0.00683614612f * fTemp506) + ((0.00543229468f * fTemp267) + ((0.00280770287f * fTemp28) + (fTemp623 + ((0.0123905148f * fTemp277) + ((0.016052736f * fTemp278) + ((0.0174565874f * fTemp501) + ((0.0147404401f * fTemp488) + ((0.00912503432f * fTemp471) + ((0.00885036774f * fTemp477) + ((0.0137943663f * fTemp284) + ((0.0135807367f * fTemp285) + ((0.0131839961f * fTemp286) + ((0.00784325693f * fTemp40) + ((0.0271614734f * fTemp297) + ((0.0482192449f * fTemp298) + ((0.0587481298f * fTemp299) + ((0.05038606f * fTemp300) + ((0.0226142164f * fTemp301) + ((0.0117191076f * fTemp304) + ((0.0345469527f * fTemp509) + ((0.0495315418f * fTemp310) + ((0.0638142005f * fTemp311) + ((0.0706503466f * fTemp312) + ((0.0259712525f * fTemp313) + ((0.00997955259f * fTemp199) + ((0.107547231f * fTemp314) + ((0.0824304968f * fTemp315) + ((0.0302743614f * fTemp61) + ((0.0899685696f * fTemp320) + ((0.126316115f * fTemp321) + ((0.13028352f * fTemp322) + ((0.0361949541f * fTemp68) + ((0.156956688f * fTemp135) + ((0.239143044f * fTemp323) + ((0.204382464f * fTemp324) + ((0.0851771608f * fTemp325) + ((0.121646777f * fTemp82) + ((0.340098262f * fTemp83) + ((0.111087374f * fTemp84) + ((0.814081252f * fTemp328) + (fTemp329 + ((0.726218462f * fTemp331) + ((0.333628356f * fTemp332) + ((0.000885036774f * (fTemp333 + fTemp98)) + ((0.000823999755f * (fTemp334 + (fTemp231 + fTemp132))) + ((0.00100711081f * (fTemp101 + (fTemp151 + fTemp292))) + ((0.00137333293f * (fTemp336 + (fTemp346 + (fTemp383 + (fTemp137 + fTemp280))))) + ((0.00149540696f * (fTemp345 + fTemp410)) + ((0.00152592547f * (fTemp365 + (fTemp118 + (fTemp225 + (fTemp470 + (fTemp281 + fTemp290)))))) + ((0.00173955504f * (fTemp371 + (fTemp201 + (fTemp157 + fTemp293)))) + ((0.00140385143f * (fTemp124 + (fTemp353 + ((fTemp249 - fTemp440) - fTemp130)))) + ((0.00106814783f * (fTemp513 + ((fTemp22 + (fTemp210 - fTemp490)) - fTemp405))) + ((0.000701925717f * ((fTemp340 + ((fTemp72 - fTemp457) - fTemp167)) - fTemp375)) + ((0.000610370189f * (((fTemp172 + (fTemp416 - fTemp176)) - fTemp393) - fTemp529)) + ((0.000946073793f * ((fTemp150 + (fTemp474 - fTemp421)) - fTemp396)) + ((0.00122074038f * ((fTemp121 + ((fTemp14 + fTemp248) - fTemp191)) - fTemp131)) + ((0.000854518265f * (((fTemp487 - fTemp496) - fTemp455) - fTemp136)) + ((9.15555283e-05f * ((fTemp347 + fTemp233) - fTemp102)) + ((0.00366222113f * (fTemp108 + fTemp116)) + ((0.00396740623f * (fTemp338 - fTemp123)) + ((0.00347911008f * (fTemp355 - fTemp149)) + ((0.00204474013f * (fTemp376 + (fTemp483 + fTemp468))) + ((0.000762962736f * (fTemp145 + (fTemp109 + (fTemp344 + (fTemp100 + (fTemp270 - fTemp179)))))) + ((0.000671407208f * (fTemp148 + (fTemp378 + (fTemp211 + fTemp234)))) + ((0.00503555406f * ((fTemp241 + (fTemp257 + fTemp265)) - fTemp161)) + ((0.00167851802f * ((fTemp482 + fTemp255) - fTemp89)) + ((0.00256355479f * ((fTemp380 + fTemp181) - fTemp425)) + ((0.00311288796f * (fTemp41 - fTemp26)) + ((0.00131229591f * ((fTemp472 + (fTemp348 - fTemp439)) - fTemp434)) + ((0.00219733268f * (fTemp438 + fTemp502)) + ((0.0035401471f * (fTemp170 + fTemp387)) + ((0.000427259132f * ((fTemp235 - fTemp413) - fTemp451)) + ((0.0019226661f * (fTemp458 + fTemp230)) + ((0.00201422162f * (fTemp122 + fTemp215)) + ((0.00418103579f * (fTemp342 + fTemp460)) + ((0.00830103457f * ((fTemp206 + fTemp39) - fTemp521)) + ((0.000335703604f * ((fTemp435 + ((fTemp498 - fTemp461) - fTemp357)) - fTemp16)) + ((0.004852443f * (fTemp228 + (fTemp305 - fTemp11))) + ((0.00228888821f * (fTemp454 + (fTemp147 + fTemp38))) + ((0.00469985045f * (fTemp476 - fTemp356)) + ((0.00125125889f * (fTemp192 + (fTemp418 + (fTemp236 + (fTemp33 - fTemp253))))) + ((0.00198370311f * (fTemp294 - fTemp153)) + ((0.00216681417f * (fTemp398 + fTemp385)) + ((0.00271614734f * (fTemp486 + fTemp415)) + ((0.00411999878f * (fTemp126 + (fTemp239 + (fTemp308 - fTemp503)))) + ((0.00231940672f * (fTemp207 + (fTemp244 + fTemp282))) + ((0.00540177617f * (fTemp480 + fTemp240)) + ((0.00146488845f * ((fTemp456 + (fTemp484 - fTemp511)) - fTemp339)) + ((0.00875881221f * (fTemp209 + fTemp171)) + ((0.00863673817f * (fTemp259 - fTemp158)) + ((0.00692770164f * (fTemp258 - fTemp128)) + ((0.00341807306f * (fTemp514 + (fTemp256 + fTemp268))) + ((0.00393688772f * (fTemp224 + fTemp492)) + ((0.00308236945f * (fTemp242 - fTemp395)) + ((0.0019531846f * (fTemp247 - fTemp515)) + ((0.00238044374f * (fTemp237 + fTemp269)) + ((0.000152592547f * (fTemp526 + fTemp174)) + ((0.000732444227f * (fTemp445 + fTemp250)) + ((0.00985747855f * (fTemp261 + fTemp288)) + ((0.00585955381f * (fTemp180 + fTemp289)) + ((0.00793481246f * ((fTemp430 - fTemp213) - fTemp274)) + ((0.00891140476f * (fTemp276 + fTemp303)) + ((0.0122379223f * (fTemp510 + fTemp287)) + ((0.0188909583f * (fTemp309 - fTemp36)) + ((0.00189214759f * (fTemp319 - fTemp42)) + ((0.00473036896f * fTemp789) + (0.00372325815f * fTemp575)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.137699515f * fTemp402) + ((0.0566423535f * fTemp218) + ((0.162724689f * fTemp3) + ((0.0701315328f * fTemp4) + ((0.133457437f * fTemp5) + ((0.0191961434f * fTemp6) + ((0.13342692f * fTemp7) + ((0.00054933317f * fTemp165) + (fTemp857 + ((0.00650044251f * fTemp104) + ((0.00491348002f * fTemp343) + ((0.00488296151f * fTemp10) + ((0.00241096225f * fTemp197) + ((0.00460829493f * fTemp17) + ((0.00744651631f * fTemp189) + ((0.0071108127f * fTemp90) + ((0.00567644276f * fTemp19) + ((0.00665303506f * fTemp187) + ((0.00766014587f * fTemp20) + ((0.00805688649f * fTemp185) + ((0.00729392376f * fTemp182) + ((0.00537125766f * fTemp164) + ((0.00253303628f * fTemp24) + ((0.00363170262f * fTemp163) + ((0.00598162785f * fTemp115) + ((0.00527970213f * fTemp427) + ((0.00274666585f * fTemp448) + ((0.0025940733f * fTemp386) + ((0.00177007355f * fTemp404) + ((0.00335703604f * fTemp188) + ((0.00643940549f * fTemp272) + ((0.00823999755f * fTemp273) + ((0.00213629566f * fTemp32) + ((0.00564592425f * fTemp441) + ((0.0132755516f * fTemp485) + ((0.0207831059f * fTemp479) + ((0.0238044374f * fTemp35) + ((0.0090334788f * fTemp37) + ((0.0083925901f * fTemp45) + ((0.017975403f * fTemp46) + ((0.0251777712f * fTemp47) + ((0.0249946602f * fTemp48) + ((0.0181890316f * fTemp49) + ((0.0115665151f * fTemp295) + ((0.013000885f * fTemp302) + ((0.0400097668f * fTemp50) + ((0.0500503555f * fTemp51) + ((0.0408642851f * fTemp52) + ((0.0222479943f * fTemp53) + ((0.0319223627f * fTemp54) + ((0.0314035453f * fTemp55) + ((0.0292977691f * fTemp56) + ((0.0305185094f * fTemp57) + ((0.0299996957f * fTemp144) + ((0.0115970336f * fTemp508) + ((0.0307626575f * fTemp212) + ((0.0925931558f * fTemp58) + ((0.1282693f * fTemp59) + ((0.0728476793f * fTemp60) + ((0.0576494634f * fTemp62) + ((0.0867030844f * fTemp63) + ((0.112186044f * fTemp64) + ((0.13876766f * fTemp65) + ((0.126590773f * fTemp66) + ((0.0983306393f * fTemp67) + ((0.048890654f * fTemp316) + ((0.0285958443f * fTemp318) + ((0.0467238389f * fTemp69) + ((0.13159582f * fTemp70) + ((0.118717f * fTemp71) + ((0.136967078f * fTemp326) + ((0.130497143f * fTemp73) + ((0.0545060597f * fTemp74) + ((0.0100711081f * fTemp75) + ((0.0267647337f * fTemp76) + ((0.099276714f * fTemp77) + ((0.155461282f * fTemp507) + ((0.160191655f * fTemp78) + ((0.162694171f * fTemp79) + ((0.162022769f * fTemp80) + ((0.0639667958f * fTemp81) + ((0.365977973f * fTemp327) + ((0.815820813f * fTemp85) + ((0.935758531f * fTemp86) + ((0.562547684f * fTemp87) + (((0.00155644398f * ((fTemp127 + (((fTemp379 + fTemp105) - fTemp452) - fTemp442)) - fTemp341)) + ((0.001617481f * ((fTemp817 - fTemp113) - fTemp106)) + ((0.00158696249f * ((fTemp403 - fTemp437) - fTemp337)) + ((0.00134281442f * (((fTemp399 - fTemp152) - fTemp360) - fTemp114)) + ((0.00164799951f * (fTemp401 - fTemp366)) + ((0.000518814661f * ((fTemp499 - fTemp419) - fTemp390)) + ((3.05185094e-05f * (fTemp143 - fTemp112)) + ((0.000366222113f * (fTemp354 + (fTemp420 + (fTemp406 - fTemp350)))) + ((0.000640888698f * (fTemp372 + (fTemp125 - fTemp433))) + ((0.00057985168f * (fTemp394 + (fTemp428 + ((fTemp407 + (fTemp516 + fTemp34)) - fTemp13)))) + ((0.000915555283f * (fTemp409 + (fTemp408 + (fTemp97 + fTemp436)))) + ((0.000793481246f * (fTemp139 + (fTemp397 - fTemp120))) + ((0.00170903653f * ((((fTemp92 + fTemp465) - fTemp198) - fTemp183) - fTemp119)) + ((0.00277718436f * (((fTemp203 - fTemp392) - fTemp384) - fTemp142)) + ((0.00103762932f * (fTemp232 - fTemp417)) + ((0.00207525864f * (fTemp155 + fTemp706)) + ((0.00390636921f * (fTemp382 + fTemp214)) + ((0.00592059083f * (fTemp140 - fTemp463)) + ((0.00317392498f * (fTemp373 + (fTemp495 + fTemp186))) + ((0.00329599902f * (fTemp431 + (fTemp369 - fTemp205))) + ((0.000396740623f * ((fTemp473 + fTemp291) - fTemp166)) + ((0.00299081393f * ((fTemp359 + ((((fTemp30 + fTemp43) - fTemp29) - fTemp173) - fTemp168)) - fTemp351)) + ((0.00180059206f * (((fTemp216 - fTemp500) - fTemp388) - fTemp446)) + ((0.000976592302f * ((fTemp134 + (fTemp426 + fTemp271)) - fTemp389)) + ((6.10370189e-05f * ((fTemp491 + fTemp254) - fTemp23)) + ((0.00476088747f * (fTemp18 + ((fTemp8 + fTemp453) - fTemp103))) + ((0.003234962f * ((fTemp111 - fTemp194) - fTemp133)) + ((0.00268562883f * (fTemp44 - fTemp202)) + ((0.00921658985f * (fTemp306 - fTemp462)) + ((0.00360118411f * (fTemp217 - fTemp200)) + ((0.00115970336f * (fTemp381 + (fTemp349 + fTemp252))) + ((0.00250251777f * (fTemp129 + (fTemp423 - fTemp335))) + ((0.00561540574f * (fTemp169 - fTemp466)) + ((0.00375377666f * (fTemp159 - fTemp475)) + ((0.00109866634f * (((fTemp505 - fTemp243) - fTemp447) - fTemp226)) + ((0.000274666585f * (((fTemp422 + (fTemp251 - fTemp175)) - fTemp204) - fTemp96)) + ((0.00305185094f * ((fTemp449 - fTemp154) - fTemp391)) + ((0.0022583697f * (((fTemp370 + fTemp31) - fTemp520) - fTemp493)) + ((0.00292977691f * (fTemp296 - fTemp238)) + ((0.00247199927f * (fTemp95 - fTemp246)) + ((0.0236823633f * (fTemp307 + fTemp223)) + (0.00332651753f * fTemp555)))))))))))))))))))))))))))))))))))))))))) + (0.00119022187f * ((((fTemp444 + fTemp94) - fTemp361) - fTemp107) - fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow54 ? (((0.0485244319f * fTemp222) + ((0.00155644398f * fTemp183) + ((0.00112918485f * fTemp202) + ((0.00939970091f * fTemp196) + ((0.0104678487f * fTemp476) + ((0.014679403f * fTemp432) + ((0.016296884f * fTemp424) + ((0.0116580706f * fTemp469) + ((0.00753807183f * fTemp16) + (fTemp853 + ((0.0165715516f * fTemp18) + ((0.0193182174f * fTemp19) + ((0.0183416251f * fTemp187) + ((0.0057985168f * fTemp164) + ((0.00994903408f * fTemp177) + ((0.00857570115f * fTemp458) + ((0.00375377666f * fTemp23) + ((0.00512710959f * fTemp351) + ((0.0071108127f * fTemp146) + ((0.00885036774f * fTemp443) + ((0.00961333048f * fTemp170) + ((0.00918607134f * fTemp438) + ((0.00891140476f * fTemp166) + ((0.00866725668f * fTemp434) + ((0.00796533097f * fTemp24) + ((0.00433362834f * fTemp431) + ((0.0093691824f * fTemp89) + ((0.0118411817f * fTemp97) + ((0.0117801446f * fTemp156) + ((0.00509659108f * fTemp115) + ((0.0054933317f * fTemp427) + ((0.00848414563f * fTemp155) + ((0.0105899228f * fTemp420) + ((0.0127262184f * fTemp152) + ((0.0109256264f * fTemp121) + ((0.00473036896f * fTemp148) + ((0.00616473891f * fTemp376) + ((0.00698873866f * fTemp384) + ((0.00704977568f * fTemp355) + ((0.00320444349f * fTemp99) + ((0.00799584948f * fTemp134) + ((0.00805688649f * fTemp405) + ((0.00292977691f * fTemp125) + ((0.00296029542f * fTemp529) + ((0.00454725791f * fTemp372) + (fTemp804 + ((0.00466933195f * fTemp390) + (fTemp795 + ((0.00100711081f * fTemp124) + ((0.00134281442f * fTemp113) + (fTemp811 + ((0.00701925717f * fTemp246) + ((0.00756859034f * fTemp247) + ((0.00491348002f * fTemp487) + ((0.00137333293f * fTemp175) + ((0.0137638478f * fTemp188) + ((0.0228888821f * fTemp30) + ((0.0189214759f * fTemp31) + ((0.00897244178f * fTemp273) + ((0.037324138f * fTemp276) + ((0.0528275408f * fTemp277) + ((0.0218817722f * fTemp278) + ((0.0156865139f * fTemp282) + ((0.0139164403f * fTemp283) + ((0.0121463668f * fTemp286) + ((0.0271919928f * fTemp292) + ((0.0733665004f * fTemp293) + ((0.0684835389f * fTemp294) + ((0.0203558467f * fTemp484) + ((0.0278939176f * fTemp40) + ((0.0465102084f * fTemp41) + ((0.0442518406f * fTemp42) + ((0.0332651772f * fTemp214) + ((0.0446180627f * fTemp43) + ((0.061525315f * fTemp44) + ((0.0820947886f * fTemp45) + ((0.0867641196f * fTemp46) + ((0.0430005789f * fTemp47) + ((0.112735376f * fTemp430) + ((0.163762316f * fTemp297) + ((0.11758782f * fTemp298) + ((0.0277718436f * fTemp304) + ((0.221625417f * fTemp55) + ((0.357860029f * fTemp56) + ((0.271248519f * fTemp57) + ((0.348338276f * fTemp309) + ((0.962645352f * fTemp509) + (fTemp310 + ((0.576769292f * fTemp311) + ((0.191930905f * fTemp312) + ((0.0189825129f * fTemp313) + ((0.000854518265f * fTemp315) + ((0.000823999755f * fTemp135) + ((0.000213629566f * fTemp327) + (((((0.000122074038f * ((fTemp814 - fTemp64) - fTemp341)) + ((0.000915555283f * ((fTemp6 + fTemp323) - fTemp337)) + ((0.0012817774f * (fTemp365 - fTemp198)) + ((0.00189214759f * (fTemp371 + fTemp398)) + ((0.000762962736f * (fTemp118 + fTemp346)) + ((0.00167851802f * (fTemp383 - fTemp126)) + ((0.0051576281f * (fTemp354 - fTemp128)) + ((0.00280770287f * (fTemp394 + (fTemp100 + (fTemp191 - fTemp205)))) + ((0.00308236945f * (fTemp396 + (fTemp127 + fTemp17))) + ((0.00479140598f * (fTemp130 - fTemp480)) + ((0.00619525742f * (fTemp409 + (fTemp22 - fTemp463))) + ((0.000671407208f * (fTemp136 + fTemp324)) + ((0.00408948027f * ((fTemp445 - fTemp515) - fTemp119)) + ((0.00573747978f * (fTemp338 + (fTemp417 + fTemp359))) + ((0.00585955381f * (fTemp145 + fTemp272)) + ((0.0022583697f * (fTemp109 + (fTemp162 - fTemp381))) + (((3.05185094e-05f * (((fTemp464 + ((fTemp75 + ((fTemp328 - fTemp0) - fTemp84)) - fTemp74)) - fTemp192) - fTemp344)) + ((0.00714133121f * (fTemp150 - fTemp200)) + ((0.00662251655f * (fTemp382 - fTemp459)) + ((0.00567644276f * (fTemp140 - fTemp475)) + ((0.0132145146f * (fTemp426 + fTemp428)) + ((0.00366222113f * (fTemp373 + fTemp244)) + ((0.009704886f * (fTemp364 + (fTemp122 + fTemp195))) + ((0.0035401471f * (fTemp446 - fTemp342)) + ((0.00836207159f * (fTemp151 - fTemp490)) + ((0.0107425153f * (fTemp185 + fTemp95)) + ((0.0148014771f * (fTemp20 + fTemp15)) + ((0.000335703604f * ((fTemp85 - fTemp284) - fTemp228)) + ((0.000946073793f * (fTemp454 + fTemp510)) + ((0.00634784997f * (fTemp133 - fTemp444)) + ((0.00054933317f * (fTemp437 + (fTemp274 - fTemp367))) + ((0.00256355479f * (fTemp266 - fTemp210)) + ((0.0042115543f * (fTemp251 - fTemp171)) + ((0.00543229468f * (fTemp250 - fTemp466)) + ((0.00729392376f * (fTemp506 - fTemp435)) + ((0.00680562761f * (fTemp468 - fTemp226)) + ((0.00329599902f * (fTemp285 - fTemp400)) + ((0.00643940549f * (fTemp249 - fTemp416)) + ((0.00210577715f * ((fTemp267 - fTemp491) - fTemp457)) + ((0.00952177495f * (fTemp477 + fTemp287)) + ((0.000274666585f * (((fTemp86 + fTemp331) - fTemp83) - fTemp2)) + ((0.000488296151f * (fTemp62 + (fTemp72 - fTemp320))) + ((0.000183111057f * ((((((fTemp78 + (fTemp81 + fTemp329)) - fTemp402) - fTemp77) - fTemp73) - fTemp219) - fTemp5)) + ((0.000152592547f * ((fTemp318 + fTemp325) - fTemp67)) + ((0.000396740623f * ((fTemp79 + fTemp80) - fTemp322)) + ((0.000244148076f * (((fTemp332 - fTemp326) - fTemp68) - fTemp66)) + (0.00668355357f * fTemp846))))))))))))))))))))))))))))))) + (0.00106814783f * (fTemp107 + (fTemp61 - fTemp114)))))))))))))))))))) + (0.00180059206f * (fTemp101 + fTemp252))) + (0.00247199927f * (fTemp513 - fTemp142))) + (0.00213629566f * (fTemp88 + fTemp167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00286873989f * fTemp221) + ((0.03607288f * fTemp7) + ((0.585833311f * fTemp223) + ((0.00683614612f * fTemp447) + ((0.00384533219f * fTemp224) + ((0.00158696249f * fTemp387) + ((0.00305185094f * fTemp415) + ((0.00399792474f * fTemp141) + ((0.00601214636f * fTemp392) + ((0.00674459059f * fTemp335) + ((0.00744651631f * fTemp391) + ((0.00708029419f * fTemp514) + ((0.0077517014f * fTemp211) + ((0.00817896053f * fTemp165) + ((0.00823999755f * fTemp421) + ((0.00769066438f * fTemp413) + (fTemp716 + ((0.00686666463f * fTemp379) + ((0.00592059083f * fTemp378) + ((0.0058290353f * fTemp91) + ((0.00418103579f * fTemp377) + ((0.00469985045f * fTemp380) + ((0.00476088747f * fTemp158) + ((0.00531022064f * fTemp208) + ((0.00540177617f * fTemp467) + ((0.004852443f * fTemp110) + ((0.00430310983f * fTemp363) + ((0.00335703604f * fTemp489) + ((0.00216681417f * fTemp462) + ((0.00125125889f * fTemp206) + ((0.000640888698f * fTemp178) + ((0.000610370189f * fTemp116) + (fTemp854 + ((0.0019226661f * fTemp483) + ((0.00268562883f * fTemp452) + ((0.00231940672f * fTemp418) + ((0.00143436994f * fTemp348) + ((0.000885036774f * fTemp442) + ((0.000701925717f * fTemp157) + ((0.000366222113f * fTemp482) + ((0.00222785119f * fTemp201) + ((0.0148625141f * fTemp13) + ((0.00943021942f * fTemp414) + ((0.0147709586f * fTemp14) + ((0.00207525864f * fTemp521) + ((0.00149540696f * fTemp90) + ((0.00103762932f * fTemp350) + ((0.0045167394f * fTemp340) + ((0.00411999878f * fTemp102) + ((0.00115970336f * fTemp345) + ((0.00326548051f * fTemp357) + ((0.00378429517f * fTemp496) + ((0.0028992584f * fTemp498) + ((0.00314340647f * fTemp395) + ((0.00558488723f * fTemp203) + ((0.00448622089f * fTemp234) + ((0.00781273842f * fTemp422) + ((0.00811792351f * fTemp94) + ((0.00894192327f * fTemp236) + ((0.0074159978f * fTemp238) + ((0.0122074038f * fTemp240) + ((0.00967436749f * fTemp504) + ((0.00997955259f * fTemp412) + ((0.00985747855f * fTemp143) + ((0.00131229591f * fTemp470) + ((0.00555436872f * fTemp423) + ((0.00427259132f * fTemp253) + ((0.00695822015f * fTemp254) + ((0.00878933072f * fTemp255) + ((0.00650044251f * fTemp260) + ((0.0125125889f * fTemp261) + ((0.0230109561f * fTemp262) + ((0.030976288f * fTemp263) + ((0.0322580636f * fTemp264) + ((0.0273140669f * fTemp265) + ((0.0231025126f * fTemp497) + ((0.0199896246f * fTemp429) + ((0.016052736f * fTemp180) + ((0.0150151066f * fTemp269) + ((0.0240485854f * fTemp520) + ((0.0305185094f * fTemp28) + ((0.027558215f * fTemp29) + ((0.019531846f * fTemp385) + ((0.0156559963f * fTemp270) + ((0.0223700684f * fTemp271) + ((0.02438429f * fTemp370) + ((0.0299081393f * fTemp169) + ((0.0648213178f * fTemp32) + ((0.0800805688f * fTemp33) + ((0.0611896105f * fTemp492) + ((0.0250556972f * fTemp501) + ((0.0530411713f * fTemp488) + ((0.0519425049f * fTemp471) + ((0.0402844325f * fTemp279) + ((0.0296945106f * fTemp280) + ((0.0200506616f * fTemp281) + ((0.00604266487f * fTemp215) + ((0.0171514023f * fTemp288) + ((0.0649433881f * fTemp289) + ((0.11468856f * fTemp290) + ((0.140293583f * fTemp505) + ((0.118747517f * fTemp511) + ((0.0513931699f * fTemp291) + ((0.0357982107f * fTemp34) + ((0.074648276f * fTemp441) + ((0.082491532f * fTemp485) + ((0.0845057517f * fTemp479) + ((0.0843531638f * fTemp35) + ((0.0853907913f * fTemp36) + ((0.0733359754f * fTemp37) + ((0.0492263548f * fTemp38) + ((0.0140385143f * fTemp39) + ((0.0192571804f * fTemp48) + ((0.103762932f * fTemp49) + ((0.158513144f * fTemp295) + ((0.145390183f * fTemp213) + ((0.0244148076f * fTemp296) + ((0.0999481156f * fTemp300) + ((0.155705437f * fTemp301) + ((0.120670184f * fTemp302) + ((0.0511185043f * fTemp50) + ((0.0155034028f * fTemp51) + ((0.0184942167f * fTemp52) + ((0.0632343516f * fTemp53) + ((0.0176091809f * fTemp159) + ((0.0754112378f * fTemp305) + ((0.165105134f * fTemp306) + ((0.187078461f * fTemp307) + ((0.0398266539f * fTemp54) + ((0.137974188f * fTemp144) + ((0.778038859f * fTemp508) + ((0.420270383f * fTemp308) + ((0.00299081393f * fTemp212) + ((0.0253913999f * fTemp58) + ((0.0342417695f * fTemp59) + ((0.0236518458f * fTemp60) + ((0.0110477004f * fTemp199) + ((0.000427259132f * fTemp70) + (((0.0025940733f * (((fTemp449 + fTemp436) - fTemp361) - fTemp231)) + ((0.00234992523f * (fTemp299 - fTemp98)) + ((0.000457777642f * ((fTemp123 + (fTemp189 + (fTemp486 + fTemp321))) - fTemp336)) + ((0.000518814661f * (fTemp106 + fTemp93)) + ((0.00057985168f * (fTemp352 - fTemp374)) + ((0.000305185094f * (((fTemp65 + (fTemp220 + fTemp686)) - fTemp227) - fTemp360)) + ((0.00183111057f * (fTemp174 - fTemp366)) + ((0.00372325815f * (fTemp369 - fTemp389)) + ((0.00369273964f * ((fTemp207 + fTemp461) - fTemp375)) + ((0.00311288796f * ((fTemp393 + fTemp10) - fTemp399)) + ((0.00350962859f * ((fTemp347 + fTemp232) - fTemp403)) + ((0.00347911008f * ((fTemp230 + fTemp197) - fTemp408)) + ((0.00152592547f * (fTemp139 - fTemp455)) + ((9.15555283e-05f * (((fTemp319 + (fTemp507 + fTemp82)) - fTemp63) - fTemp108)) + ((0.00564592425f * ((fTemp339 + fTemp474) - fTemp410)) + ((6.10370189e-05f * (fTemp120 + (((fTemp218 + fTemp76) - fTemp4) - fTemp314))) + ((0.0123599963f * (fTemp275 - fTemp132)) + ((0.00720236823f * (fTemp500 - fTemp161)) + ((0.00949125644f * (fTemp186 - fTemp163)) + ((0.00631733146f * ((fTemp241 + fTemp855) - fTemp425)) + ((0.00640888698f * (fTemp419 - fTemp26)) + ((0.00244148076f * (fTemp404 - fTemp172)) + ((0.00173955504f * ((fTemp407 + fTemp856) - fTemp451)) + ((0.00747703481f * (fTemp257 - fTemp182)) + ((0.00888088625f * (fTemp235 - fTemp229)) + ((0.0110171819f * (fTemp433 + fTemp239)) + ((0.00521866512f * (fTemp472 + fTemp386)) + ((0.00738547929f * ((fTemp181 + fTemp258) - fTemp478)) + ((0.00503555406f * ((fTemp129 + fTemp502) - fTemp12)) + ((0.00241096225f * ((fTemp209 + fTemp460) - fTemp168)) + ((0.00277718436f * (fTemp153 + (fTemp397 + fTemp233))) + ((0.0038758507f * (fTemp411 + (fTemp8 + fTemp217))) + ((0.00360118411f * (fTemp137 + (fTemp193 + fTemp104))) + ((0.00589007232f * (fTemp388 + fTemp194)) + ((0.00317392498f * (fTemp11 + (fTemp495 + fTemp216))) + ((0.00488296151f * (fTemp453 + (fTemp138 + fTemp237))) + ((0.00527970213f * (fTemp343 + (fTemp111 + fTemp242))) + ((0.00463881344f * (fTemp356 + fTemp184)) + ((0.00393688772f * (fTemp439 + fTemp465)) + ((0.00436414685f * (fTemp160 + fTemp358)) + ((0.00732444227f * (fTemp105 + fTemp493)) + ((0.00762962736f * (fTemp349 + (fTemp190 + (fTemp243 + fTemp256)))) + ((0.00659199804f * (fTemp96 + fTemp440)) + ((0.00735496078f * (fTemp147 + fTemp499)) + ((0.00506607257f * (fTemp154 + fTemp204)) + ((0.00219733268f * (fTemp173 + fTemp448)) + ((0.00238044374f * (fTemp176 + fTemp494)) + ((0.000732444227f * (fTemp401 - fTemp516)) + ((0.00561540574f * ((fTemp303 - fTemp503) - fTemp248)) + ((0.00726340525f * (fTemp92 + fTemp362)) + (0.00607318338f * (fTemp473 + fTemp225)))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00265511032f * (((fTemp406 + fTemp526) - fTemp27) - fTemp333)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.000488296151f * fTemp218) + ((0.400860608f * fTemp7) + ((0.0459303558f * fTemp222) + ((0.00173955504f * fTemp387) + ((0.00234992523f * fTemp173) + ((0.00167851802f * fTemp154) + ((0.00198370311f * fTemp190) + ((0.003234962f * fTemp475) + ((0.000762962736f * fTemp356) + ((0.000823999755f * fTemp489) + ((0.000732444227f * fTemp207) + ((0.000640888698f * fTemp103) + ((0.00476088747f * fTemp348) + ((0.00207525864f * fTemp183) + ((0.00152592547f * fTemp197) + ((0.00955229346f * fTemp414) + ((0.0105288858f * fTemp14) + ((0.00717184972f * fTemp228) + ((0.00869777519f * fTemp521) + ((0.0174871068f * fTemp90) + ((0.0217291787f * fTemp123) + ((0.0216986611f * fTemp350) + ((0.0178228095f * fTemp342) + ((0.0100100711f * fTemp179) + ((0.0186162908f * fTemp151) + ((0.0242316965f * fTemp122) + ((0.0250556972f * fTemp177) + ((0.0211798456f * fTemp458) + ((0.0149845881f * fTemp22) + ((0.00250251777f * fTemp455) + ((0.00491348002f * fTemp146) + ((0.00860621966f * fTemp364) + ((0.00817896053f * fTemp438) + ((0.00695822015f * fTemp166) + ((0.00598162785f * fTemp434) + ((0.00350962859f * fTemp27) + ((0.00546281319f * fTemp89) + ((0.00729392376f * fTemp97) + ((0.0116885891f * fTemp426) + ((0.0135502182f * fTemp163) + ((0.0116275521f * fTemp140) + ((0.0093691824f * fTemp115) + ((0.00833155308f * fTemp121) + ((0.0112308115f * fTemp150) + ((0.0136417737f * fTemp100) + ((0.0149235511f * fTemp344) + ((0.0151676992f * fTemp120) + ((0.0143436994f * fTemp109) + ((0.012817774f * fTemp148) + ((0.0106509598f * fTemp145) + ((0.00830103457f * fTemp417) + ((0.00466933195f * fTemp376) + ((0.0035401471f * fTemp384) + ((0.00262459181f * fTemp355) + ((0.00415051728f * fTemp108) + ((0.00561540574f * fTemp142) + ((0.00723288674f * fTemp119) + (fTemp813 + ((0.0154118473f * fTemp393) + ((0.0174565874f * fTemp139) + ((0.0170293283f * fTemp136) + ((0.0132450331f * fTemp408) + ((0.00686666463f * fTemp409) + (fTemp616 + ((0.00738547929f * fTemp396) + ((0.00878933072f * fTemp394) + ((0.00811792351f * fTemp375) + ((0.00668355357f * fTemp372) + ((0.00531022064f * fTemp354) + ((0.00439466536f * fTemp112) + (fTemp723 + ((0.00534073915f * fTemp118) + ((0.00735496078f * fTemp113) + ((0.00891140476f * fTemp371) + ((0.00933866389f * fTemp366) + ((0.00854518265f * fTemp365) + ((0.00479140598f * fTemp114) + ((0.00402844325f * fTemp345) + ((0.00543229468f * fTemp101) + ((0.00540177617f * fTemp98) + ((0.00497451704f * fTemp231) + ((0.00320444349f * fTemp333) + (((0.00268562883f * fTemp419) + ((0.00628681295f * fTemp239) + ((0.00244148076f * fTemp504) + ((0.0019531846f * fTemp516) + ((0.004852443f * fTemp386) + ((0.0156254768f * fTemp29) + ((0.024567401f * fTemp385) + ((0.0227362905f * fTemp270) + ((0.0126651814f * fTemp271) + ((0.0187994018f * fTemp274) + ((0.0334788039f * fTemp169) + ((0.0271919928f * fTemp32) + ((0.0057985168f * fTemp215) + ((0.0243537705f * fTemp468) + ((0.0443128757f * fTemp282) + ((0.0483108014f * fTemp283) + ((0.0275887325f * fTemp477) + ((0.0198370311f * fTemp505) + ((0.0416272469f * fTemp511) + ((0.058656577f * fTemp291) + ((0.055482652f * fTemp292) + ((0.0238349568f * fTemp293) + ((0.0431531742f * fTemp39) + ((0.0820337534f * fTemp40) + ((0.0780053139f * fTemp41) + ((0.0479750969f * fTemp42) + ((0.00265511032f * fTemp43) + ((0.031037325f * fTemp44) + ((0.0558488742f * fTemp45) + ((0.0524918362f * fTemp46) + ((0.0211188085f * fTemp298) + ((0.0809961259f * fTemp299) + ((0.115878783f * fTemp300) + ((0.0932035297f * fTemp301) + ((0.00473036896f * fTemp302) + ((0.0794396773f * fTemp159) + ((0.204168826f * fTemp303) + ((0.220343634f * fTemp304) + ((0.106784262f * fTemp305) + ((0.0138554033f * fTemp57) + ((0.0215765871f * fTemp144) + ((0.0708334595f * fTemp508) + ((0.152195811f * fTemp308) + ((0.151554912f * fTemp309) + ((0.688558638f * fTemp313) + (fTemp212 + ((0.816095471f * fTemp58) + ((0.0982085615f * fTemp59) + ((0.00863673817f * fTemp60) + ((0.00158696249f * fTemp79) + ((0.0157475509f * fTemp83) + ((0.00494399853f * (fTemp107 + (fTemp24 + fTemp502))) + ((0.00433362834f * (fTemp336 + fTemp425)) + ((0.00363170262f * (fTemp341 + (fTemp418 + fTemp210))) + ((0.00326548051f * (fTemp106 + (fTemp490 + fTemp33))) + ((0.0071108127f * (fTemp360 + fTemp443)) + ((0.00332651753f * (fTemp374 + fTemp450)) + ((0.00219733268f * (fTemp346 + ((fTemp327 - fTemp195) - fTemp189))) + ((0.0019226661f * (fTemp124 + (fTemp11 + (fTemp104 + fTemp141)))) + ((0.00369273964f * (fTemp361 + (fTemp373 + (fTemp431 + (fTemp105 + fTemp421))))) + ((0.00405896176f * (fTemp389 + fTemp223)) + ((0.00885036774f * (fTemp529 - fTemp447)) + ((0.00820947904f * (fTemp125 + (fTemp237 + fTemp238))) + ((0.000122074038f * (fTemp403 + (fTemp192 + (((fTemp0 + fTemp65) - fTemp368) - fTemp358)))) + ((0.00943021942f * (fTemp340 + fTemp428)) + ((0.00247199927f * (fTemp338 + (fTemp225 + fTemp94))) + ((0.00631733146f * (fTemp410 - fTemp149)) + ((0.00521866512f * (fTemp152 - fTemp18)) + ((0.00271614734f * (fTemp132 - fTemp164)) + ((0.00143436994f * (fTemp420 + (fTemp407 + fTemp227))) + ((0.00177007355f * (fTemp155 + fTemp153)) + ((0.00372325815f * (fTemp382 + fTemp474)) + ((0.0130314035f * (fTemp161 + fTemp156)) + ((0.00338755455f * (fTemp162 + fTemp456)) + ((0.00283822138f * (fTemp351 + (fTemp349 + fTemp422))) + ((0.00119022187f * (fTemp446 + (fTemp486 + (fTemp439 + (fTemp430 + fTemp507))))) + ((0.000854518265f * (fTemp172 + (fTemp343 + (fTemp110 + fTemp500)))) + ((0.00131229591f * (fTemp451 + fTemp392)) + ((0.0022583697f * (fTemp359 + (fTemp452 + fTemp436))) + ((0.0119937742f * (fTemp463 + fTemp214)) + ((0.000213629566f * (fTemp432 + ((fTemp319 - fTemp244) - fTemp498))) + ((0.00408948027f * (fTemp229 + fTemp96)) + ((0.00186162908f * ((fTemp8 + fTemp28) - fTemp478)) + ((0.00180059206f * ((fTemp464 + fTemp226) - fTemp12)) + ((0.000915555283f * (fTemp411 + fTemp480)) + ((0.00277718436f * (fTemp202 + fTemp147)) + ((0.00134281442f * (fTemp483 + fTemp92)) + ((0.00140385143f * (fTemp367 + (fTemp242 - fTemp377))) + ((0.0025940733f * (fTemp137 + (fTemp466 + fTemp234))) + ((0.00149540696f * (fTemp116 + (fTemp435 + fTemp335))) + ((0.000366222113f * (((fTemp199 + (fTemp5 + fTemp135)) - fTemp290) - fTemp206)) + ((6.10370189e-05f * (fTemp462 + (fTemp314 + (fTemp220 + (fTemp219 - fTemp3))))) + ((0.00103762932f * (fTemp388 + fTemp339)) + ((0.00146488845f * (fTemp363 + fTemp181)) + ((0.00109866634f * (fTemp453 + fTemp158)) + ((0.000244148076f * (fTemp184 + (fTemp66 - fTemp129))) + ((0.00378429517f * (fTemp91 + fTemp240)) + ((0.00436414685f * (fTemp444 + (fTemp379 + fTemp216))) + ((0.00253303628f * (fTemp514 + fTemp81)) + ((0.00183111057f * (fTemp391 + fTemp241)) + ((0.000946073793f * (fTemp77 - fTemp406)) + ((0.000976592302f * ((fTemp515 + fTemp86) - fTemp203)) + ((0.000793481246f * (fTemp75 - fTemp247)) + ((0.000152592547f * ((fTemp318 + fTemp332) - fTemp61)) + ((9.15555283e-05f * ((fTemp64 + (fTemp67 + fTemp320)) - fTemp62)) + ((0.00057985168f * (fTemp73 - fTemp326)) + (0.000305185094f * (fTemp63 + (fTemp68 + (fTemp70 + (fTemp71 + fTemp329))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00137333293f * fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0118106632f * fTemp2) + ((0.00115970336f * fTemp402) + ((0.00823999755f * fTemp204) + ((0.00302133244f * fTemp460) + ((0.00204474013f * fTemp171) + ((0.00201422162f * fTemp476) + ((0.000671407208f * fTemp454) + ((0.0107730338f * fTemp15) + ((0.0166936256f * fTemp16) + ((0.0051576281f * fTemp191) + ((0.00381481368f * fTemp19) + ((0.00390636921f * fTemp20) + ((0.00625629444f * fTemp131) + ((0.00643940549f * fTemp176) + ((0.00445570238f * fTemp449) + ((0.00555436872f * fTemp395) + ((0.00106814783f * fTemp470) + ((0.00558488723f * fTemp175) + ((0.00720236823f * fTemp445) + ((0.0106204413f * fTemp250) + ((0.0102237007f * fTemp251) + ((0.0090334788f * fTemp252) + ((0.00708029419f * fTemp401) + ((0.0147099216f * fTemp253) + ((0.0284432508f * fTemp255) + ((0.0264290292f * fTemp256) + ((0.0181890316f * fTemp257) + ((0.00604266487f * fTemp261) + ((0.00994903408f * fTemp262) + ((0.0113528855f * fTemp263) + ((0.0122379223f * fTemp265) + ((0.0140079958f * fTemp497) + ((0.0182500686f * fTemp429) + ((0.024506364f * fTemp362) + ((0.0213019196f * fTemp266) + ((0.0109866634f * fTemp267) + ((0.0126041444f * fTemp268) + ((0.0140995514f * fTemp269) + ((0.00985747855f * fTemp520) + ((0.00164799951f * fTemp370) + ((0.01617481f * fTemp186) + ((0.0244758446f * fTemp188) + ((0.02438429f * fTemp30) + ((0.0200506616f * fTemp31) + ((0.016113773f * fTemp95) + ((0.0159611814f * fTemp503) + ((0.0123599963f * fTemp272) + ((0.0296029542f * fTemp492) + ((0.0498672463f * fTemp275) + ((0.0525833927f * fTemp276) + ((0.0497451723f * fTemp277) + ((0.0511490218f * fTemp278) + ((0.0514847264f * fTemp501) + ((0.0431836918f * fTemp488) + ((0.0297250282f * fTemp471) + ((0.0173650328f * fTemp279) + ((0.009704886f * fTemp280) + ((0.0140690329f * fTemp510) + ((0.0603961311f * fTemp284) + ((0.0920743421f * fTemp285) + ((0.0962553769f * fTemp286) + ((0.0758384988f * fTemp287) + ((0.0453199856f * fTemp288) + ((0.0202642903f * fTemp289) + ((0.0335093252f * fTemp294) + ((0.0916165635f * fTemp484) + ((0.125492111f * fTemp34) + ((0.126407668f * fTemp441) + ((0.114780113f * fTemp485) + ((0.102145448f * fTemp479) + ((0.0966521204f * fTemp35) + ((0.0874965638f * fTemp36) + ((0.0614947975f * fTemp37) + ((0.0144047365f * fTemp38) + ((0.0118717002f * fTemp47) + ((0.0688802749f * fTemp48) + ((0.0983306393f * fTemp49) + ((0.0866115317f * fTemp295) + ((0.0389416181f * fTemp213) + ((0.00769066438f * fTemp296) + ((0.00689718314f * fTemp297) + ((0.141056553f * fTemp50) + ((0.252052367f * fTemp51) + ((0.247138888f * fTemp52) + ((0.104770042f * fTemp53) + ((0.0722373128f * fTemp306) + ((0.203100681f * fTemp307) + ((0.246192813f * fTemp54) + ((0.170201734f * fTemp55) + ((0.0799279734f * fTemp56) + ((0.125797302f * fTemp509) + ((0.48039186f * fTemp310) + ((0.732261121f * fTemp311) + ((0.5535447f * fTemp312) + ((0.000701925717f * fTemp74) + ((0.000885036774f * fTemp76) + ((0.00357066561f * fTemp82) + ((0.00399792474f * fTemp84) + (((0.00418103579f * ((fTemp174 - fTemp26) - fTemp334)) + ((0.00347911008f * ((fTemp232 - fTemp482) - fTemp337)) + ((0.00570696127f * ((fTemp224 + fTemp369) - fTemp352)) + ((0.00241096225f * ((((fTemp416 - fTemp233) - fTemp415) - fTemp472) - fTemp353)) + ((0.00308236945f * ((fTemp235 - fTemp198) - fTemp383)) + ((0.00384533219f * ((fTemp111 - fTemp413) - fTemp127)) + ((0.00393688772f * (fTemp130 - fTemp378)) + ((0.00500503555f * (fTemp405 - fTemp459)) + ((3.05185094e-05f * (fTemp134 + (fTemp178 + (fTemp461 + ((fTemp571 - fTemp487) - fTemp243))))) + ((0.00299081393f * ((fTemp491 - fTemp381) - fTemp99)) + ((0.00640888698f * ((fTemp495 - fTemp433) - fTemp427)) + ((0.00900296029f * (fTemp404 - fTemp170)) + ((0.00469985045f * ((fTemp182 + (fTemp185 + (fTemp424 - fTemp157))) - fTemp167)) + ((0.00894192327f * (fTemp258 - fTemp23)) + ((0.00317392498f * (fTemp187 + (fTemp560 - fTemp165))) + ((0.00122074038f * (fTemp230 + (fTemp380 - fTemp138))) + ((0.0117801446f * (fTemp17 + fTemp264)) + ((0.0157170333f * (fTemp469 + fTemp506)) + ((0.00939970091f * (fTemp249 - fTemp13)) + ((0.00213629566f * (fTemp133 + (fTemp457 - fTemp200))) + ((0.00189214759f * (fTemp196 + (fTemp160 + (fTemp494 + fTemp412)))) + ((0.00100711081f * (fTemp168 - fTemp347)) + ((0.00155644398f * (fTemp78 - fTemp201)) + ((0.00238044374f * ((fTemp236 - fTemp398) - fTemp93)) + ((0.00537125766f * (fTemp397 - fTemp442)) + ((0.000427259132f * (fTemp126 + (fTemp205 + (fTemp325 - fTemp324)))) + ((0.00210577715f * (fTemp499 - fTemp10)) + ((0.0012817774f * (fTemp85 - fTemp217)) + ((0.000335703604f * (fTemp208 + (fTemp246 - fTemp6))) + ((0.001617481f * (fTemp496 - fTemp193)) + ((0.00296029542f * (((fTemp448 + fTemp143) - fTemp211) - fTemp209)) + ((0.000274666585f * ((fTemp440 + fTemp323) - fTemp128)) + ((0.00424207281f * (fTemp281 - fTemp473)) + ((0.00759910885f * (fTemp194 + fTemp357)) + ((0.000183111057f * ((fTemp465 + (fTemp273 + ((((fTemp72 + fTemp328) - fTemp322) - fTemp316) - fTemp4))) - fTemp400)) + ((0.00305185094f * (fTemp260 - fTemp423)) + ((0.0224921424f * (fTemp254 + fTemp180)) + ((0.00054933317f * (((fTemp87 - fTemp1) - fTemp315) - fTemp221)) + (0.00848414563f * fTemp842))))))))))))))))))))))))))))))))))))))) + (0.00222785119f * ((fTemp80 - fTemp437) - fTemp513)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow36 ? (iSlow44 ? (iSlow48 ? (iSlow50 ? (((0.00796533097f * fTemp7) + ((0.0167241432f * fTemp222) + ((0.0224005859f * fTemp223) + ((0.00186162908f * fTemp358) + ((0.00357066561f * fTemp133) + ((0.00747703481f * fTemp433) + ((0.00326548051f * fTemp16) + ((0.00552385021f * fTemp123) + ((0.00631733146f * fTemp350) + ((0.00106814783f * fTemp22) + ((0.00207525864f * fTemp397) + ((0.00393688772f * fTemp232) + ((0.00769066438f * fTemp498) + ((0.0093691824f * fTemp448) + ((0.00875881221f * fTemp449) + ((0.00860621966f * fTemp395) + ((0.00778221991f * fTemp495) + ((0.00683614612f * fTemp111) + ((0.00637836847f * fTemp234) + ((0.00460829493f * fTemp94) + ((0.00869777519f * fTemp440) + ((0.00396740623f * fTemp239) + ((0.000640888698f * fTemp143) + (fTemp608 + ((0.00845362712f * fTemp247) + ((0.00967436749f * fTemp487) + ((0.0108340709f * fTemp516) + ((0.0107425153f * fTemp216) + ((0.0110782189f * fTemp386) + ((0.0122074038f * fTemp423) + ((0.0123905148f * fTemp465) + (fTemp556 + ((0.00589007232f * fTemp248) + ((0.00924710836f * fTemp249) + ((0.0137638478f * fTemp250) + ((0.0170293283f * fTemp251) + ((0.0182500686f * fTemp252) + ((0.0178838465f * fTemp401) + ((0.0166325886f * fTemp404) + ((0.0198980682f * fTemp253) + ((0.024323253f * fTemp254) + ((0.0222479943f * fTemp255) + ((0.0162663665f * fTemp256) + ((0.0268257707f * fTemp258) + ((0.0284432508f * fTemp259) + ((0.0223395489f * fTemp260) + ((0.0220038462f * fTemp262) + ((0.0250251777f * fTemp263) + ((0.0196539201f * fTemp264) + ((0.0167851802f * fTemp265) + ((0.0260322895f * fTemp497) + ((0.0362559892f * fTemp429) + ((0.0310983621f * fTemp180) + ((0.0232245866f * fTemp362) + ((0.0234076977f * fTemp266) + ((0.0229499191f * fTemp506) + ((0.0228278451f * fTemp267) + ((0.0253913999f * fTemp268) + ((0.0272530299f * fTemp269) + (fTemp850 + ((0.0152592547f * fTemp28) + ((0.0150456252f * fTemp29) + ((0.00567644276f * fTemp270) + ((0.00823999755f * fTemp30) + ((0.0221259203f * fTemp95) + ((0.0454420596f * fTemp273) + ((0.0606707968f * fTemp274) + ((0.0632648692f * fTemp169) + ((0.053559985f * fTemp32) + ((0.0359202847f * fTemp33) + ((0.022644734f * fTemp275) + ((0.0345164351f * fTemp276) + ((0.0424817652f * fTemp277) + ((0.0382091738f * fTemp278) + ((0.0279854741f * fTemp501) + ((0.0233161412f * fTemp488) + ((0.0275887325f * fTemp471) + ((0.0269783624f * fTemp279) + ((0.0202337727f * fTemp280) + ((0.0150151066f * fTemp281) + ((0.0167546626f * fTemp215) + ((0.00247199927f * fTemp283) + ((0.0181279946f * fTemp477) + ((0.0242316965f * fTemp510) + (fTemp851 + ((0.028992584f * fTemp285) + ((0.0417493209f * fTemp286) + ((0.0491958372f * fTemp287) + ((0.0546586514f * fTemp288) + ((0.040742211f * fTemp289) + ((0.0229804385f * fTemp292) + ((0.0649433881f * fTemp293) + ((0.0766319782f * fTemp294) + ((0.0551469475f * fTemp484) + ((0.029114658f * fTemp34) + ((0.0331125818f * fTemp441) + ((0.050263986f * fTemp485) + ((0.0372936204f * fTemp479) + ((0.0200811792f * fTemp35) + ((0.042542804f * fTemp43) + ((0.0644245744f * fTemp44) + ((0.0153813288f * fTemp45) + ((0.0706503466f * fTemp47) + ((0.142246768f * fTemp48) + ((0.0746177584f * fTemp49) + ((0.0378124341f * fTemp297) + ((0.148716703f * fTemp298) + ((0.134983361f * fTemp299) + ((0.0426343568f * fTemp50) + ((0.091433458f * fTemp51) + ((0.0603350922f * fTemp52) + ((0.0777306408f * fTemp53) + ((0.0397656187f * fTemp159) + ((0.0752281249f * fTemp305) + ((0.174291208f * fTemp306) + ((0.0827967152f * fTemp307) + ((0.433362842f * fTemp57) + ((0.640888691f * fTemp144) + ((0.0272835474f * fTemp313) + ((0.0292672515f * fTemp212) + ((0.0208441429f * fTemp58) + ((0.00112918485f * fTemp59) + ((((0.00820947904f * (fTemp499 - fTemp127)) + ((0.00878933072f * ((fTemp504 - fTemp196) - fTemp403)) + ((0.00497451704f * (fTemp419 - fTemp102)) + ((0.00491348002f * (fTemp271 - fTemp340)) + ((0.00598162785f * (fTemp233 - fTemp119)) + ((0.00653096102f * (((fTemp445 - fTemp410) - fTemp376) - fTemp99)) + ((0.003234962f * (fTemp282 - fTemp355)) + ((0.006469924f * (((fTemp241 - fTemp480) - fTemp446) - fTemp420)) + ((0.00704977568f * ((fTemp92 + fTemp240) - fTemp382)) + ((0.012878811f * (fTemp468 - fTemp428)) + ((0.00738547929f * (fTemp400 - fTemp351)) + ((0.0019226661f * (fTemp458 - fTemp387)) + ((0.00726340525f * ((fTemp369 - fTemp182) - fTemp164)) + ((0.0157475509f * (fTemp503 - fTemp149)) + ((0.00753807183f * (fTemp461 - fTemp459)) + ((0.00238044374f * (fTemp90 - fTemp467)) + ((0.00164799951f * (fTemp17 + (fTemp194 + fTemp204))) + ((0.00177007355f * (fTemp469 + ((fTemp377 + (fTemp242 - fTemp368)) - fTemp367))) + ((0.00314340647f * (fTemp500 - fTemp15)) + ((0.0110171819f * (fTemp472 + fTemp385)) + ((0.00170903653f * (fTemp416 - fTemp195)) + ((0.0100100711f * (fTemp494 - fTemp168)) + ((0.000823999755f * (fTemp201 + (fTemp398 + fTemp456))) + ((0.00125125889f * (fTemp93 + ((fTemp226 + fTemp357) - fTemp206))) + ((0.00137333293f * (fTemp202 - fTemp96)) + ((0.00131229591f * (fTemp176 - fTemp8)) + ((0.00338755455f * ((fTemp237 - fTemp154) - fTemp343)) + ((0.00320444349f * (fTemp236 - fTemp208)) + ((0.00402844325f * (fTemp515 - fTemp450)) + ((0.0038758507f * (fTemp502 - fTemp381)) + ((0.00381481368f * (fTemp422 - fTemp104)) + ((0.00332651753f * (fTemp290 - fTemp158)) + ((0.00103762932f * (fTemp171 - fTemp91)) + ((0.00115970336f * ((fTemp244 - fTemp421) - fTemp444)) + ((0.00198370311f * (fTemp493 + fTemp447)) + ((0.00921658985f * (fTemp406 + fTemp457)) + ((0.00546281319f * (fTemp203 + fTemp235)) + ((0.00430310983f * (fTemp436 + fTemp40)) + ((0.00463881344f * (fTemp175 + fTemp370)) + ((0.0188299213f * (fTemp257 + (fTemp261 + fTemp492))) + ((0.0241401419f * (fTemp31 + fTemp272)) + (0.00723288674f * fTemp849)))))))))))))))))))))))))))))))))))))))))) + (0.00643940549f * (fTemp496 - fTemp383))) + (0.0025940733f * ((fTemp238 - fTemp106) - fTemp107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00122074038f * fTemp221) + ((0.00180059206f * fTemp415) + ((0.00234992523f * fTemp141) + ((0.00640888698f * fTemp335) + ((0.000976592302f * fTemp211) + ((0.001617481f * fTemp413) + ((0.00183111057f * fTemp379) + ((0.000610370189f * fTemp378) + ((0.00155644398f * fTemp380) + ((0.00268562883f * fTemp128) + ((0.00442518387f * fTemp184) + ((0.00503555406f * fTemp489) + ((0.00262459181f * fTemp210) + ((0.000762962736f * fTemp486) + ((0.00241096225f * fTemp452) + ((0.00216681417f * fTemp418) + ((0.00445570238f * fTemp407) + (fTemp848 + ((0.0111087374f * fTemp12) + ((0.0106509598f * fTemp478) + ((0.00570696127f * fTemp476) + ((0.0133976256f * fTemp228) + ((0.0136112552f * fTemp229) + ((0.0124820704f * fTemp432) + ((0.014679403f * fTemp230) + ((0.0175481439f * fTemp191) + ((0.0126651814f * fTemp18) + ((0.0107730338f * fTemp19) + ((0.00961333048f * fTemp187) + ((0.00793481246f * fTemp185) + ((0.00729392376f * fTemp359) + ((0.00540177617f * fTemp151) + ((0.00390636921f * fTemp451) + ((0.00509659108f * fTemp172) + ((0.00912503432f * fTemp443) + ((0.0114749596f * fTemp170) + ((0.01126133f * fTemp438) + ((0.00955229346f * fTemp166) + ((0.00720236823f * fTemp434) + ((0.00555436872f * fTemp24) + ((0.004852443f * fTemp26) + ((0.00534073915f * fTemp162) + ((0.00714133121f * fTemp373) + ((0.00943021942f * fTemp425) + ((0.0115359966f * fTemp89) + ((0.012817774f * fTemp97) + ((0.0120548112f * fTemp426) + ((0.0111392559f * fTemp156) + ((0.00976592302f * fTemp161) + ((0.00784325693f * fTemp115) + ((0.00717184972f * fTemp427) + ((0.00894192327f * fTemp152) + ((0.0119937742f * fTemp121) + ((0.0142521439f * fTemp150) + ((0.014435255f * fTemp100) + ((0.00836207159f * fTemp120) + ((0.00204474013f * fTemp148) + ((0.00454725791f * fTemp384) + ((0.00418103579f * fTemp338) + ((0.00811792351f * fTemp108) + ((0.00766014587f * fTemp142) + ((0.0054933317f * fTemp393) + ((0.00399792474f * fTemp136) + ((0.00305185094f * fTemp408) + ((0.00277718436f * fTemp409) + ((0.00350962859f * fTemp134) + ((0.008087405f * fTemp130) + ((0.0071108127f * fTemp396) + ((0.00781273842f * fTemp125) + ((0.00817896053f * fTemp375) + ((0.00827051606f * fTemp372) + ((0.00851466414f * fTemp354) + ((0.00881984923f * fTemp112) + ((0.00900296029f * fTemp390) + ((0.00866725668f * fTemp389) + ((0.0077517014f * fTemp361) + ((0.00527970213f * fTemp353) + ((0.00372325815f * fTemp346) + ((0.0019531846f * fTemp118) + ((0.00146488845f * fTemp371) + ((0.00308236945f * fTemp352) + ((0.00344859157f * fTemp345) + ((0.00274666585f * fTemp334) + ((0.00708029419f * fTemp188) + ((0.0412305072f * fTemp505) + ((0.0532547981f * fTemp511) + ((0.0267952513f * fTemp291) + ((0.0101321451f * fTemp36) + ((0.043244727f * fTemp37) + ((0.0474868007f * fTemp38) + ((0.0372325815f * fTemp41) + ((0.0409253202f * fTemp42) + ((0.0149235511f * fTemp214) + ((0.0102847377f * fTemp46) + ((0.0106814783f * fTemp295) + ((0.0790734589f * fTemp213) + ((0.10489212f * fTemp296) + ((0.0847498998f * fTemp430) + ((0.0785546452f * fTemp301) + ((0.0223700684f * fTemp302) + ((0.025940733f * fTemp303) + ((0.0106204413f * fTemp304) + ((0.164830476f * fTemp54) + ((0.445417643f * fTemp55) + ((0.206366166f * fTemp56) + ((0.860805094f * fTemp508) + (fTemp617 + ((0.493240148f * fTemp309) + ((0.100955233f * fTemp509) + ((0.0133365886f * fTemp310) + ((0.0122989593f * fTemp311) + ((0.000335703604f * fTemp64) + ((0.000396740623f * fTemp71) + (((((0.00299081393f * (fTemp98 + fTemp122)) + ((0.00302133244f * (fTemp101 + (fTemp337 + fTemp116))) + ((0.00228888821f * (fTemp336 + fTemp126)) + ((0.00231940672f * (fTemp341 + (fTemp129 + fTemp243))) + ((0.00347911008f * (fTemp114 + (fTemp198 + fTemp439))) + ((0.00222785119f * (fTemp360 + (fTemp339 + fTemp412))) + ((0.00152592547f * (fTemp365 + fTemp348)) + ((0.0012817774f * (fTemp366 + (fTemp442 + (fTemp207 + fTemp526)))) + ((0.00158696249f * (fTemp113 - fTemp225)) + ((0.00439466536f * (fTemp124 + (fTemp417 + fTemp718))) + ((0.0083925901f * fTemp852) + ((0.00506607257f * (fTemp405 + fTemp186)) + ((0.0051576281f * (fTemp139 + fTemp388)) + ((0.00213629566f * (fTemp145 + fTemp453)) + ((0.00433362834f * (fTemp109 - fTemp342)) + ((0.0122379223f * (fTemp344 + fTemp414)) + ((0.00686666463f * (fTemp132 + fTemp155)) + ((0.00888088625f * (fTemp140 + fTemp424)) + ((0.0105594043f * (fTemp163 + fTemp364)) + ((0.00448622089f * (fTemp27 + fTemp431)) + ((0.00805688649f * (fTemp146 + fTemp14)) + ((0.00189214759f * (fTemp167 + fTemp483)) + ((0.000701925717f * (fTemp23 + fTemp61)) + ((0.000213629566f * ((fTemp197 + fTemp363) - fTemp177)) + ((0.00885036774f * (fTemp20 - fTemp454)) + ((0.000305185094f * (fTemp463 - fTemp435)) + ((0.000366222113f * (fTemp521 + (((fTemp63 + (fTemp5 + fTemp65)) - fTemp224) - fTemp411))) + ((0.00057985168f * (fTemp189 + ((fTemp10 + fTemp318) - fTemp347))) + ((0.000427259132f * (fTemp13 + (fTemp474 + fTemp72))) + ((0.00173955504f * (fTemp153 + (fTemp205 + fTemp178))) + ((6.10370189e-05f * (((fTemp11 + (((fTemp218 + (fTemp73 + fTemp83)) - fTemp200) - fTemp466)) - fTemp227) - fTemp183)) + ((0.000671407208f * (fTemp437 + (fTemp147 + fTemp174))) + ((0.00143436994f * (fTemp482 + (fTemp314 - fTemp138))) + ((0.00149540696f * (fTemp157 + fTemp137)) + ((0.000457777642f * (fTemp464 + ((fTemp62 + fTemp827) - fTemp470))) + ((0.00250251777f * (fTemp103 + fTemp462)) + ((0.00488296151f * (fTemp209 + fTemp181)) + ((0.000274666585f * (fTemp160 + fTemp135)) + ((0.00100711081f * (fTemp475 + fTemp460)) + ((0.000518814661f * (fTemp473 + (fTemp190 + (fTemp67 + (fTemp320 + (fTemp322 + (fTemp219 + fTemp324))))))) + ((0.00167851802f * (fTemp105 + (fTemp391 + fTemp173))) + ((0.00109866634f * (fTemp349 + (fTemp300 + (fTemp315 - fTemp312)))) + ((0.000946073793f * (fTemp490 + fTemp165)) + ((0.000122074038f * (fTemp514 + (fTemp325 + (fTemp402 + (fTemp79 + (fTemp80 + (fTemp82 + (fTemp327 + (fTemp85 + (fTemp1 + fTemp570)))))))))) + ((0.000244148076f * (fTemp323 + fTemp326)) + ((9.15555283e-05f * (fTemp75 + (fTemp2 + fTemp544))) + ((0.00054933317f * (fTemp199 + (fTemp6 + (fTemp4 + (fTemp316 + (fTemp319 + (fTemp220 + fTemp321))))))) + ((0.000152592547f * (fTemp60 + (fTemp74 + (fTemp77 + (fTemp507 + (fTemp81 + fTemp579)))))) + ((0.000488296151f * (fTemp66 + (fTemp68 + fTemp69))) + (((0.000183111057f * fTemp684) + (0.00521866512f * fTemp638)) + (0.00674459059f * fTemp846))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00280770287f * (fTemp231 + (fTemp374 + fTemp455)))) + (0.00256355479f * (fTemp513 + fTemp110))) + (0.00265511032f * (fTemp88 + fTemp333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.283791631f * fTemp223) + ((0.0025940733f * fTemp460) + ((0.00213629566f * fTemp181) + ((0.00167851802f * fTemp514) + ((0.00305185094f * fTemp421) + ((0.00216681417f * fTemp474) + ((0.001617481f * fTemp225) + ((0.000274666585f * fTemp190) + ((0.000885036774f * fTemp349) + ((0.00158696249f * fTemp444) + ((0.00198370311f * fTemp138) + ((0.0028992584f * fTemp358) + ((0.00317392498f * fTemp377) + ((0.00250251777f * fTemp171) + ((0.00143436994f * fTemp160) + ((0.00488296151f * fTemp343) + ((0.00524918362f * fTemp10) + ((0.00433362834f * fTemp11) + ((0.00482192449f * fTemp388) + ((0.0057985168f * fTemp480) + ((0.00729392376f * fTemp178) + ((0.00802636798f * fTemp116) + ((0.00793481246f * fTemp210) + ((0.00756859034f * fTemp205) + ((0.00604266487f * fTemp103) + ((0.00759910885f * fTemp227) + ((0.00692770164f * fTemp483) + ((0.00466933195f * fTemp157) + ((0.00784325693f * fTemp398) + ((0.0100405896f * fTemp202) + ((0.0125736259f * fTemp93) + ((0.0144657735f * fTemp201) + ((0.0149845881f * fTemp347) + ((0.0133671071f * fTemp411) + ((0.0131534776f * fTemp476) + ((0.0173345134f * fTemp195) + ((0.0187994018f * fTemp133) + ((0.0172124393f * fTemp454) + ((0.012878811f * fTemp472) + ((0.0074159978f * fTemp433) + ((0.00283822138f * fTemp13) + ((0.000854518265f * fTemp14) + ((0.00796533097f * fTemp17) + ((0.0161442924f * fTemp189) + ((0.0216681417f * fTemp521) + ((0.0220343638f * fTemp90) + ((0.0187688842f * fTemp123) + ((0.0133976256f * fTemp350) + ((0.00875881221f * fTemp342) + ((0.00408948027f * fTemp459) + ((0.00558488723f * fTemp149) + ((0.00738547929f * fTemp18) + ((0.00851466414f * fTemp19) + ((0.00494399853f * fTemp185) + ((0.00518814661f * fTemp359) + ((0.00555436872f * fTemp151) + ((0.00527970213f * fTemp122) + ((0.00512710959f * fTemp22) + ((0.00634784997f * fTemp23) + ((0.0101931822f * fTemp451) + ((0.00955229346f * fTemp172) + (fTemp845 + ((0.0067751091f * fTemp351) + ((0.00546281319f * fTemp146) + ((0.00344859157f * fTemp364) + ((0.00701925717f * fTemp434) + ((0.00888088625f * fTemp24) + ((0.00994903408f * fTemp431) + ((0.00924710836f * fTemp27) + ((0.00869777519f * fTemp162) + ((0.00842310861f * fTemp373) + ((0.00814844202f * fTemp425) + ((0.00747703481f * fTemp89) + ((0.00335703604f * fTemp163) + ((0.00296029542f * fTemp382) + ((0.00366222113f * fTemp420) + ((0.00863673817f * fTemp121) + ((0.00982696004f * fTemp150) + ((0.00845362712f * fTemp100) + ((0.00405896176f * fTemp344) + ((0.00640888698f * fTemp384) + ((0.00714133121f * fTemp355) + ((0.00750755332f * fTemp338) + ((0.00720236823f * fTemp99) + ((0.00653096102f * fTemp130) + ((0.00134281442f * fTemp112) + ((0.00149540696f * fTemp357) + ((0.00122074038f * fTemp397) + ((0.00106814783f * fTemp232) + ((0.00375377666f * fTemp498) + ((0.00384533219f * fTemp406) + ((0.00140385143f * fTemp94) + ((0.00222785119f * fTemp502) + (fTemp525 + ((0.00631733146f * fTemp243) + ((0.00103762932f * fTemp457) + ((0.00311288796f * fTemp29) + ((0.00704977568f * fTemp385) + ((0.00460829493f * fTemp370) + ((0.0159306619f * fTemp501) + ((0.028931547f * fTemp488) + ((0.0308847316f * fTemp471) + ((0.0178228095f * fTemp279) + ((0.0268257707f * fTemp284) + ((0.040498063f * fTemp285) + ((0.0350352488f * fTemp286) + ((0.00900296029f * fTemp287) + ((0.0239265114f * fTemp485) + ((0.0476699136f * fTemp35) + ((0.067445904f * fTemp36) + ((0.0698568672f * fTemp37) + ((0.0431836918f * fTemp38) + ((0.0594500564f * fTemp45) + ((0.137730032f * fTemp46) + ((0.133335367f * fTemp47) + ((0.0389111005f * fTemp48) + ((0.057985168f * fTemp430) + ((0.0613116845f * fTemp297) + ((0.00906399731f * fTemp298) + ((0.033845026f * fTemp53) + ((0.175420389f * fTemp159) + ((0.269875169f * fTemp303) + ((0.193060085f * fTemp304) + ((0.132053584f * fTemp55) + ((0.806695759f * fTemp56) + (fTemp57 + ((0.694967508f * fTemp144) + ((0.0744346455f * fTemp508) + ((0.0249641407f * fTemp308) + ((0.00430310983f * ((fTemp127 + (fTemp182 + (fTemp191 + fTemp153))) - fTemp334)) + ((0.00357066561f * (fTemp271 - fTemp107)) + ((0.00119022187f * (fTemp496 - fTemp106)) + ((0.000427259132f * ((fTemp354 + fTemp340) - fTemp337)) + ((0.000122074038f * (fTemp345 + ((fTemp58 + (fTemp315 + (fTemp6 + (fTemp76 + fTemp742)))) - fTemp465))) + ((0.000213629566f * (fTemp114 + (fTemp110 + ((fTemp626 - fTemp267) - fTemp91)))) + ((0.00253303628f * ((fTemp184 + fTemp494) - fTemp365)) + ((0.00454725791f * (fTemp309 - fTemp113)) + ((0.00302133244f * ((fTemp427 + fTemp193) - fTemp124)) + ((0.00173955504f * (fTemp389 - fTemp407)) + ((0.0019531846f * (fTemp390 + fTemp456)) + ((0.00183111057f * (fTemp500 - fTemp125)) + ((0.000366222113f * (fTemp199 - fTemp396)) + ((0.00610370189f * (fTemp403 + (fTemp196 + fTemp437))) + ((0.00543229468f * fTemp846) + ((0.00338755455f * (fTemp405 + fTemp156)) + ((0.000152592547f * (((fTemp66 + (fTemp74 + fTemp75)) - fTemp378) - fTemp409)) + ((0.000793481246f * ((fTemp59 - fTemp510) - fTemp408)) + ((0.00393688772f * (fTemp142 + fTemp426)) + ((0.00592059083f * (fTemp108 + fTemp244)) + ((0.00509659108f * (fTemp376 + fTemp266)) + ((0.00247199927f * (fTemp410 + fTemp96)) + ((0.00314340647f * (fTemp155 + (fTemp115 + (fTemp170 + fTemp165)))) + ((0.00341807306f * (fTemp140 + fTemp381)) + ((0.00350962859f * (fTemp161 + fTemp450)) + ((0.00500503555f * (fTemp428 + fTemp166)) + ((0.00625629444f * (fTemp97 + fTemp206)) + ((0.00363170262f * (fTemp438 + fTemp240)) + ((0.00958281197f * (fTemp455 + fTemp197)) + ((0.00817896053f * (fTemp167 + fTemp187)) + ((0.00457777642f * (fTemp458 + fTemp164)) + ((0.004852443f * (fTemp177 + fTemp270)) + ((0.00665303506f * (fTemp20 + fTemp183)) + ((0.00372325815f * (fTemp230 + fTemp442)) + ((0.00531022064f * (fTemp463 + fTemp452)) + ((9.15555283e-05f * (fTemp16 + (((fTemp314 + (fTemp67 + (fTemp4 + (fTemp326 + (fTemp73 + (fTemp402 + (fTemp507 + (fTemp78 + (fTemp79 + (fTemp81 + (fTemp82 + (fTemp83 + (fTemp84 + (fTemp327 + (fTemp85 + fTemp543))))))))))))))) - fTemp362) - fTemp440))) + ((0.00262459181f * (fTemp229 + fTemp400)) + ((0.00280770287f * (fTemp228 + fTemp211)) + ((0.00564592425f * (fTemp482 + fTemp818)) + ((0.00326548051f * (fTemp348 + fTemp209)) + ((0.00378429517f * (fTemp418 + (fTemp339 + fTemp363))) + ((0.00787377544f * (fTemp486 + fTemp207)) + ((0.00671407208f * (fTemp464 + (fTemp126 + fTemp246))) + ((0.00585955381f * (fTemp367 + fTemp489)) + ((0.00567644276f * (fTemp8 + fTemp506)) + ((0.00170903653f * (fTemp217 + (fTemp105 + fTemp237))) + ((0.000396740623f * (fTemp439 + fTemp435)) + ((0.00201422162f * (fTemp208 + (fTemp379 + (fTemp391 + fTemp141)))) + ((0.00277718436f * (fTemp104 + fTemp413)) + ((0.00152592547f * (fTemp158 + fTemp239)) + ((0.000244148076f * (fTemp128 + fTemp63)) + ((3.05185094e-05f * (fTemp129 + (fTemp449 + ((fTemp316 + (fTemp318 + ((fTemp321 + (fTemp68 + (((((((fTemp324 + (fTemp1 + fTemp329)) - fTemp323) - fTemp135) - fTemp72) - fTemp71) - fTemp3) - fTemp70))) - fTemp319))) - fTemp491)))) + ((0.00057985168f * (fTemp473 + fTemp236)) + ((0.000976592302f * (fTemp226 + fTemp92)) + ((0.003234962f * (fTemp490 + fTemp415)) + ((0.00155644398f * (fTemp200 + (fTemp335 + (fTemp176 + ((fTemp412 + fTemp470) - fTemp495))))) + ((0.000946073793f * (fTemp392 + fTemp448)) + ((0.00427259132f * (fTemp368 + fTemp247)) + ((0.000671407208f * (fTemp194 + (fTemp493 + (fTemp422 + fTemp60)))) + ((0.00164799951f * (fTemp461 + fTemp34)) + ((0.00109866634f * (fTemp487 - fTemp499)) + ((0.00921658985f * fTemp847) + ((0.0151676992f * (fTemp441 - fTemp269)) + ((6.10370189e-05f * (fTemp61 + (fTemp322 + (fTemp219 + ((fTemp2 + (fTemp331 + fTemp553)) - fTemp218))))) + (0.00112918485f * fTemp822)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0140079958f * fTemp222) + (fTemp848 + ((0.0108645894f * fTemp168) + ((0.00915555283f * fTemp12) + ((0.000335703604f * fTemp432) + ((0.00473036896f * fTemp424) + ((0.00698873866f * fTemp15) + ((0.00534073915f * fTemp469) + ((0.00207525864f * fTemp120) + ((0.00726340525f * fTemp109) + ((0.00897244178f * fTemp148) + ((0.0019226661f * fTemp417) + ((0.000610370189f * fTemp139) + ((0.00204474013f * fTemp529) + ((0.00347911008f * fTemp346) + ((0.00445570238f * fTemp371) + (fTemp800 + ((0.0012817774f * fTemp360) + ((0.00271614734f * fTemp336) + ((0.00436414685f * fTemp101) + ((0.00463881344f * fTemp231) + ((0.00238044374f * fTemp203) + ((0.00137333293f * fTemp436) + ((0.00244148076f * fTemp143) + ((0.000488296151f * fTemp423) + ((0.0103762932f * fTemp174) + ((0.014557329f * fTemp175) + ((0.01617481f * fTemp445) + ((0.0158696249f * fTemp248) + ((0.0148319956f * fTemp249) + ((0.0142521439f * fTemp250) + ((0.012817774f * fTemp251) + ((0.0107425153f * fTemp252) + ((0.0071108127f * fTemp404) + ((0.00790429395f * fTemp253) + ((0.00778221991f * fTemp255) + ((0.0083925901f * fTemp256) + ((0.0117496261f * fTemp258) + ((0.014496292f * fTemp259) + ((0.0180059206f * fTemp260) + ((0.0175786614f * fTemp261) + ((0.0168767367f * fTemp262) + ((0.0231635496f * fTemp264) + ((0.0261238441f * fTemp265) + ((0.022583697f * fTemp497) + ((0.0143131809f * fTemp429) + ((0.00601214636f * fTemp180) + ((0.00976592302f * fTemp268) + ((0.0151066622f * fTemp520) + ((0.00680562761f * fTemp28) + ((0.00210577715f * fTemp186) + ((0.0153202917f * fTemp188) + ((0.0247505121f * fTemp30) + ((0.0217291787f * fTemp31) + ((0.0123599963f * fTemp95) + ((0.00308236945f * fTemp272) + ((0.0077517014f * fTemp273) + ((0.0182805881f * fTemp274) + ((0.0302133244f * fTemp169) + ((0.0379650258f * fTemp32) + ((0.0404065065f * fTemp33) + ((0.0391552486f * fTemp492) + ((0.0351268053f * fTemp275) + ((0.0280770287f * fTemp276) + ((0.0168462172f * fTemp277) + ((0.00177007355f * fTemp278) + ((0.0394299142f * fTemp281) + ((0.064271979f * fTemp215) + ((0.0763267949f * fTemp468) + ((0.0748313889f * fTemp282) + ((0.0599993914f * fTemp283) + ((0.0329905078f * fTemp477) + ((0.0272835474f * fTemp288) + ((0.0589312427f * fTemp289) + ((0.0726950914f * fTemp290) + ((0.076967679f * fTemp505) + ((0.0786767155f * fTemp511) + ((0.0878322721f * fTemp291) + ((0.0938749388f * fTemp292) + ((0.0887478292f * fTemp293) + ((0.0595110953f * fTemp294) + ((0.0261543635f * fTemp484) + ((0.0409253202f * fTemp40) + ((0.0590227991f * fTemp41) + ((0.0731223524f * fTemp42) + ((0.0766319782f * fTemp214) + ((0.0749839768f * fTemp43) + ((0.0281380657f * fTemp44) + ((0.0789513811f * fTemp49) + ((0.171269879f * fTemp295) + ((0.146000549f * fTemp213) + ((0.0572222061f * fTemp296) + ((0.0821253061f * fTemp299) + ((0.117343672f * fTemp300) + ((0.100039676f * fTemp301) + ((0.0736716837f * fTemp302) + ((0.0713522732f * fTemp50) + ((0.0729087219f * fTemp51) + ((0.0339671001f * fTemp52) + ((0.148960844f * fTemp305) + ((0.586809874f * fTemp306) + ((0.819910288f * fTemp307) + ((0.572923958f * fTemp54) + ((0.0339976214f * fTemp311) + ((0.0256355479f * fTemp312) + ((0.00497451704f * fTemp313) + ((0.00100711081f * fTemp212) + (((((0.00189214759f * (fTemp341 + (fTemp515 - fTemp119))) + ((0.000305185094f * (fTemp352 + fTemp102)) + ((0.00424207281f * (fTemp118 - fTemp443)) + ((0.00219733268f * (fTemp353 + fTemp416)) + ((0.000915555283f * (fTemp383 - fTemp467)) + (((0.000457777642f * (fTemp372 + ((fTemp419 + fTemp216) - fTemp380))) + ((0.00131229591f * (fTemp375 + (((fTemp233 - fTemp466) - fTemp414) - fTemp134))) + ((0.00234992523f * (fTemp394 + fTemp369)) + ((0.00180059206f * fTemp849) + ((0.000762962736f * (fTemp136 + (fTemp235 - fTemp447))) + ((0.000518814661f * (fTemp393 + (fTemp386 - fTemp475))) + (((0.00656147953f * (fTemp145 - fTemp152)) + ((0.00988799706f * (fTemp257 - fTemp26)) + ((0.00228888821f * (fTemp478 - fTemp147)) + ((0.00799584948f * ((fTemp401 + fTemp254) - fTemp137)) + ((0.008087405f * (fTemp280 - fTemp198)) + ((0.00439466536f * (fTemp526 - fTemp173)) + ((0.00491348002f * (fTemp503 - fTemp387)) + ((((0.000183111057f * (((fTemp325 - fTemp65) - fTemp62) - fTemp221)) + (0.0325937681f * (fTemp310 - fTemp479))) + (0.0184331797f * (fTemp263 + fTemp509))) + (0.00115970336f * ((fTemp234 - fTemp204) - fTemp224)))))))))) + (0.000640888698f * ((fTemp395 + (fTemp516 - fTemp7)) - fTemp361))))))))) + (0.00469985045f * (fTemp98 - fTemp132)))))))) + (0.0038758507f * (fTemp333 + fTemp374))) + (0.00332651753f * (fTemp513 - fTemp356))) + (0.00256355479f * (fTemp88 + fTemp111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow49 ? (((0.132755518f * fTemp0) + ((0.0464491732f * fTemp219) + ((0.0732444227f * fTemp220) + ((0.111911371f * fTemp221) + ((0.0537736155f * fTemp222) + ((0.0177007355f * fTemp223) + ((0.00201422162f * fTemp209) + ((0.0019531846f * fTemp184) + ((0.00680562761f * fTemp388) + ((0.0101626636f * fTemp480) + ((0.01126133f * fTemp489) + ((0.00509659108f * fTemp206) + ((0.00375377666f * fTemp103) + ((0.00802636798f * fTemp486) + ((0.00778221991f * fTemp483) + ((0.00546281319f * fTemp432) + ((0.00747703481f * fTemp424) + ((0.00659199804f * fTemp15) + ((0.00482192449f * fTemp463) + ((0.00674459059f * fTemp459) + ((0.00250251777f * fTemp149) + ((0.00277718436f * fTemp122) + ((0.00411999878f * fTemp458) + ((0.00369273964f * fTemp22) + ((0.0035401471f * fTemp121) + ((0.00366222113f * fTemp150) + ((0.001617481f * fTemp109) + (fTemp843 + ((0.000976592302f * fTemp352) + ((0.000640888698f * fTemp337) + ((0.00170903653f * fTemp232) + ((0.003234962f * fTemp174) + ((0.00399792474f * fTemp175) + ((0.00405896176f * fTemp445) + ((0.00314340647f * fTemp249) + ((0.00454725791f * fTemp255) + ((0.00543229468f * fTemp256) + ((0.00573747978f * fTemp257) + ((0.00637836847f * fTemp260) + ((0.00625629444f * fTemp261) + ((0.00555436872f * fTemp262) + ((0.00234992523f * fTemp188) + ((0.0077517014f * fTemp276) + (fTemp751 + ((0.0101321451f * fTemp501) + ((0.00408948027f * fTemp477) + ((0.00866725668f * fTemp510) + ((0.0111087374f * fTemp284) + ((0.0110477004f * fTemp285) + ((0.00988799706f * fTemp286) + ((0.00845362712f * fTemp287) + ((0.00607318338f * fTemp288) + ((0.00598162785f * fTemp40) + ((0.0135807367f * fTemp296) + ((0.0242927335f * fTemp430) + ((0.0363170281f * fTemp297) + ((0.0599688701f * fTemp299) + ((0.0623798333f * fTemp300) + ((0.0535294674f * fTemp301) + ((0.0348826572f * fTemp302) + ((0.0208441429f * fTemp303) + ((0.0278634001f * fTemp304) + ((0.0280159917f * fTemp305) + ((0.0233466607f * fTemp306) + ((0.0148625141f * fTemp307) + ((0.00506607257f * fTemp54) + ((0.00558488723f * fTemp144) + ((0.0302133244f * fTemp508) + ((0.0387279876f * fTemp308) + ((0.0433362834f * fTemp309) + ((0.0541093163f * fTemp509) + ((0.0749229416f * fTemp310) + ((0.0943021923f * fTemp311) + ((0.0906704888f * fTemp312) + ((0.0500808731f * fTemp199) + ((0.137821585f * fTemp314) + ((0.114078186f * fTemp315) + ((0.0537430942f * fTemp61) + ((0.0136417737f * fTemp316) + ((0.0505081341f * fTemp318) + ((0.0658894628f * fTemp319) + ((0.0797753856f * fTemp320) + ((0.0722373128f * fTemp321) + ((0.0585650206f * fTemp322) + ((0.0157780703f * fTemp68) + ((0.0512100607f * fTemp135) + ((0.119479962f * fTemp323) + ((0.101596117f * fTemp324) + ((0.00909451582f * fTemp325) + ((0.0602435395f * fTemp78) + ((0.064271979f * fTemp79) + ((0.0108645894f * fTemp80) + ((0.6551103f * fTemp328) + (fTemp329 + ((0.834070861f * fTemp331) + ((0.421094388f * fTemp332) + ((0.000274666585f * ((((fTemp500 - fTemp92) - fTemp178) - fTemp372) - fTemp333)) + ((0.000366222113f * (fTemp231 + fTemp89)) + ((0.000488296151f * (fTemp101 + (fTemp341 + (fTemp389 + ((fTemp439 - fTemp128) - fTemp139))))) + ((0.000427259132f * (fTemp336 + (fTemp353 + ((fTemp420 + ((fTemp406 + fTemp31) - fTemp226)) - fTemp399)))) + ((0.00057985168f * (fTemp106 + (fTemp383 + (((fTemp357 - fTemp165) - fTemp217) - fTemp136)))) + ((0.000732444227f * (fTemp345 + (fTemp28 - fTemp349))) + ((0.000915555283f * (fTemp366 + (((((fTemp237 + fTemp471) - fTemp499) - fTemp440) - fTemp493) - fTemp460))) + ((0.000671407208f * (fTemp371 + (fTemp142 + ((fTemp475 + ((fTemp502 - fTemp368) - fTemp211)) - fTemp129)))) + ((0.000152592547f * (fTemp118 + ((fTemp491 + fTemp520) - fTemp438))) + ((0.000244148076f * (fTemp124 + (fTemp494 - fTemp354))) + ((0.000183111057f * (fTemp125 + fTemp196)) + ((0.00164799951f * ((fTemp97 + (fTemp369 - fTemp454)) - fTemp131)) + ((0.00158696249f * ((fTemp467 + ((fTemp111 + fTemp436) - fTemp200)) - fTemp405)) + ((0.00296029542f * (fTemp338 + (fTemp451 + fTemp455))) + ((0.00299081393f * (fTemp355 + (fTemp152 + (fTemp469 + fTemp153)))) + ((0.00219733268f * (fTemp376 + ((fTemp443 + fTemp253) - fTemp161))) + ((0.00183111057f * (fTemp410 + (fTemp208 + fTemp30))) + ((0.00143436994f * (fTemp145 + (fTemp148 + (fTemp12 + fTemp404)))) + ((0.00210577715f * (fTemp120 + ((fTemp264 + fTemp186) - fTemp465))) + ((0.0019226661f * (fTemp132 + ((fTemp138 - fTemp474) - fTemp202))) + ((0.00134281442f * ((fTemp377 + fTemp515) - fTemp155)) + ((0.00415051728f * (fTemp263 - fTemp427)) + ((0.00112918485f * (fTemp156 + (fTemp270 - fTemp173))) + ((0.00109866634f * ((fTemp126 + fTemp381) - fTemp425)) + ((0.0028992584f * ((fTemp351 - fTemp433) - fTemp27)) + ((0.0025940733f * ((fTemp407 + fTemp419) - fTemp24)) + ((0.000762962736f * (fTemp170 + (fTemp94 - fTemp473))) + ((0.00265511032f * (fTemp146 + (fTemp234 - fTemp179))) + ((0.00305185094f * (fTemp446 + fTemp172)) + ((0.00326548051f * (fTemp23 + fTemp347)) + ((0.00402844325f * (fTemp177 + fTemp39)) + ((0.00717184972f * (fTemp488 - fTemp185)) + ((0.00140385143f * (((fTemp203 + fTemp240) - fTemp456) - fTemp19)) + ((0.0045167394f * (fTemp191 + fTemp275)) + ((0.00628681295f * (fTemp230 + (fTemp452 + fTemp159))) + ((0.00189214759f * (fTemp229 + (fTemp168 + fTemp837))) + ((0.00146488845f * ((fTemp466 + (fTemp397 + fTemp271)) - fTemp228)) + ((0.0012817774f * ((fTemp239 - fTemp421) - fTemp133)) + ((0.000823999755f * (fTemp478 + (fTemp401 - fTemp490))) + ((0.00222785119f * (fTemp201 + ((fTemp289 - fTemp429) - fTemp205))) + ((0.0093691824f * (fTemp462 + fTemp277)) + ((0.00256355479f * (fTemp339 - fTemp154)) + ((0.00119022187f * (fTemp110 + fTemp782)) + ((0.00167851802f * (fTemp450 - fTemp415)) + ((0.00180059206f * (fTemp526 - fTemp413)) + ((0.00216681417f * ((fTemp233 + fTemp250) - fTemp141)) + ((0.00115970336f * (fTemp251 - fTemp224)) + ((0.00103762932f * (fTemp238 + fTemp504)) + (((0.0117801446f * (fTemp50 - fTemp295)) + (0.00177007355f * (fTemp370 - fTemp266))) + (0.00424207281f * (fTemp41 - fTemp143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0428479873f * fTemp1) + ((0.0554521307f * fTemp2) + ((0.0577105023f * fTemp402) + ((0.101168856f * fTemp218) + ((0.108951077f * fTemp3) + ((0.0350047313f * fTemp4) + ((0.111636706f * fTemp5) + ((0.0158696249f * fTemp6) + ((0.103671379f * fTemp7) + ((0.00198370311f * fTemp356) + ((0.00476088747f * fTemp453) + ((0.00540177617f * fTemp8) + ((0.00381481368f * fTemp11) + ((0.00860621966f * fTemp198) + ((0.00854518265f * fTemp137) + ((0.00576799829f * fTemp207) + ((0.00512710959f * fTemp442) + ((0.00830103457f * fTemp157) + ((0.00921658985f * fTemp437) + ((0.00729392376f * fTemp183) + ((0.00466933195f * fTemp398) + ((0.00350962859f * fTemp13) + ((0.0108035523f * fTemp189) + ((0.0127872555f * fTemp521) + ((0.0125431074f * fTemp90) + ((0.00976592302f * fTemp123) + ((0.00500503555f * fTemp350) + ((0.00335703604f * fTemp187) + ((0.00787377544f * fTemp182) + ((0.00720236823f * fTemp164) + ((0.00537125766f * fTemp359) + ((0.00286873989f * fTemp431) + ((0.00283822138f * fTemp162) + ((0.00433362834f * fTemp115) + ((0.00131229591f * fTemp403) + ((0.000122074038f * fTemp375) + (fTemp634 + ((0.00473036896f * fTemp412) + ((0.000305185094f * fTemp244) + ((0.00262459181f * fTemp180) + ((0.00241096225f * fTemp362) + ((0.00396740623f * fTemp503) + ((0.0101931822f * fTemp273) + ((0.0121768853f * fTemp274) + ((0.0122684408f * fTemp169) + ((0.00997955259f * fTemp32) + ((0.00567644276f * fTemp33) + ((0.0107730338f * fTemp280) + ((0.0115359966f * fTemp281) + ((0.00958281197f * fTemp215) + ((0.00125125889f * fTemp292) + ((0.0121463668f * fTemp441) + ((0.0191351064f * fTemp485) + ((0.0235297717f * fTemp479) + ((0.022583697f * fTemp35) + ((0.00784325693f * fTemp37) + ((0.00570696127f * fTemp214) + ((0.0074159978f * fTemp44) + ((0.00912503432f * fTemp45) + ((0.0154728843f * fTemp46) + ((0.0235908087f * fTemp47) + ((0.0272530299f * fTemp48) + ((0.0229499191f * fTemp49) + ((0.00814844202f * fTemp51) + ((0.00918607134f * fTemp53) + ((0.00439466536f * fTemp313) + ((0.0616473891f * fTemp212) + ((0.0988189355f * fTemp58) + ((0.0747398287f * fTemp59) + (fTemp672 + ((0.0701925755f * fTemp62) + ((0.0966216028f * fTemp63) + ((0.105746634f * fTemp64) + ((0.115268409f * fTemp65) + ((0.104525894f * fTemp66) + ((0.076967679f * fTemp67) + ((0.0388805829f * fTemp69) + ((0.0837733075f * fTemp70) + ((0.105349898f * fTemp71) + ((0.0488296151f * fTemp72) + ((0.18030335f * fTemp326) + ((0.179357275f * fTemp73) + ((0.114352852f * fTemp74) + ((0.0557573177f * fTemp75) + ((0.0593584999f * fTemp76) + ((0.0743430927f * fTemp77) + ((0.0413525812f * fTemp81) + ((0.0492263548f * fTemp83) + ((0.111117892f * fTemp84) + ((0.30417797f * fTemp327) + ((0.620441318f * fTemp85) + ((0.810052812f * fTemp86) + ((0.628406644f * fTemp87) + (((0.000610370189f * (fTemp513 + ((((fTemp38 - fTemp252) - fTemp498) - fTemp171) - fTemp361))) + ((9.15555283e-05f * ((fTemp112 + ((fTemp158 + ((fTemp507 - fTemp265) - fTemp204)) - fTemp529)) - fTemp334)) + ((0.000518814661f * ((fTemp393 + (fTemp102 + ((fTemp380 + (fTemp378 + fTemp235)) - fTemp18))) - fTemp98)) + ((0.000457777642f * ((fTemp163 + ((((fTemp190 + (fTemp447 + (fTemp246 - fTemp449))) - fTemp104) - fTemp93) - fTemp342)) - fTemp107)) + ((0.000885036774f * ((fTemp444 + (fTemp105 + fTemp147)) - fTemp114)) + ((0.00106814783f * (((fTemp409 + fTemp294) - fTemp365) - fTemp360)) + ((0.000396740623f * ((fTemp340 + (fTemp476 + fTemp269)) - fTemp113)) + ((0.000213629566f * (((fTemp241 - fTemp448) - fTemp394) - fTemp390)) + ((3.05185094e-05f * (fTemp396 + (fTemp119 + fTemp91))) + ((0.000854518265f * (fTemp127 + (fTemp195 + (fTemp348 + (fTemp42 - fTemp400))))) + ((0.00152592547f * (fTemp130 + ((fTemp55 - fTemp213) - fTemp496))) + ((0.00137333293f * (fTemp134 + fTemp497)) + ((0.000793481246f * (fTemp408 + fTemp225)) + ((0.00155644398f * (((fTemp95 - fTemp364) - fTemp417) - fTemp108)) + ((0.00268562883f * (fTemp484 - fTemp384)) + ((0.00274666585f * ((fTemp26 + (fTemp335 + fTemp487)) - fTemp344)) + ((0.00329599902f * ((fTemp386 - fTemp418) - fTemp100)) + ((0.00308236945f * (fTemp382 - fTemp167)) + ((0.00360118411f * (fTemp140 + (fTemp216 - fTemp411))) + ((0.00213629566f * (fTemp242 - fTemp426)) + ((0.0022583697f * ((fTemp373 + (fTemp472 - fTemp192)) - fTemp428)) + ((0.00207525864f * (fTemp434 + (fTemp16 - fTemp193))) + ((0.00122074038f * (fTemp166 + (fTemp363 + (fTemp514 + (fTemp470 + (fTemp457 + fTemp506)))))) + ((0.000335703604f * ((fTemp435 + fTemp492) - fTemp151)) + ((0.0054933317f * (fTemp20 - fTemp367)) + ((0.00701925717f * (fTemp17 + fTemp272)) + ((0.00338755455f * (fTemp414 - fTemp197)) + ((0.0038758507f * (fTemp14 + fTemp282)) + ((0.00753807183f * (fTemp43 - fTemp227)) + ((0.00668355357f * (fTemp468 - fTemp464)) + ((0.00518814661f * (fTemp116 + fTemp10)) + ((6.10370189e-05f * (fTemp160 + fTemp236)) + ((0.000946073793f * (fTemp379 + fTemp267)) + ((0.00204474013f * (fTemp96 + fTemp391)) + ((0.00247199927f * (fTemp181 + fTemp290)) + ((0.00280770287f * (fTemp392 + fTemp844)) + ((0.00100711081f * ((((fTemp57 - fTemp385) - fTemp29) - fTemp395) - fTemp176)) + ((0.00149540696f * (fTemp247 - fTemp495)) + ((0.00372325815f * (fTemp291 - fTemp248)) + ((0.00332651753f * (fTemp56 - fTemp254)) + ((0.00592059083f * (fTemp505 - fTemp258)) + ((0.00619525742f * (fTemp279 - fTemp259)) + ((0.00054933317f * (fTemp283 + fTemp293)) + ((0.0061342204f * (fTemp511 + fTemp34)) + ((0.0162053294f * (fTemp36 + fTemp52)) + ((0.0491042808f * (fTemp82 - fTemp298)) + ((0.00347911008f * fTemp806) + (0.009704886f * fTemp783)))))))))))))))))))))))))))))))))))))))))))))))) + (0.000701925717f * (fTemp88 + (fTemp387 + fTemp268)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.0616779067f * fTemp0) + ((0.151890621f * fTemp1) + ((0.0546586514f * fTemp219) + ((0.066377759f * fTemp220) + ((0.03234962f * fTemp4) + ((0.0680867955f * fTemp221) + ((0.00244148076f * fTemp368) + (fTemp829 + ((0.00390636921f * fTemp392) + ((0.00454725791f * fTemp165) + ((0.00463881344f * fTemp490) + ((0.00537125766f * fTemp96) + ((0.00509659108f * fTemp474) + ((0.00500503555f * fTemp456) + ((0.00506607257f * fTemp225) + ((0.00497451704f * fTemp226) + ((0.00375377666f * fTemp190) + ((0.00296029542f * fTemp378) + ((0.00564592425f * fTemp171) + ((0.0042115543f * fTemp104) + ((0.00399792474f * fTemp381) + ((0.0057985168f * fTemp184) + ((0.00543229468f * fTemp439) + ((0.00448622089f * fTemp217) + ((0.00567644276f * fTemp339) + ((0.00253303628f * fTemp178) + ((0.00338755455f * fTemp198) + ((0.00650044251f * fTemp486) + ((0.00662251655f * fTemp483) + ((0.006469924f * fTemp452) + ((0.00622577593f * fTemp418) + ((0.00695822015f * fTemp157) + ((0.00714133121f * fTemp482) + ((0.00656147953f * fTemp183) + ((0.00589007232f * fTemp398) + ((0.00476088747f * fTemp202) + ((0.0025940733f * fTemp201) + ((0.00369273964f * fTemp195) + ((0.00708029419f * fTemp432) + ((0.00891140476f * fTemp424) + ((0.0067751091f * fTemp342) + ((0.00924710836f * fTemp463) + ((0.00897244178f * fTemp459) + ((0.00689718314f * fTemp230) + ((0.00473036896f * fTemp19) + ((0.00378429517f * fTemp426) + ((0.000762962736f * fTemp355) + ((0.00057985168f * fTemp176) + ((0.00360118411f * fTemp448) + ((0.00384533219f * fTemp449) + ((0.00363170262f * fTemp369) + ((0.000640888698f * fTemp244) + ((0.00576799829f * fTemp255) + ((0.00625629444f * fTemp256) + ((0.00619525742f * fTemp257) + ((0.00344859157f * fTemp263) + ((0.00247199927f * fTemp264) + ((0.00906399731f * fTemp501) + ((0.00784325693f * fTemp488) + ((0.00299081393f * fTemp284) + ((0.00350962859f * fTemp34) + ((0.0077517014f * fTemp303) + ((0.0185857732f * fTemp304) + ((0.0153508103f * fTemp305) + ((0.0237128828f * fTemp308) + ((0.0271309558f * fTemp309) + ((0.0231940672f * fTemp509) + ((0.01803644f * fTemp310) + ((0.0126041444f * fTemp311) + ((0.0967131555f * fTemp314) + ((0.0657979101f * fTemp315) + ((0.0719626471f * fTemp316) + ((0.0825525671f * fTemp318) + ((0.0726645738f * fTemp319) + ((0.0710776076f * fTemp320) + ((0.0757469386f * fTemp321) + ((0.0728782043f * fTemp322) + ((0.0234992523f * fTemp68) + ((0.0735801235f * fTemp135) + ((0.179204687f * fTemp323) + ((0.180700094f * fTemp324) + ((0.0781884193f * fTemp325) + ((0.014435255f * fTemp79) + ((0.142704546f * fTemp83) + ((0.265541553f * fTemp84) + ((0.884151757f * fTemp328) + (fTemp329 + ((0.605487227f * fTemp331) + ((0.222785115f * fTemp332) + ((0.00119022187f * ((((((fTemp496 + fTemp174) - fTemp120) - fTemp109) - fTemp417) - fTemp361) - fTemp334)) + ((0.00112918485f * (fTemp504 - fTemp231)) + ((0.000732444227f * ((((fTemp414 + (fTemp13 + (fTemp204 + fTemp291))) - fTemp373) - fTemp115) - fTemp107)) + ((0.000427259132f * ((fTemp371 + ((fTemp359 + fTemp487) - fTemp376)) - fTemp341)) + ((0.000396740623f * ((fTemp113 + (((fTemp505 - fTemp506) - fTemp234) - fTemp167)) - fTemp106)) + ((3.05185094e-05f * (fTemp499 - fTemp114)) + ((6.10370189e-05f * (fTemp360 + (((fTemp140 + (((fTemp199 - fTemp277) - fTemp516) - fTemp20)) - fTemp142) - fTemp346))) + ((0.000335703604f * (fTemp366 + fTemp357)) + ((0.00250251777f * (fTemp510 - fTemp375)) + ((0.00103762932f * ((fTemp338 + fTemp446) - fTemp399)) + ((0.0012817774f * ((fTemp351 + fTemp246) - fTemp405)) + ((0.00149540696f * ((fTemp192 + (fTemp400 + (fTemp240 + fTemp471))) - fTemp134)) + ((0.00173955504f * ((((fTemp22 + fTemp235) - fTemp150) - fTemp139) - fTemp136)) + ((0.000457777642f * (fTemp108 + fTemp491)) + ((0.00137333293f * (fTemp239 - fTemp344)) + ((0.00143436994f * ((fTemp89 + fTemp153) - fTemp152)) + ((0.00125125889f * (fTemp232 - fTemp132)) + ((0.00152592547f * ((fTemp175 - fTemp94) - fTemp155)) + ((0.003234962f * (fTemp156 + (fTemp116 + fTemp300))) + ((0.00366222113f * (fTemp428 + (fTemp91 + fTemp500))) + ((0.00280770287f * (fTemp97 + fTemp103)) + ((9.15555283e-05f * (fTemp425 + fTemp457)) + ((0.00109866634f * ((((fTemp16 + (fTemp433 + (fTemp247 + fTemp430))) - fTemp164) - fTemp431) - fTemp27)) + ((0.000793481246f * (fTemp526 - fTemp24)) + ((0.00146488845f * (fTemp438 + (fTemp146 + (fTemp238 + (fTemp265 - fTemp242))))) + ((0.0019531846f * (fTemp170 + fTemp251)) + ((0.00201422162f * (fTemp364 + fTemp404)) + ((0.00177007355f * (fTemp443 + fTemp179)) + ((0.000152592547f * (fTemp451 + fTemp233)) + ((0.000244148076f * (fTemp23 + (fTemp287 - fTemp386))) + ((0.00402844325f * (fTemp122 + (fTemp450 + fTemp181))) + ((0.00521866512f * (fTemp18 + (fTemp469 + fTemp211))) + ((0.00479140598f * (fTemp149 + fTemp278)) + ((0.0051576281f * (fTemp191 + fTemp261)) + ((0.00277718436f * (fTemp350 + fTemp842)) + ((0.00357066561f * ((fTemp133 + (fTemp93 + fTemp367)) - fTemp90)) + ((0.00418103579f * (fTemp229 + fTemp141)) + ((0.00183111057f * (fTemp228 + fTemp411)) + ((0.00189214759f * (fTemp472 + fTemp285)) + ((0.0028992584f * (fTemp454 + (fTemp126 + fTemp137))) + ((0.00305185094f * (fTemp196 + (fTemp205 + (fTemp379 + fTemp111)))) + ((0.00210577715f * (fTemp347 + (fTemp252 + fTemp401))) + ((0.0061342204f * (fTemp348 + fTemp208)) + ((0.00601214636f * (fTemp227 + fTemp296)) + ((0.00491348002f * (fTemp464 + fTemp380)) + ((0.00292977691f * (fTemp207 + fTemp301)) + ((0.00427259132f * (fTemp480 + fTemp158)) + ((0.0058290353f * (fTemp388 + fTemp514)) + ((0.00393688772f * (fTemp363 + (fTemp335 + fTemp154))) + ((0.00140385143f * (fTemp11 + fTemp515)) + ((0.00317392498f * (fTemp356 + (fTemp194 + fTemp236))) + ((0.00518814661f * (fTemp193 + (fTemp377 + (fTemp421 + fTemp200)))) + ((0.00445570238f * (fTemp209 + fTemp435)) + ((0.00424207281f * (fTemp128 + (fTemp475 + (fTemp312 - fTemp271)))) + ((0.00442518387f * (fTemp129 + (fTemp466 + fTemp391))) + ((0.0054933317f * (fTemp160 + fTemp306)) + ((0.00439466536f * (fTemp138 + (fTemp415 + fTemp254))) + ((0.00265511032f * (fTemp473 + (fTemp492 - fTemp243))) + ((0.00329599902f * (fTemp349 + (fTemp387 + fTemp494))) + ((0.00585955381f * (fTemp147 + fTemp260)) + ((0.00213629566f * (fTemp498 + fTemp250)) + ((0.00396740623f * (fTemp395 + fTemp495)) + ((0.00308236945f * (fTemp502 + fTemp484)) + ((0.00540177617f * (fTemp213 - fTemp370)) + (0.00604266487f * (fTemp258 + fTemp259))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0749534592f * fTemp2) + ((0.0238959938f * fTemp402) + ((0.0661336109f * fTemp218) + ((0.132114634f * fTemp3) + ((0.125766784f * fTemp5) + ((0.0670186505f * fTemp6) + ((0.082491532f * fTemp7) + ((0.004852443f * fTemp222) + ((0.00885036774f * fTemp223) + ((0.00241096225f * fTemp17) + ((0.00469985045f * fTemp521) + ((0.00198370311f * fTemp185) + ((0.00170903653f * fTemp121) + ((0.000915555283f * fTemp410) + ((0.00164799951f * fTemp394) + ((0.00234992523f * fTemp112) + ((0.0019226661f * fTemp390) + ((0.00332651753f * fTemp412) + ((0.00216681417f * fTemp416) + ((0.00555436872f * fTemp385) + ((0.00634784997f * fTemp186) + ((0.00466933195f * fTemp30) + ((0.00372325815f * fTemp272) + ((0.00607318338f * fTemp273) + ((0.0083925901f * fTemp169) + ((0.00570696127f * fTemp32) + ((0.00488296151f * fTemp279) + ((0.00256355479f * fTemp281) + ((0.0122989593f * fTemp485) + ((0.0163579211f * fTemp479) + ((0.0163884405f * fTemp35) + ((0.0148930326f * fTemp36) + ((0.0129093295f * fTemp37) + ((0.0105594043f * fTemp38) + ((0.00683614612f * fTemp39) + ((0.00561540574f * fTemp41) + ((0.0127872555f * fTemp42) + ((0.0188909583f * fTemp214) + ((0.0193182174f * fTemp43) + ((0.0177312549f * fTemp44) + ((0.0178838465f * fTemp45) + ((0.0208746605f * fTemp46) + ((0.0244148076f * fTemp47) + ((0.0230414756f * fTemp48) + ((0.013061922f * fTemp49) + ((0.00863673817f * fTemp50) + ((0.0215765871f * fTemp51) + ((0.0325632505f * fTemp52) + ((0.0299996957f * fTemp53) + ((0.0136417737f * fTemp159) + ((0.0093691824f * fTemp54) + ((0.0213019196f * fTemp55) + ((0.034272287f * fTemp56) + ((0.0390026569f * fTemp57) + ((0.029053621f * fTemp144) + ((0.0151066622f * fTemp313) + ((0.0313425101f * fTemp212) + ((0.0565507971f * fTemp58) + ((0.0898159742f * fTemp59) + ((0.0622272417f * fTemp60) + ((0.101107821f * fTemp62) + ((0.107760854f * fTemp63) + ((0.112735376f * fTemp64) + ((0.12851344f * fTemp65) + ((0.095675528f * fTemp66) + ((0.0316171758f * fTemp67) + ((0.0661946461f * fTemp70) + ((0.154728845f * fTemp71) + ((0.0727256089f * fTemp72) + ((0.149906918f * fTemp326) + ((0.129245892f * fTemp73) + ((0.0653401315f * fTemp74) + ((0.0376598425f * fTemp75) + ((0.0407116935f * fTemp76) + ((0.0303353984f * fTemp77) + ((0.0227973275f * fTemp507) + ((0.00680562761f * fTemp80) + ((0.0648518354f * fTemp81) + ((0.131076992f * fTemp82) + ((0.00744651631f * fTemp327) + ((0.571825325f * fTemp85) + ((0.961851835f * fTemp86) + ((0.685995042f * fTemp87) + (((0.00106814783f * (fTemp513 + (fTemp98 + (fTemp131 + ((fTemp123 + fTemp295) - fTemp161))))) + ((0.00115970336f * (fTemp333 + (fTemp396 + ((fTemp422 + fTemp440) - fTemp461)))) + ((0.000885036774f * (fTemp101 + (fTemp403 + (fTemp130 + fTemp180)))) + ((0.00054933317f * (fTemp336 + (fTemp119 - fTemp14))) + ((0.000274666585f * (fTemp337 - fTemp118)) + ((0.000122074038f * (fTemp345 + (fTemp266 - fTemp374))) + ((0.000183111057f * (((fTemp434 + (fTemp216 + fTemp465)) - fTemp384) - fTemp365)) + ((0.000213629566f * (fTemp124 + fTemp477)) + ((0.000488296151f * (fTemp353 + fTemp276)) + ((0.000854518265f * (fTemp383 - fTemp99)) + ((0.00158696249f * (fTemp389 + (fTemp382 + fTemp8))) + ((0.00268562883f * (fTemp354 + (((fTemp307 - fTemp249) - fTemp478) - fTemp187))) + ((0.00271614734f * (fTemp372 - fTemp224)) + ((0.00207525864f * (fTemp529 + (fTemp95 - fTemp237))) + ((0.00131229591f * (fTemp125 + (fTemp102 + (fTemp145 + (fTemp148 + (fTemp420 - fTemp407)))))) + ((0.00155644398f * (fTemp409 + fTemp100)) + ((0.00167851802f * (fTemp408 + ((fTemp92 - fTemp447) - fTemp197))) + ((0.001617481f * (fTemp393 - fTemp206)) + ((0.00134281442f * (fTemp427 - fTemp343)) + ((0.00219733268f * ((fTemp182 + ((fTemp61 - fTemp511) - fTemp445)) - fTemp163)) + ((0.000976592302f * (fTemp162 + (fTemp33 + (fTemp299 - fTemp286)))) + ((0.000671407208f * ((((fTemp470 + fTemp468) - fTemp436) - fTemp172) - fTemp166)) + ((0.000305185094f * (fTemp455 + fTemp423)) + ((0.00341807306f * ((fTemp441 - fTemp476) - fTemp458)) + ((0.00430310983f * ((fTemp520 - fTemp262) - fTemp177)) + ((0.00302133244f * ((fTemp31 + fTemp283) - fTemp151)) + ((0.00436414685f * (fTemp189 + fTemp270)) + ((0.00823999755f * (fTemp274 - fTemp15)) + ((0.00228888821f * (fTemp269 - fTemp12)) + ((0.00186162908f * (fTemp294 - fTemp168)) + ((0.00701925717f * (fTemp298 - fTemp437)) + ((0.00640888698f * (fTemp29 - fTemp442)) + ((0.00314340647f * (((fTemp143 + fTemp282) - fTemp105) - fTemp210)) + ((0.00122074038f * (fTemp288 - fTemp462)) + ((0.0022583697f * ((fTemp290 - fTemp275) - fTemp489)) + ((0.000610370189f * (fTemp453 + (fTemp429 + fTemp267))) + ((0.00595110934f * (fTemp28 - fTemp110)) + ((0.00616473891f * ((fTemp188 + fTemp280) - fTemp467)) + ((0.00460829493f * (fTemp293 - fTemp358)) + ((0.00283822138f * ((fTemp289 - fTemp406) - fTemp444)) + ((0.00552385021f * (fTemp297 - fTemp413)) + ((0.00222785119f * ((fTemp503 - fTemp203) - fTemp460)) + ((0.00274666585f * (fTemp292 - fTemp253)) + ((0.000366222113f * ((fTemp362 + (fTemp302 - fTemp215)) - fTemp497)) + ((0.0038758507f * (fTemp40 + fTemp78)) + ((0.0115970336f * (fTemp69 - fTemp508)) + ((0.000823999755f * fTemp540) + (0.000946073793f * fTemp537)))))))))))))))))))))))))))))))))))))))))))))))) + (0.00100711081f * (fTemp88 + (fTemp26 + (fTemp268 - fTemp397))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow45 ? (iSlow47 ? (((0.00439466536f * fTemp402) + ((0.00277718436f * fTemp4) + ((0.0077517014f * fTemp5) + ((0.0074159978f * fTemp147) + ((0.00418103579f * fTemp490) + ((0.00247199927f * fTemp413) + ((0.00546281319f * fTemp225) + ((0.00674459059f * fTemp435) + ((0.00268562883f * fTemp349) + ((0.000610370189f * fTemp105) + ((0.00152592547f * fTemp193) + ((0.00186162908f * fTemp184) + ((0.00430310983f * fTemp439) + (fTemp614 + ((0.00228888821f * fTemp343) + ((0.00604266487f * fTemp363) + (fTemp696 + ((0.00329599902f * fTemp198) + ((0.0012817774f * fTemp103) + ((0.00100711081f * fTemp464) + (fTemp577 + ((0.0019226661f * fTemp348) + ((0.00115970336f * fTemp157) + ((0.000793481246f * fTemp183) + ((0.00350962859f * fTemp133) + ((0.00500503555f * fTemp454) + ((0.000366222113f * fTemp414) + ((0.0118106632f * fTemp17) + ((0.0107119968f * fTemp185) + ((0.0133365886f * fTemp182) + ((0.013061922f * fTemp164) + ((0.00280770287f * fTemp179) + ((0.0028992584f * fTemp458) + ((0.00393688772f * fTemp438) + ((0.00637836847f * fTemp27) + ((0.00567644276f * fTemp162) + ((0.00155644398f * fTemp89) + ((0.00320444349f * fTemp428) + ((0.00573747978f * fTemp156) + ((0.00854518265f * fTemp161) + ((0.0100711081f * fTemp140) + ((0.0111087374f * fTemp115) + ((0.00119022187f * fTemp150) + ((0.00900296029f * fTemp417) + ((0.011200293f * fTemp410) + ((0.00408948027f * fTemp355) + ((0.00576799829f * fTemp139) + ((0.00589007232f * fTemp136) + ((0.00488296151f * fTemp408) + ((0.00662251655f * fTemp394) + ((0.00665303506f * fTemp372) + ((0.00610370189f * fTemp354) + ((0.00338755455f * fTemp353) + ((0.00503555406f * fTemp124) + ((0.00656147953f * fTemp346) + ((0.00729392376f * fTemp374) + ((0.00631733146f * fTemp113) + ((0.00189214759f * fTemp365) + ((0.000183111057f * fTemp101) + ((0.00125125889f * fTemp98) + ((0.0125125889f * fTemp94) + ((0.0200811792f * fTemp92) + ((0.00668355357f * fTemp499) + ((0.00787377544f * fTemp237) + ((0.00933866389f * fTemp240) + ((0.00915555283f * fTemp242) + ((0.00833155308f * fTemp243) + ((0.00689718314f * fTemp143) + ((0.0107425153f * fTemp263) + ((0.0164799951f * fTemp264) + ((0.0156865139f * fTemp265) + ((0.0240485854f * fTemp362) + ((0.0293588061f * fTemp266) + ((0.0166631062f * fTemp506) + ((0.0143742179f * fTemp29) + ((0.0127567369f * fTemp385) + ((0.0133976256f * fTemp271) + ((0.0354319885f * fTemp370) + ((0.0507827997f * fTemp186) + ((0.0218817722f * fTemp188) + ((0.0327158421f * fTemp273) + ((0.0385448784f * fTemp274) + ((0.0356151015f * fTemp169) + ((0.0383312479f * fTemp32) + ((0.040070802f * fTemp33) + ((0.0354930274f * fTemp492) + ((0.0193792544f * fTemp275) + ((0.0349436924f * fTemp215) + ((0.0186162908f * fTemp468) + ((0.0249336231f * fTemp505) + ((0.0336313993f * fTemp511) + ((0.0182500686f * fTemp291) + ((0.0278328806f * fTemp292) + (fTemp835 + ((0.0836817548f * fTemp294) + ((0.0953703448f * fTemp484) + ((0.0846583471f * fTemp34) + ((0.0289010294f * fTemp441) + ((0.00415051728f * fTemp38) + ((0.0802636817f * fTemp39) + ((0.136478782f * fTemp40) + ((0.112491228f * fTemp41) + ((0.0147099216f * fTemp42) + ((0.124179818f * fTemp298) + ((0.150944546f * fTemp299) + ((0.0877407119f * fTemp300) + ((0.426313072f * fTemp159) + ((0.904293954f * fTemp303) + (fTemp304 + ((0.677755058f * fTemp305) + ((0.271980971f * fTemp306) + ((0.0668660551f * fTemp307) + ((0.00167851802f * fTemp212) + ((0.0146488845f * fTemp59) + ((0.0108645894f * fTemp60) + ((0.00366222113f * fTemp199) + ((0.00735496078f * fTemp64) + ((0.00650044251f * fTemp65) + ((0.004852443f * fTemp66) + ((0.0035401471f * fTemp67) + ((0.00842310861f * fTemp69) + ((0.0114139225f * fTemp70) + ((0.00738547929f * fTemp71) + ((0.00527970213f * fTemp327) + ((0.0083925901f * fTemp85) + ((0.0090334788f * fTemp86) + (((((0.00216681417f * ((fTemp443 - fTemp194) - fTemp114)) + ((0.00344859157f * (fTemp366 + fTemp74)) + ((0.00497451704f * (fTemp371 + (fTemp521 + fTemp190))) + ((0.00717184972f * (fTemp118 + fTemp412)) + ((0.00210577715f * (fTemp383 - fTemp168)) + ((0.00180059206f * (fTemp361 + fTemp316)) + ((0.00378429517f * (fTemp390 + fTemp487)) + ((0.00512710959f * (fTemp112 + fTemp431)) + ((0.00704977568f * (fTemp375 + ((fTemp211 + fTemp516) - fTemp342))) + ((0.0071108127f * (fTemp529 + fTemp87)) + ((0.00524918362f * (fTemp125 + (fTemp10 + fTemp270))) + ((0.00335703604f * (fTemp396 + fTemp68)) + ((0.00109866634f * (fTemp399 + fTemp131)) + ((0.003234962f * (fTemp134 + fTemp474)) + ((0.00396740623f * (fTemp409 + (fTemp393 + (fTemp148 + fTemp170)))) + ((0.000671407208f * (fTemp102 + fTemp473)) + ((0.00860621966f * (fTemp384 + fTemp46)) + ((0.00262459181f * (fTemp109 + (fTemp14 - fTemp368))) + ((0.00158696249f * (fTemp120 + (fTemp24 - fTemp446))) + ((0.000762962736f * (fTemp344 + (fTemp347 + (fTemp201 + (fTemp437 + fTemp444))))) + ((0.00054933317f * (fTemp100 + fTemp84)) + ((0.00967436749f * (fTemp155 - fTemp459)) + ((0.0109561449f * (fTemp382 + (fTemp290 - fTemp256))) + ((0.011383404f * (fTemp427 - fTemp424)) + ((0.00442518387f * (fTemp426 - fTemp460)) + ((0.00198370311f * (fTemp97 - fTemp380)) + ((0.0038758507f * (fTemp373 - fTemp158)) + ((0.00317392498f * (fTemp26 + (fTemp210 + fTemp462))) + ((0.0025940733f * (fTemp166 + fTemp110)) + ((0.000274666585f * (fTemp455 - fTemp171)) + ((0.00543229468f * (fTemp22 + fTemp200)) + ((0.000701925717f * (fTemp90 + fTemp483)) + ((0.00958281197f * (fTemp189 + fTemp16)) + ((0.00296029542f * (fTemp469 + fTemp421)) + ((0.00375377666f * (fTemp13 + fTemp507)) + ((0.000976592302f * (fTemp195 + fTemp126)) + ((0.00164799951f * (fTemp442 + fTemp207)) + ((0.00140385143f * (fTemp452 + (fTemp73 - fTemp235))) + ((0.000244148076f * (fTemp486 + fTemp318)) + ((0.00143436994f * (fTemp367 - fTemp387)) + ((0.00265511032f * (fTemp137 + fTemp96)) + ((0.00286873989f * (fTemp178 + fTemp206)) + ((0.00292977691f * (fTemp489 + fTemp8)) + ((0.00238044374f * (fTemp480 + fTemp154)) + ((0.00653096102f * fTemp836) + ((0.00411999878f * (fTemp356 - fTemp104)) + ((0.000823999755f * fTemp837) + ((0.00177007355f * (fTemp72 - fTemp91)) + ((0.00405896176f * (fTemp456 + (fTemp416 + fTemp216))) + ((0.00561540574f * (fTemp165 - fTemp220)) + ((0.00683614612f * (fTemp514 + fTemp239)) + ((0.00482192449f * (fTemp391 + fTemp429)) + ((0.00479140598f * (fTemp181 - fTemp0)) + ((0.00701925717f * (fTemp502 - fTemp232)) + ((0.0167546626f * fTemp838) + ((0.0022583697f * (fTemp500 + fTemp78)) + (((0.00436414685f * ((fTemp75 - fTemp221) - fTemp262)) + ((0.0109866634f * (fTemp497 + fTemp3)) + ((0.022461623f * (fTemp281 + fTemp47)) + ((0.0138248848f * (fTemp54 + fTemp7)) + ((0.00460829493f * (fTemp63 + fTemp545)) + (0.00885036774f * (fTemp58 - fTemp222))))))) + (0.00747703481f * (fTemp238 - fTemp2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00201422162f * (fTemp231 - fTemp450))) + (0.00149540696f * (fTemp333 + fTemp208))) + (0.000518814661f * ((fTemp513 - fTemp351) - fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00540177617f * fTemp218) + ((0.00643940549f * fTemp6) + ((0.0267342143f * fTemp223) + ((3.05185094e-05f * fTemp204) + (fTemp839 + ((0.00131229591f * fTemp415) + ((0.000396740623f * fTemp141) + ((0.00231940672f * fTemp475) + ((9.15555283e-05f * fTemp209) + ((0.00122074038f * fTemp476) + ((0.00906399731f * fTemp229) + ((0.0125736259f * fTemp432) + ((0.00531022064f * fTemp15) + ((0.00473036896f * fTemp350) + ((0.00921658985f * fTemp463) + ((0.00881984923f * fTemp230) + ((0.00372325815f * fTemp122) + ((0.00234992523f * fTemp172) + ((0.00347911008f * fTemp99) + ((0.00494399853f * fTemp108) + ((0.00360118411f * fTemp106) + ((0.00476088747f * fTemp357) + ((0.00878933072f * fTemp176) + ((0.00979644153f * fTemp397) + ((0.0051576281f * fTemp461) + ((0.0106814783f * fTemp400) + ((0.015991699f * fTemp498) + ((0.00274666585f * fTemp395) + ((0.0101626636f * fTemp495) + ((0.0141300699f * fTemp369) + ((0.0117496261f * fTemp111) + ((0.0067751091f * fTemp233) + ((0.0100405896f * fTemp234) + ((0.00857570115f * fTemp419) + ((0.00708029419f * fTemp244) + ((0.00869777519f * fTemp465) + ((0.00866725668f * fTemp457) + ((0.0141605884f * fTemp491) + ((0.0193182174f * fTemp526) + ((0.0236213263f * fTemp174) + ((0.021332439f * fTemp175) + ((0.0185552537f * fTemp445) + ((0.0157780703f * fTemp248) + ((0.0184026621f * fTemp249) + ((0.0209967345f * fTemp250) + ((0.0231940672f * fTemp251) + ((0.0196844395f * fTemp252) + ((0.0132450331f * fTemp401) + ((0.00759910885f * fTemp404) + ((0.0113528855f * fTemp254) + ((0.0140995514f * fTemp255) + ((0.0136722922f * fTemp257) + ((0.0234992523f * fTemp258) + ((0.0335398428f * fTemp259) + ((0.0313425101f * fTemp260) + ((0.0203863643f * fTemp261) + ((0.0154423658f * fTemp267) + ((0.0396130271f * fTemp268) + ((0.0451979116f * fTemp269) + ((0.0301522873f * fTemp520) + ((0.00369273964f * fTemp28) + ((0.0555131696f * fTemp30) + ((0.131473735f * fTemp31) + ((0.141788989f * fTemp95) + ((0.0801416039f * fTemp503) + ((0.00305185094f * fTemp276) + ((0.0283822138f * fTemp277) + ((0.0553300567f * fTemp278) + ((0.0789513811f * fTemp501) + ((0.090578936f * fTemp488) + ((0.0785241276f * fTemp471) + ((0.0480361357f * fTemp279) + ((0.00753807183f * fTemp280) + ((0.0577715375f * fTemp283) + ((0.0899685696f * fTemp477) + ((0.113834038f * fTemp510) + ((0.117221594f * fTemp284) + ((0.125949889f * fTemp285) + ((0.120181888f * fTemp286) + ((0.112918489f * fTemp287) + ((0.0751365721f * fTemp288) + ((0.0345774703f * fTemp289) + ((0.0625324249f * fTemp479) + ((0.0745567158f * fTemp36) + ((0.0451368764f * fTemp37) + ((0.0931730121f * fTemp214) + ((0.166783661f * fTemp43) + ((0.158482626f * fTemp44) + ((0.046967987f * fTemp48) + ((0.121158481f * fTemp49) + ((0.18967253f * fTemp295) + ((0.221869558f * fTemp213) + ((0.216772974f * fTemp296) + ((0.12494278f * fTemp430) + ((0.0397045799f * fTemp301) + ((0.152592555f * fTemp302) + ((0.326517522f * fTemp50) + ((0.469557792f * fTemp51) + ((0.448957801f * fTemp52) + ((0.143528551f * fTemp53) + ((0.0202642903f * fTemp56) + ((0.0318918414f * fTemp57) + ((0.0329599902f * fTemp144) + ((0.0163579211f * fTemp508) + ((0.00778221991f * fTemp308) + ((0.00357066561f * fTemp509) + ((0.00946073793f * fTemp312) + ((0.00491348002f * fTemp313) + ((0.0105288858f * fTemp314) + ((0.0112308115f * fTemp61) + ((0.00827051606f * fTemp320) + ((0.00891140476f * fTemp321) + ((0.00820947904f * fTemp323) + ((0.009704886f * fTemp324) + ((0.00851466414f * fTemp325) + ((0.00173955504f * fTemp326) + ((0.000305185094f * fTemp79) + ((0.00424207281f * fTemp83) + ((0.00448622089f * fTemp329) + ((((0.00311288796f * (fTemp341 + fTemp128)) + ((0.00363170262f * (fTemp337 + (fTemp381 + fTemp80))) + ((0.00308236945f * (fTemp345 - fTemp167)) + ((0.000854518265f * (fTemp352 - fTemp482)) + ((0.000488296151f * (((fTemp62 - fTemp227) - fTemp411) - fTemp360)) + ((0.00244148076f * ((fTemp840 - fTemp121) - fTemp389)) + ((0.000427259132f * (fTemp127 - fTemp379)) + ((0.000885036774f * (fTemp403 - fTemp93)) + ((0.000213629566f * (fTemp130 + fTemp138)) + ((0.00241096225f * ((fTemp151 + (fTemp18 - fTemp447)) - fTemp405)) + ((0.00250251777f * (fTemp340 + (fTemp129 + fTemp219))) + ((0.0045167394f * (fTemp119 - fTemp433)) + ((0.000457777642f * (fTemp338 + (fTemp19 + (fTemp197 + fTemp378)))) + ((0.011322367f * (fTemp494 - fTemp376)) + ((0.00622577593f * (fTemp332 - fTemp145)) + ((0.00402844325f * ((fTemp135 - fTemp339) - fTemp152)) + ((0.00585955381f * (fTemp272 - fTemp132)) + ((0.00781273842f * fTemp841) + ((0.00698873866f * (fTemp322 - fTemp163)) + ((0.00521866512f * (fTemp142 + ((fTemp310 - fTemp335) - fTemp23))) + ((0.001617481f * ((fTemp451 + (fTemp153 - fTemp453)) - fTemp434)) + ((0.00341807306f * (fTemp386 - fTemp364)) + ((0.00106814783f * (fTemp674 - fTemp146)) + ((0.00894192327f * (fTemp246 - fTemp359)) + ((0.00628681295f * (fTemp331 - fTemp20)) + ((0.00253303628f * ((fTemp319 - fTemp388) - fTemp187)) + ((0.00457777642f * (fTemp149 - fTemp392)) + ((0.00671407208f * (fTemp191 + fTemp81)) + ((0.00222785119f * (fTemp123 + fTemp478)) + ((0.00381481368f * (fTemp228 + fTemp309)) + ((0.00518814661f * (fTemp203 - fTemp472)) + ((0.00219733268f * (fTemp196 + fTemp236)) + ((0.00204474013f * (fTemp12 + fTemp55)) + ((0.000915555283f * (fTemp515 - fTemp398)) + ((0.00146488845f * ((fTemp160 + (fTemp466 + fTemp436)) - fTemp467)) + (((0.00137333293f * (fTemp173 - fTemp493)) + ((0.00332651753f * (fTemp448 - fTemp1)) + ((0.0108035523f * (fTemp297 - fTemp504)) + ((0.0110782189f * (fTemp485 - fTemp241)) + ((0.00769066438f * (fTemp253 + fTemp311)) + ((0.00830103457f * (fTemp82 - fTemp180)) + ((0.012939848f * (fTemp282 + fTemp315)) + ((0.0792260543f * (fTemp35 + fTemp45)) + (0.00433362834f * (fTemp496 + fTemp247)))))))))) + (0.000640888698f * ((fTemp470 - fTemp449) - fTemp377)))))))))))))))))))))))))))))))))))))) + (0.000946073793f * (fTemp107 + (fTemp328 - fTemp202)))) + (0.00207525864f * ((fTemp336 - fTemp425) - fTemp334))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.202063054f * fTemp223) + ((0.00512710959f * fTemp12) + ((0.00634784997f * fTemp478) + ((0.0019531846f * fTemp476) + ((0.00408948027f * fTemp228) + ((0.00625629444f * fTemp229) + ((0.00531022064f * fTemp424) + ((0.000762962736f * fTemp15) + ((0.00234992523f * fTemp230) + ((0.0090334788f * fTemp19) + ((0.00521866512f * fTemp20) + ((0.00106814783f * fTemp151) + ((0.00241096225f * fTemp364) + ((0.00277718436f * fTemp438) + ((0.00189214759f * fTemp166) + ((0.00210577715f * fTemp162) + (fTemp824 + ((0.00143436994f * fTemp132) + ((0.0102542192f * fTemp100) + ((0.00933866389f * fTemp120) + ((0.00567644276f * fTemp109) + ((0.00378429517f * fTemp338) + ((0.00534073915f * fTemp99) + ((0.0058290353f * fTemp108) + ((0.00540177617f * fTemp142) + ((0.00424207281f * fTemp119) + ((0.00292977691f * fTemp340) + ((0.00180059206f * fTemp405) + ((0.00723288674f * fTemp130) + ((0.00833155308f * fTemp403) + ((0.00778221991f * fTemp127) + ((0.00469985045f * fTemp396) + ((0.00341807306f * fTemp394) + ((0.00268562883f * fTemp124) + ((0.000518814661f * fTemp374) + ((0.00164799951f * fTemp337) + ((0.00231940672f * fTemp513) + (((0.00228888821f * fTemp445) + ((0.00112918485f * fTemp370) + ((0.0156254768f * fTemp186) + ((0.0212408826f * fTemp188) + ((0.0119022187f * fTemp30) + ((0.0120242927f * fTemp281) + ((0.0195928831f * fTemp215) + ((0.0277108066f * fTemp468) + ((0.030915251f * fTemp282) + ((0.032227546f * fTemp283) + ((0.0197149571f * fTemp477) + ((0.0231025126f * fTemp505) + ((0.0623493157f * fTemp511) + ((0.0638142005f * fTemp291) + (fTemp825 + ((0.0166936256f * fTemp37) + ((0.0584734641f * fTemp38) + ((0.0664082766f * fTemp39) + ((0.0675984994f * fTemp40) + ((0.0824304968f * fTemp41) + ((0.0789208636f * fTemp42) + ((0.061525315f * fTemp214) + ((0.0458082817f * fTemp43) + ((0.0594195388f * fTemp295) + ((0.0960722715f * fTemp213) + ((0.072542496f * fTemp296) + (fTemp826 + ((0.0645771697f * fTemp303) + ((0.097781308f * fTemp304) + ((0.109439373f * fTemp305) + ((0.109225743f * fTemp306) + ((0.0439466536f * fTemp307) + ((0.790887177f * fTemp508) + (fTemp308 + ((0.672627926f * fTemp309) + ((0.246375933f * fTemp509) + ((0.0533463545f * fTemp310) + ((0.0140690329f * fTemp311) + ((3.05185094e-05f * fTemp325) + (((0.00146488845f * (fTemp334 + (fTemp148 + fTemp174))) + ((0.000640888698f * (fTemp231 - fTemp134)) + ((0.000213629566f * ((fTemp393 + (fTemp164 + (fTemp199 + (fTemp6 + fTemp218)))) - fTemp98)) + ((0.000122074038f * ((fTemp62 + (fTemp135 + (fTemp323 + (fTemp326 + (fTemp75 + (fTemp78 + (fTemp79 + (fTemp80 + (fTemp82 + (fTemp2 + (fTemp83 + (fTemp84 + fTemp536)))))))))))) - fTemp341)) + ((0.000732444227f * (fTemp106 + (fTemp315 - fTemp385))) + ((0.00219733268f * (fTemp345 + fTemp443)) + ((0.00149540696f * (fTemp352 + (fTemp102 + fTemp414))) + ((0.000488296151f * (fTemp360 - fTemp365)) + ((0.00167851802f * (fTemp346 - fTemp145)) + ((0.00344859157f * (fTemp353 + fTemp529)) + ((0.0038758507f * (fTemp383 - fTemp128)) + ((0.00399792474f * (fTemp389 + (fTemp390 - fTemp158))) + ((0.00393688772f * (fTemp112 + fTemp115)) + ((0.00396740623f * (fTemp354 + (fTemp510 - fTemp210))) + ((0.00381481368f * (fTemp125 - fTemp482)) + ((0.00183111057f * (fTemp355 - fTemp458)) + ((0.000183111057f * (fTemp384 + (fTemp192 + (fTemp318 + fTemp827)))) + ((0.0110782189f * (fTemp344 - fTemp350)) + ((0.00476088747f * (fTemp121 - fTemp442)) + ((0.00262459181f * (fTemp152 - fTemp103)) + ((0.000946073793f * (fTemp420 + fTemp359)) + ((0.00305185094f * (fTemp427 - fTemp195)) + ((0.0042115543f * (fTemp140 - fTemp11)) + ((0.00415051728f * (fTemp161 - fTemp415)) + ((0.0045167394f * fTemp828) + ((0.00674459059f * (fTemp428 - fTemp335)) + ((0.00744651631f * (fTemp97 + fTemp187)) + ((0.00735496078f * (fTemp89 - fTemp189)) + ((0.000335703604f * ((fTemp275 + fTemp61) - fTemp27)) + ((0.000244148076f * (fTemp434 + (fTemp5 + fTemp4))) + ((0.00265511032f * (fTemp170 + fTemp168)) + ((9.15555283e-05f * ((fTemp322 + (fTemp68 + (fTemp73 + (fTemp81 + (fTemp86 + (fTemp1 + fTemp332)))))) - fTemp172)) + ((0.000885036774f * (fTemp314 - fTemp177)) + ((0.000152592547f * ((fTemp63 + (fTemp64 + (fTemp316 + (fTemp319 + (fTemp220 + (fTemp320 + (fTemp321 + (fTemp219 + (fTemp69 + (fTemp71 + (fTemp72 + (fTemp324 + (fTemp74 + (fTemp76 + fTemp566)))))))))))))) - fTemp122)) + ((0.00964384899f * (fTemp18 - fTemp474)) + ((0.00927762687f * (fTemp149 - fTemp133)) + ((0.00738547929f * (fTemp191 - fTemp379)) + ((0.00537125766f * (fTemp175 - fTemp110)) + ((0.000610370189f * (fTemp29 - fTemp244)) + ((6.10370189e-05f * (fTemp87 + (fTemp328 + fTemp797))) + (((0.000274666585f * fTemp568) + (0.00732444227f * fTemp704)) + (0.00622577593f * fTemp761)))))))))))))))))))))))))))))))))))))))))) + (0.00204474013f * (fTemp333 + fTemp382)))))))))))))))))))))))))))))))))))))))))) + (0.00238044374f * fTemp88))))))))))))))))))))))))))))))))))))))) - ((0.0230109561f * fTemp222) + ((0.00769066438f * fTemp493) + ((0.00561540574f * fTemp368) + ((0.00488296151f * fTemp387) + (fTemp829 + ((0.00463881344f * fTemp141) + ((0.00524918362f * fTemp154) + ((0.00717184972f * fTemp181) + ((0.00762962736f * fTemp200) + ((0.00854518265f * fTemp514) + ((0.00906399731f * fTemp147) + ((0.00836207159f * fTemp96) + ((0.00930814538f * fTemp435) + ((0.00753807183f * fTemp473) + ((0.00686666463f * fTemp160) + ((0.00457777642f * fTemp104) + (fTemp830 + ((0.00314340647f * fTemp193) + ((0.00454725791f * fTemp467) + ((0.00375377666f * fTemp217) + ((0.00244148076f * fTemp8) + ((0.00366222113f * fTemp10) + ((0.00222785119f * fTemp480) + ((0.00137333293f * fTemp462) + ((0.00173955504f * fTemp178) + ((0.00479140598f * fTemp137) + ((0.00500503555f * fTemp207) + ((0.003234962f * fTemp464) + ((0.0035401471f * fTemp227) + ((0.00317392498f * fTemp486) + ((0.00302133244f * fTemp452) + ((0.00482192449f * fTemp348) + ((0.004852443f * fTemp398) + ((0.00543229468f * fTemp202) + ((0.00601214636f * fTemp93) + ((0.00628681295f * fTemp347) + (fTemp820 + ((0.00384533219f * fTemp153) + ((0.0153508103f * fTemp454) + ((0.0186773278f * fTemp472) + ((0.0172124393f * fTemp433) + ((0.00338755455f * fTemp14) + ((0.00460829493f * fTemp469) + ((0.00790429395f * fTemp16) + ((0.00689718314f * fTemp521) + ((0.00811792351f * fTemp90) + (fTemp831 + ((0.0101931822f * fTemp342) + ((0.00802636798f * fTemp463) + ((0.00326548051f * fTemp459) + ((0.0022583697f * fTemp22) + ((0.00140385143f * fTemp451) + ((0.00274666585f * fTemp417) + ((0.00256355479f * fTemp408) + ((0.000366222113f * fTemp118) + ((0.00100711081f * fTemp113) + ((0.000823999755f * fTemp336) + (((0.00442518387f * fTemp232) + (fTemp664 + ((0.00610370189f * fTemp498) + ((0.0087282937f * fTemp406) + ((0.00952177495f * fTemp494) + ((0.00830103457f * fTemp395) + ((0.00924710836f * fTemp495) + (fTemp547 + ((0.00958281197f * fTemp515) + ((0.00912503432f * fTemp436) + ((0.00973540451f * fTemp233) + ((0.0109256264f * fTemp422) + ((0.0100711081f * fTemp94) + ((0.00796533097f * fTemp440) + ((0.00900296029f * fTemp499) + ((0.0125431074f * fTemp236) + ((0.0115054781f * fTemp500) + ((0.0145268105f * fTemp239) + ((0.0159611814f * fTemp240) + ((0.0136112552f * fTemp241) + ((0.00842310861f * fTemp243) + ((0.00057985168f * fTemp246) + ((0.00592059083f * fTemp216) + ((0.00683614612f * fTemp423) + ((0.00888088625f * fTemp465) + ((0.0109866634f * fTemp457) + ((0.0101321451f * fTemp491) + ((0.00509659108f * fTemp526) + ((0.00851466414f * fTemp249) + ((0.0134891812f * fTemp251) + ((0.0141911069f * fTemp252) + ((0.0148625141f * fTemp401) + ((0.0152897732f * fTemp255) + ((0.0187383648f * fTemp256) + ((0.0201422162f * fTemp257) + ((0.0228888821f * fTemp258) + ((0.0288399924f * fTemp259) + ((0.0339060649f * fTemp260) + ((0.0343638435f * fTemp261) + ((0.0292977691f * fTemp262) + ((0.0208136234f * fTemp263) + ((0.0121768853f * fTemp264) + ((0.00704977568f * fTemp265) + ((0.0125125889f * fTemp362) + ((0.016052736f * fTemp266) + ((0.0187688842f * fTemp506) + ((0.0233771782f * fTemp267) + ((0.0271919928f * fTemp268) + ((0.0267342143f * fTemp269) + ((0.0181279946f * fTemp520) + ((0.00595110934f * fTemp28) + ((0.00527970213f * fTemp270) + ((0.0139774773f * fTemp95) + ((0.00949125644f * fTemp503) + ((0.00772118289f * fTemp272) + ((0.0172429588f * fTemp273) + ((0.0349131748f * fTemp274) + ((0.0515457615f * fTemp169) + ((0.0508438386f * fTemp32) + ((0.0348216183f * fTemp33) + ((0.0289010294f * fTemp501) + ((0.0321359895f * fTemp488) + ((0.0259712525f * fTemp471) + ((0.0138554033f * fTemp279) + ((0.0192571804f * fTemp284) + ((0.0509964302f * fTemp285) + ((0.083162941f * fTemp286) + ((0.103823967f * fTemp287) + ((0.109103672f * fTemp288) + ((0.0887173042f * fTemp289) + ((0.0395519882f * fTemp290) + ((0.0189214759f * fTemp293) + ((0.0620136112f * fTemp294) + ((0.0758079812f * fTemp484) + ((0.0780053139f * fTemp34) + ((0.0785546452f * fTemp441) + ((0.0843226388f * fTemp485) + ((0.0734885707f * fTemp479) + ((0.0531632453f * fTemp35) + ((0.0255134739f * fTemp36) + ((0.0431531742f * fTemp45) + ((0.0659199804f * fTemp46) + ((0.0756553859f * fTemp47) + ((0.0823999792f * fTemp48) + ((0.0235297717f * fTemp49) + ((0.0524308011f * fTemp297) + ((0.0885036811f * fTemp298) + ((0.0918607116f * fTemp299) + ((0.0434278399f * fTemp300) + ((0.0286873989f * fTemp301) + ((0.0397045799f * fTemp302) + ((0.0985747874f * fTemp50) + ((0.0934781954f * fTemp51) + ((0.103854485f * fTemp52) + ((0.0457472466f * fTemp53) + ((0.156163216f * fTemp55) + ((0.326975316f * fTemp56) + ((0.457564026f * fTemp57) + ((0.309121996f * fTemp144) + ((0.00335703604f * fTemp312) + ((0.0331431031f * fTemp313) + ((0.0328684337f * fTemp212) + (fTemp610 + ((0.00418103579f * fTemp59) + ((0.000701925717f * fTemp60) + ((((0.00119022187f * (fTemp366 + ((fTemp206 + fTemp343) - fTemp446))) + ((0.0012817774f * (fTemp371 - fTemp155)) + ((0.00390636921f * fTemp832) + ((0.00372325815f * ((fTemp437 + fTemp357) - fTemp375)) + ((0.00473036896f * (fTemp277 - fTemp131)) + ((0.00216681417f * (fTemp409 + fTemp410)) + ((0.00207525864f * (fTemp136 - fTemp146)) + ((0.00103762932f * (fTemp139 - fTemp179)) + ((0.00402844325f * ((fTemp418 + fTemp487) - fTemp361)) + ((0.00759910885f * (fTemp180 - fTemp150)) + ((0.00546281319f * ((fTemp412 - fTemp196) - fTemp426)) + ((0.00445570238f * ((fTemp363 + fTemp129) - fTemp373)) + ((0.00253303628f * (fTemp26 + (fTemp247 - fTemp185))) + ((0.00155644398f * (fTemp24 + fTemp280)) + ((0.00170903653f * (fTemp44 - fTemp351)) + ((0.0025940733f * (fTemp455 + fTemp483)) + ((0.00311288796f * (fTemp167 + fTemp23)) + ((0.000976592302f * ((fTemp159 - fTemp276) - fTemp182)) + ((0.00848414563f * (fTemp17 + fTemp92)) + ((0.0106509598f * (fTemp13 + (fTemp225 + fTemp111))) + ((0.00494399853f * (fTemp197 + fTemp497)) + ((0.00637836847f * (fTemp201 + fTemp447)) + ((0.00427259132f * (fTemp183 + fTemp205)) + ((0.00430310983f * (fTemp157 + fTemp397)) + ((0.00280770287f * (fTemp367 + fTemp143)) + ((0.00308236945f * (fTemp126 + fTemp388)) + ((0.00363170262f * (fTemp198 + fTemp605)) + ((0.00286873989f * (fTemp116 + fTemp461)) + ((0.00186162908f * (fTemp489 + fTemp356)) + ((0.00158696249f * (fTemp453 + fTemp416)) + ((0.00497451704f * (fTemp439 + (fTemp209 + fTemp516))) + ((0.00329599902f * (fTemp208 + fTemp248)) + ((0.0054933317f * fTemp833) + ((0.00570696127f * (fTemp380 + fTemp429)) + ((0.0074159978f * (fTemp171 + (fTemp349 + fTemp31))) + ((0.00756859034f * (fTemp377 + fTemp165)) + ((0.00714133121f * (fTemp358 + fTemp105)) + ((0.0067751091f * (fTemp138 + fTemp224)) + ((0.00659199804f * fTemp834) + ((0.00653096102f * (fTemp475 + fTemp490)) + ((0.00701925717f * (fTemp378 + fTemp413)) + ((0.00766014587f * (fTemp444 + (fTemp194 + fTemp54))) + ((0.00827051606f * (fTemp190 + fTemp449)) + ((0.0100405896f * (fTemp226 + fTemp369)) + ((0.0107730338f * (fTemp456 + fTemp234)) + ((0.00619525742f * (fTemp421 + fTemp460)) + ((0.00875881221f * (fTemp211 + fTemp448)) + ((0.00598162785f * (fTemp392 + fTemp386)) + ((0.0112918485f * (fTemp419 + fTemp254)) + ((0.0117801446f * (fTemp235 + fTemp238)) + ((0.0154728843f * (fTemp504 + fTemp278)) + ((0.0108035523f * (fTemp242 + fTemp253)) + ((0.000671407208f * (fTemp470 - fTemp221)) + ((0.011322367f * (fTemp250 + fTemp492)) + ((0.0130924406f * (fTemp404 + fTemp7)) + (0.00979644153f * fTemp590)))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00213629566f * ((fTemp431 + (fTemp407 + fTemp184)) - fTemp114))) + (0.00109866634f * (fTemp107 + fTemp376)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000854518265f * fTemp101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow46 ? (((0.218451485f * fTemp1) + ((0.0301217698f * fTemp220) + ((0.0596331693f * fTemp4) + ((0.0552079827f * fTemp221) + ((0.0168462172f * fTemp223) + ((0.00943021942f * fTemp204) + ((0.00958281197f * fTemp447) + ((0.00656147953f * fTemp194) + ((0.00326548051f * fTemp391) + ((0.00482192449f * fTemp456) + ((0.00448622089f * fTemp226) + ((0.00869777519f * fTemp378) + ((0.00878933072f * fTemp91) + ((0.00811792351f * fTemp475) + (fTemp799 + ((0.00570696127f * fTemp358) + ((0.00747703481f * fTemp171) + ((0.00753807183f * fTemp160) + ((0.00607318338f * fTemp380) + ((0.00393688772f * fTemp129) + ((0.00149540696f * fTemp158) + ((0.001617481f * fTemp104) + ((0.00738547929f * fTemp193) + ((0.00653096102f * fTemp110) + ((0.00643940549f * fTemp439) + ((0.00622577593f * fTemp217) + ((0.00445570238f * fTemp343) + (fTemp729 + ((0.00366222113f * fTemp206) + ((0.00320444349f * fTemp137) + ((0.0019226661f * fTemp227) + (fTemp820 + ((0.00433362834f * fTemp407) + ((0.00292977691f * fTemp12) + ((0.00460829493f * fTemp414) + ((0.0028992584f * fTemp521) + ((0.0042115543f * fTemp459) + ((0.00177007355f * fTemp18) + ((0.000213629566f * fTemp187) + ((0.00628681295f * fTemp151) + ((0.0057985168f * fTemp458) + ((0.00546281319f * fTemp22) + ((0.00411999878f * fTemp167) + ((0.00219733268f * fTemp451) + ((0.00875881221f * fTemp357) + ((0.00842310861f * fTemp397) + ((0.00912503432f * fTemp232) + ((0.00973540451f * fTemp496) + ((0.00967436749f * fTemp461) + ((0.00924710836f * fTemp400) + ((0.00909451582f * fTemp498) + ((0.00921658985f * fTemp406) + ((0.00976592302f * fTemp494) + ((0.0100100711f * fTemp448) + ((0.00955229346f * fTemp449) + ((0.004852443f * fTemp495) + ((0.00442518387f * fTemp422) + ((0.00250251777f * fTemp92) + ((0.0061342204f * fTemp242) + ((0.00695822015f * fTemp243) + ((0.00689718314f * fTemp412) + ((0.0054933317f * fTemp416) + ((0.00540177617f * fTemp470) + ((0.00589007232f * fTemp244) + ((0.00723288674f * fTemp247) + ((0.00509659108f * fTemp516) + ((0.00357066561f * fTemp216) + ((0.00488296151f * fTemp457) + ((0.00350962859f * fTemp526) + ((0.0074159978f * fTemp33) + ((0.00823999755f * fTemp277) + ((0.0131229591f * fTemp278) + ((0.0152592547f * fTemp501) + ((0.013000885f * fTemp488) + ((0.00964384899f * fTemp471) + (fTemp821 + ((0.0136417737f * fTemp280) + ((0.0172124393f * fTemp281) + ((0.0153508103f * fTemp215) + ((0.00863673817f * fTemp468) + ((0.00207525864f * fTemp282) + ((0.00338755455f * fTemp36) + ((0.0105288858f * fTemp45) + ((0.0131839961f * fTemp46) + ((0.00997955259f * fTemp47) + ((0.00466933195f * fTemp48) + ((0.0127567369f * fTemp49) + ((0.0303048808f * fTemp295) + ((0.0376598425f * fTemp213) + ((0.0293893255f * fTemp296) + ((0.00805688649f * fTemp159) + ((0.0107119968f * fTemp56) + ((0.0205694754f * fTemp57) + ((0.0193182174f * fTemp144) + ((0.0171208847f * fTemp508) + ((0.0196539201f * fTemp308) + ((0.0224005859f * fTemp309) + ((0.0153202917f * fTemp509) + ((0.00363170262f * fTemp310) + ((0.0652485713f * fTemp199) + ((0.0709860548f * fTemp316) + ((0.0513016135f * fTemp318) + ((0.0318613239f * fTemp319) + ((0.0157475509f * fTemp320) + ((0.0117801446f * fTemp321) + ((0.0803552344f * fTemp135) + ((0.110660113f * fTemp323) + ((0.0417493209f * fTemp324) + ((0.0463881344f * fTemp76) + ((0.0234687347f * fTemp83) + ((0.169103056f * fTemp84) + ((0.802026451f * fTemp328) + (fTemp329 + ((0.701773107f * fTemp331) + ((0.272286147f * fTemp332) + ((0.00152592547f * ((fTemp237 - fTemp371) - fTemp333)) + ((0.00109866634f * ((fTemp166 + fTemp486) - fTemp231)) + ((0.000915555283f * (((fTemp438 + (fTemp398 + fTemp520)) - fTemp346) - fTemp98)) + ((0.000335703604f * ((fTemp472 + fTemp401) - fTemp336)) + ((0.000274666585f * ((((fTemp355 - fTemp20) - fTemp529) - fTemp353) - fTemp341)) + ((0.00238044374f * ((fTemp189 + fTemp502) - fTemp352)) + ((0.00228888821f * ((fTemp350 + fTemp90) - fTemp365)) + ((0.00189214759f * (((fTemp123 + fTemp404) - fTemp161) - fTemp366)) + ((0.000610370189f * ((fTemp121 + (fTemp170 + (fTemp157 + fTemp141))) - fTemp124)) + ((0.000244148076f * ((fTemp125 - fTemp410) - fTemp372)) + ((0.000427259132f * (((fTemp338 + (((fTemp515 + (fTemp235 + fTemp269)) - fTemp26) - fTemp132)) - fTemp403) - fTemp375)) + ((0.00057985168f * (fTemp257 - fTemp405)) + ((0.000823999755f * ((fTemp119 + fTemp532) - fTemp134)) + ((0.00164799951f * (((fTemp172 + fTemp8) - fTemp140) - fTemp136)) + ((0.000762962736f * (fTemp440 - fTemp393)) + ((0.000793481246f * (fTemp142 + fTemp69)) + ((0.00100711081f * (fTemp109 + fTemp133)) + ((0.00146488845f * (fTemp120 + (fTemp351 + (fTemp446 + fTemp436)))) + ((0.00170903653f * (fTemp344 + (fTemp100 + fTemp211))) + ((0.000396740623f * (fTemp24 + (fTemp169 - fTemp251))) + ((0.000946073793f * (fTemp434 + (fTemp19 + fTemp477))) + ((0.000854518265f * (fTemp443 + (fTemp10 + (fTemp190 + fTemp822)))) + ((0.00314340647f * (fTemp455 + (fTemp196 + fTemp96))) + ((0.00619525742f * (fTemp177 + (fTemp143 + fTemp303))) + ((0.006469924f * (fTemp122 + fTemp229)) + ((0.00311288796f * (fTemp359 + fTemp234)) + ((0.00103762932f * (fTemp164 + fTemp13)) + ((0.00256355479f * (fTemp149 + fTemp500)) + ((0.00405896176f * (fTemp463 + fTemp474)) + ((0.00335703604f * (fTemp342 + fTemp255)) + ((0.00491348002f * (fTemp23 + fTemp241)) + ((0.00396740623f * (fTemp432 + (fTemp419 + (fTemp94 + (fTemp32 - fTemp267))))) + ((0.00253303628f * (fTemp14 + fTemp462)) + ((0.00180059206f * (fTemp195 + fTemp369)) + ((0.00308236945f * (fTemp168 + (fTemp198 + fTemp504))) + ((0.00430310983f * (fTemp201 + (fTemp178 + fTemp224))) + ((0.00280770287f * (fTemp93 + fTemp147)) + ((0.00158696249f * (fTemp202 + fTemp510)) + ((0.00274666585f * (fTemp210 + fTemp314)) + ((0.00701925717f * (fTemp467 + (fTemp466 + fTemp492))) + ((0.00778221991f * (fTemp208 + (fTemp473 + fTemp395))) + ((0.00814844202f * (fTemp184 + fTemp176)) + ((0.00567644276f * (fTemp209 + fTemp444)) + ((0.00234992523f * (fTemp381 + (fTemp386 + fTemp256))) + ((0.00283822138f * (fTemp435 + fTemp423)) + ((0.000732444227f * (fTemp490 + fTemp174)) + ((0.000366222113f * (fTemp173 + fTemp283)) + ((0.00241096225f * (fTemp460 + fTemp233)) + ((0.00851466414f * (fTemp493 + fTemp35)) + ((0.0067751091f * (fTemp246 + fTemp487)) + ((0.00384533219f * (fTemp465 + fTemp254)) + ((0.00500503555f * (fTemp276 - fTemp497)) + ((0.00524918362f * (fTemp75 - fTemp180)) + ((0.0387279876f * (fTemp60 + fTemp67)) + ((0.00271614734f * fTemp702) + (0.00640888698f * fTemp685))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.101016268f * fTemp2) + ((0.0581377596f * fTemp402) + ((0.164311662f * fTemp218) + ((0.0355845839f * fTemp3) + ((0.035950806f * fTemp219) + ((0.0892971605f * fTemp5) + ((0.127689451f * fTemp6) + ((0.0398571752f * fTemp7) + ((0.05301065f * fTemp222) + ((0.00115970336f * fTemp452) + ((0.00137333293f * fTemp348) + ((0.00341807306f * fTemp15) + ((0.00454725791f * fTemp469) + (fTemp823 + ((0.000640888698f * fTemp155) + ((0.00155644398f * fTemp408) + ((0.000305185094f * fTemp127) + ((0.00112918485f * fTemp374) + ((0.00201422162f * fTemp114) + ((0.00143436994f * fTemp345) + (((0.00558488723f * fTemp261) + ((0.00476088747f * fTemp262) + ((0.0038758507f * fTemp265) + ((0.00512710959f * fTemp429) + ((0.00537125766f * fTemp266) + ((0.00555436872f * fTemp29) + ((0.00952177495f * fTemp385) + ((0.0131534776f * fTemp271) + ((0.0133671071f * fTemp370) + ((0.0155034028f * fTemp188) + ((0.0160832554f * fTemp30) + ((0.00994903408f * fTemp95) + ((0.00518814661f * fTemp503) + ((0.00265511032f * fTemp272) + ((0.00329599902f * fTemp286) + ((0.00436414685f * fTemp289) + ((0.0109256264f * fTemp290) + ((0.0154728843f * fTemp505) + ((0.0176396985f * fTemp511) + ((0.0145268105f * fTemp291) + ((0.0104983672f * fTemp292) + ((0.0102542192f * fTemp293) + ((0.0170598477f * fTemp294) + ((0.0288399924f * fTemp484) + ((0.0332346559f * fTemp34) + ((0.030854214f * fTemp441) + ((0.0125736259f * fTemp485) + ((0.00796533097f * fTemp37) + ((0.0169682913f * fTemp38) + ((0.0231635496f * fTemp39) + ((0.0281075481f * fTemp40) + ((0.0369273983f * fTemp41) + ((0.0419324338f * fTemp42) + ((0.0419019125f * fTemp214) + ((0.0265816227f * fTemp43) + ((0.00790429395f * fTemp44) + ((0.0337839909f * fTemp297) + ((0.0463576168f * fTemp298) + ((0.0370494723f * fTemp299) + ((0.0175481439f * fTemp300) + ((0.0102847377f * fTemp301) + ((0.0222174749f * fTemp50) + ((0.0225531794f * fTemp51) + ((0.0159306619f * fTemp305) + ((0.0273445845f * fTemp306) + ((0.0308847316f * fTemp307) + ((0.0230719931f * fTemp54) + ((0.00457777642f * fTemp55) + ((0.0171514023f * fTemp311) + ((0.0353404358f * fTemp312) + ((0.0560625009f * fTemp313) + ((0.0600909442f * fTemp212) + ((0.057985168f * fTemp58) + ((0.0633869469f * fTemp315) + ((0.11346782f * fTemp61) + ((0.119083226f * fTemp62) + ((0.111941896f * fTemp63) + ((0.0940885618f * fTemp64) + ((0.0521561317f * fTemp65) + ((0.014618366f * fTemp66) + ((0.0332956947f * fTemp322) + ((0.0283822138f * fTemp68) + ((0.0410168767f * fTemp71) + ((0.00845362712f * fTemp72) + ((0.0344553962f * fTemp325) + ((0.161351353f * fTemp326) + ((0.157261878f * fTemp73) + ((0.0544755384f * fTemp77) + ((0.0760521293f * fTemp507) + ((0.0476699136f * fTemp79) + ((0.134769738f * fTemp80) + ((0.178655356f * fTemp81) + ((0.230719939f * fTemp82) + ((0.0184026621f * fTemp327) + ((0.300057977f * fTemp85) + ((0.512833059f * fTemp86) + ((0.377636045f * fTemp87) + (((((0.000488296151f * (fTemp107 + fTemp442)) + ((0.000457777642f * (fTemp106 + ((fTemp349 + (fTemp53 - fTemp387)) - fTemp363))) + ((0.000885036774f * (fTemp337 - fTemp165)) + ((0.00244148076f * (fTemp360 - fTemp103)) + ((0.00131229591f * (fTemp113 + (fTemp115 + (fTemp426 + ((fTemp288 - fTemp482) - fTemp437))))) + ((0.00119022187f * (fTemp118 + (fTemp409 + (fTemp28 + fTemp284)))) + ((9.15555283e-05f * (fTemp383 + fTemp499)) + ((3.05185094e-05f * (fTemp361 + ((fTemp102 + (fTemp152 - fTemp89)) - fTemp394))) + ((6.10370189e-05f * ((fTemp399 + (((fTemp425 + fTemp483) - fTemp145) - fTemp384)) - fTemp389)) + ((0.000183111057f * ((((fTemp417 + ((fTemp111 - fTemp105) - fTemp424)) - fTemp396) - fTemp112) - fTemp390)) + ((0.000518814661f * (fTemp130 + (fTemp131 + ((((((fTemp203 + fTemp252) - fTemp11) - fTemp339) - fTemp454) - fTemp433) - fTemp340)))) + ((0.00054933317f * (((fTemp420 + (fTemp373 + ((fTemp185 + (fTemp720 - fTemp388)) - fTemp364))) - fTemp148) - fTemp99)) + ((0.000152592547f * (fTemp376 + (fTemp97 + fTemp182))) + ((0.00125125889f * ((((fTemp249 + fTemp479) - fTemp392) - fTemp421) - fTemp150)) + ((0.000976592302f * (fTemp427 + (fTemp162 - fTemp183))) + ((0.00198370311f * (fTemp163 + ((fTemp175 + fTemp274) - fTemp464))) + ((0.00173955504f * (fTemp156 + ((fTemp268 - fTemp240) - fTemp236))) + ((0.0012817774f * (fTemp27 - fTemp146)) + ((0.00106814783f * (fTemp431 - fTemp368)) + ((0.00503555406f * (((fTemp362 - fTemp225) - fTemp153) - fTemp179)) + ((0.00332651753f * (((fTemp285 - fTemp253) - fTemp126) - fTemp191)) + ((0.00390636921f * ((((fTemp70 - fTemp116) - fTemp207) - fTemp205) - fTemp230)) + ((0.00262459181f * (fTemp248 - fTemp476)) + ((0.00317392498f * ((fTemp445 + fTemp264) - fTemp478)) + ((0.0035401471f * ((fTemp430 - fTemp200) - fTemp192)) + ((0.00561540574f * (((fTemp59 - fTemp275) - fTemp356) - fTemp197)) + ((0.00534073915f * (fTemp260 - fTemp347)) + ((0.0019531846f * (fTemp273 - fTemp367)) + ((0.00140385143f * (fTemp258 - fTemp489)) + ((0.00369273964f * (fTemp259 - fTemp450)) + ((0.00216681417f * ((fTemp304 - fTemp413) - fTemp128)) + ((0.00344859157f * (fTemp263 - fTemp514)) + ((0.00186162908f * (fTemp287 - fTemp335)) + ((0.00506607257f * (fTemp506 - fTemp491)) + ((0.0121768853f * (fTemp270 + fTemp52)) + (((0.0509659126f * (fTemp78 - fTemp0)) + (0.0151982177f * (fTemp302 + fTemp74))) + (0.0142521439f * (fTemp186 + fTemp31)))))))))))))))))))))))))))))))))))))) + (0.000701925717f * (fTemp101 + ((fTemp382 + fTemp428) - fTemp108)))) + (0.00134281442f * (fTemp334 + fTemp139))) + (0.00167851802f * (fTemp513 + fTemp418)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00183111057f * fTemp88))))))))))))))))))))))) : (((0.00735496078f * fTemp493) + ((0.0125431074f * fTemp224) + ((0.0140385143f * fTemp460) + ((0.0108951079f * fTemp368) + ((0.00393688772f * fTemp387) + ((0.00173955504f * fTemp391) + ((0.00640888698f * fTemp358) + ((0.00833155308f * fTemp377) + ((0.00863673817f * fTemp160) + ((0.00466933195f * fTemp184) + ((0.00567644276f * fTemp208) + ((0.00729392376f * fTemp467) + ((0.0087282937f * fTemp110) + ((0.00964384899f * fTemp439) + ((0.00906399731f * fTemp356) + ((0.00280770287f * fTemp8) + ((0.00463881344f * fTemp11) + ((0.00756859034f * fTemp339) + ((0.00738547929f * fTemp388) + ((0.00653096102f * fTemp480) + ((0.00595110934f * fTemp198) + ((0.00662251655f * fTemp210) + ((0.00671407208f * fTemp137) + ((0.00601214636f * fTemp207) + ((0.00448622089f * fTemp126) + ((0.00473036896f * fTemp103) + ((0.006469924f * fTemp227) + ((0.00634784997f * fTemp486) + (fTemp809 + ((0.00479140598f * fTemp418) + ((0.00424207281f * fTemp348) + ((0.00399792474f * fTemp157) + ((0.00570696127f * fTemp437) + ((0.00714133121f * fTemp398) + ((0.0074159978f * fTemp202) + ((0.00766014587f * fTemp93) + ((0.00781273842f * fTemp201) + ((0.00787377544f * fTemp347) + ((0.00744651631f * fTemp197) + ((0.00521866512f * fTemp192) + ((0.00445570238f * fTemp168) + ((0.0035401471f * fTemp476) + (fTemp518 + ((0.004852443f * fTemp433) + ((0.00427259132f * fTemp13) + ((0.00317392498f * fTemp414) + ((0.00537125766f * fTemp521) + ((0.0058290353f * fTemp123) + ((0.00497451704f * fTemp342) + ((0.00405896176f * fTemp459) + ((0.00457777642f * fTemp18) + ((0.00494399853f * fTemp20) + ((0.0045167394f * fTemp185) + ((0.00534073915f * fTemp179) + ((0.00469985045f * fTemp151) + ((0.0028992584f * fTemp177) + ((0.00622577593f * fTemp351) + ((0.00119022187f * fTemp170) + ((0.000244148076f * fTemp438) + ((0.00109866634f * fTemp24) + (fTemp698 + ((0.00250251777f * fTemp155) + ((0.00210577715f * fTemp420) + ((0.00247199927f * fTemp410) + ((0.00363170262f * fTemp124) + ((0.00106814783f * fTemp337) + ((0.00552385021f * fTemp400) + ((0.00823999755f * fTemp498) + ((0.00985747855f * fTemp406) + ((0.00732444227f * fTemp448) + ((0.00708029419f * fTemp449) + ((0.00851466414f * fTemp395) + ((0.0201422162f * fTemp516) + ((0.0344859175f * fTemp216) + ((0.0241096225f * fTemp386) + ((0.00057985168f * fTemp423) + ((0.0151066622f * fTemp491) + ((0.0119632557f * fTemp526) + ((0.0114749596f * fTemp250) + ((0.00668355357f * fTemp256) + ((0.00637836847f * fTemp257) + ((0.0206610318f * fTemp259) + ((0.0341196954f * fTemp260) + ((0.0443739146f * fTemp261) + ((0.0395214707f * fTemp262) + ((0.0296639912f * fTemp263) + ((0.00357066561f * fTemp264) + ((0.037446212f * fTemp267) + ((0.0951567143f * fTemp268) + ((0.0948210061f * fTemp269) + ((0.05038606f * fTemp520) + ((0.00854518265f * fTemp31) + ((0.0230414756f * fTemp95) + ((0.0271004364f * fTemp503) + ((0.0552079827f * fTemp272) + ((0.0671102032f * fTemp273) + ((0.0658589453f * fTemp274) + ((0.0294503625f * fTemp169) + ((0.112125002f * fTemp488) + ((0.172734767f * fTemp471) + ((0.141422778f * fTemp279) + ((0.0137943663f * fTemp280) + ((0.0723899081f * fTemp283) + ((0.0985442698f * fTemp477) + ((0.0697042793f * fTemp511) + ((0.172917873f * fTemp291) + ((0.0430921353f * fTemp34) + ((0.741904974f * fTemp441) + (fTemp485 + ((0.689382613f * fTemp479) + ((0.251533568f * fTemp35) + (fTemp760 + (fTemp666 + ((0.00558488723f * fTemp38) + ((0.000396740623f * fTemp49) + ((0.00402844325f * ((fTemp424 + fTemp129) - fTemp334)) + ((0.00241096225f * ((fTemp417 + (fTemp364 + fTemp458)) - fTemp101)) + ((0.000183111057f * (((fTemp301 + fTemp58) - fTemp45) - fTemp345)) + ((0.00170903653f * (fTemp374 + fTemp427)) + ((0.00140385143f * (fTemp587 - fTemp112)) + ((6.10370189e-05f * ((((fTemp304 + (((fTemp313 + (fTemp59 + ((fTemp6 + (fTemp5 + (fTemp66 + (fTemp323 + (fTemp324 + ((fTemp75 + (fTemp76 + (fTemp77 + fTemp84))) - fTemp326)))))) - fTemp199))) - fTemp310) - fTemp55)) - fTemp297) - fTemp213) - fTemp372)) + ((0.000610370189f * (fTemp375 + (fTemp475 + ((fTemp496 - fTemp335) - fTemp456)))) + ((0.000671407208f * (fTemp394 + (fTemp405 + (fTemp408 + (fTemp200 + (fTemp47 + fTemp48)))))) + ((0.000213629566f * (fTemp125 - fTemp166)) + ((0.000366222113f * (fTemp46 - fTemp131)) + ((0.00134281442f * (fTemp134 + fTemp409)) + ((0.00378429517f * ((fTemp196 + fTemp502) - fTemp119)) + ((0.00112918485f * (fTemp338 + fTemp349)) + ((0.00238044374f * (fTemp355 + (fTemp382 + fTemp461))) + ((0.00283822138f * (fTemp384 - fTemp100)) + ((0.00222785119f * (fTemp145 + fTemp22)) + ((3.05185094e-05f * (((fTemp298 + (((fTemp303 + (fTemp305 + ((fTemp57 + ((fTemp222 + (((fTemp63 + (fTemp64 + (fTemp67 + ((fTemp318 + (fTemp319 + (fTemp220 + (fTemp320 + (fTemp322 + (fTemp69 + ((fTemp135 + (fTemp325 + (((fTemp402 + (((((fTemp85 + (fTemp0 + fTemp86)) - fTemp82) - fTemp79) - fTemp78) - fTemp507)) - fTemp74) - fTemp73))) - fTemp71))))))) - fTemp316)))) - fTemp314) - fTemp60)) - fTemp311)) - fTemp307))) - fTemp53) - fTemp52)) - fTemp397) - fTemp109)) + ((0.000885036774f * (fTemp500 - fTemp121)) + ((0.000122074038f * (fTemp140 + (fTemp434 + (fTemp176 + ((fTemp212 + fTemp7) - fTemp296))))) + ((0.00180059206f * (fTemp156 + (fTemp97 + (fTemp431 + fTemp105)))) + ((0.00274666585f * (fTemp426 + (fTemp428 + fTemp369))) + ((0.000518814661f * (fTemp89 - fTemp96)) + ((0.00375377666f * (fTemp443 + fTemp206)) + ((0.00518814661f * (fTemp146 + fTemp187)) + ((0.00631733146f * (fTemp446 - fTemp154)) + ((0.00527970213f * (fTemp172 + (fTemp359 + fTemp489))) + ((0.00366222113f * (fTemp451 + (fTemp191 + fTemp14))) + ((0.00207525864f * (fTemp167 + fTemp128)) + ((0.00372325815f * (fTemp122 + (fTemp230 + fTemp133))) + ((0.00476088747f * (fTemp164 + fTemp116)) + ((0.00442518387f * (fTemp182 + fTemp463)) + ((0.00408948027f * (fTemp149 - fTemp226)) + ((0.00546281319f * (fTemp350 + (fTemp367 + fTemp251))) + ((0.0057985168f * (fTemp90 + fTemp255)) + ((0.00460829493f * (fTemp189 + (fTemp482 + fTemp792))) + ((0.00411999878f * (fTemp17 + (fTemp16 + fTemp12))) + ((0.00436414685f * (fTemp469 + (fTemp15 + fTemp193))) + ((0.00347911008f * (fTemp432 + fTemp138)) + ((0.00305185094f * (fTemp229 + fTemp10)) + ((0.00488296151f * (fTemp472 + fTemp204)) + ((0.00390636921f * (fTemp478 + fTemp381)) + ((0.00619525742f * (fTemp407 + fTemp464)) + ((0.00698873866f * (fTemp153 + fTemp495)) + ((0.00769066438f * fTemp817) + ((0.00659199804f * (fTemp183 + fTemp363)) + ((0.00384533219f * (fTemp442 + fTemp178)) + ((0.0042115543f * fTemp818) + ((0.00686666463f * (fTemp343 + fTemp380)) + ((0.00988799706f * (fTemp217 + fTemp194)) + ((0.00149540696f * (fTemp466 + fTemp181)) + ((0.000915555283f * (fTemp379 + fTemp232)) + ((9.15555283e-05f * (fTemp50 + ((fTemp144 + (fTemp223 + ((((fTemp315 + (fTemp61 + (fTemp65 + fTemp327))) - fTemp221) - fTemp309) - fTemp308))) - fTemp54))) + (0.00607318338f * (fTemp447 + fTemp258))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00753807183f * fTemp415) + ((0.00817896053f * fTemp141) + ((0.00314340647f * fTemp392) + ((0.00125125889f * fTemp147) + ((0.00177007355f * fTemp490) + ((0.00198370311f * fTemp421) + ((0.00292977691f * fTemp435) + ((0.00100711081f * fTemp190) + ((0.000488296151f * fTemp162) + ((0.00329599902f * fTemp142) + ((0.00122074038f * fTemp130) + ((0.000854518265f * fTemp399) + ((0.000793481246f * fTemp354) + ((0.00268562883f * fTemp118) + ((0.00701925717f * fTemp113) + ((0.00927762687f * fTemp371) + ((0.00860621966f * fTemp366) + ((0.00625629444f * fTemp365) + ((0.00256355479f * fTemp352) + ((0.00152592547f * fTemp114) + ((0.00302133244f * fTemp231) + ((0.00555436872f * fTemp513) + ((0.0100711081f * fTemp203) + ((0.00967436749f * fTemp515) + (fTemp819 + ((0.00381481368f * fTemp422) + ((0.00875881221f * fTemp94) + ((0.0163884405f * fTemp92) + ((0.0246284381f * fTemp440) + ((0.0288399924f * fTemp499) + ((0.0234382153f * fTemp235) + ((0.0108035523f * fTemp236) + ((0.00204474013f * fTemp238) + ((0.0149845881f * fTemp504) + ((0.0202337727f * fTemp241) + ((0.0211798456f * fTemp242) + ((0.0209051799f * fTemp243) + ((0.0185552537f * fTemp412) + ((0.0174565874f * fTemp143) + ((0.0157170333f * fTemp416) + ((0.0126651814f * fTemp470) + ((0.0158085879f * fTemp244) + ((0.0166936256f * fTemp246) + ((0.0174260698f * fTemp247) + ((0.00689718314f * fTemp465) + ((0.0104678487f * fTemp174) + ((0.0397961363f * fTemp175) + ((0.0505081341f * fTemp445) + ((0.036774803f * fTemp248) + ((0.00598162785f * fTemp249) + ((0.0177312549f * fTemp252) + ((0.042542804f * fTemp401) + ((0.0507522821f * fTemp404) + ((0.0340586565f * fTemp253) + ((0.0122684408f * fTemp254) + ((0.0301217698f * fTemp265) + ((0.0535905026f * fTemp497) + ((0.0733054578f * fTemp429) + ((0.087588124f * fTemp180) + ((0.0848719776f * fTemp362) + ((0.0654927194f * fTemp266) + ((0.0240485854f * fTemp506) + ((0.0299386587f * fTemp28) + ((0.0962553769f * fTemp29) + ((0.129978329f * fTemp385) + ((0.114658043f * fTemp270) + ((0.100619525f * fTemp271) + ((0.0787377581f * fTemp370) + ((0.0505996905f * fTemp186) + ((0.0401318409f * fTemp188) + ((0.0143436994f * fTemp30) + ((0.053437911f * fTemp32) + ((0.0877712369f * fTemp33) + ((0.0698263496f * fTemp492) + ((0.0212408826f * fTemp275) + ((0.0194402914f * fTemp276) + ((0.0491653197f * fTemp277) + ((0.0732749403f * fTemp278) + ((0.0273445845f * fTemp501) + ((0.151738033f * fTemp281) + ((0.225775927f * fTemp215) + ((0.183172092f * fTemp468) + ((0.0544755384f * fTemp510) + ((0.0963164195f * fTemp284) + ((0.157902762f * fTemp285) + ((0.0680562779f * fTemp286) + ((0.040070802f * fTemp287) + ((0.0296945106f * fTemp288) + ((0.0463881344f * fTemp289) + ((0.0936307907f * fTemp290) + ((0.0105594043f * fTemp505) + ((0.344920188f * fTemp293) + ((0.717032373f * fTemp294) + ((0.61525315f * fTemp484) + ((0.0164799951f * fTemp39) + ((0.0307016205f * fTemp40) + ((0.0328684337f * fTemp41) + ((0.0249336231f * fTemp42) + ((0.0136417737f * fTemp214) + ((0.00430310983f * fTemp43) + ((((((((0.00146488845f * ((fTemp413 + fTemp165) - fTemp106)) + ((0.00396740623f * (fTemp360 - fTemp346)) + ((0.00155644398f * ((fTemp403 + fTemp120) - fTemp353)) + ((0.000732444227f * (fTemp383 - fTemp27)) + ((0.00201422162f * (fTemp361 - fTemp158)) + ((0.00216681417f * (fTemp389 + (fTemp393 + (fTemp108 - fTemp23)))) + ((0.00186162908f * (fTemp390 - fTemp26)) + ((0.000946073793f * (fTemp44 - fTemp529)) + ((0.000305185094f * (fTemp396 - fTemp474)) + ((0.00131229591f * (fTemp127 + (fTemp139 - fTemp132))) + ((0.000335703604f * (fTemp136 - fTemp152)) + ((0.00299081393f * (fTemp102 - fTemp104)) + ((0.00271614734f * ((fTemp344 + fTemp225) - fTemp376)) + ((0.000640888698f * ((fTemp425 + fTemp473) - fTemp163)) + ((0.00360118411f * (fTemp340 + (fTemp173 + fTemp234))) + ((0.00296029542f * ((fTemp419 + fTemp239) - fTemp228)) + ((0.00439466536f * (fTemp233 - fTemp454)) + ((0.00509659108f * (fTemp111 - fTemp205)) + ((0.00924710836f * (fTemp240 - fTemp171)) + ((0.000152592547f * ((fTemp378 + (fTemp292 + ((fTemp430 + (((fTemp509 - fTemp302) - fTemp300) - fTemp299)) - fTemp295))) - fTemp91)) + ((0.000274666585f * (fTemp444 + fTemp457)) + ((0.00231940672f * (fTemp487 - fTemp237)) + (0.00167851802f * (fTemp282 - fTemp357)))))))))))))))))))))))) + (0.00054933317f * ((fTemp99 + fTemp514) - fTemp341))) + (0.00103762932f * (fTemp336 + fTemp373))) + (0.00213629566f * (fTemp107 + fTemp150))) + (0.00244148076f * (fTemp98 - fTemp455))) + (0.00503555406f * (fTemp333 - fTemp19))) + (0.00543229468f * (fTemp88 - fTemp452))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow37 ? (iSlow41 ? (iSlow43 ? (((0.336313963f * fTemp223) + ((0.00378429517f * fTemp204) + ((0.000671407208f * fTemp8) + ((0.00238044374f * fTemp363) + (fTemp678 + ((0.00433362834f * fTemp201) + ((0.00650044251f * fTemp347) + ((0.00875881221f * fTemp411) + ((0.0107119968f * fTemp197) + ((0.0116885891f * fTemp407) + ((0.00985747855f * fTemp192) + ((0.0168462172f * fTemp433) + ((0.0136722922f * fTemp13) + ((0.009704886f * fTemp14) + ((0.00366222113f * fTemp228) + (fTemp777 + ((0.0028992584f * fTemp469) + ((0.0057985168f * fTemp90) + ((0.0178228095f * fTemp463) + ((0.0142216254f * fTemp459) + ((0.0103152562f * fTemp230) + ((0.00686666463f * fTemp149) + ((0.00723288674f * fTemp18) + ((0.00817896053f * fTemp187) + ((0.00662251655f * fTemp182) + ((0.00482192449f * fTemp359) + ((0.00503555406f * fTemp151) + ((0.00573747978f * fTemp122) + ((0.00701925717f * fTemp177) + ((0.00836207159f * fTemp458) + ((0.00979644153f * fTemp22) + ((0.0107425153f * fTemp23) + ((0.0113528855f * fTemp167) + ((0.011444441f * fTemp455) + ((0.0115054781f * fTemp451) + ((0.0101321451f * fTemp364) + ((0.00857570115f * fTemp170) + ((0.00759910885f * fTemp438) + ((0.00769066438f * fTemp166) + ((0.00915555283f * fTemp434) + ((0.015991699f * fTemp431) + ((0.0152287362f * fTemp425) + ((0.0154423658f * fTemp97) + ((0.0169377737f * fTemp428) + ((0.0183416251f * fTemp156) + ((0.0160222184f * fTemp161) + ((0.0150761437f * fTemp140) + ((0.0148930326f * fTemp115) + ((0.0153508103f * fTemp427) + ((0.0159306619f * fTemp382) + ((0.016296884f * fTemp420) + ((0.0155339213f * fTemp132) + ((0.0138554033f * fTemp121) + ((0.014557329f * fTemp150) + ((0.0184636991f * fTemp120) + ((0.0163579211f * fTemp109) + ((0.0122989593f * fTemp148) + ((0.00228888821f * fTemp376) + ((0.00555436872f * fTemp355) + ((0.0077517014f * fTemp338) + ((0.013061922f * fTemp108) + ((0.0149540696f * fTemp119) + (fTemp813 + ((0.0104068117f * fTemp393) + ((0.00848414563f * fTemp139) + ((0.006469924f * fTemp136) + ((0.0035401471f * fTemp409) + ((0.0102237007f * fTemp127) + ((0.0116275521f * fTemp399) + ((0.0119632557f * fTemp396) + ((0.0115970336f * fTemp125) + ((0.0108951079f * fTemp394) + ((0.00991851557f * fTemp529) + ((0.00869777519f * fTemp375) + ((0.00738547929f * fTemp372) + ((0.00601214636f * fTemp361) + ((0.00619525742f * fTemp383) + ((0.00585955381f * fTemp353) + ((0.00494399853f * fTemp124) + ((0.00231940672f * fTemp113) + ((0.00201422162f * fTemp371) + ((0.000946073793f * fTemp365) + ((0.00112918485f * fTemp352) + ((0.0045167394f * fTemp341) + ((0.00134281442f * fTemp494) + ((0.00784325693f * fTemp240) + ((0.0090334788f * fTemp504) + ((0.00756859034f * fTemp241) + ((0.00405896176f * fTemp242) + ((0.00213629566f * fTemp520) + ((0.00921658985f * fTemp28) + ((0.0197149571f * fTemp29) + ((0.0269478448f * fTemp385) + ((0.0237128828f * fTemp270) + ((0.00540177617f * fTemp271) + ((0.0217902157f * fTemp488) + ((0.0340586565f * fTemp471) + ((0.0338755473f * fTemp279) + ((0.0203863643f * fTemp280) + ((0.028931547f * fTemp286) + ((0.0525223538f * fTemp287) + ((0.0365916938f * fTemp288) + ((0.0209967345f * fTemp441) + ((0.0499893203f * fTemp485) + ((0.0660420582f * fTemp479) + ((0.0707113892f * fTemp35) + ((0.0762657523f * fTemp36) + ((0.0838038251f * fTemp37) + ((0.0712912381f * fTemp38) + ((0.0573747978f * fTemp46) + ((0.108584858f * fTemp47) + ((0.0939054564f * fTemp48) + ((0.0237739198f * fTemp49) + ((0.0866420493f * fTemp50) + ((0.125614181f * fTemp51) + ((0.0900601223f * fTemp52) + ((0.225135043f * fTemp55) + ((0.769951463f * fTemp56) + (fTemp57 + ((0.763542593f * fTemp144) + ((0.0764793828f * fTemp508) + ((0.00976592302f * fTemp308) + ((0.00057985168f * fTemp328) + ((0.000518814661f * fTemp329) + ((0.000335703604f * ((fTemp220 + fTemp323) - fTemp88)) + ((0.00054933317f * (((fTemp60 + fTemp199) - fTemp439) - fTemp513)) + ((0.000640888698f * ((fTemp339 + (fTemp406 - fTemp176)) - fTemp333)) + ((0.000457777642f * ((fTemp12 + fTemp79) - fTemp334)) + ((0.00198370311f * (fTemp101 + (fTemp410 - fTemp103))) + ((0.00390636921f * (fTemp336 + (fTemp346 - fTemp460))) + ((0.00457777642f * (fTemp106 + (fTemp131 + (fTemp408 + (fTemp15 + fTemp493))))) + ((0.00396740623f * (fTemp337 + fTemp239)) + ((0.00189214759f * (fTemp114 + (fTemp357 - fTemp489))) + ((0.00149540696f * (fTemp366 - fTemp195)) + ((0.00256355479f * (fTemp118 + fTemp93)) + ((0.0054933317f * (fTemp390 + fTemp164)) + ((0.00637836847f * (fTemp354 - fTemp335)) + ((0.00607318338f * (fTemp130 - fTemp209)) + ((0.00329599902f * (fTemp134 + fTemp11)) + ((0.0139164403f * (fTemp340 + fTemp26)) + ((0.00372325815f * (fTemp384 + fTemp417)) + ((0.00753807183f * (fTemp145 + fTemp304)) + ((0.0182195511f * (fTemp344 + fTemp426)) + ((0.0164189581f * (fTemp100 + fTemp373)) + ((0.0173345134f * (fTemp162 + (fTemp350 + fTemp472))) + ((0.0114139225f * (fTemp24 + fTemp443)) + ((0.0120548112f * (fTemp146 + fTemp351)) + ((0.0115359966f * (fTemp172 - fTemp377)) + ((0.00750755332f * (fTemp185 + fTemp191)) + ((0.00796533097f * (fTemp19 - fTemp435)) + ((0.0124515519f * (fTemp123 - fTemp466)) + ((0.000427259132f * ((fTemp221 + fTemp319) - fTemp16)) + ((0.00610370189f * (fTemp414 + fTemp168)) + ((0.0140079958f * (fTemp454 - fTemp473)) + ((0.00689718314f * (fTemp133 + fTemp501)) + ((0.000152592547f * (fTemp398 + ((fTemp322 + fTemp580) - fTemp67))) + ((0.00299081393f * (fTemp348 + fTemp194)) + ((0.00274666585f * (fTemp418 + fTemp10)) + ((0.000396740623f * ((fTemp198 + (fTemp78 + (fTemp80 + fTemp331))) - fTemp483)) + ((0.000244148076f * (fTemp448 + (fTemp61 + (fTemp135 + (fTemp324 + fTemp86))))) + ((0.021210365f * (fTemp39 - fTemp258)) + ((0.000366222113f * (fTemp59 + (fTemp314 + fTemp814))) + ((9.15555283e-05f * (fTemp64 + ((fTemp85 - fTemp327) - fTemp71))) + ((0.000183111057f * ((fTemp320 + (fTemp321 + (fTemp72 + (fTemp332 - fTemp2)))) - fTemp65)) + ((0.000488296151f * (fTemp318 + fTemp1)) + (0.0104678487f * fTemp741)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0155034028f * fTemp222) + ((0.00680562761f * fTemp368) + ((0.00814844202f * fTemp387) + ((0.00787377544f * fTemp173) + ((0.00640888698f * fTemp415) + (fTemp763 + ((0.00506607257f * fTemp392) + (fTemp572 + ((0.00320444349f * fTemp200) + ((0.00146488845f * fTemp514) + ((0.00708029419f * fTemp490) + ((0.0087282937f * fTemp421) + ((0.00918607134f * fTemp413) + ((0.00845362712f * fTemp96) + (fTemp798 + ((0.00714133121f * fTemp226) + ((0.00863673817f * fTemp190) + ((0.00939970091f * fTemp349) + ((0.0119022187f * fTemp379) + ((0.0132450331f * fTemp444) + ((0.0140385143f * fTemp378) + ((0.0135196997f * fTemp91) + ((0.0121158483f * fTemp138) + ((0.0119937742f * fTemp160) + ((0.0121463668f * fTemp128) + ((0.0127872555f * fTemp158) + ((0.0129093295f * fTemp104) + ((0.0120242927f * fTemp381) + ((0.0093691824f * fTemp450) + ((0.00344859157f * fTemp193) + ((0.00222785119f * fTemp184) + ((0.00170903653f * fTemp208) + ((0.00115970336f * fTemp467) + ((0.000610370189f * fTemp110) + ((0.00265511032f * fTemp343) + ((0.000854518265f * fTemp388) + (fTemp659 + ((0.00109866634f * fTemp462) + ((0.00216681417f * fTemp137) + ((0.00338755455f * fTemp207) + ((0.00357066561f * fTemp205) + ((0.00314340647f * fTemp126) + ((0.000701925717f * fTemp464) + ((0.00906399731f * fTemp196) + ((0.00772118289f * fTemp476) + ((0.00326548051f * fTemp189) + ((0.00454725791f * fTemp232) + ((0.00531022064f * fTemp496) + ((0.0019226661f * fTemp449) + ((0.00512710959f * fTemp495) + ((0.00537125766f * fTemp369) + ((0.00543229468f * fTemp111) + ((0.00592059083f * fTemp515) + ((0.00497451704f * fTemp436) + ((0.00335703604f * fTemp233) + ((0.0019531846f * fTemp92) + ((0.00234992523f * fTemp440) + ((0.00341807306f * fTemp235) + ((0.00698873866f * fTemp500) + ((0.00744651631f * fTemp502) + ((0.0058290353f * fTemp412) + ((0.0106509598f * fTemp143) + ((0.0159611814f * fTemp470) + (fTemp815 + ((0.0158085879f * fTemp246) + ((0.0161442924f * fTemp247) + ((0.0158391073f * fTemp487) + ((0.0110782189f * fTemp216) + ((0.00802636798f * fTemp386) + ((0.0117191076f * fTemp465) + ((0.0194402914f * fTemp491) + ((0.0203253273f * fTemp526) + ((0.021149328f * fTemp174) + ((0.0245979186f * fTemp175) + ((0.0273140669f * fTemp445) + ((0.0276497696f * fTemp248) + ((0.0251777712f * fTemp249) + ((0.0216986611f * fTemp253) + ((0.0228583645f * fTemp254) + ((0.0229499191f * fTemp255) + ((0.0234076977f * fTemp256) + ((0.0230719931f * fTemp257) + ((0.0166631062f * fTemp259) + ((0.0123294778f * fTemp261) + ((0.0209051799f * fTemp263) + ((0.0269783624f * fTemp264) + ((0.0286568813f * fTemp265) + ((0.0261848811f * fTemp497) + ((0.0238959938f * fTemp429) + ((0.0260628071f * fTemp180) + ((0.0346385092f * fTemp362) + ((0.0431226529f * fTemp266) + ((0.0422376171f * fTemp506) + ((0.0300607327f * fTemp267) + ((0.0147404401f * fTemp268) + ((0.00463881344f * fTemp269) + ((0.0200811792f * fTemp370) + ((0.0415356904f * fTemp186) + ((0.0542008728f * fTemp188) + ((0.0571916886f * fTemp30) + ((0.0463881344f * fTemp31) + ((0.0262764376f * fTemp95) + ((0.00842310861f * fTemp503) + ((0.00424207281f * fTemp272) + ((0.0127262184f * fTemp273) + ((0.0248420667f * fTemp274) + ((0.0329599902f * fTemp169) + ((0.0381786563f * fTemp32) + ((0.039124731f * fTemp33) + ((0.0348216183f * fTemp492) + ((0.0274971779f * fTemp275) + ((0.0196234025f * fTemp276) + ((0.00604266487f * fTemp281) + ((0.0375988036f * fTemp215) + ((0.0657063499f * fTemp468) + ((0.0805993825f * fTemp282) + ((0.0891750827f * fTemp283) + ((0.0930204168f * fTemp477) + ((0.08484146f * fTemp510) + ((0.0580156855f * fTemp284) + ((0.0160832554f * fTemp285) + ((0.0134586627f * fTemp289) + ((0.0672627985f * fTemp290) + ((0.101016268f * fTemp505) + ((0.109866634f * fTemp511) + ((0.105197303f * fTemp291) + ((0.0968047157f * fTemp292) + ((0.094180122f * fTemp293) + ((0.082308419f * fTemp294) + ((0.0557268001f * fTemp484) + ((0.0150456252f * fTemp34) + ((0.0313425101f * fTemp40) + ((0.0621967241f * fTemp41) + ((0.0722373128f * fTemp42) + ((0.0610065013f * fTemp214) + ((0.0570390932f * fTemp43) + ((0.0511185043f * fTemp44) + ((0.0205084383f * fTemp45) + ((0.0813318267f * fTemp295) + ((0.155949578f * fTemp213) + ((0.147495955f * fTemp296) + ((0.0685750917f * fTemp430) + ((0.0925321206f * fTemp299) + ((0.169652387f * fTemp300) + ((0.14743492f * fTemp301) + ((0.0445265062f * fTemp302) + ((0.0219122898f * fTemp53) + ((0.0780053139f * fTemp159) + ((0.0453199856f * fTemp303) + ((0.0610980578f * fTemp305) + ((0.245887637f * fTemp306) + ((0.370159f * fTemp307) + ((0.250160217f * fTemp54) + ((0.0242622159f * fTemp509) + ((0.0353709534f * fTemp310) + ((0.0357676931f * fTemp311) + ((0.0271919928f * fTemp312) + ((0.00570696127f * fTemp313) + (((0.000976592302f * ((fTemp419 - fTemp116) - fTemp98)) + ((0.00302133244f * (((fTemp17 - fTemp432) - fTemp374) - fTemp107)) + ((0.00292977691f * (fTemp397 - fTemp345)) + ((0.000793481246f * (fTemp581 - fTemp360)) + ((0.00564592425f * (fTemp237 - fTemp389)) + ((0.00576799829f * (fTemp203 - fTemp112)) + ((0.00811792351f * ((fTemp423 - fTemp20) - fTemp403)) + ((0.00369273964f * (fTemp400 - fTemp405)) + ((0.0147709586f * (fTemp298 - fTemp142)) + ((0.0144047365f * ((fTemp416 + fTemp516) - fTemp152)) + ((0.0163884405f * (fTemp457 - fTemp155)) + ((0.0174565874f * (fTemp251 - fTemp163)) + ((0.0147099216f * (fTemp262 - fTemp89)) + ((0.0172429588f * (fTemp252 - fTemp27)) + ((0.0118411817f * ((fTemp129 + fTemp380) - fTemp446)) + ((0.00460829493f * ((fTemp165 + fTemp278) - fTemp179)) + ((0.0191351064f * (fTemp401 - fTemp342)) + ((3.05185094e-05f * (fTemp521 + ((fTemp5 + fTemp68) - fTemp157))) + ((0.00262459181f * (fTemp499 - fTemp229)) + ((0.00546281319f * (fTemp478 + (fTemp391 + fTemp309))) + ((0.0117496261f * ((fTemp171 + (fTemp358 + fTemp277)) - fTemp153)) + ((0.00125125889f * ((fTemp486 + fTemp94) - fTemp202)) + ((0.000823999755f * (fTemp183 + fTemp422)) + ((0.00143436994f * (fTemp437 + (fTemp453 + (fTemp217 + fTemp498)))) + ((0.0012817774f * (fTemp482 + (fTemp238 - fTemp452))) + ((0.00183111057f * (fTemp234 - fTemp442)) + ((0.00103762932f * (fTemp227 + fTemp367)) + ((0.00244148076f * (fTemp356 + fTemp211)) + ((0.0129703665f * (fTemp475 + fTemp260)) + ((0.00643940549f * (fTemp225 + fTemp456)) + ((0.00119022187f * (fTemp147 + fTemp212)) + ((0.00473036896f * fTemp816) + ((0.000213629566f * (fTemp224 + ((((fTemp3 + ((((fTemp83 + fTemp84) - fTemp81) - fTemp507) - fTemp218)) - fTemp63) - fTemp62) - fTemp6))) + ((0.00509659108f * (fTemp461 + fTemp236)) + ((0.00393688772f * (fTemp395 + fTemp297)) + ((0.0207220688f * (fTemp250 + fTemp404)) + ((0.000274666585f * (fTemp58 + fTemp66)) + ((0.000305185094f * (fTemp70 - fTemp315)) + (6.10370189e-05f * ((fTemp75 - fTemp73) - fTemp7)))))))))))))))))))))))))))))))))))))))) + (0.000122074038f * (((fTemp69 + fTemp545) - fTemp4) - fTemp231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.033722952f * fTemp222) + ((0.0102237007f * fTemp447) + ((0.00997955259f * fTemp493) + ((0.00900296029f * fTemp224) + ((0.00885036774f * fTemp460) + (fTemp762 + ((0.0107425153f * fTemp392) + ((0.0120242927f * fTemp335) + ((0.0100405896f * fTemp211) + ((0.011444441f * fTemp165) + ((0.0125431074f * fTemp490) + ((0.0126651814f * fTemp413) + ((0.0121158483f * fTemp96) + ((0.0111087374f * fTemp456) + ((0.0112918485f * fTemp190) + ((0.00979644153f * fTemp349) + ((0.0083925901f * fTemp105) + ((0.00802636798f * fTemp444) + ((0.0117801446f * fTemp378) + ((0.0137333293f * fTemp91) + ((0.0147099216f * fTemp475) + ((0.0141911069f * fTemp466) + ((0.0122074038f * fTemp138) + ((0.00750755332f * fTemp377) + ((0.00585955381f * fTemp380) + ((0.00692770164f * fTemp128) + ((0.00701925717f * fTemp158) + ((0.00570696127f * fTemp193) + ((0.0057985168f * fTemp208) + ((0.00503555406f * fTemp467) + ((0.00683614612f * fTemp8) + ((0.00561540574f * fTemp10) + ((0.004852443f * fTemp11) + ((0.00366222113f * fTemp339) + ((0.00466933195f * fTemp462) + ((0.00564592425f * fTemp116) + ((0.00680562761f * fTemp210) + ((0.00665303506f * fTemp207) + ((0.0051576281f * fTemp126) + (fTemp809 + ((0.0093691824f * fTemp437) + ((0.00924710836f * fTemp183) + ((0.00863673817f * fTemp398) + ((0.0045167394f * fTemp201) + ((0.0101626636f * fTemp478) + ((0.016296884f * fTemp196) + ((0.0199285876f * fTemp476) + ((0.0182500686f * fTemp195) + ((0.0114749596f * fTemp133) + ((0.000640888698f * fTemp414) + ((0.00650044251f * fTemp229) + (fTemp730 + ((0.00759910885f * fTemp424) + ((0.00854518265f * fTemp469) + ((0.0119937742f * fTemp17) + ((0.0132145146f * fTemp189) + ((0.0108951079f * fTemp90) + ((0.00610370189f * fTemp123) + ((0.00152592547f * fTemp20) + ((0.00534073915f * fTemp417) + ((0.00231940672f * fTemp384) + ((0.000885036774f * fTemp408) + ((0.0110171819f * fTemp357) + ((0.00833155308f * fTemp232) + ((0.00604266487f * fTemp496) + ((0.00408948027f * fTemp461) + ((0.003234962f * fTemp400) + ((0.00891140476f * fTemp406) + ((0.0121768853f * fTemp494) + ((0.0138859218f * fTemp448) + ((0.0136722922f * fTemp449) + ((0.012817774f * fTemp395) + ((0.0127567369f * fTemp495) + (fTemp660 + ((0.0129093295f * fTemp111) + ((0.00933866389f * fTemp515) + ((0.0103152562f * fTemp234) + ((0.00967436749f * fTemp419) + ((0.00949125644f * fTemp422) + ((0.0108645894f * fTemp94) + ((0.0157170333f * fTemp440) + ((0.0167851802f * fTemp499) + ((0.0142521439f * fTemp236) + ((0.0134586627f * fTemp500) + ((0.0140079958f * fTemp502) + ((0.0184026621f * fTemp238) + ((0.0198980682f * fTemp239) + ((0.0198370311f * fTemp240) + ((0.0187688842f * fTemp504) + ((0.0156254768f * fTemp242) + ((0.0139774773f * fTemp243) + (fTemp801 + ((0.0115970336f * fTemp487) + ((0.0163884405f * fTemp516) + ((0.0171514023f * fTemp216) + ((0.0154118473f * fTemp386) + ((0.0120853297f * fTemp423) + ((0.000946073793f * fTemp526) + ((0.0151676992f * fTemp250) + ((0.0208746605f * fTemp251) + ((0.0241706595f * fTemp401) + ((0.0242011789f * fTemp404) + ((0.0235602893f * fTemp253) + ((0.0229804385f * fTemp254) + ((0.0192571804f * fTemp255) + ((0.0133365886f * fTemp256) + ((0.0104373302f * fTemp257) + ((0.0165715516f * fTemp258) + ((0.024445327f * fTemp259) + ((0.0343028046f * fTemp260) + ((0.0397656187f * fTemp261) + ((0.0369273983f * fTemp262) + ((0.0295724366f * fTemp263) + ((0.0110782189f * fTemp265) + ((0.011383404f * fTemp497) + ((0.0172124393f * fTemp180) + ((0.0146488845f * fTemp362) + ((0.0139164403f * fTemp506) + ((0.0128482925f * fTemp267) + ((0.0151066622f * fTemp268) + ((0.0179448836f * fTemp269) + ((0.0162053294f * fTemp520) + ((0.0141605884f * fTemp28) + ((0.0277108066f * fTemp270) + ((0.0182195511f * fTemp271) + ((0.0339976214f * fTemp95) + ((0.0661336109f * fTemp503) + ((0.0839564204f * fTemp272) + ((0.08273568f * fTemp273) + ((0.0567949452f * fTemp274) + ((0.0226142164f * fTemp169) + ((0.0022583697f * fTemp33) + ((0.0158391073f * fTemp492) + ((0.0262154005f * fTemp275) + ((0.0186162908f * fTemp276) + ((0.00723288674f * fTemp277) + ((0.0484023578f * fTemp284) + ((0.0907010138f * fTemp285) + ((0.121707819f * fTemp286) + ((0.129825741f * fTemp287) + ((0.100863673f * fTemp288) + ((0.0372020639f * fTemp289) + ((0.0326853245f * fTemp292) + ((0.069551684f * fTemp293) + ((0.0769981965f * fTemp294) + ((0.0765099004f * fTemp484) + ((0.0795922726f * fTemp34) + ((0.0751060545f * fTemp441) + ((0.0555131696f * fTemp485) + ((0.0288399924f * fTemp479) + ((0.00363170262f * fTemp43) + ((0.0560930222f * fTemp44) + ((0.0752586424f * fTemp45) + ((0.0920133069f * fTemp46) + ((0.068697162f * fTemp47) + ((0.0600909442f * fTemp430) + ((0.113711968f * fTemp297) + ((0.0878627896f * fTemp298) + ((0.0462965779f * fTemp299) + ((0.00347911008f * fTemp300) + (fTemp671 + ((0.0795007199f * fTemp302) + ((0.0921659023f * fTemp50) + ((0.0947599709f * fTemp51) + ((0.0523392446f * fTemp52) + ((0.0369884335f * fTemp53) + ((0.0221259203f * fTemp307) + ((0.323129982f * fTemp54) + ((0.48905912f * fTemp55) + ((0.40397352f * fTemp56) + ((0.0155644398f * fTemp311) + ((0.0299691763f * fTemp312) + ((0.0283822138f * fTemp313) + ((0.00732444227f * fTemp58) + ((0.000366222113f * fTemp59) + ((0.00277718436f * fTemp66) + ((0.000671407208f * fTemp69) + ((0.000122074038f * fTemp82) + ((0.00238044374f * ((fTemp75 - fTemp146) - fTemp231)) + ((0.00131229591f * (((fTemp4 + (fTemp74 + fTemp84)) - fTemp336) - fTemp101)) + ((0.00106814783f * ((((fTemp296 + fTemp2) - fTemp113) - fTemp365) - fTemp107)) + ((0.00170903653f * ((fTemp166 + fTemp364) - fTemp360)) + ((0.00146488845f * (fTemp83 - fTemp374)) + ((0.00720236823f * ((fTemp457 - fTemp127) - fTemp394)) + ((0.00531022064f * ((fTemp173 + fTemp498) - fTemp130)) + ((3.05185094e-05f * (fTemp409 + fTemp350)) + ((0.000457777642f * (fTemp136 + fTemp3)) + ((0.00457777642f * ((fTemp376 - fTemp26) - fTemp102)) + ((0.00573747978f * (fTemp410 + fTemp217)) + ((0.00283822138f * (fTemp145 - fTemp132)) + ((0.00784325693f * ((fTemp453 + fTemp514) - fTemp120)) + ((0.00378429517f * ((fTemp458 + fTemp388) - fTemp382)) + ((0.00399792474f * ((fTemp177 + fTemp227) - fTemp427)) + ((0.00445570238f * ((fTemp12 + fTemp491) - fTemp163)) + ((6.10370189e-05f * (fTemp60 - fTemp434)) + ((0.0028992584f * (fTemp438 - fTemp220)) + ((0.00286873989f * (fTemp170 + fTemp367)) + ((0.00143436994f * (fTemp23 + fTemp185)) + ((0.00427259132f * (fTemp151 + fTemp363)) + ((0.00418103579f * (fTemp179 + fTemp480)) + ((0.00350962859f * (fTemp359 - fTemp14)) + ((0.0132755516f * (fTemp521 + fTemp266)) + ((0.00671407208f * ((fTemp137 + fTemp171) - fTemp13)) + ((0.00317392498f * (fTemp454 - fTemp153)) + ((0.000427259132f * (fTemp168 + fTemp314)) + ((0.00625629444f * (fTemp93 + (fTemp418 + fTemp249))) + ((0.00918607134f * (fTemp482 + fTemp465)) + ((0.00848414563f * (fTemp157 + fTemp200)) + ((0.00766014587f * (fTemp442 + fTemp387)) + ((0.0067751091f * (fTemp348 + fTemp143)) + ((0.00521866512f * (fTemp486 + fTemp381)) + ((0.00622577593f * (fTemp205 + (fTemp129 + fTemp160))) + ((0.00488296151f * (fTemp178 + fTemp141)) + ((0.00463881344f * (fTemp206 + (fTemp489 + fTemp450))) + ((0.00473036896f * fTemp810) + ((0.00952177495f * (fTemp358 + (fTemp194 + fTemp397))) + ((0.00955229346f * (fTemp473 + fTemp436)) + ((0.00753807183f * (fTemp379 + fTemp154)) + ((0.0116275521f * (fTemp435 + fTemp181)) + ((0.0109866634f * (fTemp225 + fTemp203)) + ((0.0116580706f * (fTemp474 + (fTemp412 + fTemp510))) + ((0.013000885f * (fTemp421 + fTemp92)) + ((0.0162663665f * (fTemp235 + fTemp237)) + ((0.0170598477f * (fTemp241 + (fTemp429 + fTemp29))) + ((0.0237739198f * (fTemp252 + fTemp385)) + ((0.0177922919f * (fTemp264 + fTemp212)) + ((0.000335703604f * (fTemp221 + (fTemp72 + (fTemp85 - fTemp1)))) + ((0.00183111057f * (fTemp65 + fTemp77)) + ((0.000823999755f * (fTemp68 + fTemp327)) + ((0.0025940733f * (fTemp67 + fTemp76)) + ((0.000518814661f * (fTemp70 + fTemp71)) + ((0.0106204413f * fTemp693) + (0.00991851557f * fTemp680))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00134281442f * fTemp0) + ((1.00003052f * fTemp223) + ((0.00704977568f * fTemp463) + ((0.00735496078f * fTemp459) + ((0.00619525742f * fTemp230) + ((0.00216681417f * fTemp149) + ((0.000610370189f * fTemp18) + ((0.00054933317f * fTemp167) + ((0.00448622089f * fTemp446) + ((0.00384533219f * fTemp351) + ((0.00222785119f * fTemp24) + ((0.00668355357f * fTemp431) + ((0.00823999755f * fTemp162) + ((0.00674459059f * fTemp425) + ((0.00546281319f * fTemp97) + ((0.00527970213f * fTemp428) + ((0.00506607257f * fTemp426) + ((0.0042115543f * fTemp161) + ((0.00402844325f * fTemp115) + ((0.00344859157f * fTemp155) + ((0.00296029542f * fTemp420) + ((0.00500503555f * fTemp109) + ((0.000396740623f * fTemp355) + ((0.00360118411f * fTemp338) + ((0.00772118289f * fTemp108) + ((0.00793481246f * fTemp142) + ((0.00714133121f * fTemp119) + ((0.00109866634f * fTemp139) + ((0.00158696249f * fTemp134) + ((0.00314340647f * fTemp405) + ((0.00436414685f * fTemp131) + ((0.00637836847f * fTemp403) + (fTemp771 + ((0.00540177617f * fTemp372) + ((0.00326548051f * fTemp353) + ((0.0019531846f * fTemp346) + ((0.00250251777f * fTemp352) + ((0.00335703604f * fTemp345) + ((0.00320444349f * fTemp337) + ((0.00189214759f * fTemp341) + (fTemp811 + ((0.00567644276f * fTemp246) + ((0.00173955504f * fTemp174) + ((0.0102542192f * fTemp370) + ((0.0442823581f * fTemp186) + ((0.0589617603f * fTemp188) + ((0.041993469f * fTemp30) + ((0.00311288796f * fTemp501) + ((0.00897244178f * fTemp279) + ((0.0110477004f * fTemp281) + ((0.0116885891f * fTemp468) + ((0.0171819218f * fTemp282) + ((0.0154423658f * fTemp283) + ((0.0310678426f * fTemp290) + ((0.0669881254f * fTemp505) + ((0.0583819076f * fTemp511) + ((0.0191045869f * fTemp291) + ((0.00799584948f * fTemp35) + ((0.0468459129f * fTemp36) + ((0.0678121299f * fTemp37) + ((0.0633564293f * fTemp38) + ((0.0698263496f * fTemp39) + ((0.0809656084f * fTemp40) + ((0.0729087219f * fTemp41) + ((0.0747703463f * fTemp42) + ((0.0485549495f * fTemp214) + ((0.0959807113f * fTemp49) + ((0.097994931f * fTemp295) + ((0.0662556812f * fTemp213) + ((0.0230719931f * fTemp159) + ((0.0195013285f * fTemp303) + ((0.124576554f * fTemp304) + ((0.21222572f * fTemp305) + ((0.203802601f * fTemp306) + ((0.048463393f * fTemp57) + ((0.641834795f * fTemp144) + ((0.827936649f * fTemp508) + ((0.379528195f * fTemp308) + ((0.0950346366f * fTemp309) + ((0.0216986611f * fTemp509) + ((0.00552385021f * fTemp310) + ((0.000213629566f * fTemp315) + ((0.00149540696f * fTemp61) + ((0.00338755455f * fTemp62) + ((0.00305185094f * fTemp63) + ((0.000488296151f * fTemp316) + ((0.00213629566f * fTemp318) + ((0.00204474013f * fTemp320) + ((0.000274666585f * fTemp73) + ((0.00137333293f * fTemp507) + ((0.00122074038f * fTemp81) + ((((((0.00265511032f * (fTemp106 + (fTemp124 + (fTemp78 - fTemp247)))) + ((0.00308236945f * (fTemp114 - fTemp22)) + ((0.000854518265f * (fTemp366 + fTemp321)) + ((0.000976592302f * (fTemp371 + fTemp148)) + ((0.00115970336f * (fTemp118 + (fTemp329 - fTemp187))) + ((0.00375377666f * (fTemp383 - fTemp103)) + ((0.00405896176f * (fTemp361 - fTemp122)) + ((0.00415051728f * (fTemp389 + fTemp471)) + ((0.00433362834f * (fTemp390 - fTemp228)) + ((0.00454725791f * (fTemp112 + fTemp172)) + ((0.00494399853f * (fTemp354 - fTemp209)) + ((0.00762962736f * (fTemp125 - fTemp202)) + ((0.0077517014f * (fTemp396 + (fTemp100 + (fTemp477 - fTemp15)))) + ((0.00769066438f * (fTemp399 + fTemp373)) + ((0.00299081393f * (fTemp393 + ((fTemp319 + fTemp79) - fTemp464))) + ((0.00598162785f * fTemp812) + ((0.00628681295f * (fTemp99 - fTemp198)) + ((0.00869777519f * (fTemp344 - fTemp147)) + ((0.00607318338f * (fTemp150 - fTemp184)) + ((0.00442518387f * (fTemp121 + fTemp191)) + ((0.00332651753f * (fTemp152 + fTemp407)) + ((0.00411999878f * (fTemp140 + fTemp488)) + ((0.00476088747f * (fTemp156 + fTemp342)) + ((0.00796533097f * (fTemp27 - fTemp343)) + ((0.000305185094f * (fTemp443 + (fTemp175 - fTemp402))) + ((0.00390636921f * (fTemp451 - fTemp415)) + ((0.00247199927f * (fTemp455 + (((fTemp325 + fTemp80) - fTemp347) - fTemp164))) + ((0.000701925717f * (fTemp328 - fTemp19)) + ((0.00689718314f * (fTemp433 - fTemp356)) + ((0.00369273964f * (fTemp472 + fTemp31)) + ((0.00180059206f * (fTemp197 + ((fTemp64 + fTemp324) - fTemp7))) + ((0.000152592547f * (((fTemp87 - fTemp322) - fTemp445) - fTemp411)) + ((0.00616473891f * (fTemp470 - fTemp104)) + ((0.0114139225f * (fTemp280 - fTemp226)) + ((0.0103457747f * (fTemp48 - fTemp233)) + ((0.00894192327f * (fTemp244 + fTemp215)) + ((0.000915555283f * (fTemp323 - fTemp248)) + ((9.15555283e-05f * (fTemp32 + ((fTemp135 - fTemp5) - fTemp199))) + ((0.000732444227f * (fTemp278 - fTemp219)) + ((0.001617481f * (fTemp326 + fTemp331)) + (0.00592059083f * fTemp673))))))))))))))))))))))))))))))))))))))))) + (0.00177007355f * (fTemp98 + (fTemp332 - fTemp182)))) + (0.00274666585f * (fTemp333 + fTemp6))) + (0.00244148076f * (fTemp513 + fTemp218))) + (0.00219733268f * (fTemp88 + fTemp192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow42 ? (((0.531022072f * fTemp223) + (fTemp803 + ((0.00393688772f * fTemp141) + ((0.0025940733f * fTemp154) + ((0.00112918485f * fTemp392) + ((0.00650044251f * fTemp474) + ((0.00265511032f * fTemp225) + ((0.00436414685f * fTemp444) + ((0.000915555283f * fTemp91) + ((0.00491348002f * fTemp158) + ((0.00479140598f * fTemp381) + ((0.000183111057f * fTemp208) + ((0.00759910885f * fTemp439) + ((0.00869777519f * fTemp217) + ((0.00152592547f * fTemp11) + ((0.00109866634f * fTemp210) + ((0.00448622089f * fTemp483) + ((0.000396740623f * fTemp183) + ((0.000610370189f * fTemp398) + ((0.003234962f * fTemp168) + ((0.0109561449f * fTemp476) + ((0.00961333048f * fTemp195) + ((0.0090334788f * fTemp229) + ((0.0147099216f * fTemp432) + ((0.0162053294f * fTemp15) + ((0.0127567369f * fTemp469) + ((0.0067751091f * fTemp191) + ((0.0151066622f * fTemp149) + ((0.0215460677f * fTemp18) + ((0.0248725861f * fTemp19) + ((0.0248420667f * fTemp187) + ((0.0219428092f * fTemp20) + ((0.0115970336f * fTemp182) + ((0.00625629444f * fTemp164) + ((0.00396740623f * fTemp172) + ((0.0058290353f * fTemp446) + ((0.00820947904f * fTemp146) + ((0.008087405f * fTemp443) + ((0.0077517014f * fTemp89) + ((0.0101931822f * fTemp97) + ((0.0114749596f * fTemp428) + ((0.01126133f * fTemp426) + ((0.00994903408f * fTemp156) + ((0.00830103457f * fTemp163) + ((0.006469924f * fTemp100) + ((0.009704886f * fTemp344) + ((0.0114139225f * fTemp120) + ((0.00656147953f * fTemp148) + ((0.00384533219f * fTemp119) + ((0.00537125766f * fTemp396) + ((0.00439466536f * fTemp529) + ((0.00445570238f * fTemp375) + ((0.00476088747f * fTemp372) + (fTemp804 + ((0.00473036896f * fTemp389) + ((0.00558488723f * fTemp357) + ((0.001617481f * fTemp406) + ((0.000122074038f * fTemp448) + ((0.00173955504f * fTemp203) + ((0.00991851557f * fTemp92) + ((0.00952177495f * fTemp440) + ((0.00054933317f * fTemp416) + ((0.00106814783f * fTemp244) + ((0.0115359966f * fTemp216) + ((0.0121158483f * fTemp386) + ((0.00805688649f * fTemp175) + ((0.0177922919f * fTemp445) + ((0.0249031037f * fTemp248) + ((0.0281685852f * fTemp249) + (fTemp794 + ((0.0220648833f * fTemp251) + ((0.0102542192f * fTemp252) + ((0.00527970213f * fTemp267) + ((0.00708029419f * fTemp269) + ((0.00689718314f * fTemp520) + ((0.0130924406f * fTemp186) + ((0.0100405896f * fTemp188) + ((0.0045167394f * fTemp30) + ((0.0187383648f * fTemp95) + ((0.0401318409f * fTemp503) + ((0.046967987f * fTemp272) + ((0.0251777712f * fTemp273) + ((0.00854518265f * fTemp501) + ((0.0103762932f * fTemp488) + ((0.0101321451f * fTemp471) + (fTemp738 + ((0.0184026621f * fTemp280) + ((0.0229194015f * fTemp281) + ((0.0208136234f * fTemp215) + ((0.0195623655f * fTemp468) + ((0.0178228095f * fTemp282) + ((0.0252693258f * fTemp283) + ((0.0357066579f * fTemp477) + ((0.0399182104f * fTemp510) + ((0.029175695f * fTemp284) + ((0.0395825058f * fTemp511) + ((0.0449842848f * fTemp291) + ((0.0112308115f * fTemp292) + ((0.0125736259f * fTemp38) + ((0.0329599902f * fTemp39) + ((0.0372325815f * fTemp40) + ((0.0657368675f * fTemp41) + ((0.086336866f * fTemp42) + ((0.0864894539f * fTemp214) + ((0.0637531653f * fTemp43) + ((0.0307016205f * fTemp49) + ((0.146397293f * fTemp295) + ((0.168187499f * fTemp213) + ((0.117313154f * fTemp296) + ((0.00231940672f * fTemp430) + ((0.0856959745f * fTemp305) + ((0.184759051f * fTemp306) + ((0.109958187f * fTemp307) + ((0.991088569f * fTemp508) + (fTemp308 + ((0.624347687f * fTemp309) + ((0.23209326f * fTemp509) + ((0.0529190972f * fTemp310) + ((0.0154118473f * fTemp311) + ((0.00766014587f * fTemp62) + ((0.00750755332f * fTemp63) + ((0.00720236823f * fTemp321) + ((0.004852443f * fTemp324) + ((0.00546281319f * fTemp81) + ((0.00357066561f * fTemp328) + ((0.00228888821f * fTemp332) + ((0.000854518265f * ((fTemp99 + (fTemp465 - fTemp454)) - fTemp88)) + ((0.00329599902f * (fTemp61 - fTemp107)) + ((0.00146488845f * (fTemp124 - fTemp201)) + ((0.00268562883f * (fTemp353 + (fTemp319 - fTemp355))) + ((0.00503555406f * (fTemp390 + (fTemp399 + fTemp415))) + ((0.00506607257f * (fTemp354 + fTemp204)) + ((0.00457777642f * (fTemp394 + fTemp425)) + ((0.00512710959f * (fTemp125 + (fTemp178 + fTemp176))) + ((0.00375377666f * (fTemp127 + (fTemp473 + fTemp506))) + ((0.00189214759f * (fTemp403 - fTemp197)) + ((0.000152592547f * (fTemp136 + ((fTemp315 - fTemp437) - fTemp455))) + ((0.00378429517f * (fTemp393 + fTemp115)) + ((0.00463881344f * (fTemp340 + (fTemp438 + ((fTemp104 + fTemp128) - fTemp23)))) + ((0.00283822138f * (fTemp142 + ((fTemp224 + fTemp235) - fTemp26))) + ((0.00186162908f * (fTemp108 - fTemp358)) + ((0.000701925717f * ((fTemp382 + fTemp126) - fTemp338)) + ((0.00469985045f * ((fTemp462 + (fTemp232 + fTemp94)) - fTemp384)) + ((0.00601214636f * (fTemp80 - fTemp376)) + ((0.00149540696f * (fTemp145 + fTemp194)) + ((0.0102847377f * (fTemp109 + fTemp196)) + ((0.00292977691f * (fTemp150 - fTemp189)) + ((0.00674459059f * (fTemp161 + fTemp400)) + ((0.0012817774f * (fTemp434 + (fTemp236 + fTemp401))) + ((0.00320444349f * (fTemp166 + (fTemp369 + fTemp326))) + ((0.00598162785f * (fTemp170 + fTemp268)) + ((0.00714133121f * (fTemp364 + fTemp453)) + ((0.00747703481f * (fTemp351 + fTemp461)) + ((0.0019226661f * (fTemp451 + fTemp5)) + ((0.00164799951f * (fTemp359 + (fTemp380 + fTemp143))) + ((0.0170903653f * (fTemp185 + fTemp424)) + ((0.0022583697f * (fTemp17 + fTemp111)) + ((0.00778221991f * (fTemp16 - fTemp4)) + ((0.00570696127f * (fTemp133 + fTemp558)) + ((0.00845362712f * (fTemp478 + fTemp356)) + ((0.00592059083f * (fTemp12 + fTemp8)) + ((0.00115970336f * (fTemp192 + fTemp470)) + ((0.000335703604f * (fTemp202 + fTemp205)) + ((0.00143436994f * (fTemp442 + (fTemp805 - fTemp339))) + ((0.0042115543f * (fTemp418 + (fTemp498 - fTemp200))) + ((0.00405896176f * (fTemp464 + (fTemp10 + fTemp487))) + ((0.00305185094f * (fTemp367 + ((fTemp495 + fTemp323) - fTemp165))) + ((0.00177007355f * (fTemp103 + fTemp395)) + ((0.000488296151f * (fTemp207 + (((fTemp494 + fTemp2) - fTemp466) - fTemp363))) + ((0.000671407208f * (fTemp137 + fTemp421)) + ((0.00253303628f * (fTemp198 + fTemp412)) + ((0.00540177617f * (fTemp206 + (fTemp456 + fTemp64))) + ((0.000793481246f * (fTemp480 + fTemp500)) + ((0.00790429395f * fTemp806) + ((0.00524918362f * (fTemp110 + (fTemp325 - fTemp263))) + ((0.00219733268f * (fTemp467 + (fTemp378 + fTemp243))) + ((0.00338755455f * (fTemp129 + fTemp413)) + ((0.00341807306f * (fTemp379 + fTemp82)) + ((0.00234992523f * ((fTemp78 - fTemp181) - fTemp435)) + ((0.00350962859f * (fTemp447 + (fTemp331 - fTemp436))) + ((0.00604266487f * (fTemp496 - fTemp3)) + ((0.000640888698f * (fTemp449 + ((fTemp0 + fTemp73) - fTemp237))) + ((0.00402844325f * ((fTemp370 + fTemp329) - fTemp422)) + ((0.00772118289f * (fTemp423 + fTemp320)) + ((0.0134891812f * (fTemp44 - fTemp262)) + ((0.00488296151f * (fTemp322 + fTemp79)) + (0.00607318338f * (fTemp6 + fTemp220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00360118411f * fTemp402) + ((0.0140079958f * fTemp7) + ((0.022583697f * fTemp222) + (fTemp688 + (fTemp628 + (fTemp632 + ((0.000213629566f * fTemp226) + ((0.00100711081f * fTemp349) + ((0.00207525864f * fTemp377) + ((0.000762962736f * fTemp388) + (fTemp588 + ((0.00201422162f * fTemp347) + ((0.00131229591f * fTemp153) + ((0.0172734763f * fTemp433) + ((0.021210365f * fTemp13) + (fTemp807 + ((0.0183416251f * fTemp14) + ((0.00717184972f * fTemp521) + ((0.0101016266f * fTemp90) + ((0.0120242927f * fTemp123) + ((0.013061922f * fTemp350) + ((0.0129703665f * fTemp342) + ((0.0111697745f * fTemp463) + ((0.00723288674f * fTemp459) + ((0.00500503555f * fTemp151) + ((0.00653096102f * fTemp122) + ((0.00683614612f * fTemp458) + ((0.00369273964f * fTemp431) + ((0.00280770287f * fTemp409) + ((0.00140385143f * fTemp374) + ((0.00250251777f * fTemp118) + ((0.00347911008f * fTemp371) + ((0.00247199927f * fTemp360) + ((0.00103762932f * fTemp337) + ((0.00314340647f * fTemp101) + ((0.00885036774f * fTemp233) + ((0.0120548112f * fTemp234) + ((0.0105899228f * fTemp419) + ((0.00286873989f * fTemp239) + ((0.0103152562f * fTemp491) + ((0.00860621966f * fTemp526) + ((0.0038758507f * fTemp404) + ((0.00662251655f * fTemp253) + ((0.00817896053f * fTemp254) + ((0.00671407208f * fTemp255) + ((0.00897244178f * fTemp256) + ((0.00964384899f * fTemp257) + ((0.0147404401f * fTemp258) + ((0.0206305124f * fTemp259) + ((0.0230414756f * fTemp260) + ((0.0193792544f * fTemp261) + ((0.012878811f * fTemp265) + ((0.0230109561f * fTemp497) + ((0.0320139155f * fTemp429) + ((0.0306711029f * fTemp180) + ((0.0217902157f * fTemp362) + ((0.0071108127f * fTemp266) + ((0.0137333293f * fTemp385) + ((0.0116580706f * fTemp270) + ((0.0237739198f * fTemp274) + ((0.0724814609f * fTemp169) + ((0.0932645649f * fTemp32) + ((0.0819422007f * fTemp33) + ((0.0585650206f * fTemp492) + ((0.0443739146f * fTemp275) + ((0.0360118411f * fTemp276) + ((0.0198065136f * fTemp277) + ((0.0571916886f * fTemp286) + ((0.108310193f * fTemp287) + ((0.133457437f * fTemp288) + ((0.119479962f * fTemp289) + ((0.0690633878f * fTemp290) + ((0.0317697674f * fTemp293) + ((0.0734580532f * fTemp294) + ((0.0883816034f * fTemp484) + ((0.0971709341f * fTemp34) + ((0.0983916745f * fTemp441) + ((0.105624564f * fTemp485) + ((0.104922637f * fTemp479) + ((0.0826136023f * fTemp35) + ((0.0467848741f * fTemp36) + ((0.0108645894f * fTemp37) + ((0.051637318f * fTemp45) + ((0.107974485f * fTemp46) + ((0.11368145f * fTemp47) + ((0.0665913895f * fTemp48) + ((0.112735376f * fTemp297) + ((0.181218907f * fTemp298) + ((0.187627792f * fTemp299) + ((0.141666919f * fTemp300) + ((0.144993439f * fTemp301) + ((0.111636706f * fTemp302) + ((0.136661887f * fTemp50) + ((0.0633869469f * fTemp51) + ((0.0704061985f * fTemp52) + ((0.0512710959f * fTemp53) + ((0.0989715233f * fTemp159) + ((0.0927457511f * fTemp303) + ((0.0122379223f * fTemp304) + ((0.0982696041f * fTemp54) + ((0.442243725f * fTemp55) + ((0.667592406f * fTemp56) + ((0.622333467f * fTemp57) + ((0.154118478f * fTemp144) + ((0.00332651753f * fTemp312) + ((0.0314035453f * fTemp313) + ((0.0298776217f * fTemp212) + ((0.0221259203f * fTemp58) + ((0.00875881221f * fTemp59) + ((0.00738547929f * fTemp60) + ((0.00589007232f * fTemp66) + ((0.00793481246f * fTemp67) + ((0.00494399853f * fTemp69) + ((0.00509659108f * fTemp327) + (((0.00137333293f * (fTemp334 + (fTemp132 + ((fTemp171 - fTemp219) - fTemp373)))) + ((0.00204474013f * (fTemp231 + (fTemp72 - fTemp493))) + ((0.00274666585f * (fTemp98 + (fTemp405 + fTemp190))) + ((0.00302133244f * (fTemp336 + (fTemp417 - fTemp348))) + ((0.00167851802f * (fTemp106 + (fTemp352 + fTemp131))) + ((0.000976592302f * (fTemp114 + fTemp152)) + ((0.00317392498f * (fTemp365 + (fTemp113 + (fTemp134 + fTemp27)))) + ((0.00344859157f * (fTemp366 + (fTemp271 - fTemp209))) + ((3.05185094e-05f * ((fTemp87 - fTemp184) - fTemp346)) + ((0.00363170262f * (fTemp264 - fTemp383)) + ((0.00430310983f * (fTemp85 - fTemp361)) + (((9.15555283e-05f * (fTemp130 + (fTemp160 + (fTemp502 - fTemp515)))) + ((0.00158696249f * (fTemp408 + fTemp318)) + ((0.00213629566f * (fTemp74 - fTemp139)) + ((0.00466933195f * (((fTemp147 + fTemp514) - fTemp452) - fTemp102)) + ((0.00561540574f * (fTemp410 - fTemp96)) + ((0.000366222113f * ((fTemp335 + fTemp278) - fTemp121)) + ((0.00119022187f * (fTemp420 + (fTemp230 + fTemp138))) + ((0.000427259132f * (fTemp155 + ((fTemp407 + fTemp93) - fTemp228))) + ((0.00216681417f * (fTemp68 - fTemp427)) + ((0.00534073915f * ((fTemp77 - fTemp368) - fTemp140)) + ((0.00134281442f * (fTemp162 + fTemp238)) + ((0.00616473891f * (fTemp22 + (fTemp457 + fTemp70))) + ((0.00692770164f * (fTemp177 + fTemp199)) + ((0.00222785119f * (fTemp179 + fTemp65)) + ((0.00933866389f * (fTemp472 + fTemp29)) + ((0.00210577715f * (fTemp411 - fTemp1)) + ((6.10370189e-05f * (fTemp246 - fTemp157)) + ((0.00442518387f * ((fTemp71 + (fTemp75 + fTemp84)) - fTemp486)) + ((0.00454725791f * ((((fTemp240 - fTemp218) - fTemp397) - fTemp450) - fTemp227)) + ((0.00390636921f * (fTemp241 - fTemp116)) + ((0.00296029542f * (fTemp314 - fTemp489)) + ((0.0057985168f * (fTemp504 - fTemp499)) + ((0.000946073793f * (fTemp174 - fTemp247)) + ((0.00415051728f * (fTemp505 - fTemp31)) + ((0.00564592425f * (fTemp285 + fTemp76)) + ((0.00543229468f * fTemp808) + ((0.00241096225f * (fTemp83 + fTemp86)) + (0.00244148076f * fTemp739)))))))))))))))))))))))))))) + (0.000885036774f * (fTemp333 + (fTemp24 + fTemp28))))))))))))))) + (0.000732444227f * (fTemp513 + (fTemp345 + (fTemp242 + (fTemp507 - fTemp135))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : ((fTemp223 + ((0.000305185094f * fTemp480) + ((0.00329599902f * fTemp153) + ((0.00231940672f * fTemp168) + ((0.00738547929f * fTemp433) + ((0.00204474013f * fTemp414) + ((0.00109866634f * fTemp459) + ((0.00228888821f * fTemp230) + ((0.00411999878f * fTemp149) + (fTemp779 + ((0.00576799829f * fTemp20) + ((0.00482192449f * fTemp185) + ((0.00247199927f * fTemp182) + ((0.0012817774f * fTemp351) + ((0.00332651753f * fTemp443) + ((0.00347911008f * fTemp364) + ((0.00271614734f * fTemp431) + ((0.0071108127f * fTemp426) + ((0.00558488723f * fTemp140) + ((0.00454725791f * fTemp115) + ((0.000762962736f * fTemp155) + ((0.00430310983f * fTemp152) + ((0.00531022064f * fTemp150) + ((0.00402844325f * fTemp344) + ((0.000854518265f * fTemp355) + ((0.00643940549f * fTemp108) + ((0.00701925717f * fTemp142) + ((0.0057985168f * fTemp119) + ((0.00460829493f * fTemp405) + ((0.00619525742f * fTemp403) + ((0.00256355479f * fTemp399) + ((0.000335703604f * fTemp394) + ((0.00115970336f * fTemp529) + ((0.00183111057f * fTemp375) + ((0.00250251777f * fTemp354) + ((0.00372325815f * fTemp390) + ((0.00381481368f * fTemp361) + (fTemp795 + ((0.000396740623f * fTemp412) + ((0.000885036774f * fTemp491) + ((0.0167851802f * fTemp29) + ((0.0185247362f * fTemp385) + ((0.0201116987f * fTemp270) + ((0.0231025126f * fTemp271) + ((0.0170903653f * fTemp370) + ((0.00573747978f * fTemp488) + ((0.0156559963f * fTemp471) + ((0.027558215f * fTemp279) + ((0.0365611762f * fTemp280) + ((0.0430311002f * fTemp281) + ((0.0361644328f * fTemp215) + ((0.0183111057f * fTemp468) + ((0.0441297665f * fTemp288) + ((0.0652485713f * fTemp289) + ((0.042115543f * fTemp290) + ((0.0201727357f * fTemp479) + ((0.0387890264f * fTemp35) + ((0.058107242f * fTemp36) + ((0.0771202743f * fTemp37) + ((0.0758995339f * fTemp38) + ((0.0708944947f * fTemp39) + ((0.0716879815f * fTemp40) + ((0.0571916886f * fTemp41) + ((0.0241401419f * fTemp42) + ((0.0390331745f * fTemp47) + ((0.101199381f * fTemp48) + ((0.116885893f * fTemp49) + ((0.0662251636f * fTemp295) + ((0.0957670808f * fTemp304) + ((0.20871608f * fTemp305) + ((0.131107524f * fTemp306) + ((0.412976474f * fTemp57) + ((0.931394398f * fTemp144) + ((0.632038355f * fTemp508) + ((0.252113402f * fTemp308) + ((0.0742820501f * fTemp309) + ((0.0142521439f * fTemp509) + ((0.000610370189f * ((fTemp446 + fTemp487) - fTemp337)) + ((6.10370189e-05f * ((fTemp125 + (fTemp6 + (fTemp62 + (fTemp67 + (fTemp4 + (fTemp69 + (fTemp73 + (fTemp74 + (fTemp79 + (fTemp80 + (fTemp81 + (fTemp83 + (fTemp84 + (fTemp327 + fTemp737)))))))))))))) - fTemp345)) + ((0.00463881344f * ((fTemp127 + (fTemp99 - fTemp486)) - fTemp113)) + ((0.00277718436f * (fTemp383 + fTemp132)) + ((0.00415051728f * (fTemp389 - fTemp483)) + ((0.00308236945f * (fTemp112 - fTemp418)) + ((0.000823999755f * (fTemp396 + fTemp199)) + ((0.0067751091f * (fTemp130 - fTemp379)) + ((0.00616473891f * (fTemp131 + (fTemp161 - fTemp469))) + ((0.00244148076f * (fTemp134 + (fTemp338 + fTemp186))) + ((9.15555283e-05f * (fTemp102 + (((fTemp316 + (fTemp318 + (fTemp220 + (fTemp320 + (fTemp68 + (fTemp70 + (fTemp75 + (fTemp78 + fTemp796)))))))) - fTemp526) - fTemp224))) + ((0.00317392498f * (fTemp340 + (fTemp427 - fTemp209))) + ((0.00366222113f * (((fTemp273 - fTemp247) - fTemp166) - fTemp410)) + ((0.00201422162f * (fTemp120 - fTemp424)) + ((0.00506607257f * (fTemp100 + (fTemp121 - fTemp173))) + ((0.006469924f * (fTemp163 - fTemp413)) + ((0.00665303506f * (fTemp156 - fTemp96)) + ((0.000518814661f * (fTemp423 - fTemp352)) + ((0.00695822015f * (fTemp373 - fTemp475)) + ((0.00198370311f * (fTemp170 - fTemp200)) + ((0.0022583697f * (fTemp146 + (fTemp216 - fTemp10))) + ((3.05185094e-05f * ((fTemp197 + (fTemp219 + (fTemp3 + (fTemp135 + (fTemp324 + ((fTemp326 + (fTemp85 + (fTemp86 + fTemp797))) - fTemp325)))))) - fTemp172)) + ((0.0104373302f * (fTemp28 - fTemp177)) + ((0.00589007232f * (fTemp187 - fTemp358)) + ((0.00595110934f * (fTemp14 - fTemp387)) + ((0.0054933317f * (fTemp192 - fTemp154)) + ((0.00186162908f * (fTemp485 - fTemp207)) + ((0.000244148076f * ((fTemp457 + (fTemp59 + fTemp5)) - fTemp210)) + ((0.000732444227f * (fTemp60 - fTemp388)) + ((0.000152592547f * (fTemp545 - fTemp493)) + ((0.00268562883f * (fTemp516 - fTemp240)) + ((0.000366222113f * (fTemp314 - fTemp504)) + ((0.000122074038f * ((fTemp272 + (fTemp61 + (fTemp63 + (fTemp66 + (fTemp319 + (fTemp565 - fTemp218)))))) - fTemp243)) + ((0.000183111057f * (fTemp315 + (fTemp64 + fTemp65))) + (0.00177007355f * (fTemp386 + (fTemp520 - fTemp362)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.000976592302f * fTemp7) + ((0.0345164351f * fTemp222) + ((0.00158696249f * fTemp447) + ((0.00692770164f * fTemp392) + ((0.00729392376f * fTemp335) + ((0.00585955381f * fTemp181) + ((0.00732444227f * fTemp165) + ((0.00766014587f * fTemp490) + ((0.00698873866f * fTemp421) + (fTemp798 + ((0.00836207159f * fTemp456) + ((0.00888088625f * fTemp435) + ((0.00924710836f * fTemp190) + ((0.00875881221f * fTemp349) + ((0.00622577593f * fTemp444) + ((0.00628681295f * fTemp473) + ((0.00689718314f * fTemp378) + ((0.0074159978f * fTemp91) + (fTemp799 + ((0.00637836847f * fTemp377) + ((0.00866725668f * fTemp160) + ((0.00933866389f * fTemp129) + ((0.00625629444f * fTemp104) + ((0.00503555406f * fTemp381) + ((0.00173955504f * fTemp467) + ((0.00473036896f * fTemp356) + ((0.00280770287f * fTemp206) + ((0.00283822138f * fTemp178) + ((0.00442518387f * fTemp227) + ((0.00384533219f * fTemp157) + ((0.00714133121f * fTemp437) + ((0.0101626636f * fTemp398) + ((0.0103457747f * fTemp202) + ((0.00753807183f * fTemp201) + ((0.00524918362f * fTemp347) + ((0.0035401471f * fTemp12) + ((0.01126133f * fTemp478) + ((0.0183416251f * fTemp196) + ((0.0224921424f * fTemp476) + ((0.0218817722f * fTemp195) + ((0.0163274035f * fTemp133) + ((0.00927762687f * fTemp16) + ((0.0120853297f * fTemp17) + ((0.0137333293f * fTemp189) + ((0.0142826624f * fTemp521) + ((0.0121768853f * fTemp90) + ((0.0087282937f * fTemp123) + ((0.00497451704f * fTemp350) + ((0.00238044374f * fTemp342) + ((0.00653096102f * fTemp179) + ((0.00912503432f * fTemp122) + ((0.0118106632f * fTemp458) + ((0.0123905148f * fTemp22) + ((0.0115665151f * fTemp23) + ((0.00909451582f * fTemp167) + ((0.00534073915f * fTemp455) + ((0.000915555283f * fTemp438) + ((0.00445570238f * fTemp434) + ((0.000427259132f * fTemp26) + ((0.00604266487f * fTemp145) + ((0.00222785119f * fTemp393) + ((0.00427259132f * fTemp118) + ((0.00439466536f * fTemp371) + (fTemp800 + ((0.00265511032f * fTemp365) + ((0.00152592547f * fTemp360) + ((0.00350962859f * fTemp336) + ((0.00399792474f * fTemp107) + ((0.00338755455f * fTemp231) + ((0.00241096225f * fTemp333) + ((0.0042115543f * fTemp176) + ((0.00997955259f * fTemp232) + ((0.0116885891f * fTemp496) + ((0.011383404f * fTemp461) + ((0.00988799706f * fTemp400) + ((0.00982696004f * fTemp448) + ((0.00900296029f * fTemp449) + ((0.00717184972f * fTemp495) + ((0.00781273842f * fTemp111) + ((0.00894192327f * fTemp203) + ((0.00930814538f * fTemp436) + ((0.0101931822f * fTemp233) + ((0.0106814783f * fTemp234) + ((0.0104068117f * fTemp419) + ((0.0110477004f * fTemp422) + ((0.0119632557f * fTemp94) + ((0.0119327372f * fTemp92) + ((0.0102847377f * fTemp440) + ((0.00750755332f * fTemp235) + ((0.00762962736f * fTemp236) + ((0.0115359966f * fTemp502) + ((0.0106509598f * fTemp237) + (fTemp732 + (fTemp801 + ((0.00552385021f * fTemp246) + (fTemp802 + ((0.0128482925f * fTemp248) + ((0.0142216254f * fTemp249) + ((0.0176091809f * fTemp250) + ((0.0203558467f * fTemp251) + ((0.0185857732f * fTemp252) + ((0.014435255f * fTemp401) + ((0.0120548112f * fTemp404) + ((0.0140079958f * fTemp253) + ((0.0182500686f * fTemp254) + ((0.0232245866f * fTemp255) + ((0.0239265114f * fTemp256) + ((0.0238654744f * fTemp257) + ((0.0216071047f * fTemp258) + ((0.0202032533f * fTemp259) + ((0.0175786614f * fTemp260) + ((0.0132145146f * fTemp261) + ((0.0150151066f * fTemp264) + ((0.0202337727f * fTemp265) + ((0.0214239936f * fTemp497) + ((0.0165715516f * fTemp429) + ((0.009704886f * fTemp180) + ((0.00494399853f * fTemp266) + ((0.0141605884f * fTemp506) + ((0.0245368816f * fTemp267) + ((0.0209356975f * fTemp268) + ((0.0102237007f * fTemp269) + ((0.0207525864f * fTemp188) + ((0.0371410251f * fTemp30) + ((0.0448927283f * fTemp31) + ((0.0313730277f * fTemp95) + ((0.0138554033f * fTemp503) + ((0.0276497696f * fTemp169) + ((0.0432752483f * fTemp32) + ((0.0415356904f * fTemp33) + ((0.0270088818f * fTemp492) + ((0.0176396985f * fTemp275) + ((0.0151371807f * fTemp276) + ((0.0159001444f * fTemp277) + ((0.0112308115f * fTemp278) + ((0.00592059083f * fTemp282) + ((0.0285348073f * fTemp283) + ((0.0524002798f * fTemp477) + ((0.0792870894f * fTemp510) + ((0.0976592302f * fTemp284) + ((0.0994293019f * fTemp285) + ((0.0677510947f * fTemp286) + ((0.0132755516f * fTemp287) + ((0.0103762932f * fTemp505) + ((0.0611896105f * fTemp511) + ((0.0923795253f * fTemp291) + ((0.0953398272f * fTemp292) + ((0.0881984904f * fTemp293) + ((0.0820947886f * fTemp294) + ((0.0842310861f * fTemp484) + ((0.0700094625f * fTemp34) + ((0.040498063f * fTemp441) + ((0.029114658f * fTemp214) + ((0.0507522821f * fTemp43) + ((0.0777611658f * fTemp44) + ((0.0800805688f * fTemp45) + ((0.0460829511f * fTemp46) + ((0.0238349568f * fTemp213) + ((0.108462781f * fTemp296) + ((0.125278488f * fTemp430) + ((0.0960417464f * fTemp297) + ((0.0373546556f * fTemp298) + ((0.019226661f * fTemp299) + ((0.0329905078f * fTemp300) + ((0.0837427899f * fTemp301) + ((0.0986358225f * fTemp302) + ((0.0947904885f * fTemp50) + ((0.0351573229f * fTemp51) + ((0.0103152562f * fTemp52) + ((0.00509659108f * fTemp53) + ((0.038819544f * fTemp159) + ((0.0307321399f * fTemp303) + ((0.21738334f * fTemp307) + ((0.502334654f * fTemp54) + ((0.534897923f * fTemp55) + ((0.204077274f * fTemp56) + ((0.00790429395f * fTemp310) + ((0.0282296222f * fTemp311) + ((0.0370494723f * fTemp312) + ((0.0251472518f * fTemp313) + ((0.0127262184f * fTemp212) + ((0.00466933195f * fTemp58) + ((((0.0028992584f * (fTemp334 + (fTemp136 + fTemp411))) + ((0.00378429517f * (fTemp98 + (fTemp103 + fTemp244))) + ((0.00405896176f * (fTemp101 + fTemp415)) + ((0.0025940733f * (fTemp341 + fTemp208)) + ((0.00155644398f * (fTemp106 + fTemp462)) + ((0.00344859157f * (fTemp374 + fTemp193)) + ((0.00213629566f * (fTemp346 + (fTemp116 + fTemp339))) + ((0.000488296151f * (fTemp124 + (fTemp463 + fTemp137))) + ((0.00216681417f * ((fTemp432 + (fTemp229 + (fTemp8 + fTemp174))) - fTemp372)) + ((0.000274666585f * (fTemp241 - fTemp409)) + ((0.00167851802f * (fTemp408 - fTemp382)) + ((0.00314340647f * (fTemp139 + (fTemp442 + fTemp363))) + ((0.000213629566f * (fTemp384 + (fTemp489 + (fTemp465 - fTemp194)))) + ((0.00164799951f * (fTemp376 + fTemp110)) + ((0.00564592425f * (fTemp417 + fTemp211)) + ((0.00436414685f * (fTemp148 + fTemp141)) + ((0.00106814783f * (fTemp109 + fTemp228)) + ((0.00759910885f * (fTemp498 - fTemp428)) + ((0.00787377544f * (fTemp395 - fTemp97)) + ((0.0077517014f * ((fTemp454 + fTemp158) - fTemp89)) + ((0.00735496078f * (fTemp406 - fTemp425)) + ((0.00640888698f * ((fTemp466 + fTemp274) - fTemp162)) + ((0.00521866512f * ((fTemp482 + fTemp175) - fTemp27)) + ((0.003234962f * (fTemp24 - fTemp191)) + ((0.00210577715f * (fTemp451 + fTemp514)) + ((0.008087405f * (fTemp151 + fTemp262)) + ((0.00396740623f * (fTemp359 + fTemp126)) + ((0.000640888698f * (fTemp164 - fTemp221)) + ((0.0051576281f * (fTemp501 - fTemp18)) + ((0.00335703604f * (fTemp15 + fTemp453)) + ((0.00878933072f * ((fTemp226 + fTemp499) - fTemp13)) + ((0.00125125889f * (fTemp242 - fTemp472)) + ((0.00567644276f * (fTemp239 - fTemp407)) + ((0.0093691824f * (fTemp93 + (fTemp500 + fTemp263))) + ((0.00891140476f * (fTemp183 + (fTemp128 + fTemp641))) + ((0.00292977691f * (fTemp348 + fTemp11)) + ((0.00341807306f * (fTemp452 + (fTemp205 + (fTemp217 + (fTemp184 + fTemp204))))) + ((0.0038758507f * (fTemp464 + fTemp357)) + ((0.00363170262f * (fTemp367 + fTemp450)) + ((0.00103762932f * (fTemp198 + fTemp470)) + ((0.00479140598f * (fTemp343 + fTemp368)) + ((0.00918607134f * (fTemp380 + fTemp515)) + ((0.00756859034f * (fTemp171 + fTemp105)) + ((0.00683614612f * (fTemp397 + fTemp369)) + (0.00357066561f * (fTemp147 + fTemp391)))))))))))))))))))))))))))))))))))))))))))))) + (0.0019226661f * (fTemp513 + (fTemp439 + fTemp460)))) + (0.00131229591f * (fTemp88 - fTemp420)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow38 ? (iSlow40 ? (((0.000366222113f * fTemp0) + ((0.00057985168f * fTemp402) + ((0.0022583697f * fTemp4) + ((0.000274666585f * fTemp221) + ((0.0101931822f * fTemp223) + ((0.00317392498f * fTemp368) + ((0.000213629566f * fTemp200) + (fTemp754 + ((0.00314340647f * fTemp165) + ((0.00292977691f * fTemp421) + ((0.00244148076f * fTemp413) + ((0.00173955504f * fTemp96) + ((0.00112918485f * fTemp128) + ((0.00115970336f * fTemp381) + ((0.00787377544f * fTemp208) + ((0.00625629444f * fTemp467) + ((0.00723288674f * fTemp453) + ((0.00628681295f * fTemp8) + ((0.00476088747f * fTemp339) + ((0.00424207281f * fTemp388) + ((0.00393688772f * fTemp480) + ((0.00411999878f * fTemp206) + ((0.00686666463f * fTemp205) + ((0.00924710836f * fTemp103) + ((0.00863673817f * fTemp367) + ((0.00546281319f * fTemp483) + ((0.0019531846f * fTemp153) + ((0.00857570115f * fTemp168) + ((0.0110477004f * fTemp12) + ((0.0124820704f * fTemp478) + ((0.0121158483f * fTemp196) + ((0.00967436749f * fTemp476) + ((0.00558488723f * fTemp195) + ((0.0158085879f * fTemp414) + ((0.00704977568f * fTemp14) + ((0.0198675506f * fTemp228) + ((0.019287698f * fTemp229) + ((0.0152287362f * fTemp432) + ((0.0108340709f * fTemp424) + ((0.00457777642f * fTemp16) + ((0.00350962859f * fTemp189) + ((0.0112308115f * fTemp230) + ((0.016296884f * fTemp191) + ((0.0180059206f * fTemp149) + ((0.0169377737f * fTemp18) + ((0.0144047365f * fTemp19) + ((0.0125736259f * fTemp187) + ((0.0111697745f * fTemp185) + ((0.00949125644f * fTemp182) + ((0.00650044251f * fTemp359) + ((0.00631733146f * fTemp458) + (fTemp710 + ((0.00680562761f * fTemp446) + ((0.0100100711f * fTemp146) + ((0.0117191076f * fTemp443) + ((0.0129093295f * fTemp364) + ((0.0133671071f * fTemp170) + ((0.0121463668f * fTemp166) + ((0.0107425153f * fTemp434) + ((0.00918607134f * fTemp24) + ((0.00790429395f * fTemp26) + ((0.00976592302f * fTemp373) + ((0.0147404401f * fTemp89) + ((0.016052736f * fTemp97) + ((0.0163579211f * fTemp428) + ((0.0157475509f * fTemp426) + ((0.0149235511f * fTemp156) + ((0.0143742179f * fTemp163) + ((0.0141300699f * fTemp161) + ((0.0140385143f * fTemp140) + ((0.0137028107f * fTemp115) + ((0.0117801446f * fTemp382) + ((0.0105899228f * fTemp155) + ((0.00943021942f * fTemp420) + ((0.00878933072f * fTemp132) + ((0.00875881221f * fTemp150) + ((0.0093691824f * fTemp100) + ((0.0104068117f * fTemp344) + ((0.0119327372f * fTemp120) + ((0.0134586627f * fTemp109) + ((0.0148930326f * fTemp148) + ((0.0150151066f * fTemp145) + ((0.0133060701f * fTemp417) + ((0.00955229346f * fTemp410) + ((0.00140385143f * fTemp384) + ((0.00180059206f * fTemp99) + ((0.0035401471f * fTemp108) + ((0.00527970213f * fTemp142) + ((0.00717184972f * fTemp119) + ((0.00866725668f * fTemp340) + ((0.00973540451f * fTemp102) + ((0.0100711081f * fTemp393) + ((0.0057985168f * fTemp130) + ((0.00823999755f * fTemp127) + ((0.00982696004f * fTemp396) + ((0.0103762932f * fTemp125) + ((0.0103152562f * fTemp394) + ((0.00958281197f * fTemp529) + ((0.00836207159f * fTemp375) + ((0.00616473891f * fTemp361) + ((0.00604266487f * fTemp346) + ((0.00164799951f * fTemp360) + ((0.000488296151f * fTemp114) + ((0.00274666585f * fTemp107) + ((0.00265511032f * fTemp101) + ((0.00210577715f * fTemp98) + (fTemp726 + ((0.000762962736f * fTemp333) + ((0.00445570238f * fTemp238) + ((0.00198370311f * fTemp240) + ((0.00250251777f * fTemp241) + ((0.00601214636f * fTemp487) + ((0.00491348002f * fTemp386) + ((0.00247199927f * fTemp423) + ((0.0181890316f * fTemp269) + ((0.0307016205f * fTemp520) + ((0.0341807306f * fTemp28) + ((0.0266426597f * fTemp29) + ((0.0109256264f * fTemp278) + ((0.0148014771f * fTemp501) + ((0.0205999948f * fTemp488) + ((0.0174565874f * fTemp471) + ((0.0540482812f * fTemp284) + ((0.0633259043f * fTemp285) + ((0.025696585f * fTemp286) + ((0.0171208847f * fTemp484) + ((0.0369884335f * fTemp34) + ((0.0430005789f * fTemp441) + ((0.045167394f * fTemp485) + ((0.0476699136f * fTemp479) + ((0.0685445741f * fTemp35) + ((0.0674764216f * fTemp36) + ((0.0548417605f * fTemp37) + ((0.0133976256f * fTemp38) + ((0.0621967241f * fTemp43) + ((0.13888973f * fTemp44) + ((0.0973845646f * fTemp45) + ((0.0199591052f * fTemp46) + ((0.0773644224f * fTemp51) + ((0.21436201f * fTemp52) + ((0.24723044f * fTemp53) + ((0.0263069551f * fTemp159) + ((0.522782087f * fTemp307) + (fTemp54 + ((0.919827878f * fTemp55) + ((0.459212005f * fTemp56) + ((0.123569444f * fTemp57) + ((0.0265205856f * fTemp144) + ((0.00552385021f * fTemp212) + ((0.00109866634f * fTemp314) + ((0.00332651753f * fTemp66) + ((0.00213629566f * fTemp321) + ((6.10370189e-05f * fTemp325) + ((0.00131229591f * fTemp73) + ((0.00155644398f * fTemp74) + ((0.00170903653f * fTemp76) + ((0.00299081393f * fTemp83) + ((0.000305185094f * fTemp85) + ((0.00143436994f * fTemp331) + ((((3.05185094e-05f * (fTemp337 + (fTemp316 + fTemp82))) + ((0.0019226661f * (fTemp366 + ((fTemp247 + (fTemp69 + fTemp327)) - fTemp347))) + ((0.00234992523f * (fTemp371 + fTemp222)) + ((0.0042115543f * (fTemp118 + (fTemp451 + fTemp110))) + ((0.0061342204f * (fTemp124 + fTemp389)) + ((0.00595110934f * (fTemp390 + (fTemp112 + (fTemp409 + fTemp207)))) + ((0.00708029419f * (fTemp403 + fTemp464)) + ((0.0045167394f * (fTemp131 + (fTemp134 + ((fTemp322 - fTemp203) - fTemp379)))) + ((0.00399792474f * (fTemp405 + fTemp387)) + ((0.00766014587f * (fTemp408 + (fTemp15 + (fTemp510 - fTemp400)))) + ((0.0051576281f * (fTemp376 + (fTemp11 + fTemp313))) + ((0.00851466414f * (fTemp121 + fTemp152)) + ((0.0129703665f * (fTemp427 + fTemp438)) + ((0.00778221991f * (fTemp162 + (fTemp279 - fTemp92))) + ((0.00701925717f * (fTemp27 + fTemp343)) + ((0.0071108127f * (fTemp431 + fTemp184)) + ((0.00842310861f * (fTemp351 + fTemp126)) + ((0.00531022064f * (fTemp172 + fTemp22)) + ((0.00378429517f * (fTemp455 + (fTemp407 + fTemp58))) + ((0.00692770164f * (fTemp177 + fTemp122)) + ((0.0077517014f * (fTemp164 + fTemp296)) + ((0.0116580706f * (fTemp20 + fTemp385)) + ((0.00418103579f * (fTemp459 + (fTemp242 - fTemp342))) + ((0.00103762932f * (fTemp90 + fTemp158)) + ((0.00375377666f * (fTemp17 + fTemp243)) + ((0.000885036774f * ((fTemp104 + fTemp268) - fTemp411)) + ((0.00183111057f * (fTemp398 - fTemp154)) + ((0.00503555406f * (fTemp437 + fTemp178)) + ((0.00585955381f * (fTemp482 + fTemp157)) + ((0.00567644276f * (fTemp442 + (fTemp348 + (fTemp486 + (fTemp213 - fTemp270))))) + ((0.00564592425f * (fTemp452 + fTemp210)) + ((0.00555436872f * (fTemp137 + (fTemp356 - fTemp194))) + ((0.00576799829f * (fTemp198 + (fTemp116 + (((fTemp216 - fTemp204) - fTemp349) - fTemp105)))) + ((0.00360118411f * (fTemp462 + fTemp67)) + ((0.00372325815f * (fTemp489 + fTemp239)) + ((0.00512710959f * (fTemp363 + (fTemp10 - fTemp466))) + ((0.00469985045f * (fTemp193 - fTemp138)) + ((0.00283822138f * (fTemp209 - fTemp473)) + ((0.000915555283f * (fTemp129 + fTemp225)) + ((0.000122074038f * (fTemp380 + fTemp141)) + ((0.00427259132f * (fTemp68 - fTemp91)) + ((0.000457777642f * (fTemp226 - fTemp181)) + ((0.00100711081f * (fTemp456 + fTemp412)) + ((0.000732444227f * (fTemp514 + fTemp492)) + ((0.0012817774f * (fTemp449 + (fTemp7 + (fTemp315 + fTemp332)))) + ((0.00665303506f * (fTemp516 - fTemp419)) + ((0.00296029542f * (fTemp237 + fTemp84)) + ((0.000976592302f * (fTemp277 + fTemp326)) + ((0.00137333293f * (fTemp77 - fTemp323)) + ((0.00186162908f * (fTemp65 - fTemp1)) + ((0.000640888698f * (fTemp61 + (fTemp218 + fTemp329))) + ((0.00906399731f * fTemp773) + (0.00598162785f * fTemp786))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00152592547f * (fTemp341 + fTemp147))) + (0.00054933317f * fTemp793))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00286873989f * fTemp220) + ((0.000335703604f * fTemp5) + ((0.0038758507f * fTemp224) + ((0.00125125889f * fTemp435) + ((0.00381481368f * fTemp190) + ((0.00326548051f * fTemp444) + ((0.00482192449f * fTemp475) + ((0.00241096225f * fTemp377) + ((0.000183111057f * fTemp202) + ((0.00228888821f * fTemp201) + ((0.0118717002f * fTemp472) + ((0.0105594043f * fTemp433) + ((0.00305185094f * fTemp13) + ((0.00347911008f * fTemp350) + ((0.0067751091f * fTemp357) + ((0.00653096102f * fTemp496) + ((0.00772118289f * fTemp498) + ((0.00430310983f * fTemp494) + ((0.000793481246f * fTemp495) + ((0.00463881344f * fTemp369) + ((0.00344859157f * fTemp515) + ((0.00732444227f * fTemp234) + ((0.0106204413f * fTemp440) + ((0.0124515519f * fTemp499) + ((0.0125431074f * fTemp235) + ((0.00671407208f * fTemp500) + ((0.00442518387f * fTemp143) + ((0.00805688649f * fTemp416) + ((0.00811792351f * fTemp244) + ((0.0126651814f * fTemp526) + ((0.0172734763f * fTemp174) + ((0.0185552537f * fTemp175) + ((0.0150761437f * fTemp445) + ((0.0151982177f * fTemp248) + ((0.0201422162f * fTemp249) + (fTemp794 + ((0.0318613239f * fTemp251) + ((0.0315866582f * fTemp252) + ((0.0264595486f * fTemp401) + ((0.0230719931f * fTemp404) + ((0.0204168838f * fTemp253) + ((0.0177312549f * fTemp254) + ((0.0176396985f * fTemp255) + ((0.0194402914f * fTemp256) + ((0.0204779208f * fTemp257) + ((0.0212408826f * fTemp258) + ((0.02438429f * fTemp260) + ((0.0254524369f * fTemp261) + ((0.0224921424f * fTemp262) + ((0.0167851802f * fTemp497) + ((0.0229194015f * fTemp429) + ((0.0181279946f * fTemp180) + ((0.00415051728f * fTemp266) + ((0.00668355357f * fTemp267) + ((0.0164799951f * fTemp271) + ((0.0272530299f * fTemp370) + ((0.0468459129f * fTemp186) + ((0.0662862062f * fTemp188) + ((0.0676900521f * fTemp30) + ((0.0484328754f * fTemp31) + ((0.0213629566f * fTemp95) + ((0.014435255f * fTemp272) + ((0.0328073986f * fTemp273) + ((0.0418103598f * fTemp274) + ((0.032227546f * fTemp169) + ((0.015991699f * fTemp32) + ((0.00390636921f * fTemp33) + ((0.00494399853f * fTemp275) + ((0.0101321451f * fTemp280) + ((0.0281075481f * fTemp281) + ((0.0590838343f * fTemp215) + ((0.0932035297f * fTemp468) + ((0.113895081f * fTemp282) + ((0.10077212f * fTemp283) + ((0.0580156855f * fTemp477) + ((0.0678426474f * fTemp288) + ((0.0926236734f * fTemp289) + ((0.09967345f * fTemp290) + ((0.0914944932f * fTemp505) + ((0.0885036811f * fTemp511) + ((0.0810876787f * fTemp291) + ((0.0587786511f * fTemp292) + ((0.0322580636f * fTemp293) + ((0.00408948027f * fTemp294) + ((0.0330515467f * fTemp39) + ((0.0691549405f * fTemp40) + ((0.0798059031f * fTemp41) + ((0.0877101943f * fTemp42) + ((0.0316782147f * fTemp214) + ((0.0954618976f * fTemp47) + ((0.151127666f * fTemp48) + ((0.139896855f * fTemp49) + ((0.0682088658f * fTemp295) + ((0.042298656f * fTemp430) + ((0.113254189f * fTemp297) + ((0.104312263f * fTemp298) + ((0.097354047f * fTemp299) + ((0.0614337586f * fTemp300) + ((0.0987884179f * fTemp301) + ((0.0718100518f * fTemp302) + ((0.0530716889f * fTemp50) + ((0.337778866f * fTemp303) + ((0.566484571f * fTemp304) + ((0.577562809f * fTemp305) + ((0.150273144f * fTemp306) + ((0.0104373302f * fTemp508) + ((0.0303353984f * fTemp308) + ((0.0397656187f * fTemp309) + ((0.0380260646f * fTemp509) + ((0.0277718436f * fTemp310) + ((0.0139774773f * fTemp311) + ((0.00357066561f * fTemp312) + ((0.00271614734f * fTemp63) + ((0.00238044374f * fTemp72) + ((0.00216681417f * fTemp135) + ((0.00277718436f * fTemp79) + ((0.00280770287f * fTemp80) + ((0.000701925717f * fTemp328) + (((0.00231940672f * ((fTemp318 - fTemp395) - fTemp336)) + ((0.000610370189f * ((fTemp133 + (fTemp59 + (fTemp320 + fTemp624))) - fTemp106)) + ((0.00119022187f * ((fTemp60 - fTemp474) - fTemp352)) + ((0.00177007355f * ((fTemp264 + (fTemp81 - fTemp75)) - fTemp365)) + ((0.00311288796f * ((fTemp531 - fTemp490) - fTemp113)) + ((0.00540177617f * (fTemp422 - fTemp374)) + ((0.00634784997f * ((fTemp406 - fTemp179) - fTemp354)) + ((0.00720236823f * (fTemp461 - fTemp372)) + ((0.00991851557f * (fTemp470 - fTemp139)) + ((0.000244148076f * ((fTemp355 + fTemp391) - fTemp338)) + ((0.0123599963f * (fTemp263 - fTemp425)) + ((0.00433362834f * (fTemp276 - fTemp23)) + ((0.00656147953f * (fTemp265 - fTemp151)) + ((0.00146488845f * (fTemp463 + (fTemp171 + fTemp448))) + ((0.00256355479f * (fTemp71 - fTemp521)) + ((0.0058290353f * ((fTemp111 - fTemp418) - fTemp469)) + ((0.00607318338f * (fTemp233 - fTemp192)) + ((0.000427259132f * ((fTemp460 + (fTemp70 - fTemp465)) - fTemp197)) + ((0.00167851802f * (fTemp93 - fTemp415)) + ((0.00369273964f * (((fTemp358 + fTemp246) - fTemp439) - fTemp183)) + ((0.00610370189f * (fTemp506 - fTemp227)) + ((0.00439466536f * (fTemp436 - fTemp217)) + ((0.00189214759f * ((fTemp78 - fTemp2) - fTemp450)) + ((0.000671407208f * (fTemp160 + (fTemp199 + fTemp6))) + ((0.00341807306f * (fTemp378 + fTemp319)) + ((0.00122074038f * (fTemp335 + fTemp86)) + ((0.00204474013f * (fTemp392 + (fTemp62 - fTemp504))) + ((0.00521866512f * (fTemp493 - fTemp219)) + ((0.00524918362f * (fTemp447 + fTemp94)) + ((0.0074159978f * (fTemp397 + fTemp503)) + ((0.00683614612f * (fTemp232 + fTemp491)) + ((0.0106509598f * (fTemp236 + fTemp362)) + ((0.00207525864f * (fTemp64 + (fTemp3 + fTemp87))) + ((0.021149328f * fTemp593) + (0.00750755332f * fTemp661))))))))))))))))))))))))))))))))))) + (0.00149540696f * ((fTemp123 + fTemp502) - fTemp231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.00555436872f * fTemp220) + ((0.00665303506f * fTemp5) + ((0.00561540574f * fTemp221) + ((0.539689302f * fTemp7) + ((0.00616473891f * fTemp204) + ((0.00317392498f * fTemp224) + ((0.00149540696f * fTemp173) + ((0.00268562883f * fTemp91) + ((0.00302133244f * fTemp475) + ((0.00344859157f * fTemp208) + ((0.00369273964f * fTemp453) + ((0.00381481368f * fTemp480) + ((0.00457777642f * fTemp486) + ((0.00439466536f * fTemp398) + ((0.00390636921f * fTemp202) + ((0.00253303628f * fTemp195) + ((0.00448622089f * fTemp228) + ((0.004852443f * fTemp229) + ((0.0051576281f * fTemp432) + ((0.00488296151f * fTemp459) + ((0.00384533219f * fTemp151) + ((0.00558488723f * fTemp122) + ((0.00454725791f * fTemp23) + ((0.00231940672f * fTemp146) + ((0.00173955504f * fTemp443) + ((0.0019226661f * fTemp166) + ((0.00167851802f * fTemp24) + ((0.000152592547f * fTemp140) + ((0.0022583697f * fTemp115) + ((0.00811792351f * fTemp382) + ((0.00939970091f * fTemp155) + ((0.00787377544f * fTemp420) + ((0.00509659108f * fTemp145) + ((0.00729392376f * fTemp417) + ((0.00823999755f * fTemp410) + ((0.00482192449f * fTemp384) + ((0.00125125889f * fTemp393) + ((0.00152592547f * fTemp394) + ((0.000122074038f * fTemp231) + ((0.00662251655f * fTemp176) + ((0.00567644276f * fTemp397) + ((0.00222785119f * fTemp498) + ((0.00100711081f * fTemp448) + ((0.000976592302f * fTemp235) + ((0.000183111057f * fTemp236) + ((0.00054933317f * fTemp241) + ((0.000946073793f * fTemp243) + ((0.00863673817f * fTemp32) + ((0.0239875484f * fTemp33) + ((0.0294198431f * fTemp492) + ((0.0205999948f * fTemp275) + (fTemp695 + ((0.0306711029f * fTemp280) + ((0.0105899228f * fTemp281) + ((0.0399792492f * fTemp286) + ((0.0769981965f * fTemp287) + ((0.0170903653f * fTemp511) + ((0.0347911008f * fTemp291) + ((0.00927762687f * fTemp292) + ((0.071871087f * fTemp479) + ((0.10623493f * fTemp35) + ((0.0757469386f * fTemp36) + (fTemp784 + ((0.0122989593f * fTemp47) + ((0.0263069551f * fTemp48) + ((0.0436109491f * fTemp49) + ((0.0521256141f * fTemp295) + ((0.0892361253f * fTemp213) + ((0.0845667869f * fTemp296) + ((0.126712859f * fTemp302) + ((0.182714313f * fTemp50) + ((0.112643816f * fTemp51) + ((0.0093691824f * fTemp52) + ((0.0153508103f * fTemp307) + ((0.0779747888f * fTemp54) + ((0.061952576f * fTemp55) + ((0.0191351064f * fTemp56) + ((0.053682059f * fTemp308) + ((0.174932092f * fTemp309) + ((0.155186623f * fTemp509) + ((0.240485862f * fTemp313) + ((0.925229669f * fTemp212) + (fTemp58 + ((0.150517285f * fTemp59) + (fTemp598 + ((0.0253913999f * fTemp199) + ((0.00653096102f * fTemp71) + ((0.00589007232f * fTemp72) + ((0.00564592425f * fTemp73) + ((0.00436414685f * fTemp86) + ((0.00531022064f * fTemp87) + ((0.000213629566f * ((fTemp255 - fTemp338) - fTemp334)) + ((0.00106814783f * ((fTemp16 + fTemp499) - fTemp114)) + ((0.000671407208f * (fTemp366 + fTemp225)) + ((0.00198370311f * (fTemp371 + (fTemp428 + (fTemp26 + (fTemp472 + fTemp413))))) + ((0.00296029542f * (fTemp113 + fTemp206)) + ((0.00335703604f * (fTemp118 + fTemp462)) + ((0.00320444349f * (fTemp374 + (fTemp455 + fTemp349))) + ((0.00238044374f * (fTemp346 + (fTemp11 + fTemp461))) + ((0.000457777642f * (fTemp353 + (fTemp361 + fTemp440))) + ((0.000854518265f * (fTemp389 + fTemp185)) + ((0.00137333293f * (fTemp390 + ((fTemp20 + fTemp242) - fTemp102))) + ((0.00177007355f * (fTemp112 + (fTemp285 - fTemp99))) + ((0.0019531846f * (fTemp354 + (fTemp529 + (fTemp179 + fTemp28)))) + ((0.00204474013f * (fTemp372 + (fTemp375 + (fTemp355 + (fTemp454 + (fTemp168 + fTemp415)))))) + ((0.00241096225f * (fTemp134 + (fTemp431 + fTemp196))) + ((0.0054933317f * (fTemp408 + fTemp80)) + ((0.00546281319f * (fTemp136 + fTemp22)) + ((0.00308236945f * ((fTemp103 + (fTemp10 + fTemp200)) - fTemp340)) + ((0.00341807306f * ((fTemp347 + fTemp79) - fTemp142)) + ((0.00299081393f * (fTemp148 + fTemp351)) + ((0.00170903653f * (fTemp120 + (fTemp434 + fTemp66))) + ((0.00274666585f * (fTemp791 - fTemp100)) + ((0.00479140598f * (fTemp81 - fTemp121)) + ((0.00372325815f * (fTemp132 + (fTemp167 + (fTemp193 + fTemp526)))) + ((0.00524918362f * (fTemp427 + fTemp463)) + ((0.000274666585f * (fTemp156 + (fTemp226 + fTemp274))) + ((0.00119022187f * (fTemp426 + (fTemp392 + fTemp85))) + ((0.00256355479f * (fTemp97 + fTemp400)) + ((0.00305185094f * (fTemp89 + (fTemp116 + (fTemp515 + fTemp491)))) + ((0.00314340647f * (fTemp162 + (fTemp207 + (fTemp514 - fTemp218)))) + ((0.00210577715f * (fTemp438 + fTemp147)) + ((0.00189214759f * (fTemp170 + (fTemp473 + fTemp319))) + ((0.00329599902f * (fTemp451 + fTemp157)) + ((0.00628681295f * (fTemp458 + fTemp74)) + ((0.00311288796f * (fTemp19 + fTemp153)) + ((0.00378429517f * (fTemp18 + fTemp379)) + ((0.0045167394f * (fTemp230 + fTemp183)) + ((0.00415051728f * (fTemp350 + fTemp321)) + ((9.15555283e-05f * (fTemp90 + fTemp328)) + ((0.00292977691f * (fTemp469 + fTemp96)) + ((0.00433362834f * (fTemp15 - fTemp219)) + ((0.00500503555f * (fTemp424 + fTemp29)) + ((0.0035401471f * (fTemp14 + (fTemp388 + (fTemp110 + fTemp436)))) + ((0.00277718436f * (fTemp13 + (fTemp205 + fTemp495))) + ((0.00213629566f * (fTemp433 + (fTemp160 + fTemp391))) + ((0.00201422162f * (fTemp478 + fTemp378)) + ((0.00183111057f * (fTemp12 + fTemp326)) + ((0.00250251777f * (fTemp192 + (fTemp129 + (fTemp154 + (fTemp233 + fTemp135))))) + ((0.0028992584f * (fTemp407 + fTemp128)) + ((0.003234962f * (fTemp197 + fTemp158)) + ((0.00332651753f * (fTemp411 + fTemp198)) + ((0.00347911008f * (fTemp201 + (fTemp210 + (fTemp356 + (fTemp217 + (fTemp439 + (fTemp467 + fTemp104))))))) + ((0.00360118411f * (fTemp93 + (fTemp8 + fTemp1))) + ((0.00396740623f * (fTemp139 + fTemp105)) + ((0.00393688772f * (fTemp437 + (fTemp111 + fTemp3))) + ((0.00338755455f * (fTemp482 + fTemp137)) + ((0.00366222113f * (fTemp442 + (fTemp489 + fTemp75))) + ((0.00427259132f * (fTemp348 + fTemp369)) + ((0.00445570238f * (fTemp464 + fTemp64)) + ((0.00375377666f * (fTemp367 + fTemp381)) + ((0.00286873989f * (fTemp178 + (fTemp474 + fTemp203))) + ((0.00216681417f * (fTemp363 + (fTemp380 + (fTemp460 - fTemp2)))) + ((0.0038758507f * fTemp792) + ((0.00271614734f * (fTemp444 + (fTemp276 + fTemp301))) + ((0.00180059206f * (fTemp190 + fTemp82)) + ((0.000915555283f * ((fTemp181 + (fTemp174 - fTemp240)) - fTemp165)) + ((0.00140385143f * (fTemp387 + fTemp395)) + ((0.00115970336f * (fTemp449 + (fTemp385 - fTemp502))) + ((0.00543229468f * ((fTemp65 - fTemp264) - fTemp252)) + ((0.0237434004f * (fTemp430 - fTemp266)) + ((0.0394909531f * (fTemp289 - fTemp488)) + (0.000640888698f * fTemp705))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00610370189f * fTemp402) + ((0.0298471022f * fTemp6) + ((0.478987992f * fTemp222) + ((0.151707515f * fTemp223) + ((0.00363170262f * fTemp119) + ((3.05185094e-05f * fTemp106) + ((0.00668355357f * fTemp470) + ((0.008087405f * fTemp244) + ((0.00918607134f * fTemp246) + ((0.0102542192f * fTemp247) + ((0.00988799706f * fTemp487) + ((0.00762962736f * fTemp445) + ((0.0115665151f * fTemp248) + ((0.012939848f * fTemp249) + ((0.011322367f * fTemp250) + ((0.00817896053f * fTemp251) + ((0.00595110934f * fTemp257) + ((0.00701925717f * fTemp258) + ((0.00692770164f * fTemp261) + ((0.00430310983f * fTemp263) + ((0.00900296029f * fTemp265) + ((0.00952177495f * fTemp497) + ((0.0116580706f * fTemp429) + ((0.0172734763f * fTemp180) + ((0.0222785119f * fTemp362) + ((0.0246894751f * fTemp506) + ((0.0259712525f * fTemp267) + ((0.024506364f * fTemp268) + ((0.0163884405f * fTemp269) + ((0.00576799829f * fTemp520) + ((0.00650044251f * fTemp270) + ((0.0140995514f * fTemp271) + (fTemp778 + ((0.0206915494f * fTemp186) + ((0.0238654744f * fTemp188) + ((0.0247810297f * fTemp30) + ((0.0245368816f * fTemp31) + ((0.0259102155f * fTemp95) + ((0.0254829563f * fTemp503) + ((0.0172429588f * fTemp272) + ((0.0058290353f * fTemp273) + ((0.0209967345f * fTemp277) + ((0.0467848741f * fTemp278) + ((0.0565507971f * fTemp501) + ((0.00534073915f * fTemp471) + ((0.0176702179f * fTemp215) + ((0.0332041383f * fTemp468) + ((0.0302743614f * fTemp282) + ((0.0178838465f * fTemp283) + ((0.013061922f * fTemp510) + ((0.0162663665f * fTemp284) + ((0.00503555406f * fTemp290) + ((0.0135196997f * fTemp505) + ((0.0481887273f * fTemp293) + ((0.103274636f * fTemp294) + ((0.131565288f * fTemp484) + ((0.12518692f * fTemp34) + ((0.0842921212f * fTemp38) + ((0.12524797f * fTemp39) + ((0.121646777f * fTemp40) + ((0.0949125662f * fTemp41) + ((0.0675374642f * fTemp42) + ((0.0474868007f * fTemp214) + ((0.0462355427f * fTemp43) + ((0.0312509537f * fTemp44) + ((0.0465102084f * fTemp297) + ((0.102572709f * fTemp298) + ((0.137821585f * fTemp299) + ((0.114505447f * fTemp300) + ((0.0746177584f * fTemp53) + (fTemp535 + ((0.199743643f * fTemp303) + ((0.163182467f * fTemp304) + ((0.080813013f * fTemp305) + ((0.0417188033f * fTemp306) + ((0.0763573125f * fTemp57) + ((0.127872556f * fTemp144) + ((0.0577410199f * fTemp508) + ((0.129978329f * fTemp310) + ((0.499588013f * fTemp311) + ((0.736960948f * fTemp312) + ((0.0185247362f * fTemp314) + ((0.0340586565f * fTemp315) + ((0.0378124341f * fTemp61) + ((0.0147709586f * fTemp62) + ((0.00506607257f * fTemp69) + ((0.00585955381f * fTemp324) + ((0.00442518387f * fTemp507) + ((0.00497451704f * fTemp83) + ((0.00265511032f * fTemp327) + ((0.0042115543f * fTemp332) + ((((0.000427259132f * (fTemp333 + (fTemp403 + fTemp254))) + ((0.000396740623f * ((fTemp130 + fTemp92) - fTemp98)) + ((0.000305185094f * (fTemp457 - fTemp341)) + ((0.000335703604f * (fTemp337 + ((fTemp238 - fTemp335) - fTemp383))) + ((0.000701925717f * (fTemp345 + (((fTemp504 + fTemp76) - fTemp494) - fTemp359))) + ((0.00134281442f * (fTemp352 + fTemp152)) + ((0.00122074038f * (fTemp360 - fTemp124)) + ((0.000518814661f * (fTemp365 + (fTemp163 - fTemp182))) + ((0.000762962736f * ((fTemp17 + (fTemp70 - fTemp169)) - fTemp125)) + ((6.10370189e-05f * ((fTemp131 + fTemp322) - fTemp396)) + ((0.000244148076f * (fTemp399 + ((fTemp94 - fTemp211) - fTemp344))) + ((0.000366222113f * (fTemp127 + ((fTemp45 - fTemp421) - fTemp164))) + ((0.000793481246f * ((fTemp490 + (fTemp0 + fTemp237)) - fTemp405)) + ((0.00424207281f * (((fTemp416 - fTemp232) - fTemp191) - fTemp409)) + ((0.00280770287f * (fTemp108 + (((fTemp318 - fTemp496) - fTemp466) - fTemp339))) + ((0.00723288674f * ((fTemp262 + fTemp477) - fTemp376)) + ((0.00207525864f * (fTemp143 - fTemp109)) + ((0.00518814661f * (fTemp150 + (fTemp84 - fTemp342))) + ((0.000732444227f * (fTemp161 + (fTemp500 - fTemp419))) + ((0.00326548051f * ((fTemp175 - fTemp373) - fTemp425)) + ((0.00283822138f * ((fTemp465 + fTemp67) - fTemp27)) + ((0.001617481f * (fTemp256 - fTemp364)) + ((0.00350962859f * (fTemp329 - fTemp446)) + ((0.00357066561f * (((fTemp260 - fTemp184) - fTemp343) - fTemp172)) + ((0.006469924f * (fTemp68 - fTemp177)) + ((0.00219733268f * ((((fTemp606 - fTemp377) - fTemp171) - fTemp133) - fTemp187)) + ((0.00408948027f * ((fTemp259 - fTemp414) - fTemp149)) + ((0.00155644398f * (fTemp521 - fTemp368)) + ((0.00186162908f * (fTemp189 - fTemp456)) + ((0.00228888821f * (((fTemp423 + fTemp37) - fTemp358) - fTemp123)) + ((0.00262459181f * (fTemp216 - fTemp476)) + ((0.00463881344f * ((((fTemp485 - fTemp493) - fTemp227) - fTemp452) - fTemp418)) + ((0.00460829493f * ((fTemp401 + fTemp77) - fTemp483)) + ((0.00244148076f * (fTemp253 - fTemp138)) + ((0.00402844325f * (fTemp404 - fTemp194)) + ((0.00527970213f * (fTemp331 - fTemp447)) + ((0.00683614612f * (fTemp516 - fTemp357)) + ((0.00109866634f * ((fTemp386 - fTemp234) - fTemp406)) + ((0.000488296151f * (fTemp412 + fTemp78)) + (((0.00634784997f * (fTemp325 - fTemp320)) + (0.00604266487f * (fTemp4 + fTemp316))) + (0.0808740482f * (fTemp441 - fTemp288)))))))))))))))))))))))))))))))))))))))))) + (0.000610370189f * (fTemp513 + ((fTemp239 - fTemp435) - fTemp101)))) + (0.00057985168f * (fTemp88 - fTemp336)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow39 ? (((0.102542192f * fTemp0) + ((0.084810935f * fTemp1) + ((0.126102477f * fTemp2) + ((0.0415967293f * fTemp219) + ((0.0517899096f * fTemp220) + ((0.0296639912f * fTemp221) + ((0.00885036774f * fTemp204) + ((0.00891140476f * fTemp447) + ((0.00805688649f * fTemp194) + (fTemp766 + ((0.00442518387f * fTemp173) + ((0.00411999878f * fTemp200) + ((0.0045167394f * fTemp514) + ((0.00509659108f * fTemp165) + ((0.00262459181f * fTemp421) + ((0.00466933195f * fTemp444) + ((0.00817896053f * fTemp473) + ((0.0108340709f * fTemp378) + ((0.0126041444f * fTemp91) + ((0.0134586627f * fTemp475) + ((0.0103762932f * fTemp138) + ((0.00155644398f * fTemp129) + ((0.00976592302f * fTemp128) + ((0.0093691824f * fTemp381) + ((0.00988799706f * fTemp450) + ((0.00476088747f * fTemp10) + ((0.00973540451f * fTemp11) + ((0.0122989593f * fTemp363) + ((0.0112308115f * fTemp339) + ((0.00793481246f * fTemp388) + ((0.000885036774f * fTemp116) + ((0.00109866634f * fTemp198) + ((0.000732444227f * fTemp210) + ((0.00234992523f * fTemp442) + ((0.00299081393f * fTemp347) + ((0.00631733146f * fTemp411) + ((0.0100100711f * fTemp407) + ((0.0102237007f * fTemp192) + ((0.0101016266f * fTemp168) + ((0.0087282937f * fTemp478) + ((0.0038758507f * fTemp133) + ((0.0100711081f * fTemp229) + ((0.0101321451f * fTemp424) + ((0.00704977568f * fTemp15) + ((0.00601214636f * fTemp458) + ((0.00576799829f * fTemp22) + ((0.00537125766f * fTemp455) + ((0.00564592425f * fTemp451) + ((0.00610370189f * fTemp172) + ((0.00662251655f * fTemp351) + ((0.00656147953f * fTemp146) + ((0.00607318338f * fTemp364) + ((0.00427259132f * fTemp438) + ((0.00054933317f * fTemp26) + ((9.15555283e-05f * fTemp431) + ((0.00219733268f * fTemp161) + ((0.00140385143f * fTemp115) + ((0.00561540574f * fTemp152) + ((0.00585955381f * fTemp121) + ((0.00592059083f * fTemp150) + ((0.00570696127f * fTemp344) + ((0.00540177617f * fTemp120) + ((0.00448622089f * fTemp148) + ((0.00405896176f * fTemp145) + ((0.00338755455f * fTemp410) + ((0.00317392498f * fTemp376) + ((0.00363170262f * fTemp355) + ((0.00378429517f * fTemp142) + ((0.00131229591f * fTemp396) + ((0.00103762932f * fTemp529) + ((0.00106814783f * fTemp372) + ((0.00122074038f * fTemp354) + ((0.00213629566f * fTemp124) + ((0.00357066561f * fTemp341) + ((0.000823999755f * fTemp513) + (((0.008087405f * fTemp357) + ((0.00445570238f * fTemp397) + ((0.000366222113f * fTemp448) + ((0.00280770287f * fTemp449) + ((0.00503555406f * fTemp395) + ((0.00555436872f * fTemp495) + ((0.00408948027f * fTemp369) + ((0.00314340647f * fTemp203) + ((0.00430310983f * fTemp285) + ((0.00384533219f * fTemp289) + ((0.000488296151f * fTemp296) + ((0.00491348002f * fTemp430) + ((0.0104983672f * fTemp297) + ((0.0136112552f * fTemp298) + ((0.0105899228f * fTemp299) + ((0.00170903653f * fTemp302) + ((0.0217291787f * fTemp309) + ((0.0242316965f * fTemp310) + ((0.0204168838f * fTemp311) + ((0.0106509598f * fTemp312) + ((0.0608233884f * fTemp314) + ((0.0500503555f * fTemp315) + ((0.0384533219f * fTemp318) + ((0.048341319f * fTemp319) + ((0.0612201318f * fTemp320) + ((0.061281167f * fTemp321) + ((0.0544450209f * fTemp322) + ((0.0508133173f * fTemp135) + ((0.109317303f * fTemp323) + ((0.0952177495f * fTemp324) + ((0.0290231034f * fTemp325) + ((0.00268562883f * fTemp75) + ((0.0289010294f * fTemp81) + ((0.0616168715f * fTemp83) + ((0.0164189581f * fTemp84) + ((0.665944397f * fTemp328) + (fTemp329 + ((0.785882115f * fTemp331) + ((0.369182408f * fTemp332) + ((0.00167851802f * (fTemp231 + (fTemp113 + fTemp427))) + ((0.00265511032f * (fTemp101 + fTemp114)) + ((0.0035401471f * (fTemp106 + (fTemp428 + fTemp472))) + ((0.00332651753f * (fTemp337 + (fTemp463 + fTemp496))) + ((0.00201422162f * (fTemp365 + fTemp389)) + ((0.00173955504f * (fTemp371 - fTemp474)) + ((0.001617481f * (fTemp118 + fTemp140)) + ((0.00177007355f * (fTemp374 + (fTemp390 + fTemp452))) + ((0.00228888821f * fTemp786) + ((0.00100711081f * (fTemp375 + (fTemp19 + (fTemp278 - fTemp486)))) + ((0.00115970336f * (fTemp394 + fTemp403)) + ((0.00119022187f * (fTemp127 + (fTemp130 + (fTemp379 + fTemp413)))) + ((0.00149540696f * (fTemp409 + fTemp498)) + ((0.00180059206f * (fTemp136 + fTemp18)) + ((0.00207525864f * (fTemp139 - fTemp398)) + ((0.00335703604f * (fTemp340 + (fTemp179 + (fTemp482 + (fTemp232 - fTemp226))))) + ((0.00396740623f * (fTemp108 + fTemp480)) + ((0.0058290353f * (fTemp100 + fTemp122)) + ((0.00512710959f * (fTemp132 + fTemp147)) + ((0.003234962f * (fTemp155 + (((fTemp400 - fTemp225) - fTemp205) - fTemp93))) + ((0.00231940672f * (fTemp382 + fTemp342)) + ((0.00277718436f * (fTemp97 + fTemp459)) + ((0.000152592547f * (fTemp373 - fTemp27)) + ((0.00183111057f * (fTemp434 + (fTemp359 + fTemp501))) + ((0.00543229468f * (fTemp170 + (fTemp167 + fTemp211))) + ((0.006469924f * (fTemp443 + fTemp446)) + ((0.000213629566f * (fTemp445 - fTemp187)) + ((0.00189214759f * (fTemp191 + fTemp418)) + ((0.0113528855f * (fTemp432 + fTemp308)) + ((0.00732444227f * (fTemp228 + (fTemp196 + fTemp61))) + ((0.00488296151f * (fTemp414 + (fTemp335 + fTemp392))) + ((0.00360118411f * (fTemp14 + (fTemp358 + fTemp461))) + ((0.00375377666f * (fTemp233 - fTemp202)) + ((0.00274666585f * (fTemp437 - fTemp456)) + ((0.000457777642f * (fTemp164 + (fTemp175 - fTemp350))) + ((0.00158696249f * (fTemp419 - fTemp207)) + ((0.00381481368f * (fTemp193 + fTemp436)) + ((0.00857570115f * (fTemp209 + fTemp493)) + ((0.00958281197f * (fTemp104 + fTemp287)) + ((((((0.108554341f * (fTemp82 - fTemp59)) + (0.027741326f * (fTemp509 - fTemp485))) + (0.00750755332f * (fTemp288 + fTemp301))) + (0.00894192327f * (fTemp286 + fTemp300))) + (0.0022583697f * (fTemp508 - fTemp239))) + (0.0111697745f * (fTemp158 + fTemp316))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000762962736f * fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0863673836f * fTemp402) + ((0.0522476882f * fTemp218) + ((0.0866115317f * fTemp3) + ((0.0148319956f * fTemp4) + ((0.0872829407f * fTemp5) + ((0.0446790978f * fTemp6) + ((0.116794333f * fTemp7) + ((0.0120242927f * fTemp222) + ((0.00967436749f * fTemp223) + ((0.000396740623f * fTemp96) + ((0.0061342204f * fTemp377) + ((0.0141300699f * fTemp171) + ((0.0158391073f * fTemp160) + ((0.00939970091f * fTemp380) + ((0.00695822015f * fTemp208) + ((0.00915555283f * fTemp467) + ((0.00909451582f * fTemp110) + ((0.00848414563f * fTemp439) + ((0.00820947904f * fTemp217) + ((0.00845362712f * fTemp356) + ((0.000915555283f * fTemp8) + ((6.10370189e-05f * fTemp178) + ((0.00424207281f * fTemp126) + ((0.00463881344f * fTemp367) + ((0.00283822138f * fTemp227) + ((0.000610370189f * fTemp201) + ((0.00692770164f * fTemp521) + ((0.00650044251f * fTemp90) + (fTemp756 + ((0.000183111057f * fTemp162) + ((0.000244148076f * fTemp422) + ((0.00479140598f * fTemp235) + ((0.00247199927f * fTemp240) + ((0.00589007232f * fTemp242) + ((0.0077517014f * fTemp243) + ((0.0105288858f * fTemp416) + ((0.0100405896f * fTemp244) + ((0.011444441f * fTemp487) + ((0.0115665151f * fTemp516) + (fTemp787 + ((0.00994903408f * fTemp386) + ((0.00811792351f * fTemp423) + (fTemp596 + ((0.000274666585f * fTemp174) + ((0.00271614734f * fTemp249) + ((0.00497451704f * fTemp250) + ((0.00686666463f * fTemp251) + ((0.00784325693f * fTemp252) + ((0.00766014587f * fTemp401) + ((0.00680562761f * fTemp255) + ((0.00598162785f * fTemp256) + ((0.00326548051f * fTemp263) + ((0.00689718314f * fTemp265) + ((0.00906399731f * fTemp429) + ((0.00866725668f * fTemp180) + ((0.00152592547f * fTemp269) + ((0.000305185094f * fTemp385) + ((0.00253303628f * fTemp370) + ((0.00454725791f * fTemp30) + ((0.0054933317f * fTemp31) + ((0.0148930326f * fTemp273) + ((0.0153508103f * fTemp274) + ((0.0137943663f * fTemp169) + ((0.00787377544f * fTemp33) + ((0.00210577715f * fTemp275) + ((0.00057985168f * fTemp488) + ((0.00875881221f * fTemp279) + ((0.0118717002f * fTemp280) + ((0.00567644276f * fTemp215) + ((0.0042115543f * fTemp282) + ((0.0071108127f * fTemp510) + ((0.00558488723f * fTemp511) + ((0.00640888698f * fTemp291) + ((0.00955229346f * fTemp292) + ((0.0133976256f * fTemp293) + ((0.018097477f * fTemp294) + ((0.0217902157f * fTemp484) + ((0.022705771f * fTemp34) + ((0.024506364f * fTemp441) + ((0.0280770287f * fTemp479) + ((0.0191656239f * fTemp36) + (fTemp757 + ((0.00860621966f * fTemp38) + ((0.0124820704f * fTemp214) + ((0.0197759941f * fTemp43) + ((0.0234992523f * fTemp45) + ((0.0225531794f * fTemp46) + ((0.0215765871f * fTemp47) + ((0.0195013285f * fTemp48) + ((0.015991699f * fTemp49) + ((0.0254829563f * fTemp51) + ((0.0360423587f * fTemp52) + ((0.0385448784f * fTemp53) + ((0.0276497696f * fTemp159) + ((0.021332439f * fTemp303) + ((0.0200201422f * fTemp304) + ((0.0313730277f * fTemp306) + ((0.0477004312f * fTemp307) + ((0.0554216132f * fTemp54) + ((0.0504165776f * fTemp55) + ((0.0424817652f * fTemp56) + ((0.0318613239f * fTemp57) + ((0.0218817722f * fTemp144) + ((0.0416577645f * fTemp313) + ((0.0766624957f * fTemp212) + ((0.102572709f * fTemp58) + ((0.0744956806f * fTemp60) + ((0.0226752535f * fTemp199) + ((0.093752861f * fTemp63) + ((0.0918607116f * fTemp64) + ((0.0896023437f * fTemp65) + ((0.0881069377f * fTemp66) + ((0.056184575f * fTemp67) + ((0.0129093295f * fTemp68) + ((0.0508743562f * fTemp69) + ((0.0775475353f * fTemp70) + ((0.0733359754f * fTemp71) + ((0.115665153f * fTemp326) + ((0.135074928f * fTemp73) + ((0.0746787935f * fTemp74) + ((0.0304574724f * fTemp76) + ((0.0907010138f * fTemp507) + ((0.0747703463f * fTemp78) + ((0.0130314035f * fTemp79) + ((0.0160832554f * fTemp80) + ((0.136417732f * fTemp327) + ((0.303842276f * fTemp85) + ((0.446821511f * fTemp86) + ((0.379863888f * fTemp87) + ((((0.00216681417f * (((((fTemp94 + fTemp468) - fTemp230) - fTemp361) - fTemp360) - fTemp98)) + ((0.00311288796f * ((fTemp258 - fTemp469) - fTemp107)) + ((0.00344859157f * (((fTemp190 + fTemp435) - fTemp433) - fTemp336)) + ((0.00302133244f * (((fTemp504 - fTemp111) - fTemp163) - fTemp345)) + ((0.00241096225f * ((fTemp267 + fTemp520) - fTemp352)) + ((0.00186162908f * (fTemp262 - fTemp366)) + ((0.0019531846f * (((fTemp184 + fTemp259) - fTemp348) - fTemp346)) + ((0.00146488845f * ((fTemp206 + fTemp526) - fTemp112)) + ((0.0012817774f * ((fTemp261 - fTemp131) - fTemp125)) + ((0.00134281442f * ((fTemp185 + fTemp260) - fTemp405)) + ((0.00143436994f * (fTemp268 - fTemp134)) + ((0.00164799951f * (fTemp29 - fTemp408)) + ((0.00244148076f * (fTemp238 - fTemp393)) + ((0.00292977691f * (((fTemp349 + fTemp213) - fTemp157) - fTemp102)) + ((0.00366222113f * (((fTemp753 - fTemp454) - fTemp156) - fTemp119)) + ((0.00399792474f * ((fTemp123 - fTemp154) - fTemp99)) + ((0.00393688772f * ((fTemp188 - fTemp426) - fTemp338)) + ((0.00372325815f * (fTemp502 - fTemp417)) + ((0.00494399853f * (fTemp499 - fTemp109)) + ((0.00433362834f * ((fTemp500 + fTemp506) - fTemp420)) + ((0.0019226661f * ((fTemp284 - fTemp149) - fTemp89)) + ((0.000976592302f * ((fTemp494 + fTemp277) - fTemp425)) + ((0.00112918485f * (fTemp290 - fTemp24)) + ((0.0028992584f * (fTemp41 - fTemp166)) + ((0.00329599902f * (((fTemp186 - fTemp141) - fTemp13) - fTemp384)) + ((0.00552385021f * ((fTemp42 - fTemp387) - fTemp23)) + ((0.00619525742f * (fTemp465 - fTemp177)) + ((0.004852443f * (fTemp492 - fTemp151)) + ((0.0057985168f * (fTemp189 - fTemp476)) + ((0.00347911008f * (fTemp17 - fTemp415)) + ((0.000640888698f * fTemp788) + ((0.00457777642f * ((fTemp440 - fTemp181) - fTemp195)) + ((0.00961333048f * (fTemp477 - fTemp12)) + ((0.00946073793f * (fTemp412 - fTemp153)) + ((0.00842310861f * (fTemp789 - fTemp197)) + ((0.000854518265f * (fTemp248 - fTemp483)) + ((0.00415051728f * (fTemp464 - fTemp490)) + ((0.00473036896f * (fTemp103 + fTemp257)) + ((0.00137333293f * (fTemp462 + fTemp105)) + ((0.000518814661f * (fTemp406 - fTemp489)) + ((0.00531022064f * (fTemp453 + fTemp39)) + ((0.00759910885f * (fTemp343 + fTemp362)) + ((0.0131534776f * (fTemp272 - fTemp466)) + ((0.00418103579f * (fTemp241 - fTemp391)) + ((0.00735496078f * (fTemp404 - fTemp460)) + ((0.00756859034f * ((fTemp253 + (fTemp254 + fTemp95)) - fTemp224)) + ((0.00625629444f * fTemp790) + ((0.00305185094f * (fTemp237 - fTemp234)) + ((0.00460829493f * (fTemp236 + (fTemp457 + fTemp471))) + ((0.0104068117f * (fTemp143 + (fTemp503 + fTemp295))) + ((0.0102847377f * (fTemp470 + fTemp246)) + ((0.0109256264f * (fTemp247 + fTemp281)) + ((0.00527970213f * (fTemp264 + fTemp505)) + (((((0.0826441273f * (fTemp62 + fTemp77)) + (0.0237128828f * (fTemp305 + fTemp72))) + (0.0238349568f * (fTemp35 + fTemp44))) + (0.0107119968f * (fTemp32 + fTemp50))) + (0.0025940733f * (fTemp28 + fTemp40)))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00125125889f * (((fTemp20 + fTemp276) - fTemp399) - fTemp334))) + (0.000946073793f * (fTemp271 - fTemp333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.146763518f * fTemp0) + ((0.887264609f * fTemp1) + ((0.192724392f * fTemp2) + ((0.032654807f * fTemp220) + ((0.00790429395f * fTemp4) + ((0.00152592547f * fTemp91) + ((0.00183111057f * fTemp138) + ((0.00170903653f * fTemp489) + ((0.00122074038f * fTemp116) + (fTemp562 + ((0.00411999878f * fTemp483) + ((0.00350962859f * fTemp452) + ((0.00262459181f * fTemp418) + ((0.0022583697f * fTemp442) + ((0.00228888821f * fTemp202) + ((0.00268562883f * fTemp93) + ((0.00311288796f * fTemp201) + ((0.00338755455f * fTemp407) + ((0.00390636921f * fTemp424) + ((0.00482192449f * fTemp15) + ((0.00408948027f * fTemp469) + ((0.00253303628f * fTemp16) + ((0.00436414685f * fTemp230) + ((0.00292977691f * fTemp191) + ((0.00424207281f * fTemp277) + ((0.00317392498f * fTemp278) + ((0.0228583645f * fTemp299) + ((0.0295113996f * fTemp300) + ((0.00131229591f * fTemp301) + ((0.0314340666f * fTemp52) + ((0.0198370311f * fTemp53) + ((0.0163884405f * fTemp508) + ((0.00933866389f * fTemp308) + ((0.00402844325f * fTemp309) + ((0.0125431074f * fTemp509) + ((0.00384533219f * fTemp310) + ((0.0195013285f * fTemp199) + ((0.00396740623f * fTemp316) + ((0.00286873989f * fTemp318) + ((0.0266426597f * fTemp319) + ((0.0479445793f * fTemp320) + ((0.00302133244f * fTemp71) + ((0.0529801324f * fTemp72) + ((0.024323253f * fTemp135) + ((0.0209051799f * fTemp326) + ((0.0137028107f * fTemp78) + ((0.0292977691f * fTemp79) + ((0.0684530139f * fTemp82) + ((0.32779932f * fTemp86) + (fTemp87 + ((0.402447581f * fTemp328) + ((0.187688828f * fTemp329) + ((0.226386309f * fTemp331) + ((0.231604964f * fTemp332) + ((0.000213629566f * (fTemp231 + (((fTemp376 + ((fTemp496 + fTemp495) - fTemp410)) - fTemp130) - fTemp396))) + ((0.00189214759f * (fTemp107 + fTemp336)) + ((0.000885036774f * (fTemp114 + (fTemp383 + (fTemp121 + (fTemp208 + (fTemp225 + (fTemp200 + (fTemp491 + fTemp248)))))))) + ((0.000823999755f * (fTemp352 + (fTemp428 + fTemp391))) + ((0.00057985168f * (fTemp360 + (fTemp346 + (fTemp353 + ((fTemp355 + (((fTemp377 + (fTemp415 + fTemp233)) - fTemp164) - fTemp155)) - fTemp394))))) + ((0.000762962736f * (fTemp371 + ((fTemp185 + (fTemp454 + ((fTemp184 + fTemp490) - fTemp178))) - fTemp134))) + ((0.0012817774f * (fTemp113 + (fTemp142 + (fTemp446 + (fTemp149 + fTemp498))))) + ((0.00054933317f * (fTemp389 + (fTemp177 + ((fTemp181 + (fTemp216 - fTemp92)) - fTemp474)))) + ((0.000183111057f * (fTemp399 + ((fTemp150 + ((fTemp455 + ((fTemp448 - fTemp462) - fTemp189)) - fTemp140)) - fTemp408))) + ((9.15555283e-05f * (fTemp403 + (fTemp136 - fTemp122))) + ((0.00198370311f * (fTemp340 + fTemp397)) + ((0.00186162908f * (fTemp119 + (fTemp228 + (fTemp10 + (fTemp160 + (fTemp473 + fTemp174)))))) + ((0.000396740623f * (fTemp338 + (((fTemp23 + (fTemp413 - fTemp387)) - fTemp100) - fTemp344))) + ((6.10370189e-05f * ((((fTemp257 - fTemp423) - fTemp161) - fTemp427) - fTemp145)) + ((3.05185094e-05f * ((fTemp115 + (fTemp167 + (((fTemp203 + fTemp253) - fTemp173) - fTemp456))) - fTemp120)) + ((0.000976592302f * (fTemp152 + (fTemp156 + (fTemp515 - fTemp350)))) + ((0.000854518265f * (fTemp404 - fTemp89)) + ((0.00119022187f * (fTemp434 + (fTemp458 + fTemp439))) + ((0.000122074038f * (fTemp170 + (fTemp461 + fTemp516))) + (((0.00143436994f * (fTemp351 + (fTemp229 + (fTemp378 + (fTemp430 - fTemp255))))) + ((0.00103762932f * (fTemp172 + fTemp105)) + ((0.00100711081f * (fTemp359 + fTemp154)) + ((0.00347911008f * (fTemp187 + fTemp453)) + ((0.000671407208f * ((fTemp400 + fTemp445) - fTemp521)) + ((0.00256355479f * (fTemp12 + fTemp176)) + ((0.0025940733f * (fTemp168 + fTemp380)) + ((0.0028992584f * (fTemp192 + (fTemp60 - fTemp242))) + ((0.00366222113f * (fTemp153 + fTemp381)) + ((0.00213629566f * (fTemp398 + (fTemp183 + fTemp348))) + ((0.00274666585f * fTemp783) + ((0.00271614734f * (fTemp157 + fTemp198)) + ((0.00250251777f * (fTemp103 + fTemp276)) + ((0.00231940672f * (fTemp388 + fTemp129)) + ((0.00204474013f * (fTemp363 + (fTemp298 - fTemp492))) + ((0.00326548051f * (fTemp343 + fTemp209)) + ((0.00439466536f * (fTemp450 + fTemp83)) + ((0.00781273842f * (fTemp296 - fTemp293)) + (0.00265511032f * fTemp752))))))))))))))))))) + (0.000366222113f * (fTemp124 + (fTemp99 + (fTemp163 + (fTemp24 + (fTemp364 + fTemp447)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0751365721f * fTemp402) + ((0.0482497625f * fTemp218) + ((0.0634479821f * fTemp3) + ((0.0142826624f * fTemp219) + ((0.0651570186f * fTemp5) + ((0.0496536158f * fTemp6) + ((0.00241096225f * fTemp221) + ((0.0527970232f * fTemp7) + ((0.0379345082f * fTemp222) + ((0.001617481f * fTemp238) + ((0.00299081393f * fTemp243) + ((0.00180059206f * fTemp180) + ((0.00469985045f * fTemp268) + ((0.00534073915f * fTemp269) + ((0.00543229468f * fTemp520) + ((0.00668355357f * fTemp28) + ((0.0083925901f * fTemp29) + ((0.0103457747f * fTemp385) + ((0.0104678487f * fTemp270) + ((0.00772118289f * fTemp271) + ((0.00610370189f * fTemp370) + ((0.00650044251f * fTemp186) + ((0.00888088625f * fTemp188) + ((0.0090334788f * fTemp30) + ((0.00683614612f * fTemp31) + ((0.0045167394f * fTemp95) + ((0.00476088747f * fTemp272) + ((0.00531022064f * fTemp273) + ((0.00527970213f * fTemp274) + ((0.00558488723f * fTemp471) + ((0.00415051728f * fTemp279) + ((0.00448622089f * fTemp215) + ((0.00491348002f * fTemp282) + ((0.00497451704f * fTemp477) + ((0.0051576281f * fTemp510) + ((0.00433362834f * fTemp287) + ((0.00830103457f * fTemp288) + ((0.00900296029f * fTemp289) + ((0.00607318338f * fTemp290) + ((0.00561540574f * fTemp505) + ((0.013061922f * fTemp511) + ((0.016296884f * fTemp291) + ((0.0218207352f * fTemp484) + ((0.0241096225f * fTemp34) + ((0.0175481439f * fTemp441) + ((0.0114139225f * fTemp485) + (fTemp780 + ((0.0239875484f * fTemp35) + ((0.0235297717f * fTemp36) + ((0.0141911069f * fTemp37) + ((0.00720236823f * fTemp38) + ((0.0153813288f * fTemp39) + ((0.0246284381f * fTemp40) + ((0.025818659f * fTemp41) + ((0.0203863643f * fTemp42) + ((0.0173650328f * fTemp214) + ((0.0200811792f * fTemp43) + ((0.0200506616f * fTemp44) + ((0.021149328f * fTemp45) + (fTemp784 + ((0.016235847f * fTemp48) + ((0.0185552537f * fTemp49) + ((0.0258491784f * fTemp302) + ((0.0335398428f * fTemp50) + ((0.014557329f * fTemp159) + ((0.0297860652f * fTemp303) + ((0.0244758446f * fTemp304) + ((0.0255134739f * fTemp305) + ((0.030854214f * fTemp306) + ((0.0254829563f * fTemp307) + ((0.0124515519f * fTemp54) + ((0.00915555283f * fTemp57) + ((0.004852443f * fTemp144) + ((0.0127567369f * fTemp311) + (fTemp785 + ((0.0473647267f * fTemp313) + ((0.0548722818f * fTemp212) + ((0.0581377596f * fTemp58) + ((0.0290231034f * fTemp59) + ((0.0315866582f * fTemp314) + ((0.0570085756f * fTemp315) + ((0.0587176122f * fTemp61) + ((0.0437025055f * fTemp62) + ((0.0619830936f * fTemp63) + ((0.0842921212f * fTemp64) + ((0.0351573229f * fTemp65) + ((0.0248420667f * fTemp66) + ((0.034272287f * fTemp322) + ((0.0154423658f * fTemp68) + ((0.0504165776f * fTemp69) + ((0.0814844221f * fTemp70) + ((0.018097477f * fTemp323) + ((0.0690633878f * fTemp324) + ((0.10400708f * fTemp325) + ((0.0408032462f * fTemp73) + ((0.119602039f * fTemp74) + ((0.0608233884f * fTemp75) + ((0.0700094625f * fTemp76) + ((0.131168559f * fTemp77) + ((0.0756859034f * fTemp507) + ((0.0454115421f * fTemp80) + ((0.149388105f * fTemp81) + ((0.396069229f * fTemp84) + ((0.779168069f * fTemp327) + ((0.456190675f * fTemp85) + (((0.000640888698f * ((((fTemp90 + (((fTemp502 + fTemp501) - fTemp449) - fTemp472)) - fTemp151) - fTemp384) - fTemp333)) + ((0.000274666585f * (((fTemp417 + (((fTemp97 + fTemp256) - fTemp109) - fTemp148)) - fTemp365) - fTemp334)) + ((0.000701925717f * (((fTemp373 + (fTemp431 + (fTemp259 + fTemp262))) - fTemp108) - fTemp98)) + ((0.00140385143f * (((((fTemp280 + fTemp51) - fTemp460) - fTemp179) - fTemp341) - fTemp101)) + ((0.000732444227f * ((fTemp405 + fTemp240) - fTemp337)) + ((0.000793481246f * (((fTemp425 + (((fTemp440 + fTemp500) - fTemp395) - fTemp493)) - fTemp372) - fTemp345)) + ((0.00146488845f * ((fTemp419 - fTemp146) - fTemp118)) + ((0.00112918485f * (((((fTemp260 + fTemp32) - fTemp436) - fTemp133) - fTemp17) - fTemp374)) + ((0.000152592547f * (((fTemp529 + (fTemp420 + (fTemp258 - fTemp416))) - fTemp112) - fTemp390)) + ((0.000518814661f * ((fTemp409 + (fTemp162 + (fTemp26 + (fTemp234 + (fTemp250 - fTemp249))))) - fTemp354)) + ((0.000488296151f * ((fTemp131 + (fTemp27 + fTemp123)) - fTemp375)) + ((0.000610370189f * (fTemp125 + (((fTemp111 + (fTemp143 + fTemp285)) - fTemp147) - fTemp451))) + ((0.000427259132f * ((((fTemp465 - fTemp392) - fTemp165) - fTemp132) - fTemp139)) + ((0.00158696249f * (((((fTemp236 - fTemp226) - fTemp435) - fTemp379) - fTemp128) - fTemp102)) + ((0.000457777642f * (fTemp382 + ((fTemp369 + fTemp321) - fTemp438))) + ((0.00137333293f * ((((fTemp246 + fTemp284) - fTemp207) - fTemp195) - fTemp426)) + ((0.000305185094f * ((((fTemp470 + fTemp33) - fTemp211) - fTemp127) - fTemp366)) + ((0.00106814783f * (((fTemp342 + ((fTemp94 + (fTemp487 + (fTemp261 - fTemp175))) - fTemp358)) - fTemp443) - fTemp166)) + ((0.000946073793f * ((((fTemp244 + fTemp263) - fTemp406) - fTemp18) - fTemp22)) + ((0.00109866634f * (fTemp182 - fTemp141)) + ((0.00210577715f * (((((((fTemp362 - fTemp526) - fTemp357) - fTemp224) - fTemp104) - fTemp356) - fTemp205) - fTemp19)) + ((0.00296029542f * (fTemp497 - fTemp20)) + ((0.00332651753f * (fTemp266 - fTemp459)) + ((0.00216681417f * (((fTemp252 - fTemp196) - fTemp13) - fTemp432)) + ((0.00277718436f * ((fTemp286 - fTemp126) - fTemp14)) + ((0.00125125889f * (((fTemp239 - fTemp158) - fTemp110) - fTemp433)) + ((0.00177007355f * ((fTemp642 - fTemp137) - fTemp476)) + ((0.00244148076f * ((fTemp429 - fTemp480) - fTemp478)) + ((0.0035401471f * (fTemp506 - fTemp197)) + ((0.00344859157f * (fTemp169 - fTemp411)) + ((0.00335703604f * (fTemp55 - fTemp347)) + ((0.00234992523f * (fTemp265 - fTemp437)) + ((0.00320444349f * (fTemp67 - fTemp227)) + ((0.0019226661f * ((fTemp552 - fTemp339) - fTemp464)) + ((0.00167851802f * (fTemp422 - fTemp367)) + ((0.00134281442f * (fTemp206 - fTemp217)) + ((0.00115970336f * (((fTemp237 + (fTemp504 + fTemp275)) - fTemp190) - fTemp467)) + ((0.00149540696f * (fTemp281 - fTemp193)) + ((0.00219733268f * ((fTemp235 + (fTemp241 + fTemp412)) - fTemp466)) + ((0.00201422162f * ((fTemp264 - fTemp444) - fTemp475)) + ((0.000335703604f * (fTemp96 + (fTemp457 - fTemp386))) + ((0.000244148076f * (((fTemp213 - fTemp494) - fTemp368) - fTemp335)) + ((0.00173955504f * (fTemp247 - fTemp194)) + ((0.00375377666f * (fTemp267 + fTemp503)) + (((((0.00671407208f * (fTemp56 - fTemp223)) + (0.0125736259f * (fTemp294 + fTemp47))) + (0.0118411817f * (fTemp292 + fTemp295))) + (0.00643940549f * (fTemp468 + fTemp297))) + (0.00372325815f * (fTemp488 + fTemp283))))))))))))))))))))))))))))))))))))))))))))))) + (0.000915555283f * ((((((((((((fTemp401 - fTemp232) - fTemp204) - fTemp514) - fTemp421) - fTemp349) - fTemp171) - fTemp463) - fTemp393) - fTemp361) - fTemp106) - fTemp513) - fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow3 ? (iSlow20 ? (iSlow28 ? (iSlow32 ? (iSlow34 ? (((0.0526139103f * fTemp0) + ((0.0372020639f * fTemp219) + ((0.00854518265f * fTemp220) + ((0.0191351064f * fTemp6) + ((0.0318002887f * fTemp222) + ((0.037446212f * fTemp223) + ((0.00457777642f * fTemp204) + ((0.00662251655f * fTemp447) + ((0.00650044251f * fTemp493) + ((0.00244148076f * fTemp224) + ((0.000671407208f * fTemp368) + ((0.00268562883f * fTemp387) + ((0.0122379223f * fTemp141) + ((0.00238044374f * fTemp392) + ((0.00521866512f * fTemp391) + ((0.0138248848f * fTemp147) + ((0.0181890316f * fTemp211) + ((0.0216071047f * fTemp165) + ((0.0215460677f * fTemp490) + ((0.0190435499f * fTemp421) + ((0.0176091809f * fTemp413) + ((0.0190130323f * fTemp96) + ((0.0221259203f * fTemp474) + ((0.0221564379f * fTemp456) + ((0.0157475509f * fTemp225) + ((0.0412915424f * fTemp378) + ((0.0908536017f * fTemp91) + ((0.113040559f * fTemp475) + ((0.0861232355f * fTemp466) + ((0.0202642903f * fTemp138) + ((0.0387585089f * fTemp158) + ((0.0775780529f * fTemp104) + ((0.0852076784f * fTemp381) + ((0.0660725757f * fTemp450) + ((0.0425122827f * fTemp209) + ((0.0286568813f * fTemp193) + ((0.024445327f * fTemp184) + ((0.0200506616f * fTemp208) + ((0.0051576281f * fTemp467) + ((0.0158085879f * fTemp11) + ((0.0233466607f * fTemp363) + ((0.019348735f * fTemp339) + ((0.01126133f * fTemp388) + ((0.00671407208f * fTemp489) + ((0.00619525742f * fTemp462) + ((0.011383404f * fTemp206) + ((0.0207220688f * fTemp178) + ((0.0248725861f * fTemp116) + ((0.0253913999f * fTemp210) + ((0.0229499191f * fTemp137) + ((0.0148625141f * fTemp207) + ((0.0182195511f * fTemp348) + ((0.0296334736f * fTemp442) + ((0.0311899167f * fTemp157) + ((0.021088291f * fTemp482) + ((0.00909451582f * fTemp192) + ((0.0161442924f * fTemp12) + ((0.012878811f * fTemp478) + ((0.000213629566f * fTemp476) + (fTemp777 + ((0.00198370311f * fTemp90) + ((0.00399792474f * fTemp191) + ((0.00363170262f * fTemp149) + ((0.00534073915f * fTemp364) + ((0.00555436872f * fTemp438) + (fTemp744 + ((0.000823999755f * fTemp383) + ((0.000946073793f * fTemp353) + ((6.10370189e-05f * fTemp333) + ((0.00314340647f * fTemp232) + ((0.00158696249f * fTemp498) + ((0.0131229591f * fTemp369) + ((0.00906399731f * fTemp111) + ((0.0071108127f * fTemp233) + ((0.0108951079f * fTemp234) + ((0.00897244178f * fTemp419) + ((0.00756859034f * fTemp422) + ((0.0054933317f * fTemp499) + ((0.00601214636f * fTemp235) + ((0.00891140476f * fTemp500) + (fTemp584 + ((0.00946073793f * fTemp237) + ((0.0124210333f * fTemp240) + ((0.0103457747f * fTemp241) + ((0.00881984923f * fTemp242) + ((0.00762962736f * fTemp243) + ((0.00778221991f * fTemp412) + ((0.00900296029f * fTemp143) + ((0.0102237007f * fTemp416) + ((0.0135196997f * fTemp244) + ((0.0154423658f * fTemp247) + ((0.0151982177f * fTemp487) + ((0.0163884405f * fTemp216) + ((0.0177922919f * fTemp386) + ((0.0174871068f * fTemp465) + ((0.0143436994f * fTemp457) + ((0.0105288858f * fTemp491) + ((0.00537125766f * fTemp174) + ((0.0133671071f * fTemp248) + ((0.0142521439f * fTemp249) + ((0.00277718436f * fTemp252) + ((0.00119022187f * fTemp401) + ((0.00531022064f * fTemp259) + ((0.00573747978f * fTemp260) + ((0.00299081393f * fTemp261) + ((0.00283822138f * fTemp263) + ((0.0104373302f * fTemp265) + ((0.0118717002f * fTemp497) + ((0.0116275521f * fTemp429) + ((0.0100100711f * fTemp180) + ((0.00827051606f * fTemp362) + ((0.0183721427f * fTemp268) + ((0.0199896246f * fTemp269) + ((0.0197454765f * fTemp520) + ((0.017975403f * fTemp28) + ((0.0160222184f * fTemp29) + ((0.0165105145f * fTemp270) + ((0.0184942167f * fTemp271) + (fTemp778 + ((0.00164799951f * fTemp188) + ((0.00357066561f * fTemp274) + ((0.00292977691f * fTemp275) + ((0.0058290353f * fTemp276) + ((0.00231940672f * fTemp277) + ((0.011200293f * fTemp471) + ((0.0228888821f * fTemp468) + ((0.0343333222f * fTemp282) + ((0.034150213f * fTemp283) + ((0.0177007355f * fTemp477) + ((0.0206610318f * fTemp288) + (fTemp748 + ((0.0100711081f * fTemp292) + ((0.00985747855f * fTemp293) + ((0.00320444349f * fTemp36) + ((0.00167851802f * fTemp37) + ((0.0215765871f * fTemp302) + ((0.0332041383f * fTemp50) + ((0.0522782058f * fTemp303) + ((0.0830713809f * fTemp304) + ((0.0519730225f * fTemp305) + ((0.0318613239f * fTemp56) + ((0.0468153954f * fTemp144) + ((0.0262764376f * fTemp508) + ((0.0197149571f * fTemp308) + ((0.0188909583f * fTemp309) + ((0.0231025126f * fTemp509) + ((0.0253608823f * fTemp311) + ((0.0263679922f * fTemp312) + ((0.0292367321f * fTemp313) + ((0.011322367f * fTemp212) + ((0.0530716889f * fTemp314) + ((0.0945158228f * fTemp315) + ((0.0788598284f * fTemp61) + ((0.0237434004f * fTemp318) + ((0.0301217698f * fTemp319) + ((0.00604266487f * fTemp322) + ((0.0460219122f * fTemp68) + ((0.0209662169f * fTemp69) + ((0.0927762687f * fTemp324) + ((0.120151371f * fTemp325) + ((0.0281991027f * fTemp76) + ((0.147038177f * fTemp84) + ((0.306253254f * fTemp327) + ((0.196600243f * fTemp85) + ((0.649433911f * fTemp329) + (fTemp331 + ((0.639912128f * fTemp332) + ((0.000152592547f * ((fTemp118 + fTemp473) - fTemp513)) + ((0.000274666585f * (fTemp334 + fTemp357)) + ((0.000244148076f * (fTemp231 - fTemp125)) + ((0.0019226661f * ((fTemp254 - fTemp344) - fTemp337)) + ((0.000793481246f * ((fTemp366 + (fTemp99 - fTemp407)) - fTemp114)) + ((0.00115970336f * (fTemp360 + fTemp10)) + ((0.00125125889f * (fTemp365 - fTemp340)) + ((0.00122074038f * ((fTemp410 + (fTemp432 + fTemp181)) - fTemp405)) + ((0.00173955504f * ((fTemp258 - fTemp120) - fTemp134)) + ((0.00234992523f * (fTemp404 - fTemp393)) + ((0.00204474013f * (fTemp148 + (fTemp51 - fTemp342))) + ((0.00793481246f * (fTemp215 - fTemp155)) + ((0.00106814783f * ((fTemp262 - fTemp351) - fTemp163)) + ((0.00054933317f * ((fTemp26 + fTemp460) - fTemp373)) + ((0.00445570238f * (fTemp166 + fTemp443)) + ((0.00567644276f * (fTemp170 - fTemp182)) + ((0.00592059083f * (fTemp488 - fTemp172)) + ((0.0149845881f * (fTemp267 - fTemp22)) + ((0.0123294778f * ((fTemp406 - fTemp483) - fTemp122)) + ((0.0061342204f * (fTemp92 - fTemp164)) + ((0.00256355479f * (fTemp294 - fTemp228)) + ((0.00585955381f * (fTemp440 - fTemp414)) + ((0.0120853297f * (fTemp239 - fTemp133)) + ((0.00723288674f * (fTemp196 + fTemp526)) + ((0.0155034028f * (fTemp168 + fTemp516)) + ((0.00753807183f * (fTemp15 + (fTemp236 - fTemp400))) + ((0.025818659f * (fTemp198 + fTemp310)) + ((0.00799584948f * (fTemp480 + fTemp266)) + ((0.00366222113f * (fTemp418 + fTemp226)) + ((0.0187994018f * (fTemp423 - fTemp110)) + ((0.0453199856f * (fTemp57 - fTemp380)) + ((0.0114749596f * ((fTemp470 + fTemp186) - fTemp435)) + ((0.0118106632f * (fTemp514 + (fTemp494 + fTemp504))) + ((0.00961333048f * (fTemp200 + fTemp445)) + ((0.0107119968f * (fTemp415 + fTemp238)) + ((0.00701925717f * (fTemp495 + fTemp251)) + ((((0.0118411817f * (fTemp287 - fTemp5)) + (0.0108340709f * (fTemp506 + fTemp55))) + (0.0152592547f * (fTemp246 + fTemp385))) + (0.00698873866f * (fTemp94 + fTemp264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.764641225f * fTemp1) + ((0.0455030985f * fTemp2) + ((0.093752861f * fTemp402) + ((0.0667745024f * fTemp3) + ((0.0484328754f * fTemp4) + ((0.0169377737f * fTemp221) + ((0.0480361357f * fTemp7) + ((0.000427259132f * fTemp335) + ((0.0232856236f * fTemp190) + ((0.0277108066f * fTemp349) + ((0.0267036967f * fTemp105) + ((0.0239265114f * fTemp379) + ((0.0185247362f * fTemp444) + ((0.040742211f * fTemp358) + ((0.0571306497f * fTemp377) + ((0.0363170281f * fTemp171) + ((0.0283822138f * fTemp160) + ((0.0509964302f * fTemp129) + ((0.0170903653f * fTemp128) + ((0.0456251726f * fTemp439) + ((0.0641499087f * fTemp217) + ((0.0686056092f * fTemp356) + ((0.0591448732f * fTemp343) + ((0.0377513953f * fTemp453) + ((0.0165715516f * fTemp8) + ((0.0126346629f * fTemp126) + ((0.018097477f * fTemp103) + ((0.0159611814f * fTemp367) + ((0.0143131809f * fTemp227) + ((0.0140385143f * fTemp486) + ((0.00735496078f * fTemp452) + ((0.0137028107f * fTemp183) + ((0.0267647337f * fTemp398) + ((0.0326242857f * fTemp202) + ((0.033600878f * fTemp93) + ((0.0320139155f * fTemp201) + ((0.0284127332f * fTemp347) + ((0.0228583645f * fTemp411) + ((0.0168767367f * fTemp197) + ((0.00997955259f * fTemp153) + ((0.00692770164f * fTemp195) + ((0.014557329f * fTemp454) + (fTemp618 + ((0.0156865139f * fTemp433) + ((0.0141605884f * fTemp13) + ((0.0102542192f * fTemp14) + ((0.00201422162f * fTemp189) + ((0.000701925717f * fTemp18) + (fTemp779 + ((0.00802636798f * fTemp20) + ((0.00656147953f * fTemp185) + ((0.008087405f * fTemp359) + ((0.0103762932f * fTemp179) + ((0.0120242927f * fTemp151) + ((0.012817774f * fTemp177) + ((0.0135807367f * fTemp23) + ((0.0105594043f * fTemp167) + ((0.00680562761f * fTemp451) + ((0.00415051728f * fTemp446) + ((0.00137333293f * fTemp161) + ((0.00271614734f * fTemp140) + ((0.00683614612f * fTemp427) + ((0.00766014587f * fTemp382) + ((0.00732444227f * fTemp152) + ((0.00527970213f * fTemp121) + ((0.0028992584f * fTemp150) + ((0.0025940733f * fTemp408) + ((0.00222785119f * fTemp409) + ((0.000640888698f * fTemp354) + ((0.00152592547f * fTemp106) + ((0.000366222113f * fTemp107) + ((3.05185094e-05f * fTemp98) + ((0.00112918485f * fTemp397) + ((0.00436414685f * fTemp449) + ((0.00430310983f * fTemp203) + ((0.0131534776f * fTemp515) + ((0.00589007232f * fTemp436) + ((0.0107730338f * fTemp31) + ((0.0125125889f * fTemp95) + ((0.0115359966f * fTemp503) + ((0.00668355357f * fTemp272) + ((0.00811792351f * fTemp33) + ((0.003234962f * fTemp492) + ((0.00265511032f * fTemp281) + ((0.00750755332f * fTemp510) + ((0.024506364f * fTemp284) + ((0.022766808f * fTemp285) + ((0.00228888821f * fTemp290) + ((0.0172734763f * fTemp505) + ((0.0171819218f * fTemp511) + ((0.00637836847f * fTemp484) + ((0.0167851802f * fTemp34) + ((0.0249946602f * fTemp441) + ((0.025696585f * fTemp485) + (fTemp780 + ((0.00488296151f * fTemp35) + ((0.00814844202f * fTemp38) + ((0.0147099216f * fTemp39) + ((0.0104678487f * fTemp40) + ((0.00177007355f * fTemp42) + ((0.0111087374f * fTemp214) + ((0.0220954008f * fTemp43) + ((0.0272530299f * fTemp44) + ((0.0273751039f * fTemp45) + ((0.0191656239f * fTemp47) + ((0.0146488845f * fTemp48) + ((0.00689718314f * fTemp49) + ((0.000457777642f * fTemp295) + ((0.00836207159f * fTemp296) + ((0.00759910885f * fTemp430) + ((0.00350962859f * fTemp297) + ((0.00210577715f * fTemp298) + ((0.0188299213f * fTemp300) + ((0.00790429395f * fTemp301) + ((0.0422070995f * fTemp52) + ((0.05038606f * fTemp53) + ((0.0038758507f * fTemp306) + ((0.0285042878f * fTemp307) + ((0.0822473839f * fTemp59) + ((0.0973845646f * fTemp60) + ((0.0744346455f * fTemp199) + ((0.0363780633f * fTemp62) + ((0.0532242805f * fTemp63) + ((0.0376293212f * fTemp64) + ((0.004852443f * fTemp65) + ((0.0333872512f * fTemp66) + ((0.0617999807f * fTemp67) + ((0.00610370189f * fTemp316) + ((0.0202337727f * fTemp320) + ((0.021332439f * fTemp321) + ((0.0281075481f * fTemp70) + ((0.111117892f * fTemp71) + ((0.145542771f * fTemp72) + ((0.119083226f * fTemp135) + ((0.019531846f * fTemp323) + ((0.0943021923f * fTemp326) + ((0.145023957f * fTemp73) + ((0.12607196f * fTemp74) + ((0.0387279876f * fTemp75) + ((0.0262459181f * fTemp77) + (fTemp749 + ((0.0490432456f * fTemp78) + ((0.0657979101f * fTemp79) + ((0.0757469386f * fTemp80) + ((0.0889309347f * fTemp81) + ((0.0864284188f * fTemp82) + ((0.296609402f * fTemp86) + ((0.766228199f * fTemp87) + ((0.178502768f * fTemp328) + (((((0.000885036774f * (fTemp341 + (fTemp372 - fTemp24))) + ((0.00170903653f * fTemp781) + ((0.000396740623f * ((fTemp394 + (fTemp399 + (fTemp127 + (fTemp403 - fTemp428)))) - fTemp352)) + ((0.000854518265f * ((fTemp131 + ((fTemp229 + fTemp395) - fTemp338)) - fTemp346)) + ((0.00103762932f * ((fTemp213 - fTemp205) - fTemp124)) + ((0.000915555283f * ((fTemp119 + (((fTemp521 + fTemp255) - fTemp27) - fTemp376)) - fTemp361)) + ((0.000976592302f * (((fTemp156 - fTemp431) - fTemp355) - fTemp389)) + ((0.00100711081f * (fTemp375 - fTemp384)) + ((0.000732444227f * (fTemp529 - fTemp230)) + ((0.000335703604f * (fTemp396 + fTemp426)) + ((0.00057985168f * (fTemp130 - fTemp97)) + ((0.00296029542f * (fTemp136 + (fTemp139 + fTemp459))) + ((0.001617481f * (fTemp102 - fTemp350)) + ((0.000122074038f * (fTemp142 - fTemp89)) + ((0.000610370189f * ((fTemp169 - fTemp273) - fTemp108)) + ((0.00213629566f * ((fTemp278 - fTemp448) - fTemp417)) + ((0.00280770287f * (fTemp256 - fTemp145)) + ((0.00820947904f * (fTemp132 + (fTemp455 - fTemp469))) + ((0.00817896053f * (fTemp420 + fTemp159)) + ((0.00494399853f * (fTemp115 - fTemp16)) + ((9.15555283e-05f * (fTemp83 - fTemp162)) + ((0.0022583697f * (fTemp41 - fTemp146)) + ((0.0141911069f * (fTemp458 + fTemp54)) + ((0.00833155308f * (fTemp187 - fTemp154)) + ((0.0042115543f * (fTemp463 - fTemp437)) + ((0.00347911008f * (fTemp176 - fTemp123)) + ((0.0142216254f * (fTemp464 + fTemp58)) + ((0.00717184972f * (fTemp32 - fTemp173)) + ((0.00512710959f * fTemp782) + ((0.00180059206f * (fTemp280 - fTemp496)) + ((0.00625629444f * (fTemp30 - fTemp175)) + ((0.0115665151f * (fTemp299 - fTemp250)) + ((0.00332651753f * (fTemp291 - fTemp253)) + (((0.0223395489f * (fTemp46 - fTemp218)) + (0.00659199804f * (fTemp286 - fTemp279))) + (0.00189214759f * (fTemp257 + fTemp501)))))))))))))))))))))))))))))))))))) + (0.000488296151f * (fTemp336 + (((fTemp425 - fTemp17) - fTemp390) - fTemp374)))) + (0.000305185094f * (fTemp101 - fTemp371))) + (0.000183111057f * (fTemp88 + fTemp112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.17282632f * fTemp0) + ((0.120120853f * fTemp2) + ((0.0477309488f * fTemp219) + ((0.045716729f * fTemp221) + ((0.00564592425f * fTemp447) + ((0.00769066438f * fTemp173) + ((0.00778221991f * fTemp141) + ((0.00616473891f * fTemp154) + ((0.00735496078f * fTemp147) + ((0.00793481246f * fTemp490) + ((0.00885036774f * fTemp421) + ((0.00836207159f * fTemp413) + ((0.00628681295f * fTemp225) + ((0.00460829493f * fTemp226) + ((0.00445570238f * fTemp444) + ((0.00662251655f * fTemp473) + ((0.0153508103f * fTemp138) + ((0.0157170333f * fTemp358) + ((0.0141911069f * fTemp377) + ((0.0116885891f * fTemp381) + ((0.014618366f * fTemp450) + ((0.0169377737f * fTemp209) + ((0.019470809f * fTemp193) + ((0.0197149571f * fTemp184) + ((0.00112918485f * fTemp217) + ((0.000518814661f * fTemp343) + (fTemp764 + ((0.0154118473f * fTemp339) + ((0.0199285876f * fTemp388) + ((0.0213019196f * fTemp480) + ((0.0200506616f * fTemp489) + ((0.018097477f * fTemp462) + ((0.0154728843f * fTemp206) + ((0.0123294778f * fTemp178) + ((0.00979644153f * fTemp116) + ((0.00881984923f * fTemp210) + ((0.00946073793f * fTemp205) + ((0.00878933072f * fTemp464) + ((0.00894192327f * fTemp418) + ((0.0101931822f * fTemp348) + ((0.0110477004f * fTemp442) + ((0.0136417737f * fTemp437) + ((0.0125125889f * fTemp201) + ((0.00924710836f * fTemp411) + ((0.00943021942f * fTemp197) + ((0.0108951079f * fTemp153) + ((0.012878811f * fTemp192) + ((0.0140079958f * fTemp168) + ((0.015991699f * fTemp12) + ((0.0176091809f * fTemp478) + ((0.0172734763f * fTemp196) + ((0.0155644398f * fTemp476) + ((0.0139164403f * fTemp195) + ((0.00827051606f * fTemp13) + ((0.0150456252f * fTemp414) + ((0.0174565874f * fTemp228) + ((0.0184331797f * fTemp229) + ((0.0172429588f * fTemp432) + ((0.0135196997f * fTemp424) + ((0.00531022064f * fTemp469) + ((0.00738547929f * fTemp189) + ((0.00805688649f * fTemp521) + ((0.0119327372f * fTemp123) + ((0.013000885f * fTemp350) + ((0.0121768853f * fTemp342) + ((0.0101626636f * fTemp459) + ((0.00817896053f * fTemp191) + ((0.00439466536f * fTemp18) + ((0.00302133244f * fTemp20) + ((0.00503555406f * fTemp182) + ((0.0109256264f * fTemp151) + ((0.00973540451f * fTemp458) + ((0.00848414563f * fTemp172) + ((0.0100100711f * fTemp351) + ((0.00918607134f * fTemp443) + ((0.00814844202f * fTemp364) + ((0.00695822015f * fTemp170) + ((0.00573747978f * fTemp438) + ((0.00396740623f * fTemp431) + ((0.00592059083f * fTemp373) + ((0.00399792474f * fTemp156) + ((0.00280770287f * fTemp140) + ((0.00576799829f * fTemp420) + ((0.00567644276f * fTemp132) + ((0.00601214636f * fTemp152) + ((0.00671407208f * fTemp121) + ((0.00607318338f * fTemp100) + (fTemp699 + ((0.00708029419f * fTemp355) + ((0.0038758507f * fTemp139) + ((0.00433362834f * fTemp136) + ((0.00469985045f * fTemp409) + ((0.003234962f * fTemp405) + ((0.00341807306f * fTemp354) + ((0.00286873989f * fTemp112) + ((0.00268562883f * fTemp390) + ((0.00265511032f * fTemp383) + ((0.00262459181f * fTemp353) + ((0.00274666585f * fTemp352) + ((0.00228888821f * fTemp345) + ((0.00207525864f * fTemp337) + ((0.00177007355f * fTemp336) + ((0.00164799951f * fTemp107) + ((0.00173955504f * fTemp101) + ((0.00189214759f * fTemp98) + ((0.00155644398f * fTemp334) + ((0.00115970336f * fTemp513) + (((0.000885036774f * fTemp495) + ((0.000762962736f * fTemp491) + ((0.000610370189f * fTemp526) + ((0.000793481246f * fTemp30) + ((0.0125431074f * fTemp275) + ((0.0109561449f * fTemp276) + ((0.00912503432f * fTemp283) + ((0.0140385143f * fTemp430) + ((0.0340586565f * fTemp297) + ((0.0417188033f * fTemp298) + ((0.0306711029f * fTemp299) + ((0.00964384899f * fTemp300) + ((0.00527970213f * fTemp303) + ((0.0544145033f * fTemp304) + ((0.0676595345f * fTemp305) + ((0.0350352488f * fTemp306) + ((0.0209051799f * fTemp309) + ((0.0364391021f * fTemp509) + ((0.0390026569f * fTemp310) + ((0.033722952f * fTemp311) + ((0.019287698f * fTemp312) + ((0.0653706491f * fTemp314) + ((0.0408642851f * fTemp315) + ((0.0181890316f * fTemp318) + ((0.0380260646f * fTemp319) + ((0.0892971605f * fTemp320) + ((0.113711968f * fTemp321) + ((0.0983916745f * fTemp322) + ((0.0308847316f * fTemp135) + ((0.156285286f * fTemp323) + ((0.175481424f * fTemp324) + ((0.0980559736f * fTemp325) + ((0.0153813288f * fTemp76) + ((0.00466933195f * fTemp77) + ((0.0394604318f * fTemp81) + ((0.104739524f * fTemp82) + ((0.133640558f * fTemp83) + ((0.125919372f * fTemp84) + ((0.422315121f * fTemp328) + (fTemp329 + ((0.994445622f * fTemp331) + ((0.555162191f * fTemp332) + ((0.0025940733f * (fTemp114 + fTemp498)) + ((0.0028992584f * (fTemp360 + (fTemp361 + fTemp389))) + ((0.00317392498f * (fTemp365 + fTemp529)) + ((0.00350962859f * (fTemp366 + (fTemp113 + fTemp187))) + ((0.00360118411f * (fTemp371 + (fTemp396 + fTemp232))) + ((0.00347911008f * (fTemp118 + fTemp368)) + ((0.00381481368f * (fTemp372 + (fTemp134 + fTemp380))) + ((0.00250251777f * (fTemp127 + fTemp115)) + ((0.00326548051f * (fTemp130 + (fTemp131 + fTemp461))) + ((0.00424207281f * (fTemp393 + (fTemp27 + fTemp10))) + ((0.00476088747f * (fTemp102 + (fTemp145 + fTemp190))) + ((0.00430310983f * (fTemp119 + (fTemp460 + fTemp277))) + ((0.00570696127f * (fTemp108 + (fTemp391 + (fTemp493 + fTemp204)))) + ((0.00653096102f * fTemp774) + ((0.00680562761f * (fTemp410 + (fTemp150 + (fTemp97 + fTemp433)))) + ((0.00537125766f * (fTemp417 + (fTemp282 - fTemp94))) + ((0.00543229468f * (fTemp344 - fTemp128)) + ((0.00555436872f * (fTemp155 + fTemp224)) + ((0.00308236945f * (fTemp161 + fTemp397)) + ((0.00332651753f * (fTemp163 + fTemp8)) + ((0.00650044251f * (fTemp428 + fTemp200)) + ((0.006469924f * (fTemp89 + fTemp17)) + ((0.00622577593f * (fTemp425 + fTemp181)) + ((0.00509659108f * (fTemp162 + fTemp16)) + ((0.00482192449f * (fTemp24 + fTemp105)) + ((0.00494399853f * (fTemp434 + fTemp477)) + ((0.00991851557f * (fTemp146 + fTemp363)) + ((0.00939970091f * (fTemp446 + fTemp91)) + ((0.00820947904f * (fTemp451 + fTemp486)) + ((0.00888088625f * (fTemp167 + (fTemp198 + fTemp415))) + ((0.00915555283f * (fTemp22 + fTemp160)) + ((0.0106509598f * (fTemp179 + (fTemp454 + fTemp475))) + ((0.009704886f * (fTemp359 + fTemp230)) + ((0.00375377666f * (fTemp19 + fTemp439)) + ((0.00961333048f * (fTemp90 + fTemp367)) + ((0.00860621966f * (fTemp15 + fTemp227)) + ((0.0115359966f * (fTemp14 + (fTemp157 + fTemp467))) + ((0.0127262184f * (fTemp133 + fTemp482)) + ((0.0134586627f * fTemp775) + ((0.0107425153f * (fTemp103 + fTemp126)) + ((0.00726340525f * (fTemp110 + fTemp96)) + ((0.00390636921f * (fTemp435 + (fTemp496 + fTemp494))) + ((0.00689718314f * (fTemp456 + (fTemp474 + (fTemp492 - fTemp416)))) + ((0.0605792403f * (fTemp220 + fTemp327)) + ((0.00463881344f * fTemp630) + (0.00201422162f * fTemp658)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000854518265f * fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.329721987f * fTemp1) + ((0.0606402792f * fTemp402) + ((0.0334177688f * fTemp218) + ((0.108218633f * fTemp3) + ((0.0402233973f * fTemp4) + ((0.0634174645f * fTemp5) + ((0.0684530139f * fTemp6) + ((0.115817741f * fTemp7) + ((0.0601214655f * fTemp223) + ((0.00256355479f * fTemp129) + ((0.0019226661f * fTemp158) + ((9.15555283e-05f * fTemp356) + ((0.000640888698f * fTemp369) + ((0.00180059206f * fTemp111) + ((0.0019531846f * fTemp203) + ((0.00247199927f * fTemp233) + ((0.00717184972f * fTemp504) + ((0.00949125644f * fTemp241) + ((0.0114749596f * fTemp242) + ((0.00823999755f * fTemp412) + ((0.00692770164f * fTemp143) + ((0.00610370189f * fTemp470) + ((0.00415051728f * fTemp244) + ((0.0103457747f * fTemp516) + ((0.0110782189f * fTemp423) + ((0.00338755455f * fTemp457) + ((0.00238044374f * fTemp174) + ((0.00631733146f * fTemp248) + ((0.00714133121f * fTemp249) + ((0.00488296151f * fTemp401) + ((0.00219733268f * fTemp254) + ((0.00405896176f * fTemp256) + ((0.00384533219f * fTemp258) + ((0.00427259132f * fTemp260) + ((0.0071108127f * fTemp263) + ((0.0104678487f * fTemp265) + ((0.0126346629f * fTemp497) + ((0.0121463668f * fTemp429) + ((0.0102542192f * fTemp180) + ((0.00866725668f * fTemp362) + ((0.0012817774f * fTemp267) + ((0.00204474013f * fTemp268) + ((0.0105288858f * fTemp28) + ((0.0160832554f * fTemp385) + ((0.0170598477f * fTemp271) + ((0.0125736259f * fTemp370) + ((0.00625629444f * fTemp186) + ((0.000946073793f * fTemp31) + ((0.00585955381f * fTemp95) + ((0.0132145146f * fTemp503) + ((0.0190435499f * fTemp272) + ((0.0214850307f * fTemp273) + ((0.0214239936f * fTemp274) + ((0.0201116987f * fTemp169) + ((0.0148930326f * fTemp32) + ((0.00448622089f * fTemp33) + ((0.00277718436f * fTemp278) + ((0.00930814538f * fTemp501) + ((0.0163884405f * fTemp471) + ((0.0176702179f * fTemp279) + ((0.0182500686f * fTemp280) + ((0.0169072542f * fTemp281) + ((0.0119632557f * fTemp215) + ((0.0108645894f * fTemp284) + ((0.0120242927f * fTemp288) + ((0.0142826624f * fTemp505) + ((0.00747703481f * fTemp292) + ((0.0133365886f * fTemp293) + ((0.0209967345f * fTemp294) + ((0.0217596982f * fTemp484) + ((0.0156254768f * fTemp34) + ((0.011444441f * fTemp441) + ((0.0163579211f * fTemp485) + ((0.0262459181f * fTemp479) + ((0.0324411765f * fTemp35) + ((0.0336619169f * fTemp36) + ((0.0331431031f * fTemp37) + ((0.0316476934f * fTemp38) + ((0.0278939176f * fTemp39) + ((0.022644734f * fTemp40) + ((0.00457777642f * fTemp214) + ((0.00521866512f * fTemp44) + ((0.0147404401f * fTemp45) + ((0.0311593991f * fTemp46) + ((0.0451063588f * fTemp47) + ((0.0485244319f * fTemp48) + ((0.0439466536f * fTemp49) + ((0.0338145085f * fTemp295) + ((0.0217291787f * fTemp213) + ((0.00830103457f * fTemp301) + ((0.0213934761f * fTemp302) + ((0.0359813236f * fTemp50) + ((0.0539567247f * fTemp51) + ((0.0733359754f * fTemp52) + ((0.0753807202f * fTemp53) + ((0.0483718365f * fTemp159) + ((0.0522782058f * fTemp54) + ((0.0552079827f * fTemp55) + ((0.0412915424f * fTemp56) + ((0.0387279876f * fTemp57) + ((0.0499282815f * fTemp144) + ((0.0476088747f * fTemp508) + ((0.0398876928f * fTemp313) + ((0.0721457601f * fTemp212) + ((0.102511674f * fTemp58) + ((0.0998260453f * fTemp59) + ((0.0575273894f * fTemp60) + ((0.093081452f * fTemp62) + ((0.08908353f * fTemp63) + ((0.0707724243f * fTemp64) + ((0.0702536106f * fTemp65) + ((0.072969757f * fTemp66) + ((0.0636005774f * fTemp67) + ((0.0127872555f * fTemp316) + ((0.0100405896f * fTemp68) + ((0.062776573f * fTemp69) + ((0.0888698995f * fTemp70) + ((0.122013003f * fTemp71) + ((0.0847193822f * fTemp72) + ((0.151829585f * fTemp326) + ((0.168126464f * fTemp73) + ((0.0981170088f * fTemp74) + ((0.000305185094f * fTemp75) + ((0.0927457511f * fTemp507) + ((0.136051521f * fTemp78) + ((0.105288856f * fTemp79) + ((0.0543534644f * fTemp80) + ((0.1993469f * fTemp85) + ((0.532731116f * fTemp86) + ((0.689016402f * fTemp87) + ((((0.00366222113f * ((fTemp199 - fTemp406) - fTemp374)) + ((0.00363170262f * (fTemp246 - fTemp346)) + ((0.00314340647f * ((fTemp422 + fTemp510) - fTemp124)) + ((0.00357066561f * ((fTemp500 + fTemp237) - fTemp375)) + ((0.00329599902f * ((fTemp468 - fTemp185) - fTemp394)) + ((0.00372325815f * (((fTemp550 - fTemp176) - fTemp379) - fTemp125)) + ((0.00283822138f * ((fTemp259 - fTemp403) - fTemp399)) + ((0.00491348002f * ((fTemp257 - fTemp387) - fTemp408)) + ((0.00674459059f * (fTemp240 - fTemp338)) + ((0.00772118289f * (fTemp264 - fTemp384)) + ((0.00787377544f * (fTemp440 - fTemp376)) + ((0.00524918362f * (fTemp269 - fTemp148)) + ((0.00561540574f * ((fTemp445 - fTemp104) - fTemp109)) + ((0.00442518387f * ((fTemp252 - fTemp26) - fTemp382)) + ((0.00311288796f * ((fTemp43 - fTemp448) - fTemp427)) + ((0.00534073915f * (fTemp251 - fTemp426)) + ((0.00506607257f * (fTemp404 - fTemp166)) + ((0.00854518265f * ((fTemp291 - fTemp207) - fTemp455)) + ((0.00897244178f * (fTemp487 - fTemp23)) + ((0.0104068117f * (fTemp216 - fTemp177)) + ((0.0107730338f * (fTemp289 - fTemp122)) + ((0.00762962736f * (fTemp499 - fTemp164)) + ((0.00598162785f * ((fTemp296 - fTemp194) - fTemp149)) + ((0.0108340709f * (fTemp386 - fTemp463)) + ((0.00811792351f * (fTemp42 - fTemp472)) + ((0.0122074038f * ((fTemp290 - fTemp171) - fTemp407)) + ((0.0106204413f * (fTemp243 - fTemp347)) + ((0.0133671071f * (fTemp308 - fTemp398)) + ((0.0137638478f * (fTemp488 - fTemp183)) + ((0.0077517014f * (((fTemp262 + fTemp222) - fTemp483) - fTemp452)) + ((0.00857570115f * (fTemp465 - fTemp137)) + ((0.00604266487f * (fTemp238 - fTemp11)) + ((0.0162663665f * (fTemp286 - fTemp208)) + ((0.00845362712f * (fTemp520 - fTemp378)) + ((0.00558488723f * (fTemp236 - fTemp349)) + ((0.00683614612f * (fTemp261 - fTemp165)) + ((0.013061922f * (fTemp776 - fTemp466)) + ((0.00665303506f * (fTemp266 - fTemp211)) + ((0.00723288674f * ((fTemp92 + fTemp239) - fTemp514)) + ((0.00595110934f * (fTemp247 - fTemp392)) + ((0.00497451704f * (fTemp175 - fTemp357)) + ((0.00231940672f * ((fTemp502 - fTemp449) - fTemp400)) + ((0.00213629566f * (fTemp436 + fTemp419)) + ((0.0022583697f * (fTemp234 + fTemp255)) + ((((0.0150151066f * (fTemp287 + fTemp61)) + (0.0151676992f * (fTemp285 + fTemp41))) + (0.0182805881f * (fTemp270 + fTemp307))) + (0.00701925717f * (fTemp235 + fTemp250))))))))))))))))))))))))))))))))))))))))))))))) + (0.00186162908f * ((fTemp515 - fTemp395) - fTemp231))) + (0.00134281442f * (fTemp188 - fTemp333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow33 ? (((0.0136112552f * fTemp204) + ((0.0122379223f * fTemp493) + ((0.00979644153f * fTemp224) + ((0.0083925901f * fTemp460) + (fTemp766 + ((0.00964384899f * fTemp154) + ((0.00997955259f * fTemp392) + ((0.00988799706f * fTemp335) + ((0.00973540451f * fTemp181) + ((0.00961333048f * fTemp514) + ((0.00939970091f * fTemp147) + ((0.00735496078f * fTemp211) + ((0.0100405896f * fTemp413) + ((0.0126041444f * fTemp474) + ((0.00784325693f * fTemp226) + ((0.0127567369f * fTemp349) + ((0.0106509598f * fTemp379) + ((0.00991851557f * fTemp444) + ((0.0106204413f * fTemp473) + ((0.012817774f * fTemp378) + ((0.0141605884f * fTemp91) + ((0.014679403f * fTemp475) + ((0.0132450331f * fTemp466) + ((0.0108340709f * fTemp358) + ((0.0107119968f * fTemp377) + ((0.0102237007f * fTemp171) + ((0.00650044251f * fTemp380) + ((0.0110477004f * fTemp104) + ((0.0105899228f * fTemp209) + ((0.00689718314f * fTemp467) + ((0.0071108127f * fTemp110) + ((0.00756859034f * fTemp439) + ((0.00500503555f * fTemp453) + ((0.00271614734f * fTemp11) + ((0.00698873866f * fTemp388) + ((0.00750755332f * fTemp480) + ((0.00302133244f * fTemp178) + (fTemp767 + ((0.00610370189f * fTemp210) + (fTemp768 + ((0.00769066438f * fTemp205) + ((0.00836207159f * fTemp367) + ((0.00717184972f * fTemp464) + ((0.0057985168f * fTemp486) + ((0.00982696004f * fTemp418) + ((0.0109256264f * fTemp348) + ((0.0115665151f * fTemp442) + ((0.0123294778f * fTemp157) + ((0.0135196997f * fTemp437) + ((0.0119937742f * fTemp183) + ((0.00869777519f * fTemp398) + ((0.00888088625f * fTemp407) + ((0.0163884405f * fTemp192) + ((0.0238654744f * fTemp168) + ((0.0284432508f * fTemp12) + ((0.0264290292f * fTemp478) + ((0.0184942167f * fTemp196) + ((0.00833155308f * fTemp476) + ((0.00283822138f * fTemp433) + ((0.00405896176f * fTemp414) + ((0.00341807306f * fTemp14) + ((0.00604266487f * fTemp228) + ((0.00927762687f * fTemp229) + ((0.0156559963f * fTemp424) + ((0.01803644f * fTemp15) + ((0.0185857732f * fTemp469) + ((0.0182195511f * fTemp16) + ((0.0149845881f * fTemp17) + ((0.0101016266f * fTemp189) + ((0.000823999755f * fTemp19) + ((0.00268562883f * fTemp20) + ((0.00671407208f * fTemp359) + ((0.00793481246f * fTemp179) + ((0.00955229346f * fTemp122) + ((0.00958281197f * fTemp177) + ((0.0061342204f * fTemp23) + ((0.00396740623f * fTemp167) + ((0.00189214759f * fTemp455) + ((0.00112918485f * fTemp146) + (fTemp646 + ((0.00134281442f * fTemp100) + ((0.000885036774f * fTemp338) + ((0.0139774773f * fTemp176) + ((0.016052736f * fTemp232) + ((0.0151066622f * fTemp496) + ((0.0111392559f * fTemp461) + ((0.0159306619f * fTemp395) + ((0.0168462172f * fTemp495) + ((0.0178228095f * fTemp369) + ((0.0187688842f * fTemp111) + ((0.0173955504f * fTemp203) + ((0.0153202917f * fTemp515) + ((0.0118717002f * fTemp234) + ((0.0130924406f * fTemp419) + ((0.0150456252f * fTemp422) + ((0.0167241432f * fTemp94) + ((0.0172734763f * fTemp92) + ((0.0173650328f * fTemp440) + ((0.0165715516f * fTemp499) + ((0.0129703665f * fTemp235) + ((0.00994903408f * fTemp236) + ((0.00238044374f * fTemp237) + ((0.00473036896f * fTemp241) + ((0.0137028107f * fTemp243) + ((0.012939848f * fTemp412) + ((0.00213629566f * fTemp470) + ((0.00317392498f * fTemp487) + ((0.00558488723f * fTemp516) + ((0.0118106632f * fTemp216) + ((0.0187383648f * fTemp386) + ((0.0242622159f * fTemp423) + ((0.024567401f * fTemp465) + ((0.0213934761f * fTemp457) + ((0.0205694754f * fTemp491) + ((0.0220038462f * fTemp526) + ((0.0247505121f * fTemp174) + ((0.0246589556f * fTemp175) + ((0.0195013285f * fTemp445) + ((0.0143742179f * fTemp248) + ((0.011200293f * fTemp249) + ((0.0189214759f * fTemp251) + ((0.0234382153f * fTemp252) + ((0.0238349568f * fTemp401) + ((0.0289010294f * fTemp404) + ((0.034150213f * fTemp253) + ((0.0350352488f * fTemp254) + ((0.0304879919f * fTemp255) + ((0.0260933265f * fTemp256) + ((0.019348735f * fTemp257) + ((0.0101626636f * fTemp259) + ((0.0191656239f * fTemp260) + ((0.0306711029f * fTemp261) + ((0.0288399924f * fTemp263) + ((0.0270699188f * fTemp264) + ((0.0276497696f * fTemp497) + ((0.0248725861f * fTemp429) + ((0.0142216254f * fTemp180) + ((0.0158391073f * fTemp385) + ((0.0506607257f * fTemp270) + ((0.0754112378f * fTemp271) + ((0.0644245744f * fTemp370) + ((0.0349742137f * fTemp186) + ((0.013061922f * fTemp503) + ((0.0166631062f * fTemp272) + ((0.0198370311f * fTemp273) + ((0.0250556972f * fTemp274) + ((0.0298165847f * fTemp169) + ((0.0326853245f * fTemp32) + ((0.0224311054f * fTemp492) + ((0.0111697745f * fTemp276) + ((0.0171514023f * fTemp280) + ((0.0354930274f * fTemp281) + ((0.0495620593f * fTemp215) + ((0.0659199804f * fTemp468) + ((0.0787987933f * fTemp282) + ((0.0751976073f * fTemp283) + ((0.0466322824f * fTemp477) + ((0.0284127332f * fTemp287) + ((0.0751060545f * fTemp288) + ((0.103366189f * fTemp289) + ((0.102877893f * fTemp290) + ((0.0941496044f * fTemp505) + ((0.081667535f * fTemp511) + ((0.0780968666f * fTemp291) + ((0.0618610196f * fTemp292) + ((0.0281991027f * fTemp293) + ((0.0372936204f * fTemp40) + ((0.0462660603f * fTemp41) + ((0.0391857661f * fTemp42) + ((0.105685599f * fTemp48) + ((0.12405774f * fTemp49) + ((0.100253306f * fTemp295) + ((0.0188604388f * fTemp213) + ((0.0505081341f * fTemp297) + ((0.111484118f * fTemp298) + ((0.095675528f * fTemp299) + ((0.0856349394f * fTemp300) + ((0.0210272539f * fTemp301) + ((0.0538956895f * fTemp302) + ((0.0497756898f * fTemp50) + ((0.0737327188f * fTemp51) + ((0.317972362f * fTemp304) + ((0.511124015f * fTemp305) + ((0.426984459f * fTemp306) + ((0.0160222184f * fTemp308) + ((0.0333567299f * fTemp309) + ((0.0199285876f * fTemp311) + ((0.00891140476f * fTemp312) + ((0.0038758507f * ((fTemp376 - fTemp140) - fTemp333)) + ((0.00915555283f * ((fTemp200 + fTemp143) - fTemp107)) + ((0.0054933317f * ((fTemp164 + fTemp462) - fTemp353)) + ((0.00524918362f * (fTemp502 - fTemp354)) + ((0.00570696127f * ((fTemp339 + (fTemp415 + (fTemp387 + fTemp188))) - fTemp375)) + ((0.00708029419f * ((fTemp137 + fTemp400) - fTemp127)) + ((0.00802636798f * (fTemp406 - fTemp119)) + ((0.00305185094f * (fTemp355 + (fTemp153 + fTemp10))) + ((0.00436414685f * (fTemp384 + ((fTemp521 + fTemp202) - fTemp109))) + ((0.00418103579f * ((fTemp8 + fTemp510) - fTemp145)) + ((0.00442518387f * (fTemp416 - fTemp163)) + ((0.00592059083f * (fTemp498 - fTemp431)) + ((0.00262459181f * (fTemp362 - fTemp24)) + ((0.00253303628f * (fTemp166 + fTemp222)) + ((0.00762962736f * (fTemp22 + (fTemp141 + fTemp95))) + ((0.00909451582f * (fTemp458 + fTemp435)) + ((0.00894192327f * (fTemp151 + fTemp160)) + ((0.00384533219f * (fTemp185 + fTemp13)) + ((0.013000885f * fTemp769) + ((0.0131229591f * (fTemp482 + fTemp750)) + ((0.00686666463f * (fTemp483 + fTemp208)) + ((0.00860621966f * (fTemp103 + (fTemp193 + fTemp225))) + ((0.00827051606f * (fTemp126 + fTemp158)) + ((0.0045167394f * (fTemp198 + fTemp490)) + ((0.00390636921f * (fTemp206 + fTemp363)) + ((0.00726340525f * (fTemp217 + fTemp500)) + ((0.0123599963f * (fTemp450 + fTemp694)) + ((0.011322367f * (fTemp190 + fTemp194)) + ((0.0107730338f * (fTemp456 + fTemp494)) + ((0.0136417737f * (fTemp357 + (fTemp275 + fTemp39))) + ((0.0148930326f * (fTemp397 + (fTemp449 + fTemp250))) + ((0.0102542192f * (fTemp242 + fTemp258)) + ((0.0310068056f * (fTemp262 + fTemp310)) + ((0.027619252f * (fTemp265 + fTemp33)) + ((0.0378429517f * (fTemp214 - fTemp37)) + ((0.0361949541f * (fTemp509 - fTemp52)) + ((0.0124210333f * fTemp640) + (0.00680562761f * fTemp557)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00100711081f * fTemp7) + ((0.0343028046f * fTemp223) + ((0.00326548051f * fTemp201) + ((0.00146488845f * fTemp197) + ((0.00363170262f * fTemp133) + ((0.00250251777f * fTemp123) + ((0.00399792474f * fTemp350) + ((0.00381481368f * fTemp342) + ((0.000793481246f * fTemp149) + ((0.0058290353f * fTemp27) + (fTemp770 + ((0.00561540574f * fTemp426) + ((0.00424207281f * fTemp115) + ((0.00457777642f * fTemp382) + ((0.00445570238f * fTemp155) + ((0.00247199927f * fTemp132) + ((0.000610370189f * fTemp152) + ((0.001617481f * fTemp417) + ((0.00119022187f * fTemp99) + ((0.003234962f * fTemp108) + ((0.00555436872f * fTemp142) + ((0.0122684408f * fTemp393) + ((0.0109866634f * fTemp139) + (fTemp700 + ((0.00881984923f * fTemp125) + ((0.0077517014f * fTemp394) + (fTemp771 + ((0.00488296151f * fTemp389) + ((0.00631733146f * fTemp346) + ((0.00430310983f * fTemp366) + ((0.00228888821f * fTemp352) + ((0.00314340647f * fTemp114) + ((0.00653096102f * fTemp337) + ((0.008087405f * fTemp106) + ((0.00933866389f * fTemp336) + (((0.000244148076f * fTemp238) + ((0.0100711081f * fTemp266) + ((0.0140385143f * fTemp506) + ((0.00454725791f * fTemp268) + ((0.0142826624f * fTemp28) + ((0.00408948027f * fTemp277) + ((0.0181890316f * fTemp278) + ((0.0336619169f * fTemp501) + ((0.0334788039f * fTemp488) + ((0.0254219193f * fTemp471) + ((0.00527970213f * fTemp279) + ((0.0392773226f * fTemp284) + ((0.0500808731f * fTemp285) + ((0.0253913999f * fTemp286) + ((0.0420239866f * fTemp484) + ((0.0496230982f * fTemp34) + ((0.0587481298f * fTemp441) + ((0.0577105023f * fTemp485) + ((0.0604266487f * fTemp479) + ((0.0560319833f * fTemp35) + ((0.0554216132f * fTemp36) + ((0.0176091809f * fTemp38) + ((0.0170903653f * fTemp43) + ((0.0785241276f * fTemp44) + ((0.130832851f * fTemp45) + ((0.0839259028f * fTemp46) + ((0.00976592302f * fTemp47) + ((0.0266121402f * fTemp296) + ((0.00506607257f * fTemp430) + ((0.167821288f * fTemp53) + ((0.227668077f * fTemp159) + ((0.0523697622f * fTemp303) + ((0.0393383577f * fTemp307) + ((0.637989461f * fTemp54) + ((1.00003052f * fTemp55) + ((0.890316486f * fTemp56) + ((0.461867124f * fTemp57) + ((0.148991361f * fTemp144) + ((0.00296029542f * fTemp508) + ((0.000854518265f * fTemp212) + ((0.00115970336f * fTemp58) + ((0.000518814661f * fTemp60) + ((0.000488296151f * fTemp326) + (((((((((((((((((0.00918607134f * (fTemp396 - fTemp391)) + ((((((((((0.0051576281f * (fTemp148 + fTemp373)) + ((0.00244148076f * (fTemp120 + fTemp459)) + ((0.000335703604f * (fTemp344 + ((fTemp314 + (fTemp318 + fTemp538)) - fTemp246))) + ((0.00186162908f * (fTemp31 - fTemp150)) + ((0.00375377666f * (fTemp420 - fTemp438)) + ((0.00463881344f * (fTemp427 - fTemp182)) + ((0.00393688772f * fTemp772) + ((0.00503555406f * (fTemp156 - fTemp165)) + ((0.00537125766f * (fTemp162 - fTemp343)) + ((0.00491348002f * (fTemp26 - fTemp129)) + ((0.000274666585f * ((fTemp446 + (fTemp172 + ((fTemp321 + (fTemp71 + (fTemp74 + (fTemp78 + (fTemp84 + fTemp331))))) - fTemp247))) - fTemp434)) + ((0.00234992523f * (fTemp240 - fTemp443)) + ((0.000152592547f * (((fTemp319 + fTemp329) - fTemp195) - fTemp351)) + ((0.000213629566f * ((fTemp135 + (fTemp218 + (fTemp77 + fTemp82))) - fTemp451)) + ((0.000305185094f * ((fTemp4 + fTemp627) - fTemp18)) + ((9.15555283e-05f * (fTemp90 + (fTemp315 + (fTemp320 + (fTemp76 + fTemp79))))) + ((0.000122074038f * (((fTemp6 + (fTemp67 + (fTemp75 + fTemp327))) - fTemp93) - fTemp472)) + ((0.00427259132f * (fTemp411 + fTemp269)) + ((0.000183111057f * ((fTemp244 + (fTemp65 + fTemp582)) - fTemp504)) + ((0.0115359966f * (fTemp29 + fTemp294)) + ((3.05185094e-05f * (fTemp313 + ((fTemp66 + (fTemp69 + (fTemp70 + (((fTemp81 + fTemp1) - fTemp80) - fTemp323)))) - fTemp61))) + ((0.000701925717f * (fTemp59 + (fTemp63 + fTemp64))) + ((0.00054933317f * (fTemp199 + fTemp221)) + ((0.000457777642f * (fTemp62 + fTemp5)) + ((0.000427259132f * (fTemp316 + fTemp73)) + ((0.000396740623f * (fTemp322 + (fTemp219 + fTemp507))) + ((0.000366222113f * (fTemp402 + fTemp83)) + ((6.10370189e-05f * (((fTemp85 + (fTemp86 + fTemp643)) - fTemp325) - fTemp324)) + (0.00622577593f * fTemp569))))))))))))))))))))))))))))) + (0.00149540696f * ((fTemp191 + fTemp239) - fTemp410))) + (0.0103457747f * (fTemp340 + fTemp520))) + (0.0119327372f * (fTemp102 - fTemp138))) + (0.00589007232f * (fTemp408 - fTemp128))) + (0.00360118411f * (fTemp409 + fTemp463))) + (0.00167851802f * (fTemp405 - fTemp187))) + (0.00216681417f * (fTemp131 + fTemp134))) + (0.00863673817f * fTemp773))) + (0.00521866512f * (fTemp112 + (fTemp372 + (fTemp403 + fTemp425))))) + (0.00482192449f * (fTemp361 - fTemp173))) + (0.00497451704f * (fTemp383 + fTemp347))) + (0.00601214636f * (fTemp124 - fTemp227))) + (0.00628681295f * (fTemp374 - fTemp356))) + (0.00573747978f * (fTemp113 + fTemp30))) + (0.00512710959f * (fTemp371 + fTemp390))) + (0.00329599902f * (fTemp365 + fTemp454))) + (0.00241096225f * (fTemp360 + fTemp230))) + (0.0090334788f * (fTemp341 + fTemp267))) + (0.00854518265f * (fTemp101 - fTemp452))) + (0.0074159978f * (fTemp98 - fTemp184))) + (0.00607318338f * (fTemp231 + fTemp118))) + (0.00476088747f * (fTemp334 + fTemp345))) + (0.00347911008f * (fTemp513 - fTemp364)))))))))))))))))))))))))))))))))))))))))))))) + (0.00369273964f * fTemp88)))))))))))))))))))))))))))))))))))))) : (((0.000823999755f * fTemp4) + ((0.00109866634f * fTemp221) + ((0.01617481f * fTemp223) + ((0.00228888821f * fTemp197) + ((0.00781273842f * fTemp90) + ((0.00857570115f * fTemp123) + ((0.00766014587f * fTemp350) + ((0.00592059083f * fTemp342) + ((0.000946073793f * fTemp455) + ((0.00167851802f * fTemp451) + ((0.0022583697f * fTemp172) + ((0.00143436994f * fTemp434) + ((0.00665303506f * fTemp431) + ((0.00683614612f * fTemp162) + ((0.00668355357f * fTemp373) + ((0.00534073915f * fTemp97) + ((0.00524918362f * fTemp161) + ((0.00567644276f * fTemp140) + ((0.00601214636f * fTemp115) + ((0.00543229468f * fTemp155) + ((0.00335703604f * fTemp132) + ((0.00375377666f * fTemp100) + ((0.00744651631f * fTemp109) + ((0.00363170262f * fTemp145) + ((0.00445570238f * fTemp102) + ((0.00531022064f * fTemp393) + ((0.00546281319f * fTemp139) + ((0.004852443f * fTemp136) + ((0.00256355479f * fTemp131) + ((0.00350962859f * fTemp403) + ((0.0074159978f * fTemp125) + ((0.00509659108f * fTemp354) + ((0.00512710959f * fTemp361) + ((0.00488296151f * fTemp383) + ((0.00469985045f * fTemp353) + ((0.00411999878f * fTemp124) + ((0.00155644398f * fTemp113) + ((0.00122074038f * fTemp371) + ((0.0035401471f * fTemp336) + ((0.00265511032f * fTemp231) + ((0.00177007355f * fTemp333) + (((0.000762962736f * fTemp240) + ((0.017975403f * fTemp268) + ((0.0339671001f * fTemp269) + ((0.0304269549f * fTemp520) + ((0.00982696004f * fTemp28) + ((0.00738547929f * fTemp279) + ((0.0473342091f * fTemp285) + ((0.0475783572f * fTemp286) + ((0.0158696249f * fTemp287) + ((0.0312509537f * fTemp484) + ((0.0287484359f * fTemp34) + ((0.0476393923f * fTemp441) + ((0.0365306549f * fTemp485) + ((0.0361033976f * fTemp479) + ((0.0166936256f * fTemp35) + (fTemp760 + ((0.0236823633f * fTemp37) + ((0.0174565874f * fTemp38) + ((0.095675528f * fTemp45) + ((0.0720236823f * fTemp46) + ((0.0833155289f * fTemp47) + ((0.0473036915f * fTemp430) + ((0.0767540485f * fTemp52) + ((0.108005002f * fTemp53) + ((0.223792225f * fTemp159) + ((0.217627496f * fTemp303) + ((0.0350047313f * fTemp304) + ((0.287057102f * fTemp54) + ((0.853755295f * fTemp55) + (fTemp56 + ((0.600360096f * fTemp57) + ((0.171727657f * fTemp144) + ((0.000976592302f * fTemp199) + ((0.000488296151f * fTemp331) + ((((((((0.000396740623f * (fTemp114 + (fTemp0 + fTemp402))) + ((0.000305185094f * ((fTemp63 + (fTemp82 + fTemp83)) - fTemp352)) + ((0.000335703604f * (((fTemp73 + (fTemp74 + fTemp2)) - fTemp167) - fTemp360)) + ((0.000152592547f * (fTemp365 + (fTemp417 - fTemp454))) + ((0.00180059206f * (fTemp118 + fTemp446)) + ((0.00241096225f * (fTemp374 + fTemp405)) + ((0.00320444349f * (fTemp346 - fTemp103)) + ((0.00518814661f * (fTemp389 + (fTemp390 - fTemp407))) + ((0.00500503555f * (fTemp112 + fTemp428)) + ((0.00558488723f * (fTemp372 - fTemp415)) + ((0.00695822015f * (fTemp529 + ((fTemp471 - fTemp500) - fTemp391))) + ((0.00723288674f * (fTemp394 + fTemp396)) + ((0.00640888698f * fTemp761) + ((0.00283822138f * (fTemp130 + (((fTemp488 + fTemp294) - fTemp379) - fTemp343))) + ((0.00231940672f * (fTemp134 + fTemp121)) + ((0.00262459181f * (fTemp409 + fTemp280)) + ((0.00366222113f * (fTemp408 - fTemp349)) + ((0.00247199927f * (fTemp108 + fTemp152)) + ((0.000122074038f * (fTemp338 + ((fTemp116 + fTemp1) - fTemp187))) + ((0.00106814783f * ((fTemp314 + fTemp67) - fTemp355)) + ((0.00637836847f * (fTemp148 - fTemp158)) + ((0.00689718314f * (fTemp120 + (fTemp27 - fTemp151))) + ((0.00552385021f * (fTemp344 - fTemp452)) + ((0.000701925717f * (fTemp366 + (fTemp351 + (fTemp59 + fTemp219)))) + ((0.00598162785f * (fTemp382 - fTemp193)) + ((0.00622577593f * (fTemp427 - fTemp381)) + ((0.00506607257f * (fTemp163 - fTemp473)) + ((0.00494399853f * (fTemp156 - fTemp208)) + ((0.00589007232f * (fTemp89 + fTemp26)) + ((0.00393688772f * (fTemp24 - fTemp356)) + ((0.000854518265f * (fTemp321 - fTemp146)) + ((0.00466933195f * (fTemp508 - fTemp185)) + ((0.000671407208f * (fTemp19 + (fTemp60 + fTemp69))) + ((0.00125125889f * (fTemp18 + fTemp149)) + ((0.000640888698f * (fTemp191 + (fTemp3 + fTemp325))) + ((0.00054933317f * (fTemp230 - fTemp198)) + ((0.00170903653f * (fTemp459 + fTemp347)) + ((0.00302133244f * (fTemp521 + fTemp238)) + ((0.000793481246f * (fTemp133 + fTemp320)) + ((0.0232245866f * (fTemp296 - fTemp12)) + ((0.00115970336f * ((fTemp66 - fTemp8) - fTemp10)) + ((0.00704977568f * (fTemp297 - fTemp378)) + ((0.000732444227f * (fTemp237 + (fTemp7 + (fTemp5 + fTemp323)))) + ((0.000183111057f * (fTemp212 + fTemp85)) + ((0.000518814661f * (fTemp58 + (fTemp64 + (fTemp72 + (fTemp135 + (fTemp218 + (fTemp75 + fTemp329))))))) + ((0.000610370189f * (fTemp315 + fTemp70)) + ((0.000213629566f * (fTemp326 - fTemp6)) + ((0.000915555283f * (fTemp65 + fTemp322)) + ((0.00057985168f * (fTemp316 + (fTemp68 + fTemp324))) + ((0.000274666585f * (fTemp318 + fTemp327)) + ((0.000244148076f * (fTemp319 + (fTemp78 + fTemp84))) + ((0.000366222113f * (fTemp220 + fTemp507)) + ((0.000457777642f * fTemp545) + (0.000427259132f * (fTemp71 + (fTemp328 + fTemp332)))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.0012817774f * (fTemp345 + fTemp99))) + (0.00292977691f * (fTemp106 - fTemp105))) + (0.00344859157f * (fTemp107 + fTemp119))) + (0.00341807306f * (fTemp101 - fTemp189))) + (0.00317392498f * (fTemp98 - fTemp480))) + (0.00207525864f * (fTemp334 - fTemp462))))))))))))))))))))))))))))))))))))) + (0.00210577715f * fTemp88))))))))))))))))))))))))))))))))))))))))))) - ((0.00186162908f * fTemp222) + ((0.0202337727f * fTemp204) + ((0.0175786614f * fTemp447) + ((0.0137638478f * fTemp194) + ((0.00964384899f * fTemp460) + (fTemp762 + ((0.00482192449f * fTemp141) + (fTemp763 + ((0.00732444227f * fTemp181) + ((0.00448622089f * fTemp514) + ((0.00253303628f * fTemp211) + ((0.00476088747f * fTemp490) + ((0.00653096102f * fTemp421) + ((0.00698873866f * fTemp413) + ((0.00625629444f * fTemp474) + ((0.00415051728f * fTemp456) + ((0.00250251777f * fTemp226) + ((0.00405896176f * fTemp435) + ((0.00845362712f * fTemp475) + ((0.00836207159f * fTemp466) + ((0.00921658985f * fTemp138) + ((0.00888088625f * fTemp358) + ((0.0083925901f * fTemp377) + ((0.008087405f * fTemp171) + ((0.00790429395f * fTemp160) + ((0.00848414563f * fTemp380) + ((0.00799584948f * fTemp128) + ((0.0057985168f * fTemp104) + ((0.00643940549f * fTemp450) + ((0.0058290353f * fTemp184) + ((0.00616473891f * fTemp439) + ((0.00521866512f * fTemp217) + (fTemp764 + ((0.00183111057f * fTemp11) + ((0.00277718436f * fTemp489) + ((0.00100711081f * fTemp206) + ((0.0019531846f * fTemp210) + ((0.0103762932f * fTemp442) + ((0.011444441f * fTemp157) + ((0.0115970336f * fTemp482) + ((0.0111697745f * fTemp437) + ((0.0101931822f * fTemp183) + ((6.10370189e-05f * fTemp153) + ((0.0123294778f * fTemp192) + ((0.0202032533f * fTemp478) + ((0.00402844325f * fTemp476) + ((0.00527970213f * fTemp433) + ((0.00378429517f * fTemp414) + ((0.0038758507f * fTemp228) + ((0.00564592425f * fTemp229) + ((0.0118717002f * fTemp424) + ((0.0132450331f * fTemp15) + ((0.0129093295f * fTemp469) + ((0.00222785119f * fTemp20) + ((0.00659199804f * fTemp182) + (fTemp765 + ((0.00753807183f * fTemp359) + ((0.00726340525f * fTemp179) + ((0.00570696127f * fTemp122) + ((0.00424207281f * fTemp177) + ((0.00134281442f * fTemp23) + ((0.00234992523f * fTemp443) + ((0.00158696249f * fTemp166) + ((0.021271402f * fTemp357) + ((0.021332439f * fTemp176) + ((0.0202642903f * fTemp397) + ((0.0181890316f * fTemp496) + ((0.0151371807f * fTemp461) + ((0.0126956999f * fTemp400) + ((0.0116275521f * fTemp498) + ((0.0123599963f * fTemp406) + ((0.0137028107f * fTemp494) + ((0.0150151066f * fTemp448) + ((0.0172124393f * fTemp449) + ((0.0195928831f * fTemp395) + ((0.0213934761f * fTemp495) + ((0.0208441429f * fTemp369) + ((0.0199285876f * fTemp111) + ((0.0155949583f * fTemp515) + ((0.0136112552f * fTemp436) + ((0.0138554033f * fTemp233) + ((0.0152897732f * fTemp234) + ((0.016296884f * fTemp419) + ((0.0168767367f * fTemp422) + ((0.0169072542f * fTemp94) + ((0.0154118473f * fTemp440) + ((0.014679403f * fTemp499) + ((0.0126346629f * fTemp235) + ((0.00863673817f * fTemp243) + ((0.0131229591f * fTemp143) + ((0.0124515519f * fTemp416) + ((0.00784325693f * fTemp244) + ((0.00408948027f * fTemp246) + ((0.00442518387f * fTemp247) + ((0.00900296029f * fTemp487) + ((0.0153508103f * fTemp516) + ((0.0139164403f * fTemp216) + ((0.0175481439f * fTemp386) + ((0.0210577715f * fTemp423) + ((0.0271004364f * fTemp465) + ((0.025757622f * fTemp457) + ((0.027619252f * fTemp491) + ((0.0252998453f * fTemp526) + ((0.0287179183f * fTemp174) + ((0.0314340666f * fTemp175) + ((0.0281685852f * fTemp445) + ((0.0209051799f * fTemp248) + ((0.0125125889f * fTemp249) + ((0.012817774f * fTemp250) + ((0.0145268105f * fTemp251) + ((0.0255134739f * fTemp252) + ((0.025818659f * fTemp401) + ((0.0347605832f * fTemp404) + ((0.0352183618f * fTemp253) + ((0.0380260646f * fTemp254) + ((0.0317087322f * fTemp255) + ((0.0328684337f * fTemp256) + ((0.0413525812f * fTemp257) + ((0.036896877f * fTemp258) + ((0.0313119926f * fTemp259) + ((0.0220343638f * fTemp260) + ((0.0338755473f * fTemp261) + ((0.0306100659f * fTemp262) + ((0.0273751039f * fTemp263) + ((0.0270393994f * fTemp264) + ((0.0203253273f * fTemp265) + ((0.0220648833f * fTemp497) + ((0.0158085879f * fTemp429) + ((0.0238044374f * fTemp180) + ((0.0204779208f * fTemp362) + ((0.0198675506f * fTemp266) + ((0.0122684408f * fTemp506) + ((0.0129703665f * fTemp29) + ((0.0171514023f * fTemp385) + ((0.0314645842f * fTemp270) + ((0.0530411713f * fTemp271) + ((0.0730918273f * fTemp370) + ((0.0747398287f * fTemp186) + ((0.0610065013f * fTemp188) + ((0.0399487279f * fTemp30) + ((0.0151066622f * fTemp31) + ((0.0200201422f * fTemp272) + ((0.0300912503f * fTemp273) + ((0.0357982107f * fTemp274) + ((0.0432142094f * fTemp169) + ((0.0398876928f * fTemp32) + ((0.0341196954f * fTemp33) + ((0.0293588061f * fTemp492) + ((0.0278328806f * fTemp275) + ((0.0307321399f * fTemp276) + ((0.029175695f * fTemp277) + ((0.0222479943f * fTemp278) + ((0.0126041444f * fTemp281) + ((0.030915251f * fTemp215) + ((0.0431836918f * fTemp468) + ((0.0515457615f * fTemp282) + ((0.0506607257f * fTemp283) + ((0.0296334736f * fTemp477) + ((0.0279549547f * fTemp288) + ((0.0513016135f * fTemp289) + ((0.0545060597f * fTemp290) + ((0.0467238389f * fTemp505) + ((0.0288399924f * fTemp511) + ((0.027680289f * fTemp291) + ((0.031037325f * fTemp292) + ((0.0141911069f * fTemp39) + ((0.0524308011f * fTemp40) + ((0.0731833875f * fTemp41) + ((0.0710165724f * fTemp42) + ((0.0694296062f * fTemp214) + ((0.065553762f * fTemp43) + ((0.0284737702f * fTemp44) + ((0.0399792492f * fTemp48) + ((0.0788598284f * fTemp49) + ((0.16000855f * fTemp295) + ((0.0652180538f * fTemp213) + ((0.0776085705f * fTemp298) + ((0.089510791f * fTemp299) + ((0.141941592f * fTemp300) + ((0.0721457601f * fTemp301) + ((0.156773582f * fTemp302) + ((0.0940580443f * fTemp50) + ((0.0801721215f * fTemp51) + ((0.123416856f * fTemp305) + ((0.351359606f * fTemp306) + ((0.199835196f * fTemp307) + ((0.0346995443f * fTemp509) + ((0.0316171758f * fTemp310) + ((0.0219733268f * fTemp311) + ((0.0101016266f * fTemp312) + (((0.00338755455f * ((fTemp388 + fTemp392) - fTemp341)) + ((0.00219733268f * ((fTemp93 + fTemp137) - fTemp337)) + ((0.00634784997f * ((fTemp110 + fTemp267) - fTemp375)) + ((0.00491348002f * (((fTemp14 + fTemp95) - fTemp426) - fTemp127)) + ((0.00384533219f * ((fTemp464 + fTemp444) - fTemp340)) + ((0.003234962f * ((fTemp165 + fTemp510) - fTemp142)) + ((0.00332651753f * (fTemp376 + fTemp227)) + ((0.0025940733f * (fTemp410 - fTemp150)) + ((0.00238044374f * (fTemp384 + fTemp22)) + ((0.00430310983f * (fTemp502 - fTemp420)) + ((0.00369273964f * (fTemp438 + fTemp364)) + ((0.00439466536f * (fTemp170 + fTemp190)) + ((0.00305185094f * (fTemp458 + fTemp225)) + ((0.00399792474f * ((fTemp483 + fTemp147) - fTemp463)) + ((0.00885036774f * (fTemp17 + fTemp348)) + ((0.0116885891f * (fTemp16 + fTemp224)) + ((0.00866725668f * (fTemp432 + fTemp129)) + ((0.00573747978f * (fTemp13 + fTemp467)) + ((0.00244148076f * (fTemp472 - fTemp411)) + ((3.05185094e-05f * (fTemp195 + (((fTemp543 - fTemp81) - fTemp61) - fTemp201))) + ((0.0118411817f * (fTemp196 + fTemp412)) + ((0.0196844395f * (fTemp168 + fTemp232)) + ((0.0051576281f * (fTemp202 + fTemp335)) + ((0.00787377544f * (fTemp398 + fTemp387)) + ((0.00674459059f * (fTemp418 + fTemp242)) + ((0.00347911008f * (fTemp486 + fTemp339)) + ((0.00372325815f * (fTemp367 + fTemp241)) + ((0.0028992584f * (fTemp126 + fTemp363)) + ((9.15555283e-05f * (fTemp178 + (fTemp62 - fTemp313))) + ((0.00662251655f * (fTemp209 + fTemp96)) + ((0.00778221991f * (fTemp91 + fTemp501)) + ((0.00576799829f * (fTemp200 + fTemp173)) + ((0.016235847f * (fTemp493 + fTemp92)) + ((0.0182805881f * (fTemp203 + fTemp293)) + ((0.00955229346f * (fTemp236 + fTemp470)) + ((0.0114749596f * (fTemp503 + fTemp308)) + ((0.027558215f * (fTemp309 - fTemp284)) + (0.00268562883f * fTemp691)))))))))))))))))))))))))))))))))))))) + (0.0019226661f * ((fTemp504 - fTemp239) - fTemp513)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow29 ? (iSlow31 ? (((0.0755943507f * fTemp0) + ((0.464491725f * fTemp2) + ((0.138096258f * fTemp218) + ((0.159154028f * fTemp219) + ((0.0284737702f * fTemp220) + ((0.0169988107f * fTemp221) + ((0.0422070995f * fTemp222) + ((0.00436414685f * fTemp173) + (fTemp754 + ((0.00189214759f * fTemp225) + (fTemp633 + ((0.0074159978f * fTemp358) + ((0.00897244178f * fTemp171) + ((0.00769066438f * fTemp160) + ((0.00558488723f * fTemp380) + ((0.00454725791f * fTemp184) + ((0.00668355357f * fTemp208) + ((0.0087282937f * fTemp467) + ((0.00863673817f * fTemp439) + ((0.00589007232f * fTemp217) + ((0.00247199927f * fTemp356) + ((0.0057985168f * fTemp489) + ((0.0112918485f * fTemp462) + ((0.0149540696f * fTemp206) + ((0.0153202917f * fTemp178) + ((0.0133976256f * fTemp116) + ((0.0071108127f * fTemp210) + ((0.000946073793f * fTemp207) + ((0.00308236945f * fTemp486) + (fTemp523 + ((0.00735496078f * fTemp202) + ((0.00820947904f * fTemp93) + ((0.00790429395f * fTemp201) + ((0.00665303506f * fTemp347) + ((0.00766014587f * fTemp476) + ((0.00827051606f * fTemp195) + ((0.00772118289f * fTemp133) + ((0.00384533219f * fTemp472) + ((0.00866725668f * fTemp424) + ((0.00823999755f * fTemp15) + ((0.00759910885f * fTemp342) + ((0.00854518265f * fTemp463) + ((0.00796533097f * fTemp459) + (fTemp755 + (fTemp756 + ((0.0028992584f * fTemp164) + ((0.00564592425f * fTemp179) + ((0.00595110934f * fTemp151) + ((0.00543229468f * fTemp122) + ((0.00399792474f * fTemp177) + ((0.00521866512f * fTemp146) + ((0.00466933195f * fTemp443) + ((0.00305185094f * fTemp170) + (((0.00253303628f * fTemp357) + ((0.00143436994f * fTemp400) + ((0.00274666585f * fTemp449) + ((0.00103762932f * fTemp111) + ((0.00228888821f * fTemp246) + ((0.003234962f * fTemp247) + ((0.00183111057f * fTemp487) + ((0.000244148076f * fTemp251) + ((0.00512710959f * fTemp255) + ((0.00500503555f * fTemp256) + ((0.00347911008f * fTemp257) + ((0.00173955504f * fTemp264) + ((0.00332651753f * fTemp276) + ((0.00637836847f * fTemp277) + (fTemp649 + ((0.00958281197f * fTemp501) + ((0.00976592302f * fTemp488) + ((0.00704977568f * fTemp471) + ((0.00845362712f * fTemp477) + ((0.0135196997f * fTemp510) + ((0.014679403f * fTemp284) + ((0.0106204413f * fTemp285) + ((0.00350962859f * fTemp286) + ((0.00479140598f * fTemp292) + ((0.004852443f * fTemp430) + ((0.0236213263f * fTemp297) + ((0.0349742137f * fTemp298) + ((0.0386059135f * fTemp299) + ((0.0382091738f * fTemp300) + ((0.0245368816f * fTemp301) + ((0.0425733216f * fTemp305) + ((0.0598773174f * fTemp306) + ((0.030854214f * fTemp307) + ((0.0384838395f * fTemp509) + ((0.0762047172f * fTemp310) + ((0.0924100503f * fTemp311) + ((0.0794702023f * fTemp312) + ((0.051637318f * fTemp314) + ((0.0480971709f * fTemp315) + ((0.0241401419f * fTemp61) + ((0.0223700684f * fTemp319) + ((0.0660115331f * fTemp320) + ((0.128727078f * fTemp321) + ((0.153172404f * fTemp322) + ((0.0825525671f * fTemp68) + ((0.01126133f * fTemp324) + ((0.0951261967f * fTemp325) + ((0.140354618f * fTemp326) + ((0.112796411f * fTemp73) + ((0.115054779f * fTemp74) + ((0.0360423587f * fTemp75) + ((0.00204474013f * fTemp79) + ((0.119907223f * fTemp80) + ((0.310678422f * fTemp81) + ((0.436109513f * fTemp82) + ((0.189397871f * fTemp83) + ((0.51948607f * fTemp328) + (fTemp329 + ((0.846919179f * fTemp331) + ((0.380169064f * fTemp332) + ((0.000671407208f * (fTemp333 + ((fTemp418 + (fTemp181 + fTemp526)) - fTemp112))) + ((0.000183111057f * (fTemp334 + (fTemp156 + ((fTemp24 + (fTemp516 - fTemp233)) - fTemp26)))) + ((9.15555283e-05f * ((fTemp372 + (fTemp168 + ((fTemp244 - fTemp203) - fTemp91))) - fTemp231)) + ((0.000213629566f * ((fTemp375 + (fTemp410 - fTemp431)) - fTemp98)) + ((0.000122074038f * (fTemp107 + (fTemp162 + fTemp335))) + ((0.00100711081f * (fTemp341 + ((fTemp447 + (fTemp448 + (fTemp294 - fTemp242))) - fTemp153))) + ((0.00146488845f * (fTemp345 - fTemp340)) + ((0.000854518265f * (fTemp352 + (fTemp426 + (fTemp425 + fTemp16)))) + ((0.000396740623f * (fTemp365 + (fTemp371 + fTemp100))) + ((0.000366222113f * (fTemp366 + (fTemp440 - fTemp109))) + ((0.000457777642f * (fTemp346 + (fTemp373 + fTemp261))) + ((0.000305185094f * (fTemp124 + (((fTemp480 + fTemp406) - fTemp417) - fTemp354))) + ((0.000793481246f * (((((fTemp434 + fTemp94) - fTemp382) - fTemp119) - fTemp134) - fTemp125)) + ((0.00152592547f * (((fTemp121 + (fTemp250 - fTemp421)) - fTemp130) - fTemp403)) + ((0.00106814783f * ((fTemp150 + (fTemp428 + (fTemp89 + fTemp498))) - fTemp405)) + ((0.00112918485f * (fTemp279 - fTemp408)) + ((0.000610370189f * (fTemp108 + fTemp456)) + ((0.00155644398f * (fTemp99 + (fTemp166 + (fTemp452 + (fTemp391 + (fTemp254 - fTemp457)))))) + ((0.00241096225f * (fTemp338 - fTemp140)) + ((0.00213629566f * (fTemp384 + (fTemp200 + fTemp249))) + ((0.00186162908f * (fTemp152 + (fTemp132 + ((fTemp174 - fTemp407) - fTemp161)))) + ((0.00244148076f * (fTemp240 - fTemp115)) + ((0.000823999755f * ((fTemp455 + (fTemp167 + (fTemp23 + fTemp154))) - fTemp163)) + ((0.00109866634f * (fTemp97 + (fTemp45 - fTemp348))) + ((0.00390636921f * (fTemp364 + (fTemp137 + fTemp248))) + ((0.00234992523f * (fTemp458 + fTemp194)) + ((0.00604266487f * (fTemp230 + (fTemp293 + fTemp302))) + ((0.00689718314f * (fTemp432 + fTemp304)) + ((0.00378429517f * (fTemp229 + fTemp415)) + ((0.000885036774f * (fTemp228 + fTemp92)) + ((0.00601214636f * (fTemp454 + fTemp398)) + ((0.00207525864f * (fTemp12 - fTemp442)) + ((0.00125125889f * (fTemp197 + ((fTemp28 - fTemp6) - fTemp378))) + ((0.00424207281f * (fTemp183 - fTemp388)) + ((0.00250251777f * (fTemp483 + fTemp460)) + ((0.0103762932f * (fTemp198 - fTemp363)) + ((0.0012817774f * (fTemp193 + fTemp260)) + ((0.00271614734f * (fTemp129 + (fTemp147 + fTemp385))) + ((0.00216681417f * ((fTemp369 + fTemp263) - fTemp444)) + ((0.00369273964f * (fTemp435 + (fTemp387 + fTemp445))) + ((0.00299081393f * (fTemp226 + fTemp368)) + ((0.000335703604f * (((fTemp283 - fTemp253) - fTemp515) - fTemp490)) + ((0.00167851802f * fTemp551) + (0.000640888698f * (fTemp419 + fTemp241))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00149540696f * fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.117831968f * fTemp1) + ((0.475051105f * fTemp402) + ((0.104617454f * fTemp3) + ((0.0963164195f * fTemp4) + ((0.0321359895f * fTemp5) + ((0.131962031f * fTemp7) + ((0.0601519831f * fTemp223) + ((0.00131229591f * fTemp96) + ((0.00793481246f * fTemp104) + ((0.00949125644f * fTemp381) + ((0.00778221991f * fTemp450) + ((0.00335703604f * fTemp209) + ((0.00781273842f * fTemp10) + ((0.0100100711f * fTemp11) + ((0.00802636798f * fTemp339) + ((0.00198370311f * fTemp157) + ((0.0058290353f * fTemp189) + ((0.00357066561f * fTemp18) + ((0.00534073915f * fTemp19) + ((0.00531022064f * fTemp187) + ((0.00396740623f * fTemp20) + ((0.0025940733f * fTemp139) + ((0.00134281442f * fTemp235) + ((0.00494399853f * fTemp143) + ((0.00439466536f * fTemp416) + ((0.00201422162f * fTemp386) + ((0.00283822138f * fTemp269) + ((0.00720236823f * fTemp271) + ((0.011322367f * fTemp370) + ((0.0106814783f * fTemp186) + ((0.00848414563f * fTemp188) + ((0.00265511032f * fTemp274) + ((0.00610370189f * fTemp169) + ((0.0126651814f * fTemp33) + ((0.00888088625f * fTemp281) + ((0.00833155308f * fTemp215) + ((0.00814844202f * fTemp468) + ((0.00540177617f * fTemp282) + ((0.00891140476f * fTemp290) + ((0.00448622089f * fTemp291) + ((0.00701925717f * fTemp484) + ((0.00744651631f * fTemp34) + ((0.0251777712f * fTemp479) + ((0.0257271044f * fTemp35) + ((0.0184636991f * fTemp36) + (fTemp757 + ((0.00930814538f * fTemp38) + (fTemp758 + ((0.0145878475f * fTemp40) + ((0.00946073793f * fTemp41) + ((0.00985747855f * fTemp43) + ((0.018097477f * fTemp47) + ((0.0286568813f * fTemp48) + ((0.0308236945f * fTemp49) + ((0.0326242857f * fTemp295) + ((0.0359813236f * fTemp213) + ((0.0240485854f * fTemp296) + ((0.0432752483f * fTemp51) + ((0.0604266487f * fTemp52) + ((0.0574053153f * fTemp53) + ((0.0426648781f * fTemp159) + ((0.0213629566f * fTemp303) + ((0.0118717002f * fTemp54) + (fTemp759 + ((0.0143742179f * fTemp56) + ((0.0129093295f * fTemp57) + ((0.0316782147f * fTemp144) + ((0.0722067952f * fTemp508) + ((0.0539262071f * fTemp308) + ((0.0107119968f * fTemp309) + ((0.0467238389f * fTemp212) + ((0.0956450105f * fTemp58) + ((0.139835805f * fTemp59) + ((0.10834071f * fTemp60) + ((0.0496230982f * fTemp199) + ((0.0206915494f * fTemp62) + ((0.0325937681f * fTemp63) + ((0.0244148076f * fTemp64) + ((0.0431836918f * fTemp65) + ((0.0723288655f * fTemp66) + ((0.0902127177f * fTemp67) + ((0.0620136112f * fTemp316) + ((0.0156559963f * fTemp69) + ((0.0864589363f * fTemp70) + ((0.139011815f * fTemp71) + ((0.160893589f * fTemp72) + ((0.111209452f * fTemp135) + ((0.052064579f * fTemp323) + ((0.145268112f * fTemp76) + ((0.388866842f * fTemp77) + ((0.376934111f * fTemp507) + ((0.188268691f * fTemp78) + ((0.142796099f * fTemp84) + ((0.452314824f * fTemp327) + ((0.564714491f * fTemp85) + ((0.595294058f * fTemp86) + ((0.534348607f * fTemp87) + (((0.000152592547f * (fTemp101 + ((fTemp142 + (fTemp126 + fTemp238)) - fTemp353))) + ((0.00054933317f * (((fTemp145 - fTemp105) - fTemp118) - fTemp336)) + ((0.00140385143f * (((fTemp192 - fTemp204) - fTemp451) - fTemp106)) + ((0.001617481f * (((fTemp95 - fTemp258) - fTemp123) - fTemp337)) + ((0.00115970336f * ((fTemp399 - fTemp376) - fTemp114)) + ((0.00057985168f * (fTemp46 - fTemp360)) + ((0.000518814661f * (((fTemp389 + fTemp148) - fTemp374) - fTemp113)) + ((6.10370189e-05f * (fTemp383 + (fTemp344 + fTemp27))) + ((0.000274666585f * (fTemp361 + (fTemp120 + (fTemp482 + (fTemp474 + (fTemp265 - fTemp494)))))) + ((0.000732444227f * (fTemp390 + (fTemp497 + fTemp287))) + ((3.05185094e-05f * ((fTemp13 + (fTemp436 + fTemp429)) - fTemp529)) + ((0.000427259132f * (fTemp394 + ((fTemp149 + (fTemp205 + fTemp343)) - fTemp155))) + ((0.000976592302f * (fTemp396 + fTemp14)) + ((0.00137333293f * (fTemp127 + (fTemp131 + (((fTemp379 + ((fTemp520 - fTemp461) - fTemp165)) - fTemp475) - fTemp420)))) + ((0.000762962736f * (fTemp409 + (fTemp414 + fTemp128))) + ((0.0019531846f * (fTemp136 + fTemp270)) + ((0.00268562883f * (fTemp393 - fTemp355)) + ((0.00219733268f * (fTemp102 - fTemp141)) + ((0.00222785119f * (((fTemp423 - fTemp496) - fTemp349) - fTemp438)) + ((0.00527970213f * ((fTemp214 - fTemp469) - fTemp351)) + ((0.0045167394f * (((fTemp158 + fTemp318) - fTemp359) - fTemp446)) + ((0.00286873989f * ((fTemp500 + fTemp362) - fTemp172)) + ((0.0051576281f * ((fTemp280 - fTemp138) - fTemp350)) + ((0.0022583697f * (fTemp90 + (fTemp273 - fTemp29))) + ((0.00518814661f * (fTemp521 + (fTemp8 + fTemp289))) + ((0.00344859157f * (fTemp17 - fTemp227)) + ((0.00170903653f * (fTemp237 - fTemp433)) + ((0.00619525742f * (fTemp30 - fTemp196)) + ((0.00427259132f * (fTemp412 - fTemp478)) + ((0.00415051728f * (fTemp44 - fTemp411)) + ((0.00302133244f * ((fTemp453 + fTemp267) - fTemp464)) + ((0.00231940672f * (fTemp401 - fTemp367)) + ((0.00119022187f * (((fTemp180 - fTemp259) - fTemp422) - fTemp103)) + ((0.009704886f * ((fTemp492 + fTemp511) - fTemp110)) + ((0.00875881221f * (fTemp441 - fTemp377)) + ((0.00311288796f * ((fTemp506 - fTemp395) - fTemp466)) + ((0.00238044374f * (fTemp473 - fTemp514)) + ((0.00277718436f * (fTemp42 - fTemp224)) + ((0.00341807306f * ((fTemp275 - fTemp495) - fTemp176)) + ((0.0042115543f * ((fTemp266 - fTemp175) - fTemp397)) + ((0.00326548051f * (fTemp272 - fTemp232)) + ((0.00158696249f * (fTemp413 + fTemp604)) + ((0.000488296151f * (fTemp499 - fTemp234)) + ((0.00256355479f * (fTemp236 + (fTemp470 + fTemp31))) + ((0.00280770287f * (fTemp502 + (fTemp243 + fTemp404))) + ((0.00164799951f * (fTemp252 - fTemp239)) + ((0.00177007355f * ((fTemp216 + fTemp503) - fTemp504)) + ((0.00329599902f * (fTemp268 + fTemp288)) + ((0.0102542192f * (fTemp32 + fTemp505)) + ((0.0168156996f * (fTemp485 + fTemp50)) + (0.00180059206f * fTemp637))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00122074038f * ((fTemp491 - fTemp22) - fTemp513))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.115054779f * fTemp0) + ((0.0143436994f * fTemp218) + ((0.188360244f * fTemp220) + ((0.0942411572f * fTemp4) + ((0.0669881254f * fTemp6) + ((0.26319164f * fTemp221) + ((0.000366222113f * fTemp514) + ((0.00238044374f * fTemp165) + ((0.00149540696f * fTemp467) + ((0.00299081393f * fTemp363) + ((0.00689718314f * fTemp339) + ((0.00949125644f * fTemp489) + ((0.009704886f * fTemp367) + ((0.00967436749f * fTemp464) + ((0.00851466414f * fTemp227) + ((0.00717184972f * fTemp486) + ((0.00366222113f * fTemp452) + ((0.00708029419f * fTemp93) + ((0.00411999878f * fTemp347) + ((0.00119022187f * fTemp196) + ((0.00231940672f * fTemp476) + ((0.00320444349f * fTemp195) + ((0.00335703604f * fTemp133) + ((0.00659199804f * fTemp432) + ((0.0109256264f * fTemp230) + ((0.0077517014f * fTemp191) + ((0.00338755455f * fTemp149) + ((0.0019531846f * fTemp179) + ((0.0074159978f * fTemp151) + ((0.0112308115f * fTemp122) + ((0.0124210333f * fTemp177) + ((0.0107425153f * fTemp458) + ((0.00686666463f * fTemp22) + ((0.0067751091f * fTemp364) + ((0.00924710836f * fTemp170) + ((0.00881984923f * fTemp166) + ((0.00558488723f * fTemp434) + ((0.00494399853f * fTemp97) + ((0.00732444227f * fTemp428) + ((0.00570696127f * fTemp150) + (fTemp578 + (fTemp747 + ((0.00271614734f * fTemp338) + ((0.00277718436f * fTemp127) + ((0.00311288796f * fTemp496) + ((0.00381481368f * fTemp461) + ((0.0045167394f * fTemp502) + ((0.000915555283f * fTemp470) + ((0.00332651753f * fTemp174) + ((0.00619525742f * fTemp175) + ((0.000701925717f * fTemp259) + ((0.00854518265f * fTemp262) + ((0.0028992584f * fTemp266) + ((0.00521866512f * fTemp270) + ((0.00573747978f * fTemp279) + ((0.0156865139f * fTemp280) + ((0.0245368816f * fTemp281) + ((0.0263679922f * fTemp215) + ((0.0189519953f * fTemp468) + ((0.00527970213f * fTemp282) + ((0.00469985045f * fTemp287) + ((0.0119937742f * fTemp288) + (fTemp748 + ((0.0165105145f * fTemp290) + ((0.0200811792f * fTemp505) + ((0.0242927335f * fTemp511) + ((0.0260628071f * fTemp291) + ((0.0221869573f * fTemp292) + ((0.0159001444f * fTemp36) + ((0.0386059135f * fTemp37) + ((0.0530716889f * fTemp38) + ((0.0492873937f * fTemp39) + ((0.0281991027f * fTemp40) + ((0.00164799951f * fTemp41) + ((0.0118717002f * fTemp49) + ((0.0375072472f * fTemp295) + ((0.060029909f * fTemp213) + ((0.0672322735f * fTemp296) + ((0.0542619117f * fTemp430) + ((0.02600177f * fTemp297) + ((0.00891140476f * fTemp51) + ((0.0593584999f * fTemp52) + ((0.104586929f * fTemp53) + ((0.132725f * fTemp159) + ((0.138798177f * fTemp303) + ((0.117130041f * fTemp304) + ((0.0633564293f * fTemp305) + ((0.0828577504f * fTemp508) + ((0.165440843f * fTemp308) + ((0.226294741f * fTemp309) + ((0.244880527f * fTemp509) + ((0.207464829f * fTemp310) + ((0.116794333f * fTemp311) + ((0.0375988036f * fTemp60) + ((0.171300396f * fTemp199) + ((0.299661249f * fTemp314) + ((0.279610574f * fTemp315) + ((0.199133277f * fTemp61) + ((0.22574541f * fTemp316) + ((0.267677844f * fTemp318) + ((0.241096228f * fTemp319) + ((0.120761745f * fTemp320) + ((0.0208136234f * fTemp321) + ((0.142246768f * fTemp72) + ((0.293893248f * fTemp135) + ((0.395886093f * fTemp323) + ((0.404400766f * fTemp324) + ((0.266029835f * fTemp325) + (fTemp749 + ((0.170323804f * fTemp78) + ((0.273323774f * fTemp79) + ((0.405285805f * fTemp80) + ((0.439222395f * fTemp81) + ((0.254738003f * fTemp82) + ((0.612720132f * fTemp328) + ((0.877224028f * fTemp329) + ((0.679158926f * fTemp331) + ((0.33823663f * fTemp332) + ((0.000946073793f * ((fTemp389 + (fTemp147 + ((fTemp216 - fTemp240) - fTemp204))) - fTemp513)) + ((0.00057985168f * (((fTemp368 + fTemp362) - fTemp105) - fTemp101)) + ((0.000152592547f * (fTemp107 + (fTemp352 + fTemp460))) + ((0.000854518265f * (fTemp336 + (fTemp91 + fTemp255))) + ((0.00177007355f * (fTemp106 - fTemp433)) + ((0.00186162908f * (fTemp337 + fTemp152)) + ((0.00125125889f * ((fTemp24 + (fTemp450 + ((fTemp234 - fTemp96) - fTemp138))) - fTemp365)) + ((0.00173955504f * ((fTemp516 - fTemp350) - fTemp366)) + ((0.00222785119f * (fTemp124 + (fTemp130 - fTemp335))) + ((0.00265511032f * (fTemp353 + fTemp271)) + ((0.00253303628f * (fTemp383 + fTemp203)) + ((0.0019226661f * (fTemp361 + (fTemp419 + fTemp274))) + ((0.00100711081f * (((fTemp421 + fTemp275) - fTemp171) - fTemp112)) + ((0.00241096225f * (fTemp29 - fTemp372)) + ((0.00201422162f * ((fTemp109 + (fTemp229 + fTemp250)) - fTemp529)) + ((0.00112918485f * (fTemp396 + (fTemp154 + fTemp223))) + ((0.00296029542f * (fTemp403 + (fTemp247 - fTemp140))) + ((0.00402844325f * (fTemp119 - fTemp359)) + ((0.00497451704f * (fTemp108 + fTemp237)) + ((0.00433362834f * (fTemp99 + (fTemp385 - fTemp180))) + ((0.000274666585f * (fTemp355 + (fTemp381 - fTemp415))) + ((0.00216681417f * ((fTemp232 - fTemp228) - fTemp384)) + ((0.00625629444f * (fTemp100 - fTemp343)) + ((0.0058290353f * (((fTemp263 - fTemp453) - fTemp437) - fTemp115)) + ((0.000640888698f * (fTemp161 + (((fTemp194 + fTemp239) - fTemp349) - fTemp18))) + ((0.00778221991f * (fTemp426 + fTemp248)) + ((0.00308236945f * ((fTemp443 + fTemp238) - fTemp26)) + ((0.0100405896f * (fTemp438 + fTemp388)) + ((0.0057985168f * ((fTemp483 + fTemp249) - fTemp351)) + ((0.00244148076f * ((fTemp209 + fTemp2) - fTemp167)) + ((0.00213629566f * (fTemp23 + fTemp369)) + ((0.0110171819f * (fTemp459 + fTemp480)) + ((0.00781273842f * (fTemp463 + fTemp272)) + ((0.00292977691f * (fTemp342 + fTemp208)) + ((0.00109866634f * (fTemp416 - fTemp16)) + ((0.00491348002f * (fTemp469 + fTemp260)) + ((0.00317392498f * (fTemp498 - fTemp168)) + ((0.00137333293f * (fTemp264 - fTemp197)) + ((0.00543229468f * (fTemp202 - fTemp356)) + ((0.000183111057f * (fTemp418 - fTemp129)) + ((0.00473036896f * (fTemp126 - fTemp178)) + ((0.000823999755f * ((fTemp750 - fTemp200) - fTemp128)) + ((0.000244148076f * (fTemp380 + fTemp395)) + ((0.0012817774f * (fTemp473 + fTemp422)) + ((0.000427259132f * (fTemp444 + fTemp28)) + ((0.00247199927f * ((fTemp111 + fTemp503) - fTemp391)) + ((0.00204474013f * (fTemp500 - fTemp499)) + ((0.00827051606f * (fTemp261 + fTemp273)) + ((0.0104678487f * (fTemp293 - fTemp31)) + (0.00268562883f * fTemp554)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.103915527f * fTemp1) + ((0.0642109439f * fTemp402) + ((0.140293583f * fTemp3) + ((0.220099494f * fTemp219) + ((0.282509834f * fTemp5) + ((0.208105713f * fTemp7) + ((0.119876705f * fTemp222) + ((3.05185094e-05f * fTemp224) + ((0.000335703604f * fTemp379) + ((0.000671407208f * fTemp466) + ((0.00167851802f * fTemp377) + ((0.00369273964f * fTemp217) + ((0.0101016266f * fTemp116) + ((0.0132450331f * fTemp198) + ((0.012817774f * fTemp210) + ((0.00930814538f * fTemp137) + ((0.00436414685f * fTemp207) + ((0.00845362712f * fTemp157) + ((0.00790429395f * fTemp482) + ((0.00360118411f * fTemp153) + ((0.00457777642f * fTemp192) + ((0.00488296151f * fTemp14) + ((0.00671407208f * fTemp17) + ((0.00985747855f * fTemp189) + ((0.00836207159f * fTemp90) + ((0.0054933317f * fTemp123) + ((0.0116885891f * fTemp20) + ((0.0137943663f * fTemp185) + ((0.0130924406f * fTemp182) + ((0.00628681295f * fTemp455) + ((0.00909451582f * fTemp451) + ((0.00830103457f * fTemp27) + ((0.00701925717f * fTemp373) + ((0.00738547929f * fTemp427) + ((0.00439466536f * fTemp420) + ((0.00454725791f * fTemp417) + ((0.00418103579f * fTemp136) + ((0.00363170262f * fTemp409) + ((0.0025940733f * fTemp134) + ((0.00250251777f * fTemp375) + ((0.00122074038f * fTemp98) + ((0.00219733268f * fTemp504) + ((0.00585955381f * fTemp243) + ((0.000213629566f * fTemp143) + ((0.0038758507f * fTemp423) + ((0.00747703481f * fTemp465) + ((0.00595110934f * fTemp491) + ((0.003234962f * fTemp252) + ((0.00283822138f * fTemp401) + ((0.000122074038f * fTemp256) + ((0.00341807306f * fTemp265) + ((0.00704977568f * fTemp497) + (fTemp519 + ((0.00604266487f * fTemp268) + ((0.00503555406f * fTemp269) + ((0.0121158483f * fTemp186) + ((0.0164189581f * fTemp188) + ((0.0152897732f * fTemp30) + ((0.0114139225f * fTemp32) + ((0.00750755332f * fTemp33) + ((0.00897244178f * fTemp277) + (fTemp751 + ((0.00753807183f * fTemp501) + ((0.00991851557f * fTemp283) + ((0.0226752535f * fTemp477) + ((0.0303659178f * fTemp510) + ((0.0301828068f * fTemp284) + ((0.0215765871f * fTemp285) + ((0.027680289f * fTemp484) + ((0.0416272469f * fTemp34) + ((0.0442518406f * fTemp441) + ((0.0363475457f * fTemp485) + ((0.022705771f * fTemp479) + ((0.00546281319f * fTemp35) + ((0.0186468102f * fTemp42) + ((0.0302438438f * fTemp214) + ((0.0360118411f * fTemp43) + ((0.0372325815f * fTemp44) + ((0.0335703604f * fTemp45) + ((0.0262459181f * fTemp46) + ((0.01803644f * fTemp47) + ((0.00674459059f * fTemp48) + ((0.00787377544f * fTemp298) + ((0.0390026569f * fTemp299) + ((0.0609759837f * fTemp300) + ((0.0702841282f * fTemp301) + ((0.0625019073f * fTemp302) + ((0.0353709534f * fTemp50) + ((0.0106509598f * fTemp306) + ((0.081667535f * fTemp307) + ((0.126407668f * fTemp54) + ((0.139530629f * fTemp55) + ((0.130069882f * fTemp56) + ((0.106387526f * fTemp57) + ((0.0640583485f * fTemp144) + ((0.207922608f * fTemp313) + ((0.25778985f * fTemp212) + ((0.260139763f * fTemp58) + ((0.101748712f * fTemp59) + ((0.0865504965f * fTemp62) + ((0.208166748f * fTemp63) + ((0.270516068f * fTemp64) + ((0.263710439f * fTemp65) + ((0.200201422f * fTemp66) + ((0.071474351f * fTemp67) + ((0.111117892f * fTemp322) + ((0.27362895f * fTemp68) + ((0.268929094f * fTemp69) + ((0.225012973f * fTemp70) + ((0.0113528855f * fTemp71) + ((0.238380075f * fTemp326) + ((0.374889374f * fTemp73) + ((0.399182111f * fTemp74) + ((0.383587152f * fTemp75) + ((0.336680204f * fTemp76) + ((0.234504223f * fTemp77) + ((0.131992549f * fTemp83) + ((0.127109587f * fTemp84) + ((0.275307477f * fTemp327) + ((0.679647207f * fTemp85) + (fTemp599 + ((0.812952042f * fTemp87) + ((((((0.00158696249f * ((fTemp226 + fTemp251) - fTemp345)) + ((0.000976592302f * (((fTemp158 + fTemp225) - fTemp89) - fTemp114)) + ((0.000610370189f * (fTemp360 + (fTemp413 + fTemp386))) + ((0.00180059206f * (fTemp371 + (fTemp439 + fTemp258))) + ((0.00140385143f * (fTemp113 + (fTemp393 - fTemp493))) + ((0.00054933317f * (fTemp118 + fTemp456)) + ((0.000488296151f * (((fTemp104 + (((fTemp94 - fTemp233) - fTemp406) - fTemp397)) - fTemp205) - fTemp374)) + ((0.00146488845f * ((fTemp12 - fTemp378) - fTemp346)) + ((9.15555283e-05f * (fTemp390 + ((fTemp110 + (fTemp160 + (fTemp392 + fTemp253))) - fTemp125))) + ((0.00183111057f * (fTemp354 - fTemp398)) + ((0.00103762932f * (fTemp394 + fTemp405)) + ((0.00210577715f * ((fTemp357 + (fTemp520 - fTemp246)) - fTemp399)) + ((0.000732444227f * ((fTemp471 - fTemp141) - fTemp131)) + ((0.00424207281f * (fTemp408 + (fTemp19 + fTemp488))) + ((0.00326548051f * (fTemp139 + (fTemp145 + (fTemp181 + (fTemp448 + fTemp412))))) + ((0.000793481246f * (((fTemp492 - fTemp506) - fTemp254) - fTemp102)) + ((0.00274666585f * (fTemp312 - fTemp340)) + ((0.00479140598f * ((fTemp410 + fTemp407) - fTemp142)) + ((0.00393688772f * (fTemp376 + fTemp348)) + ((0.000885036774f * (fTemp148 + fTemp474)) + ((0.00427259132f * (fTemp370 - fTemp121)) + ((0.00131229591f * (fTemp132 - fTemp411)) + ((0.00662251655f * (fTemp155 - fTemp156)) + ((0.00762962736f * (fTemp382 + fTemp429)) + ((0.00408948027f * (fTemp241 - fTemp163)) + ((0.00347911008f * (fTemp425 + (fTemp276 - fTemp193))) + ((0.00863673817f * (fTemp162 + fTemp457)) + ((0.00637836847f * (fTemp431 - fTemp201)) + ((0.00900296029f * (fTemp446 - fTemp15)) + ((0.0101626636f * (fTemp172 + fTemp521)) + ((0.00946073793f * (fTemp164 - fTemp424)) + ((0.00799584948f * (fTemp187 + (fTemp286 - fTemp103))) + ((0.00372325815f * (fTemp13 - fTemp184)) + ((0.000457777642f * (fTemp236 - fTemp472)) + ((0.00234992523f * ((fTemp183 + fTemp494) - fTemp454)) + ((0.00448622089f * fTemp752) + ((0.00714133121f * (fTemp442 + fTemp169)) + ((0.00106814783f * ((fTemp190 + (fTemp526 - fTemp244)) - fTemp206)) + ((0.00598162785f * (fTemp242 - fTemp462)) + ((0.000305185094f * (fTemp11 - fTemp387)) + ((0.00170903653f * (fTemp358 + fTemp235)) + ((0.001617481f * (fTemp435 + ((fTemp257 - fTemp495) - fTemp211))) + ((0.0022583697f * (fTemp440 - fTemp490)) + ((0.00415051728f * (fTemp95 - fTemp400)) + ((0.00769066438f * (fTemp294 - fTemp445)) + (0.00189214759f * (fTemp449 + fTemp753))))))))))))))))))))))))))))))))))))))))))))))) + (0.00143436994f * ((fTemp176 + fTemp404) - fTemp341))) + (0.00152592547f * (fTemp334 + fTemp231))) + (0.00134281442f * (fTemp333 + fTemp146))) + (0.000396740623f * (fTemp88 + fTemp173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow30 ? ((fTemp223 + ((0.00344859157f * fTemp339) + ((0.00311288796f * fTemp388) + ((0.00137333293f * fTemp198) + ((0.00134281442f * fTemp411) + ((0.00671407208f * fTemp153) + (fTemp697 + ((0.00921658985f * fTemp192) + ((0.00891140476f * fTemp168) + ((0.00305185094f * fTemp478) + ((0.00329599902f * fTemp472) + ((0.0105288858f * fTemp433) + ((0.0104068117f * fTemp13) + ((0.00543229468f * fTemp414) + ((0.00692770164f * fTemp14) + ((0.011383404f * fTemp463) + ((0.0136417737f * fTemp459) + ((0.0131229591f * fTemp230) + ((0.00988799706f * fTemp191) + ((0.00643940549f * fTemp149) + ((0.00378429517f * fTemp18) + ((0.000610370189f * fTemp164) + ((0.00357066561f * fTemp455) + ((0.00454725791f * fTemp364) + ((0.00506607257f * fTemp431) + ((0.00625629444f * fTemp27) + ((0.00619525742f * fTemp428) + ((0.000885036774f * fTemp115) + ((0.0042115543f * fTemp121) + ((0.006469924f * fTemp150) + ((0.00747703481f * fTemp120) + ((0.00564592425f * fTemp142) + ((0.00396740623f * fTemp119) + ((0.00149540696f * fTemp131) + ((0.00442518387f * fTemp127) + ((0.00473036896f * fTemp399) + ((0.00250251777f * fTemp529) + ((0.00180059206f * fTemp375) + ((0.00173955504f * fTemp372) + ((0.00207525864f * fTemp354) + ((0.00119022187f * fTemp124) + ((0.00177007355f * fTemp114) + ((0.00112918485f * fTemp336) + (((0.0158391073f * fTemp370) + ((0.0292367321f * fTemp186) + ((0.0295113996f * fTemp188) + ((0.00955229346f * fTemp32) + (fTemp738 + ((0.024567401f * fTemp280) + ((0.0321970284f * fTemp281) + ((0.0309457686f * fTemp215) + ((0.025818659f * fTemp468) + ((0.0603350922f * fTemp289) + ((0.0786461979f * fTemp290) + ((0.0506607257f * fTemp505) + ((0.0242622159f * fTemp35) + ((0.0545365773f * fTemp37) + ((0.0682088658f * fTemp38) + ((0.0771202743f * fTemp39) + ((0.0766624957f * fTemp40) + ((0.0546586514f * fTemp41) + ((0.0384838395f * fTemp42) + ((0.0681478307f * fTemp48) + ((0.149113432f * fTemp49) + ((0.134983361f * fTemp295) + ((0.0550248735f * fTemp213) + ((0.0131534776f * fTemp299) + ((0.009704886f * fTemp52) + ((0.025940733f * fTemp53) + ((0.0383007303f * fTemp159) + ((0.0173039958f * fTemp303) + ((0.0468153954f * fTemp304) + ((0.0863063484f * fTemp305) + ((0.117069006f * fTemp306) + ((0.223792225f * fTemp57) + ((0.845423758f * fTemp144) + ((0.679006338f * fTemp508) + ((0.273018599f * fTemp308) + ((0.0702536106f * fTemp309) + ((0.0188604388f * fTemp509) + (fTemp727 + ((0.000366222113f * fTemp66) + (((0.000244148076f * (fTemp107 + ((fTemp59 + (fTemp61 + (fTemp64 + (fTemp75 + fTemp76)))) - fTemp24))) + ((0.0019531846f * fTemp739) + ((0.00253303628f * (fTemp106 + fTemp170)) + ((0.00265511032f * (fTemp337 - fTemp384)) + ((0.00241096225f * (fTemp345 - fTemp145)) + ((0.00231940672f * ((fTemp152 + (fTemp214 - fTemp462)) - fTemp371)) + ((0.000305185094f * (fTemp346 + fTemp420)) + ((0.00186162908f * (fTemp353 - fTemp424)) + ((0.00234992523f * (fTemp383 - fTemp408)) + ((0.00271614734f * (fTemp361 + fTemp26)) + ((0.00296029542f * (fTemp389 + (fTemp390 - fTemp227))) + ((0.00262459181f * (fTemp112 + fTemp740)) + ((0.00424207281f * (fTemp125 + fTemp109)) + ((0.00466933195f * (fTemp396 - fTemp183)) + ((0.00360118411f * (fTemp403 - fTemp154)) + ((0.00256355479f * (fTemp130 + (((fTemp271 - fTemp244) - fTemp458) - fTemp166))) + ((0.000396740623f * (fTemp405 + fTemp65)) + ((0.00204474013f * (fTemp169 - fTemp409)) + ((0.000122074038f * ((fTemp155 + (fTemp69 + (fTemp326 + (fTemp73 + (fTemp402 + (fTemp507 + (fTemp82 + (fTemp2 + (fTemp84 + fTemp676))))))))) - fTemp139)) + ((0.0012817774f * (fTemp393 + fTemp205)) + ((0.00222785119f * (fTemp102 + (fTemp19 + fTemp207))) + ((0.00280770287f * (fTemp340 - fTemp482)) + ((0.00717184972f * (fTemp108 - fTemp15)) + ((0.00704977568f * fTemp741) + ((0.00463881344f * (fTemp338 + fTemp426)) + ((0.000854518265f * (fTemp355 + fTemp427)) + ((0.00155644398f * (((fTemp480 - fTemp110) - fTemp136) - fTemp365)) + ((0.00433362834f * ((fTemp146 + (fTemp451 - fTemp453)) - fTemp417)) + ((0.00848414563f * (fTemp100 - fTemp377)) + ((0.00103762932f * (fTemp132 + (fTemp187 - fTemp126))) + ((0.000335703604f * (fTemp161 + fTemp315)) + ((0.00115970336f * (fTemp163 + fTemp350)) + ((0.00689718314f * (fTemp373 + (fTemp228 - fTemp128))) + ((0.00668355357f * (fTemp162 - fTemp173)) + ((0.00494399853f * (fTemp443 - fTemp450)) + ((0.00390636921f * (fTemp351 + (fTemp446 - fTemp181))) + ((0.00427259132f * (fTemp172 - fTemp93)) + ((0.00283822138f * (fTemp457 - fTemp177)) + ((0.00210577715f * (fTemp143 - fTemp122)) + ((0.000823999755f * (fTemp179 + (fTemp11 - fTemp7))) + ((0.00131229591f * (fTemp359 - fTemp418)) + ((6.10370189e-05f * (fTemp182 + (fTemp62 + (fTemp321 + (fTemp219 + (fTemp68 + (fTemp687 - fTemp3))))))) + ((0.000183111057f * (fTemp185 + (fTemp220 + ((fTemp74 + fTemp742) - fTemp135)))) + ((0.00875881221f * (fTemp282 - fTemp521)) + ((0.0038758507f * (fTemp432 - fTemp464)) + ((0.0035401471f * (fTemp491 - fTemp196)) + ((0.000152592547f * ((fTemp288 + (fTemp6 + (fTemp67 + (fTemp318 + (fTemp319 + (((((fTemp78 + (fTemp79 + (fTemp81 + fTemp327))) - fTemp218) - fTemp323) - fTemp72) - fTemp71)))))) - fTemp348)) + ((0.0155644398f * (fTemp30 - fTemp254)) + ((0.0438550971f * (fTemp36 - fTemp273)) + ((9.15555283e-05f * (fTemp63 + (fTemp4 + (fTemp320 + (fTemp70 + ((fTemp83 + fTemp737) - fTemp324)))))) + (0.000640888698f * (fTemp60 + fTemp221)))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00057985168f * (fTemp333 + fTemp148)))))))))))))))))))))))))))))))))))))))))) + (0.00106814783f * fTemp88))))))))))))))))))))))))))))))))))))))))))))) - ((0.034272287f * fTemp222) + ((0.00527970213f * fTemp493) + ((0.00476088747f * fTemp194) + ((0.00479140598f * fTemp224) + ((0.00674459059f * fTemp387) + ((0.0058290353f * fTemp415) + ((0.00460829493f * fTemp141) + ((0.00314340647f * fTemp391) + ((0.001617481f * fTemp200) + ((0.00170903653f * fTemp147) + (fTemp728 + ((0.00830103457f * fTemp490) + ((0.00567644276f * fTemp96) + ((0.00686666463f * fTemp474) + ((0.0111087374f * fTemp225) + ((0.0119022187f * fTemp226) + ((0.0110782189f * fTemp435) + ((0.00933866389f * fTemp190) + ((0.00772118289f * fTemp349) + ((0.00766014587f * fTemp444) + ((0.00616473891f * fTemp475) + ((0.00823999755f * fTemp138) + (fTemp743 + ((0.00790429395f * fTemp171) + ((0.0061342204f * fTemp158) + ((0.00488296151f * fTemp381) + ((0.00518814661f * fTemp209) + ((0.00509659108f * fTemp193) + ((0.00399792474f * fTemp184) + ((0.00164799951f * fTemp467) + ((0.0022583697f * fTemp439) + ((0.00308236945f * fTemp217) + ((0.00408948027f * fTemp356) + (fTemp9 + ((0.00146488845f * fTemp10) + ((0.000762962736f * fTemp489) + ((0.00219733268f * fTemp206) + ((0.00100711081f * fTemp178) + ((0.0045167394f * fTemp367) + ((0.00286873989f * fTemp483) + ((0.00244148076f * fTemp452) + ((0.00411999878f * fTemp437) + ((0.0159306619f * fTemp195) + ((0.0151982177f * fTemp133) + ((0.0093691824f * fTemp469) + ((0.00991851557f * fTemp16) + ((0.00143436994f * fTemp22) + (fTemp744 + ((0.0051576281f * fTemp410) + ((0.00152592547f * fTemp118) + ((0.00213629566f * fTemp113) + ((0.00216681417f * fTemp366) + ((0.000671407208f * fTemp98) + ((0.00503555406f * fTemp357) + (fTemp745 + ((0.00347911008f * fTemp397) + ((0.00637836847f * fTemp496) + ((0.00756859034f * fTemp461) + ((0.00833155308f * fTemp400) + ((0.00888088625f * fTemp498) + ((0.00976592302f * fTemp406) + ((0.0106204413f * fTemp494) + ((0.0109256264f * fTemp449) + ((0.0101016266f * fTemp395) + (fTemp731 + ((0.00512710959f * fTemp203) + ((0.00778221991f * fTemp436) + ((0.00939970091f * fTemp233) + ((0.0103762932f * fTemp234) + ((0.0105899228f * fTemp422) + ((0.0107119968f * fTemp94) + ((0.00857570115f * fTemp499) + ((0.00552385021f * fTemp235) + ((0.00402844325f * fTemp500) + ((0.0102542192f * fTemp237) + ((0.0130924406f * fTemp238) + ((0.0107730338f * fTemp240) + ((0.004852443f * fTemp241) + ((0.00335703604f * fTemp243) + ((0.0104983672f * fTemp246) + ((0.0171208847f * fTemp247) + ((0.0202337727f * fTemp487) + ((0.0196844395f * fTemp516) + ((0.0166631062f * fTemp216) + ((0.0119937742f * fTemp386) + ((0.00622577593f * fTemp423) + ((0.00158696249f * fTemp175) + ((0.00540177617f * fTemp248) + ((0.0123905148f * fTemp250) + ((0.0119632557f * fTemp252) + ((0.00994903408f * fTemp401) + ((0.0103152562f * fTemp404) + ((0.0122684408f * fTemp253) + ((0.0177617725f * fTemp255) + ((0.0195013285f * fTemp256) + ((0.0208441429f * fTemp257) + ((0.0209967345f * fTemp258) + ((0.0217902157f * fTemp259) + ((0.0221259203f * fTemp260) + ((0.0217291787f * fTemp261) + ((0.0191961434f * fTemp262) + ((0.016235847f * fTemp263) + ((0.0126346629f * fTemp264) + ((0.0133365886f * fTemp265) + ((0.0170293283f * fTemp497) + ((0.0196234025f * fTemp429) + ((0.0169377737f * fTemp180) + ((0.0115665151f * fTemp362) + ((0.00997955259f * fTemp266) + ((0.0122989593f * fTemp506) + ((0.0189214759f * fTemp267) + ((0.0239875484f * fTemp268) + ((0.0237128828f * fTemp269) + ((0.0171514023f * fTemp520) + ((0.00598162785f * fTemp29) + ((0.00537125766f * fTemp270) + ((0.0385448784f * fTemp95) + ((0.0578630939f * fTemp503) + ((0.0583513901f * fTemp272) + ((0.0191656239f * fTemp274) + ((0.000213629566f * fTemp33) + ((0.0183416251f * fTemp492) + ((0.0335703604f * fTemp275) + ((0.0372020639f * fTemp276) + ((0.0349436924f * fTemp277) + ((0.0284737702f * fTemp278) + ((0.0227973275f * fTemp501) + ((0.0127872555f * fTemp488) + ((0.0133671071f * fTemp283) + ((0.039124731f * fTemp477) + ((0.0633259043f * fTemp510) + ((0.0874660462f * fTemp284) + ((0.100619525f * fTemp285) + ((0.0965300426f * fTemp286) + ((0.0599688701f * fTemp287) + ((0.055055391f * fTemp291) + ((0.0832239762f * fTemp292) + ((0.086733602f * fTemp293) + ((0.0878627896f * fTemp294) + ((0.0898159742f * fTemp484) + ((0.0867030844f * fTemp34) + ((0.0664998293f * fTemp441) + ((0.0371715464f * fTemp485) + ((0.0289620664f * fTemp43) + ((0.0716574639f * fTemp44) + ((0.0983916745f * fTemp45) + ((0.0994598195f * fTemp46) + ((0.0375072472f * fTemp47) + ((0.0728476793f * fTemp296) + ((0.143498033f * fTemp430) + ((0.128086179f * fTemp297) + ((0.02600177f * fTemp298) + ((0.00183111057f * fTemp300) + ((0.0609149449f * fTemp301) + ((0.0828272328f * fTemp302) + ((0.0885647163f * fTemp50) + ((0.0447096154f * fTemp51) + ((0.0745567158f * fTemp307) + ((0.425366998f * fTemp54) + ((0.654591501f * fTemp55) + ((0.439405501f * fTemp56) + ((0.0214545131f * fTemp311) + ((0.0341807306f * fTemp312) + ((0.0255134739f * fTemp313) + ((0.0135196997f * fTemp212) + (((3.05185094e-05f * ((((fTemp322 - fTemp0) - fTemp316) - fTemp23) - fTemp334)) + ((0.000488296151f * (fTemp231 - fTemp20)) + ((0.000427259132f * (fTemp101 + ((fTemp438 + (fTemp465 + ((fTemp325 - fTemp5) - fTemp314))) - fTemp382))) + ((0.000701925717f * ((fTemp374 + fTemp514) - fTemp352)) + ((0.00054933317f * (fTemp360 + (fTemp151 - fTemp116))) + ((0.00341807306f * ((fTemp123 + fTemp392) - fTemp394)) + ((0.00469985045f * (fTemp376 + (fTemp58 - fTemp416))) + ((0.0090334788f * ((fTemp456 + fTemp249) - fTemp344)) + ((0.000457777642f * ((fTemp310 - fTemp174) - fTemp140)) + ((0.00268562883f * ((fTemp486 - fTemp363) - fTemp156)) + ((0.00723288674f * (fTemp656 - fTemp97)) + ((0.00753807183f * ((fTemp473 + fTemp421) - fTemp89)) + ((0.00726340525f * ((fTemp380 + fTemp511) - fTemp425)) + ((0.00653096102f * (fTemp502 - fTemp342)) + ((0.00680562761f * (fTemp90 + fTemp378)) + ((0.00964384899f * (fTemp189 + (fTemp17 + fTemp28))) + ((0.00738547929f * (fTemp369 - fTemp229)) + ((0.0074159978f * (fTemp454 + (fTemp160 + fTemp504))) + ((0.0111392559f * (fTemp476 + fTemp92)) + ((0.00714133121f * ((fTemp466 + fTemp165) - fTemp12)) + ((0.00445570238f * (fTemp479 - fTemp197)) + ((0.00140385143f * (fTemp347 + fTemp412)) + ((0.00338755455f * (fTemp201 + (fTemp445 - fTemp470))) + ((0.00448622089f * (fTemp202 + fTemp343)) + ((0.00457777642f * (fTemp398 + fTemp232)) + ((0.00363170262f * (fTemp103 + fTemp236)) + ((0.00198370311f * ((fTemp471 - fTemp210) - fTemp137)) + ((0.00531022064f * (fTemp104 + fTemp460)) + ((0.00604266487f * (fTemp91 + fTemp385)) + ((0.00610370189f * (fTemp413 + fTemp368)) + ((0.00369273964f * (fTemp335 + fTemp242)) + ((0.00595110934f * (fTemp447 + (fTemp204 + fTemp746))) + ((0.0112308115f * (fTemp448 + fTemp31)) + ((0.0132145146f * (fTemp239 + fTemp251)) + (0.0105594043f * (fTemp419 + fTemp440)))))))))))))))))))))))))))))))))))) + (0.000946073793f * ((fTemp134 + fTemp157) - fTemp513))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.028992584f * fTemp204) + ((0.0258491784f * fTemp447) + ((0.0278634001f * fTemp194) + ((0.0343638435f * fTemp224) + ((0.0429395437f * fTemp460) + ((0.0516068004f * fTemp368) + ((0.0634784997f * fTemp173) + ((0.0654622018f * fTemp415) + ((0.0653401315f * fTemp141) + ((0.0643635392f * fTemp154) + ((0.0629291683f * fTemp392) + ((0.0611590929f * fTemp335) + ((0.0553300567f * fTemp391) + ((0.0506607257f * fTemp200) + ((0.0452589504f * fTemp514) + ((0.0399182104f * fTemp147) + ((0.0354625098f * fTemp211) + ((0.0297555476f * fTemp490) + ((0.0290841404f * fTemp421) + ((0.0303048808f * fTemp413) + ((0.0330210291f * fTemp96) + ((0.0379955433f * fTemp456) + ((0.0387585089f * fTemp225) + ((0.0384838395f * fTemp226) + ((0.0379650258f * fTemp435) + ((0.0380260646f * fTemp190) + ((0.0389111005f * fTemp349) + ((0.0402539149f * fTemp105) + ((0.0413220637f * fTemp379) + ((0.0415967293f * fTemp444) + ((0.0404370241f * fTemp473) + ((0.0375682861f * fTemp378) + ((0.0335398428f * fTemp91) + ((0.0247199927f * fTemp466) + ((0.0209967345f * fTemp138) + ((0.0180059206f * fTemp358) + ((0.0155644398f * fTemp377) + ((0.0134281442f * fTemp171) + ((0.01126133f * fTemp160) + ((0.00891140476f * fTemp380) + ((0.00619525742f * fTemp129) + ((0.00140385143f * fTemp356) + ((0.001617481f * fTemp453) + ((0.00280770287f * fTemp373) + ((0.00460829493f * fTemp425) + ((0.00796533097f * fTemp97) + ((0.00967436749f * fTemp428) + ((0.0114749596f * fTemp426) + ((0.0131229591f * fTemp156) + ((0.0143131809f * fTemp163) + ((0.0152592547f * fTemp140) + ((0.0156254768f * fTemp115) + ((0.016113773f * fTemp427) + ((0.0165715516f * fTemp382) + ((0.0169377737f * fTemp155) + ((0.0174871068f * fTemp420) + ((0.0182805881f * fTemp132) + ((0.0192571804f * fTemp152) + ((0.0198980682f * fTemp121) + ((0.0196844395f * fTemp150) + ((0.0185552537f * fTemp100) + ((0.0169072542f * fTemp344) + ((0.0152897732f * fTemp120) + ((0.0143742179f * fTemp109) + ((0.0155034028f * fTemp145) + ((0.0173345134f * fTemp417) + ((0.0197454765f * fTemp410) + ((0.0224311054f * fTemp376) + ((0.0269173253f * fTemp355) + ((0.0279244371f * fTemp338) + ((0.0271614734f * fTemp142) + ((0.0260933265f * fTemp393) + ((0.0268562883f * fTemp139) + ((0.0279854741f * fTemp136) + ((0.0292062145f * fTemp408) + ((0.0306100659f * fTemp134) + ((0.0295419171f * fTemp130) + ((0.0289620664f * fTemp403) + ((0.0274056215f * fTemp394) + ((0.0271004364f * fTemp529) + ((0.0266731773f * fTemp375) + ((0.0257881414f * fTemp354) + ((0.0255439933f * fTemp112) + ((0.02600177f * fTemp389) + ((0.0269478448f * fTemp361) + ((0.0281380657f * fTemp383) + ((0.0293588061f * fTemp124) + ((0.0293282885f * fTemp346) + ((0.0293893255f * fTemp374) + ((0.0297250282f * fTemp118) + ((0.0300912503f * fTemp113) + ((0.0303353984f * fTemp371) + ((0.031037325f * fTemp365) + ((0.0313425101f * fTemp360) + ((0.0309457686f * fTemp352) + ((0.0298776217f * fTemp114) + ((0.0285958443f * fTemp345) + ((0.027558215f * fTemp337) + ((0.0267342143f * fTemp106) + ((0.025757622f * fTemp341) + ((0.0246284381f * fTemp336) + ((0.0238044374f * fTemp231) + ((0.0230719931f * fTemp334) + ((0.0216376241f * fTemp333) + ((0.0197759941f * fTemp513) + ((0.0328684337f * fTemp357) + ((0.03607288f * fTemp176) + ((0.0417188033f * fTemp232) + ((0.0464491732f * fTemp496) + ((0.0524613187f * fTemp461) + ((0.0572527237f * fTemp400) + ((0.0580462068f * fTemp498) + ((0.0542924292f * fTemp406) + ((0.0484328754f * fTemp494) + ((0.0442518406f * fTemp448) + ((0.0445875414f * fTemp449) + ((0.0495620593f * fTemp395) + ((0.0561540574f * fTemp495) + ((0.0609149449f * fTemp369) + ((0.0625934601f * fTemp111) + ((0.0620746501f * fTemp203) + ((0.059480574f * fTemp515) + ((0.0529801324f * fTemp436) + ((0.0424817652f * fTemp233) + ((0.0314340666f * fTemp234) + ((0.0215765871f * fTemp422) + ((0.0253608823f * fTemp94) + ((0.0335093252f * fTemp92) + ((0.0527054667f * fTemp499) + ((0.0610980578f * fTemp235) + ((0.0672322735f * fTemp236) + ((0.0693075359f * fTemp500) + ((0.0668965727f * fTemp502) + ((0.061830502f * fTemp237) + ((0.056611836f * fTemp238) + ((0.0518509485f * fTemp239) + ((0.0420545079f * fTemp504) + ((0.0346079916f * fTemp241) + ((0.0248115491f * fTemp242) + ((0.0153508103f * fTemp243) + ((0.0057985168f * fTemp143) + ((0.00247199927f * fTemp416) + ((0.011383404f * fTemp457) + ((0.0346690267f * fTemp174) + ((0.0259102155f * fTemp175) + ((0.0168156996f * fTemp445) + ((0.0100711081f * fTemp248) + ((0.00164799951f * fTemp249) + ((0.0106509598f * fTemp255) + ((0.0429700613f * fTemp256) + ((0.0543229468f * fTemp257) + ((0.0454115421f * fTemp258) + ((0.02438429f * fTemp259) + ((0.0721457601f * fTemp385) + ((0.124362923f * fTemp270) + ((0.155644402f * fTemp271) + ((0.156407356f * fTemp370) + ((0.124576554f * fTemp186) + ((0.06680502f * fTemp188) + ((0.0083925901f * fTemp215) + ((0.027741326f * fTemp468) + ((0.0336924344f * fTemp282) + ((0.0319833979f * fTemp283) + ((0.0228888821f * fTemp477) + ((0.0344859175f * fTemp505) + ((0.102969453f * fTemp511) + ((0.163243502f * fTemp291) + ((0.158635214f * fTemp292) + ((0.0763267949f * fTemp293) + ((0.0233161412f * fTemp39) + ((0.0150456252f * fTemp40) + ((0.121555224f * fTemp48) + ((0.485854685f * fTemp49) + ((0.858577251f * fTemp295) + (fTemp213 + ((0.822473824f * fTemp296) + ((0.495498508f * fTemp430) + ((0.247657701f * fTemp297) + ((0.126895964f * fTemp298) + ((0.0525833927f * fTemp299) + ((9.15555283e-05f * fTemp54) + ((0.000122074038f * fTemp55) + ((0.000183111057f * fTemp56) + ((0.000427259132f * fTemp508) + ((0.000213629566f * fTemp308) + ((((((((((((((((((((0.0136112552f * ((fTemp29 - fTemp206) - fTemp364)) + ((0.027619252f * (fTemp491 - fTemp164)) + ((0.0386669524f * (fTemp397 - fTemp20)) + (((((0.000305185094f * (fTemp305 + fTemp57)) + (0.0587786511f * (fTemp181 + fTemp387))) + (3.05185094e-05f * ((fTemp158 + (fTemp307 + fTemp309)) - fTemp217))) + (0.000152592547f * (fTemp306 - fTemp10))) + (0.0433362834f * (fTemp440 - fTemp407)))))) + (0.00927762687f * fTemp734)) + (0.00631733146f * (fTemp89 - fTemp381))) + (0.0149235511f * (fTemp161 - fTemp23))) + (0.0250251777f * (fTemp384 + fTemp493))) + (0.0266426597f * (fTemp119 - fTemp103))) + (0.0261238441f * (fTemp340 - fTemp367))) + (0.0301522873f * fTemp735)) + (0.0285653248f * (fTemp127 - fTemp342))) + (0.0282906592f * (fTemp399 - fTemp191))) + (0.0280465111f * (fTemp396 + fTemp99))) + (0.0277108066f * (fTemp125 + fTemp108))) + (0.0262459181f * (fTemp372 - fTemp210))) + (0.0255745109f * (fTemp390 - fTemp483))) + (0.0290231034f * (fTemp353 + fTemp475))) + (0.0305795465f * (fTemp366 + fTemp405))) + (0.0237434004f * (fTemp101 + fTemp419))) + (0.0238959938f * (fTemp98 + fTemp107))) + (0.0176702179f * (fTemp88 - fTemp179)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00946073793f * fTemp450) + ((0.0120548112f * fTemp209) + ((0.0131534776f * fTemp184) + ((0.0116275521f * fTemp208) + ((0.00897244178f * fTemp467) + ((0.00561540574f * fTemp110) + ((0.00241096225f * fTemp439) + ((0.00390636921f * fTemp480) + ((0.00674459059f * fTemp489) + ((0.0101321451f * fTemp462) + ((0.0170293283f * fTemp178) + ((0.0204779208f * fTemp116) + ((0.0237739198f * fTemp198) + ((0.027680289f * fTemp137) + ((0.0281685852f * fTemp207) + ((0.0279549547f * fTemp205) + ((0.0273445845f * fTemp126) + ((0.0256355479f * fTemp227) + ((0.0256050304f * fTemp486) + ((0.0253913999f * fTemp452) + ((0.024506364f * fTemp348) + ((0.0267952513f * fTemp482) + ((0.0295724366f * fTemp437) + ((0.0330820642f * fTemp183) + ((0.0368358418f * fTemp398) + ((0.0430311002f * fTemp93) + ((0.0447096154f * fTemp201) + ((0.0453810245f * fTemp347) + ((0.0453505069f * fTemp411) + ((0.0449537635f * fTemp197) + ((0.0443128757f * fTemp153) + ((0.041871395f * fTemp192) + ((0.0400097668f * fTemp168) + ((0.0379039906f * fTemp12) + ((0.0345774703f * fTemp196) + ((0.0347605832f * fTemp133) + ((0.0365611762f * fTemp454) + ((0.0422376171f * fTemp433) + ((0.0449842848f * fTemp13) + ((0.0486159846f * fTemp414) + ((0.0471510962f * fTemp14) + ((0.0494705029f * fTemp228) + ((0.049836725f * fTemp229) + ((0.049714651f * fTemp432) + ((0.0490737632f * fTemp424) + ((0.0477614664f * fTemp15) + ((0.0459303558f * fTemp469) + ((0.043916136f * fTemp16) + ((0.0420850255f * fTemp17) + ((0.0382091738f * fTemp521) + ((0.035828732f * fTemp90) + ((0.0332346559f * fTemp123) + ((0.0307321399f * fTemp350) + ((0.0270393994f * fTemp463) + ((0.0263374746f * fTemp459) + ((0.0267647337f * fTemp230) + ((0.0307626575f * fTemp149) + ((0.0336619169f * fTemp18) + ((0.0364391021f * fTemp19) + ((0.0384533219f * fTemp187) + ((0.036774803f * fTemp185) + ((0.0328379162f * fTemp182) + ((0.0222479943f * fTemp359) + ((0.0126041444f * fTemp122) + ((0.0119632557f * fTemp177) + ((0.0122074038f * fTemp458) + ((0.0164494775f * fTemp167) + ((0.0173039958f * fTemp455) + ((0.0170903653f * fTemp451) + ((0.01617481f * fTemp172) + ((0.0151066622f * fTemp446) + ((0.0142216254f * fTemp146) + ((0.0123599963f * fTemp170) + ((0.0107730338f * fTemp438) + ((0.00784325693f * fTemp434) + ((0.00628681295f * fTemp24) + ((0.00448622089f * fTemp26) + (fTemp736 + ((0.00222785119f * fTemp470) + ((0.00982696004f * fTemp244) + ((0.021149328f * fTemp246) + ((0.0324106589f * fTemp247) + ((0.0360423587f * fTemp516) + ((0.0313730277f * fTemp216) + ((0.0179448836f * fTemp423) + ((0.00543229468f * fTemp465) + ((0.0586870946f * fTemp252) + ((0.0751976073f * fTemp401) + ((0.0799890161f * fTemp404) + ((0.065950498f * fTemp253) + ((0.0317392498f * fTemp254) + ((0.0411389507f * fTemp262) + ((0.0441297665f * fTemp264) + ((0.0394909531f * fTemp497) + ((0.0456556901f * fTemp429) + ((0.0555436872f * fTemp180) + ((0.0701925755f * fTemp362) + ((0.0910977498f * fTemp266) + ((0.112796411f * fTemp506) + ((0.124668114f * fTemp267) + ((0.120914333f * fTemp268) + ((0.103457749f * fTemp269) + ((0.076143682f * fTemp520) + ((0.00277718436f * fTemp30) + ((0.068300426f * fTemp31) + ((0.1241493f * fTemp95) + ((0.172368541f * fTemp503) + ((0.208655044f * fTemp272) + ((0.219641715f * fTemp273) + ((0.197759941f * fTemp274) + ((0.149388105f * fTemp169) + ((0.092257455f * fTemp32) + ((0.0496841334f * fTemp33) + ((0.0402844325f * fTemp492) + ((0.0657979101f * fTemp275) + ((0.105533004f * fTemp276) + ((0.133060709f * fTemp277) + ((0.136509299f * fTemp278) + ((0.123813592f * fTemp501) + ((0.103427231f * fTemp471) + ((0.0895718262f * fTemp279) + ((0.0612201318f * fTemp280) + ((0.0242011789f * fTemp281) + ((0.0371715464f * fTemp284) + ((0.074892424f * fTemp285) + ((0.0917691588f * fTemp286) + ((0.0807824954f * fTemp287) + ((0.0523697622f * fTemp288) + ((0.00396740623f * fTemp290) + ((0.0467543565f * fTemp294) + ((0.151829585f * fTemp484) + ((0.195806757f * fTemp34) + ((0.172521129f * fTemp441) + ((0.130710781f * fTemp485) + ((0.122714929f * fTemp479) + ((0.159764394f * fTemp35) + ((0.193121135f * fTemp36) + ((0.162511066f * fTemp37) + ((0.0667745024f * fTemp38) + ((0.28531754f * fTemp42) + ((0.394207597f * fTemp214) + ((0.391552478f * fTemp43) + ((0.324503303f * fTemp44) + ((0.253151029f * fTemp45) + ((0.191534162f * fTemp46) + ((0.0940275267f * fTemp47) + ((0.0121463668f * fTemp300) + ((0.0468764305f * fTemp301) + ((0.0461134687f * fTemp302) + ((0.0207831059f * fTemp51) + ((0.0124210333f * fTemp52) + ((0.00622577593f * fTemp53) + ((0.0025940733f * fTemp159) + ((0.000244148076f * fTemp509) + ((0.00054933317f * fTemp318) + ((0.000915555283f * fTemp69) + ((0.000701925717f * fTemp83) + ((((0.00109866634f * ((fTemp339 + (fTemp313 + (fTemp321 + fTemp737))) - fTemp162)) + ((0.000640888698f * (fTemp27 + (fTemp311 + (fTemp0 + fTemp2)))) + ((0.0141300699f * (fTemp443 + fTemp250)) + ((0.0133365886f * (fTemp22 + fTemp193)) + ((0.04031495f * (fTemp189 + fTemp202)) + ((0.0392162837f * (fTemp472 + fTemp265)) + ((0.0339365825f * (fTemp195 + fTemp476)) + ((0.035950806f * (fTemp478 - fTemp474)) + ((0.0249946602f * (fTemp157 + fTemp418)) + ((0.0243537705f * (fTemp442 + fTemp261)) + ((0.025818659f * (fTemp464 + fTemp289)) + ((0.00198370311f * (fTemp388 - fTemp343)) + ((0.000885036774f * (fTemp363 + (fTemp62 + fTemp324))) + ((0.000671407208f * (fTemp11 + fTemp75)) + ((0.000732444227f * (((fTemp319 + fTemp72) - fTemp510) - fTemp8)) + ((0.00314340647f * (fTemp104 - fTemp128)) + ((0.0320139155f * (fTemp50 - fTemp165)) + ((0.0472731702f * (fTemp263 - fTemp240)) + ((0.0376598425f * (fTemp487 + fTemp28)) + ((0.0364085808f * (fTemp251 - fTemp526)) + ((0.000823999755f * (fTemp260 + (fTemp303 + (fTemp220 + fTemp70)))) + ((0.111697748f * (fTemp488 + fTemp41)) + ((0.000457777642f * ((fTemp315 + fTemp690) - fTemp144)) + ((0.000488296151f * ((fTemp310 + (fTemp65 + (fTemp316 + (fTemp77 + fTemp81)))) - fTemp223)) + ((0.000854518265f * (fTemp312 + (fTemp63 + (fTemp323 + (fTemp73 + fTemp327))))) + ((0.00100711081f * (fTemp222 + fTemp68)) + ((0.00115970336f * (fTemp212 + fTemp322)) + ((0.00112918485f * (fTemp58 + fTemp219)) + ((0.000976592302f * (fTemp7 + (fTemp325 + (fTemp218 + (fTemp326 + fTemp85))))) + ((0.000793481246f * (fTemp59 + (fTemp6 + (fTemp64 + (fTemp74 + fTemp332))))) + ((0.000610370189f * (fTemp60 + (fTemp61 + fTemp5))) + ((0.000396740623f * (fTemp199 + (fTemp507 + fTemp701))) + ((0.000335703604f * (fTemp221 + fTemp314)) + ((0.000366222113f * (fTemp66 + (fTemp67 + fTemp4))) + ((0.000946073793f * (fTemp320 + fTemp331)) + ((0.000762962736f * (fTemp3 + (fTemp71 + (fTemp135 + fTemp84)))) + ((0.00103762932f * fTemp692) + (0.00057985168f * (fTemp76 + fTemp82))))))))))))))))))))))))))))))))))))))) + (0.014435255f * ((fTemp351 + fTemp151) - fTemp148))) + (0.025879696f * (fTemp386 - fTemp102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow21 ? (iSlow25 ? (iSlow27 ? (((0.000457777642f * fTemp6) + (fTemp223 + ((0.00488296151f * fTemp197) + ((0.00372325815f * fTemp521) + ((0.00921658985f * fTemp90) + ((0.0121158483f * fTemp123) + ((0.00570696127f * fTemp463) + ((0.00241096225f * fTemp187) + ((0.00585955381f * fTemp351) + ((0.00540177617f * fTemp146) + ((0.00155644398f * fTemp170) + ((0.00344859157f * fTemp24) + ((0.00643940549f * fTemp27) + ((0.00799584948f * fTemp162) + ((0.0093691824f * fTemp373) + ((0.0100405896f * fTemp89) + ((0.00772118289f * fTemp428) + ((0.00152592547f * fTemp427) + ((0.00689718314f * fTemp155) + ((0.0118411817f * fTemp132) + ((0.0115359966f * fTemp152) + ((0.00848414563f * fTemp121) + ((0.00360118411f * fTemp150) + (fTemp573 + ((0.00680562761f * fTemp376) + ((0.00753807183f * fTemp384) + ((0.000854518265f * fTemp119) + ((0.00131229591f * fTemp102) + (fTemp724 + ((0.00918607134f * fTemp134) + (fTemp725 + ((0.00732444227f * fTemp130) + ((0.00595110934f * fTemp403) + ((0.00329599902f * fTemp399) + ((0.00286873989f * fTemp125) + ((0.00473036896f * fTemp375) + ((0.00518814661f * fTemp372) + ((0.00418103579f * fTemp390) + ((0.00204474013f * fTemp383) + ((0.00109866634f * fTemp113) + ((0.00408948027f * fTemp360) + ((0.00314340647f * fTemp345) + ((0.00247199927f * fTemp337) + (fTemp726 + ((0.00985747855f * fTemp267) + ((0.0115665151f * fTemp268) + ((0.0104983672f * fTemp269) + ((0.00457777642f * fTemp29) + ((0.03234962f * fTemp31) + ((0.035950806f * fTemp95) + ((0.0176091809f * fTemp503) + ((0.0158391073f * fTemp501) + ((0.0221869573f * fTemp488) + ((0.025757622f * fTemp471) + ((0.0230719931f * fTemp279) + ((0.0137028107f * fTemp280) + ((0.0261848811f * fTemp286) + ((0.0263069551f * fTemp287) + ((0.0197454765f * fTemp288) + ((0.0380565822f * fTemp485) + ((0.0638142005f * fTemp479) + ((0.0660115331f * fTemp35) + ((0.0751670897f * fTemp36) + ((0.0542924292f * fTemp37) + ((0.0664082766f * fTemp38) + ((0.0462050252f * fTemp39) + ((0.0440992452f * fTemp40) + ((0.00335703604f * fTemp41) + ((0.0201116987f * fTemp47) + ((0.0770592391f * fTemp48) + ((0.151860103f * fTemp49) + ((0.0700704977f * fTemp295) + ((0.0285653248f * fTemp213) + ((0.0175786614f * fTemp299) + ((0.0416882858f * fTemp52) + ((0.00952177495f * fTemp304) + ((0.0661946461f * fTemp305) + ((0.154332101f * fTemp306) + ((0.0222785119f * fTemp307) + ((0.606280684f * fTemp144) + ((0.900265515f * fTemp508) + ((0.429395437f * fTemp308) + ((0.0961638242f * fTemp309) + ((0.0174871068f * fTemp509) + ((0.00381481368f * fTemp310) + (fTemp727 + ((((0.000274666585f * (fTemp231 + (fTemp63 + fTemp327))) + ((0.000244148076f * (((fTemp336 + (fTemp116 + ((fTemp64 + (fTemp2 + (fTemp83 + (fTemp84 + (fTemp85 + fTemp87))))) - fTemp59))) - fTemp107) - fTemp98)) + ((0.000885036774f * (fTemp341 + (fTemp340 + fTemp221))) + ((0.00369273964f * (fTemp114 + fTemp365)) + ((0.0019531846f * (fTemp371 - fTemp207)) + ((0.000335703604f * (fTemp118 + (fTemp60 + fTemp62))) + ((9.15555283e-05f * (((fTemp66 + ((((fTemp402 - fTemp0) - fTemp135) - fTemp219) - fTemp220)) - fTemp151) - fTemp374)) + ((0.000122074038f * ((((fTemp75 + (fTemp78 + (fTemp79 + fTemp329))) - fTemp69) - fTemp321) - fTemp346)) + ((0.00119022187f * (fTemp353 - fTemp218)) + ((0.00283822138f * (fTemp361 + (fTemp108 + fTemp417))) + ((0.00469985045f * (fTemp112 - fTemp467)) + ((0.00405896176f * (fTemp529 + fTemp28)) + ((0.00332651753f * (fTemp394 - fTemp486)) + ((0.00442518387f * (fTemp127 + fTemp99)) + ((0.00909451582f * (fTemp405 + fTemp97)) + ((0.00656147953f * (fTemp408 - fTemp437)) + ((0.00311288796f * (fTemp139 - fTemp480)) + ((0.00201422162f * (fTemp393 - fTemp8)) + ((0.00158696249f * (fTemp142 + fTemp166)) + ((0.00708029419f * (fTemp355 + fTemp30)) + ((0.00112918485f * ((fTemp161 + (fTemp438 - fTemp167)) - fTemp148)) + ((0.00378429517f * (fTemp382 + (((fTemp520 - fTemp506) - fTemp343) - fTemp227))) + ((0.000152592547f * (fTemp115 + (fTemp140 + (fTemp65 + (fTemp77 + (fTemp507 + fTemp328)))))) + ((0.00274666585f * (fTemp163 + (fTemp364 + fTemp20))) + ((0.00619525742f * (fTemp426 - fTemp387)) + ((0.00430310983f * (fTemp26 + (fTemp172 - fTemp435))) + ((0.00250251777f * (fTemp434 - fTemp462)) + ((0.0054933317f * (fTemp446 + (fTemp133 - fTemp225))) + ((0.000518814661f * (fTemp455 + fTemp315)) + ((0.000427259132f * (fTemp182 + (fTemp61 - fTemp289))) + ((0.00170903653f * (fTemp185 - fTemp18)) + ((0.000671407208f * (fTemp19 + (fTemp13 + (fTemp314 - fTemp178)))) + ((0.00253303628f * (fTemp278 - fTemp189)) + ((0.0108645894f * (fTemp285 - fTemp16)) + ((0.00787377544f * (fTemp472 - fTemp224)) + ((0.000183111057f * (fTemp198 + (((fTemp80 + fTemp81) - fTemp3) - fTemp298))) + ((0.0028992584f * (fTemp385 - fTemp363)) + ((3.05185094e-05f * (fTemp68 + ((fTemp331 - fTemp326) - fTemp71))) + (0.000213629566f * (fTemp244 + (fTemp5 + (fTemp82 + (fTemp86 + fTemp1))))))))))))))))))))))))))))))))))))))))))) + (0.00198370311f * (fTemp333 - fTemp22))) + (0.00296029542f * (fTemp513 + fTemp366))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0364391021f * fTemp222) + ((0.00961333048f * fTemp204) + ((0.0105594043f * fTemp447) + ((0.0103457747f * fTemp493) + ((0.00915555283f * fTemp194) + ((0.00692770164f * fTemp173) + ((0.00634784997f * fTemp154) + ((0.00601214636f * fTemp335) + ((0.00589007232f * fTemp181) + ((0.004852443f * fTemp514) + ((0.00439466536f * fTemp147) + (fTemp728 + ((0.00411999878f * fTemp165) + ((0.0042115543f * fTemp490) + ((0.00476088747f * fTemp421) + ((0.00503555406f * fTemp413) + ((0.0057985168f * fTemp96) + ((0.00424207281f * fTemp190) + ((0.00463881344f * fTemp349) + ((0.00701925717f * fTemp378) + ((0.0071108127f * fTemp91) + ((0.00717184972f * fTemp475) + ((0.00759910885f * fTemp138) + (fTemp708 + ((0.00695822015f * fTemp377) + ((0.00491348002f * fTemp129) + ((0.00546281319f * fTemp128) + ((0.00704977568f * fTemp381) + ((0.00622577593f * fTemp209) + ((0.00552385021f * fTemp193) + ((0.00494399853f * fTemp184) + ((0.00527970213f * fTemp110) + ((0.00497451704f * fTemp356) + (fTemp729 + ((0.00189214759f * fTemp11) + ((0.00366222113f * fTemp388) + ((0.00262459181f * fTemp489) + ((0.00146488845f * fTemp137) + ((0.00216681417f * fTemp205) + ((0.00265511032f * fTemp126) + ((0.00415051728f * fTemp367) + ((0.00320444349f * fTemp452) + ((0.00524918362f * fTemp442) + ((0.00650044251f * fTemp482) + ((0.00631733146f * fTemp183) + ((0.00555436872f * fTemp398) + ((0.0038758507f * fTemp202) + ((0.00140385143f * fTemp407) + ((0.00750755332f * fTemp192) + ((0.014679403f * fTemp168) + ((0.0201727357f * fTemp12) + ((0.0206610318f * fTemp478) + ((0.0157170333f * fTemp196) + ((0.00820947904f * fTemp476) + ((0.00616473891f * fTemp228) + (fTemp730 + ((0.00900296029f * fTemp424) + ((0.0111392559f * fTemp15) + ((0.00762962736f * fTemp17) + ((0.00103762932f * fTemp230) + ((0.00308236945f * fTemp149) + ((0.000610370189f * fTemp122) + ((0.00137333293f * fTemp100) + ((0.00433362834f * fTemp344) + ((0.00927762687f * fTemp357) + ((0.0120242927f * fTemp397) + ((0.0133976256f * fTemp232) + ((0.0134891812f * fTemp496) + ((0.0127262184f * fTemp461) + ((0.00851466414f * fTemp448) + (fTemp731 + ((0.00924710836f * fTemp369) + ((0.0106204413f * fTemp233) + ((0.00830103457f * fTemp419) + ((0.001617481f * fTemp235) + ((0.00653096102f * fTemp237) + (fTemp732 + ((0.0104068117f * fTemp239) + ((0.0115054781f * fTemp240) + ((0.0111697745f * fTemp504) + ((0.00244148076f * fTemp412) + ((0.0141911069f * fTemp216) + ((0.00946073793f * fTemp423) + ((0.00778221991f * fTemp465) + ((0.00811792351f * fTemp491) + ((0.00823999755f * fTemp526) + ((0.0133060701f * fTemp248) + ((0.0167241432f * fTemp249) + ((0.0203558467f * fTemp250) + ((0.0228278451f * fTemp251) + ((0.0264290292f * fTemp401) + ((0.0260322895f * fTemp404) + ((0.021149328f * fTemp253) + ((0.0183721427f * fTemp254) + ((0.0188299213f * fTemp255) + ((0.0189825129f * fTemp256) + ((0.0173039958f * fTemp257) + ((0.0124210333f * fTemp258) + ((0.0116275521f * fTemp259) + ((0.0135502182f * fTemp260) + ((0.0177617725f * fTemp261) + ((0.0227973275f * fTemp262) + ((0.0253303628f * fTemp263) + ((0.028931547f * fTemp264) + ((0.027741326f * fTemp265) + ((0.0237128828f * fTemp497) + ((0.0227362905f * fTemp429) + ((0.0282296222f * fTemp180) + ((0.0257881414f * fTemp362) + ((0.0173650328f * fTemp266) + ((0.00744651631f * fTemp270) + ((0.0159611814f * fTemp271) + ((0.021271402f * fTemp370) + ((0.0262459181f * fTemp186) + ((0.014618366f * fTemp188) + ((0.0101321451f * fTemp272) + ((0.0323801376f * fTemp273) + ((0.0426648781f * fTemp274) + ((0.0404675454f * fTemp169) + ((0.0378124341f * fTemp32) + ((0.0478835404f * fTemp33) + ((0.0575884283f * fTemp492) + ((0.0540482812f * fTemp275) + ((0.0365306549f * fTemp276) + ((0.0155949583f * fTemp277) + ((0.046540726f * fTemp468) + ((0.0634174645f * fTemp282) + ((0.0631427988f * fTemp283) + ((0.05038606f * fTemp477) + ((0.0318613239f * fTemp510) + ((0.0100100711f * fTemp284) + ((0.0249641407f * fTemp290) + ((0.0557268001f * fTemp505) + ((0.0767235309f * fTemp511) + ((0.0901821926f * fTemp291) + ((0.0948820487f * fTemp292) + ((0.100009158f * fTemp293) + ((0.0907925665f * fTemp294) + ((0.0840784907f * fTemp484) + ((0.0466322824f * fTemp34) + ((0.0151676992f * fTemp42) + ((0.0284737702f * fTemp214) + ((0.0385753959f * fTemp43) + ((0.0441908017f * fTemp44) + ((0.0393688791f * fTemp45) + ((0.0384533219f * fTemp46) + ((0.111880854f * fTemp296) + ((0.117831968f * fTemp430) + ((0.121524706f * fTemp297) + ((0.068727687f * fTemp301) + ((0.135166481f * fTemp302) + ((0.0720847175f * fTemp50) + ((0.0486159846f * fTemp51) + (fTemp712 + ((0.0101931822f * fTemp159) + ((0.0788293108f * fTemp303) + ((0.286049992f * fTemp54) + ((0.457930237f * fTemp55) + ((0.472701192f * fTemp56) + ((0.0126956999f * fTemp57) + ((0.01617481f * fTemp311) + ((0.0324716941f * fTemp312) + ((0.0299691763f * fTemp313) + ((0.019348735f * fTemp212) + ((0.00790429395f * fTemp58) + (((((((0.00521866512f * (((fTemp200 + fTemp175) - fTemp431) - fTemp354)) + ((0.00271614734f * (fTemp500 - fTemp396)) + ((0.00827051606f * (fTemp445 - fTemp409)) + ((0.00598162785f * ((fTemp368 + fTemp174) - fTemp338)) + ((0.000640888698f * ((fTemp210 + (fTemp470 + fTemp325)) - fTemp145)) + ((0.00302133244f * (fTemp109 + (fTemp14 + (fTemp483 + fTemp440)))) + ((0.00445570238f * (fTemp120 + ((fTemp348 + fTemp92) - fTemp156))) + ((0.00994903408f * ((fTemp176 + fTemp498) - fTemp420)) + ((0.0102237007f * (fTemp111 - fTemp425)) + ((0.00427259132f * (((fTemp464 + fTemp300) - fTemp347) - fTemp443)) + ((0.0025940733f * ((fTemp143 - fTemp153) - fTemp451)) + ((0.00207525864f * (fTemp23 + fTemp499)) + ((0.00173955504f * (fTemp458 + ((fTemp206 + fTemp7) - fTemp459))) + ((0.00115970336f * (fTemp177 + fTemp93)) + ((6.10370189e-05f * (fTemp179 + (fTemp4 + (fTemp316 + (fTemp318 + (fTemp319 + (fTemp320 + ((fTemp324 + (((fTemp332 - fTemp76) - fTemp74) - fTemp73)) - fTemp70)))))))) + ((0.000305185094f * (fTemp359 + (fTemp164 + fTemp72))) + ((0.00305185094f * (fTemp191 + fTemp243)) + ((0.00949125644f * (fTemp234 - fTemp342)) + ((0.0122989593f * (fTemp386 - fTemp350)) + ((0.0117801446f * (fTemp469 + fTemp436)) + ((0.00625629444f * (fTemp229 + fTemp456)) + ((0.00543229468f * (fTemp414 - fTemp411)) + ((0.00482192449f * ((fTemp208 + fTemp226) - fTemp433)) + ((0.00854518265f * (fTemp395 - fTemp454)) + ((0.000366222113f * (fTemp195 + fTemp323)) + ((0.00180059206f * ((fTemp10 + fTemp416) - fTemp201)) + ((0.00607318338f * (fTemp157 + fTemp474)) + ((0.00357066561f * (fTemp418 + fTemp281)) + ((0.00573747978f * (fTemp217 + (fTemp105 + (fTemp94 + fTemp242)))) + ((0.00610370189f * (fTemp439 + fTemp392)) + ((0.00714133121f * (fTemp450 + fTemp422)) + ((0.00698873866f * (fTemp104 + fTemp379)) + ((0.00640888698f * (fTemp158 + fTemp460)) + ((0.00558488723f * (fTemp380 + fTemp391)) + ((0.00665303506f * (fTemp160 + fTemp171)) + ((0.00738547929f * (fTemp466 + (fTemp473 + fTemp444))) + ((0.00683614612f * (fTemp141 + fTemp415)) + ((0.0115970336f * (fTemp400 + fTemp203)) + ((0.00875881221f * (fTemp406 + fTemp241)) + ((0.00866725668f * (fTemp494 + fTemp449)) + ((0.00054933317f * (fTemp246 + fTemp441)) + ((0.00796533097f * (fTemp487 + fTemp457)) + ((0.025818659f * (fTemp252 + fTemp215)) + (0.0122379223f * fTemp517)))))))))))))))))))))))))))))))))))))))))))) + (0.0035401471f * (fTemp733 - fTemp389))) + (0.00396740623f * (fTemp502 - fTemp352))) + (0.00167851802f * (fTemp236 - fTemp106))) + (0.000396740623f * (fTemp101 - fTemp124))) + (0.00363170262f * (fTemp247 - fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.380901515f * fTemp1) + ((0.274208814f * fTemp2) + ((0.0686056092f * fTemp402) + ((0.00924710836f * fTemp3) + ((0.0673543513f * fTemp5) + ((0.0430005789f * fTemp6) + ((0.0570390932f * fTemp7) + ((0.021332439f * fTemp222) + ((0.0197149571f * fTemp223) + ((0.000671407208f * fTemp226) + ((0.0148625141f * fTemp380) + ((0.0134586627f * fTemp129) + ((0.00778221991f * fTemp110) + ((0.00155644398f * fTemp367) + ((9.15555283e-05f * fTemp227) + ((0.000732444227f * fTemp189) + (fTemp717 + ((0.00112918485f * fTemp406) + ((0.00210577715f * fTemp369) + ((0.00253303628f * fTemp233) + ((0.00427259132f * fTemp236) + ((0.00378429517f * fTemp500) + ((0.00344859157f * fTemp502) + ((0.00601214636f * fTemp244) + ((0.00570696127f * fTemp246) + ((0.00546281319f * fTemp423) + ((0.000854518265f * fTemp445) + ((0.000274666585f * fTemp256) + ((0.00170903653f * fTemp258) + ((0.008087405f * fTemp264) + ((0.00845362712f * fTemp429) + ((0.0123599963f * fTemp362) + ((0.0107730338f * fTemp506) + ((0.00894192327f * fTemp267) + ((0.00921658985f * fTemp268) + ((0.0111087374f * fTemp269) + ((0.0126346629f * fTemp520) + ((0.00961333048f * fTemp29) + ((0.00781273842f * fTemp385) + ((0.00820947904f * fTemp370) + ((0.00891140476f * fTemp186) + ((0.0108951079f * fTemp30) + ((0.011200293f * fTemp31) + ((0.00836207159f * fTemp503) + ((0.00732444227f * fTemp273) + ((0.0090334788f * fTemp274) + ((0.0108645894f * fTemp169) + ((0.00991851557f * fTemp32) + ((0.00759910885f * fTemp277) + ((0.00637836847f * fTemp471) + ((0.0155339213f * fTemp280) + ((0.0105594043f * fTemp281) + ((0.00793481246f * fTemp283) + ((0.00863673817f * fTemp477) + ((0.00555436872f * fTemp510) + ((0.0106814783f * fTemp290) + ((0.0101016266f * fTemp292) + ((0.0168156996f * fTemp293) + ((0.0193182174f * fTemp294) + ((0.0190740693f * fTemp484) + ((0.0229194015f * fTemp34) + ((0.0293282885f * fTemp441) + ((0.0325022116f * fTemp485) + ((0.0282601397f * fTemp479) + ((0.0223700684f * fTemp35) + ((0.0209662169f * fTemp36) + ((0.0214239936f * fTemp37) + ((0.0187383648f * fTemp38) + ((0.00473036896f * fTemp41) + ((0.0219428092f * fTemp214) + ((0.0302743614f * fTemp43) + ((0.0324716941f * fTemp44) + ((0.0279244371f * fTemp45) + ((0.0189519953f * fTemp46) + ((0.0170293283f * fTemp47) + ((0.0252998453f * fTemp48) + ((0.0309457686f * fTemp49) + ((0.02252266f * fTemp295) + ((0.00228888821f * fTemp298) + ((0.0123905148f * fTemp302) + ((0.0271004364f * fTemp50) + ((0.0334788039f * fTemp51) + ((0.0301828068f * fTemp52) + ((0.0227362905f * fTemp53) + ((0.0137333293f * fTemp159) + ((0.0102542192f * fTemp303) + ((0.0187688842f * fTemp306) + ((0.0351573229f * fTemp307) + ((0.0458082817f * fTemp54) + ((0.0448011719f * fTemp55) + ((0.0340891741f * fTemp56) + ((0.0280770287f * fTemp57) + ((0.0568865016f * fTemp212) + ((0.0567644276f * fTemp58) + ((0.0723288655f * fTemp59) + ((0.0787377581f * fTemp60) + ((0.0583513901f * fTemp199) + ((0.0947904885f * fTemp62) + ((0.0975066349f * fTemp63) + ((0.0828882754f * fTemp64) + ((0.0756859034f * fTemp65) + ((0.0685750917f * fTemp66) + ((0.0503250211f * fTemp67) + ((0.0212408826f * fTemp69) + ((0.0385143608f * fTemp71) + ((0.0849635303f * fTemp72) + ((0.0583819076f * fTemp135) + ((0.108432263f * fTemp326) + ((0.199041724f * fTemp73) + ((0.166417435f * fTemp74) + ((0.184972689f * fTemp507) + ((0.20789209f * fTemp78) + ((0.272530288f * fTemp83) + ((0.382091731f * fTemp86) + ((0.768883348f * fTemp87) + ((0.00479140598f * (((fTemp343 + ((fTemp92 + fTemp440) - fTemp158)) - fTemp428) - fTemp88)) + ((0.00482192449f * ((((((fTemp594 - fTemp24) - fTemp376) - fTemp383) - fTemp353) - fTemp371) - fTemp513)) + ((0.0045167394f * (((fTemp286 + fTemp40) - fTemp389) - fTemp231)) + ((0.00521866512f * (((fTemp439 + fTemp511) - fTemp150) - fTemp345)) + ((0.00500503555f * ((fTemp465 - fTemp374) - fTemp336)) + ((0.004852443f * ((fTemp467 + fTemp239) - fTemp366)) + ((0.00338755455f * (fTemp419 - fTemp354)) + ((0.00320444349f * ((fTemp261 + fTemp282) - fTemp372)) + ((0.00265511032f * (fTemp448 - fTemp529)) + ((0.00274666585f * (((fTemp215 - fTemp173) - fTemp454) - fTemp394)) + ((0.00332651753f * (((fTemp284 - fTemp155) - fTemp134) - fTemp403)) + ((0.00329599902f * ((fTemp203 - fTemp208) - fTemp130)) + ((0.00262459181f * ((fTemp488 - fTemp382) - fTemp139)) + ((0.00509659108f * (((fTemp8 - fTemp377) - fTemp145) - fTemp119)) + ((0.00494399853f * ((fTemp288 - fTemp191) - fTemp410)) + ((0.00436414685f * ((fTemp238 + (fTemp262 + fTemp508)) - fTemp152)) + ((0.00457777642f * ((fTemp94 - fTemp230) - fTemp97)) + ((0.00326548051f * (fTemp285 - fTemp431)) + ((0.00561540574f * (fTemp386 - fTemp166)) + ((0.00772118289f * (fTemp289 - fTemp170)) + ((0.00857570115f * (fTemp265 - fTemp364)) + ((0.0067751091f * (fTemp272 - fTemp446)) + ((0.00650044251f * ((fTemp416 + fTemp470) - fTemp172)) + ((0.00604266487f * ((fTemp33 + fTemp75) - fTemp22)) + ((0.00723288674f * (fTemp270 - fTemp177)) + ((0.00402844325f * ((fTemp422 + fTemp457) - fTemp359)) + ((0.00311288796f * (fTemp111 - fTemp164)) + ((0.00103762932f * ((fTemp90 + (fTemp175 + fTemp492)) - fTemp185)) + ((0.00173955504f * (((fTemp718 - fTemp483) - fTemp472) - fTemp187)) + ((0.00445570238f * (((fTemp504 + (fTemp241 + fTemp501)) - fTemp348) - fTemp18)) + ((0.00305185094f * (fTemp260 - fTemp16)) + ((0.00576799829f * (((fTemp412 + (fTemp247 + fTemp216)) - fTemp398) - fTemp469)) + ((0.0120548112f * (fTemp28 - fTemp432)) + ((0.00122074038f * ((fTemp404 - fTemp154) - fTemp433)) + ((0.00967436749f * ((fTemp505 - fTemp475) - fTemp478)) + ((0.0101931822f * (fTemp180 - fTemp168)) + ((0.00424207281f * (fTemp287 - fTemp442)) + ((0.00268562883f * (((fTemp234 - fTemp194) - fTemp335) - fTemp452)) + ((0.00115970336f * (fTemp464 - fTemp474)) + ((0.00366222113f * (fTemp237 - fTemp178)) + ((0.00466933195f * (fTemp499 - fTemp206)) + ((0.0102237007f * ((fTemp95 + fTemp39) - fTemp489)) + ((0.000915555283f * fTemp719) + ((0.00531022064f * (fTemp128 + fTemp243)) + ((0.00979644153f * (fTemp160 + fTemp188)) + ((0.000518814661f * (fTemp379 + (fTemp105 + fTemp495))) + ((0.000427259132f * (fTemp225 + fTemp255)) + ((0.00198370311f * (fTemp720 - fTemp490)) + ((0.000762962736f * ((fTemp254 + fTemp257) - fTemp200)) + ((0.0019226661f * ((fTemp526 + fTemp401) - fTemp392)) + ((0.00280770287f * (fTemp436 - fTemp387)) + ((0.00317392498f * (fTemp515 - fTemp447)) + ((0.00292977691f * (fTemp494 + (fTemp491 + fTemp276))) + ((0.00109866634f * (fTemp449 + fTemp248)) + ((0.00460829493f * (fTemp235 + fTemp291)) + ((0.00625629444f * (fTemp143 + fTemp263)) + ((0.00592059083f * (fTemp487 + fTemp516)) + ((0.00137333293f * (fTemp174 + fTemp249)) + ((0.00247199927f * (fTemp251 + (fTemp252 + fTemp259))) + ((0.0125125889f * (fTemp266 + fTemp305)) + ((0.00796533097f * (fTemp271 + fTemp278)) + ((0.0133365886f * (fTemp279 + fTemp42)) + ((0.0147099216f * (fTemp68 - fTemp296)) + (0.00805688649f * fTemp613))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.148228407f * fTemp0) + ((0.0738853142f * fTemp218) + ((0.0115970336f * fTemp219) + ((0.0497451723f * fTemp220) + ((0.000701925717f * fTemp221) + ((0.0035401471f * fTemp493) + ((0.00164799951f * fTemp224) + ((0.00183111057f * fTemp211) + ((0.00167851802f * fTemp421) + ((0.00738547929f * fTemp91) + ((0.0110477004f * fTemp466) + ((0.0111392559f * fTemp138) + ((0.0093691824f * fTemp358) + ((0.00988799706f * fTemp104) + ((0.00802636798f * fTemp381) + ((0.0103152562f * fTemp193) + ((0.00830103457f * fTemp363) + ((0.0122379223f * fTemp339) + ((0.0141911069f * fTemp388) + ((0.0132145146f * fTemp480) + ((0.00674459059f * fTemp462) + ((0.000122074038f * fTemp205) + ((0.0042115543f * fTemp157) + ((0.00653096102f * fTemp437) + ((0.00708029419f * fTemp183) + ((6.10370189e-05f * fTemp201) + ((0.00234992523f * fTemp347) + ((0.00534073915f * fTemp411) + ((0.00753807183f * fTemp197) + ((0.00854518265f * fTemp153) + ((0.00900296029f * fTemp407) + ((0.00958281197f * fTemp192) + ((0.0104373302f * fTemp12) + ((0.00823999755f * fTemp196) + ((0.00524918362f * fTemp195) + ((0.00399792474f * fTemp133) + ((0.00119022187f * fTemp13) + ((0.00347911008f * fTemp414) + ((0.0116275521f * fTemp424) + ((0.00897244178f * fTemp15) + ((0.00619525742f * fTemp463) + ((0.00564592425f * fTemp151) + ((0.00558488723f * fTemp23) + ((0.00610370189f * fTemp455) + ((0.00735496078f * fTemp351) + (fTemp564 + ((0.00869777519f * fTemp443) + ((0.00189214759f * fTemp162) + ((0.00213629566f * fTemp373) + ((0.00286873989f * fTemp425) + ((0.00442518387f * fTemp426) + ((0.00296029542f * fTemp163) + ((0.00241096225f * fTemp161) + ((0.00216681417f * fTemp140) + (fTemp721 + ((0.00567644276f * fTemp100) + (fTemp722 + ((0.00390636921f * fTemp102) + ((0.00256355479f * fTemp136) + ((0.00271614734f * fTemp408) + ((0.00308236945f * fTemp409) + ((0.00341807306f * fTemp405) + ((0.00335703604f * fTemp131) + ((0.00369273964f * fTemp399) + ((0.00357066561f * fTemp396) + ((0.0028992584f * fTemp375) + ((0.00375377666f * fTemp112) + (fTemp723 + ((0.00518814661f * fTemp114) + ((0.00100711081f * fTemp176) + ((0.00140385143f * fTemp461) + ((0.000183111057f * fTemp468) + ((0.0129703665f * fTemp430) + ((0.000640888698f * fTemp297) + ((0.00250251777f * fTemp299) + ((0.00698873866f * fTemp300) + ((0.0111697745f * fTemp308) + ((0.0222785119f * fTemp309) + ((0.0245368816f * fTemp509) + ((0.0199591052f * fTemp311) + ((0.0532242805f * fTemp314) + ((0.0678121299f * fTemp315) + ((0.0213629566f * fTemp61) + ((0.019531846f * fTemp316) + ((0.0365306549f * fTemp318) + ((0.0352183618f * fTemp319) + ((0.0641499087f * fTemp320) + ((0.0694906488f * fTemp321) + ((0.00177007355f * fTemp70) + ((0.0130314035f * fTemp323) + ((0.118564412f * fTemp324) + ((0.142857149f * fTemp325) + ((0.0701315328f * fTemp76) + ((0.06469924f * fTemp77) + ((0.176763207f * fTemp80) + ((0.222968236f * fTemp81) + ((0.0347911008f * fTemp82) + ((0.392834246f * fTemp327) + ((0.173894465f * fTemp85) + ((0.44444105f * fTemp328) + (fTemp330 + ((0.913876772f * fTemp331) + ((0.472609639f * fTemp332) + (((((0.00506607257f * (fTemp341 + fTemp450)) + ((0.00512710959f * (fTemp106 + (fTemp352 + (fTemp109 + fTemp434)))) + ((0.0051576281f * (fTemp337 + (fTemp384 + (fTemp417 + fTemp149)))) + ((0.00503555406f * (fTemp360 + (fTemp350 + fTemp482))) + ((0.00497451704f * (fTemp118 + (fTemp346 + (fTemp148 + fTemp459)))) + ((0.00476088747f * (fTemp361 + (fTemp179 + fTemp378))) + ((0.00314340647f * (fTemp125 + (fTemp393 + (fTemp19 + fTemp198)))) + ((0.00350962859f * (fTemp127 + fTemp116)) + ((0.0054933317f * (fTemp142 + fTemp120)) + ((0.00616473891f * (fTemp108 + fTemp209)) + ((0.00668355357f * (fTemp99 + fTemp338)) + ((0.00573747978f * (fTemp344 + (fTemp167 + fTemp312))) + ((0.00418103579f * (fTemp132 + fTemp26)) + ((0.00384533219f * (fTemp420 + (fTemp89 + fTemp418))) + ((0.0022583697f * (fTemp427 + (fTemp165 + fTemp368))) + ((0.00372325815f * (fTemp156 + fTemp11)) + ((0.00238044374f * (fTemp27 + fTemp210)) + ((0.00656147953f * (fTemp438 + (fTemp476 - fTemp4))) + ((0.00640888698f * (fTemp451 + fTemp228)) + ((0.00680562761f * (fTemp458 + fTemp122)) + ((0.0019531846f * (fTemp182 - fTemp171)) + ((0.000976592302f * (fTemp20 + fTemp137)) + ((0.00671407208f * (fTemp342 - fTemp453)) + ((0.00186162908f * (fTemp123 + (fTemp14 + fTemp391))) + ((0.00106814783f * (fTemp17 + (fTemp498 - fTemp103))) + ((0.00985747855f * (fTemp229 + fTemp184)) + ((0.000244148076f * (fTemp93 - fTemp349)) + ((0.00277718436f * (fTemp202 + fTemp181)) + ((0.000946073793f * (fTemp486 + fTemp147)) + ((0.000152592547f * (((fTemp395 + fTemp275) - fTemp232) - fTemp126)) + ((0.000335703604f * (fTemp207 + fTemp213)) + ((0.00219733268f * (fTemp473 + (fTemp204 + fTemp400))) + ((0.000366222113f * (fTemp444 + (fTemp456 + fTemp514))) + ((0.000213629566f * (fTemp496 - fTemp190)) + ((0.000396740623f * (fTemp397 - fTemp435)) + ((0.00149540696f * (fTemp96 + fTemp413)) + ((0.00134281442f * (fTemp141 + fTemp301)) + ((((0.0386059135f * (fTemp84 - fTemp79)) + (0.0467848741f * (fTemp322 - fTemp313))) + (0.0254219193f * (fTemp310 - fTemp144))) + (0.00146488845f * (fTemp460 + fTemp357)))))))))))))))))))))))))))))))))))))))) + (0.00491348002f * (fTemp107 + (fTemp365 + (fTemp113 + fTemp124))))) + (0.00454725791f * (fTemp334 + (fTemp98 + fTemp340)))) + (0.00469985045f * (fTemp333 + (fTemp101 + fTemp121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow26 ? (((0.130344555f * fTemp0) + ((0.181066319f * fTemp1) + ((0.110049747f * fTemp2) + ((0.078463085f * fTemp218) + ((0.0743736103f * fTemp219) + ((0.112308115f * fTemp220) + ((0.0629596859f * fTemp221) + ((0.0686666444f * fTemp222) + ((0.00189214759f * fTemp435) + ((0.0112308115f * fTemp105) + ((0.0118411817f * fTemp379) + ((0.0104373302f * fTemp444) + ((0.00946073793f * fTemp171) + ((0.0183111057f * fTemp160) + ((0.0246589556f * fTemp380) + ((0.0267647337f * fTemp129) + ((0.0233466607f * fTemp128) + ((0.0150151066f * fTemp158) + ((0.00424207281f * fTemp104) + ((0.00558488723f * fTemp439) + ((0.0165410321f * fTemp217) + ((0.0253303628f * fTemp356) + ((0.0295724366f * fTemp343) + ((0.0226752535f * fTemp8) + ((0.0142826624f * fTemp10) + ((0.00531022064f * fTemp11) + ((0.00762962736f * fTemp483) + ((0.00842310861f * fTemp452) + ((0.00753807183f * fTemp418) + ((0.0148930326f * fTemp347) + ((0.0166325886f * fTemp411) + ((0.0162053294f * fTemp197) + ((0.0138554033f * fTemp153) + ((0.0101016266f * fTemp407) + ((0.00534073915f * fTemp192) + ((0.00140385143f * fTemp454) + (fTemp709 + ((0.00448622089f * fTemp13) + ((0.00280770287f * fTemp14) + ((0.00308236945f * fTemp230) + ((0.000518814661f * fTemp443) + ((0.00155644398f * fTemp155) + ((0.00222785119f * fTemp132) + ((0.00112918485f * fTemp344) + ((0.000915555283f * fTemp176) + ((0.00198370311f * fTemp400) + ((0.00347911008f * fTemp448) + ((0.00457777642f * fTemp449) + ((0.00430310983f * fTemp395) + ((0.00378429517f * fTemp233) + (fTemp714 + ((0.00241096225f * fTemp94) + ((0.000305185094f * fTemp253) + ((0.00164799951f * fTemp254) + ((0.003234962f * fTemp255) + ((0.00460829493f * fTemp256) + ((0.00598162785f * fTemp257) + (fTemp586 + ((0.00561540574f * fTemp262) + ((0.00338755455f * fTemp266) + ((0.00799584948f * fTemp506) + ((0.00827051606f * fTemp267) + ((0.00436414685f * fTemp268) + ((0.00228888821f * fTemp503) + ((0.00317392498f * fTemp492) + ((0.0164189581f * fTemp276) + ((0.0219733268f * fTemp277) + ((0.0253913999f * fTemp278) + ((0.0244758446f * fTemp501) + ((0.0177922919f * fTemp488) + ((0.0025940733f * fTemp282) + ((0.0100405896f * fTemp283) + ((0.0159001444f * fTemp477) + ((0.0198370311f * fTemp510) + ((0.0217291787f * fTemp284) + ((0.0216986611f * fTemp285) + ((0.0191961434f * fTemp286) + ((0.00415051728f * fTemp292) + ((0.0143742179f * fTemp293) + ((0.0252082888f * fTemp294) + ((0.031037325f * fTemp484) + ((0.0283516962f * fTemp34) + ((0.0179448836f * fTemp441) + ((0.00811792351f * fTemp214) + ((0.0117496261f * fTemp45) + ((0.0423596911f * fTemp430) + ((0.0724814609f * fTemp297) + ((0.0910977498f * fTemp298) + ((0.0992461964f * fTemp299) + ((0.0957060456f * fTemp300) + ((0.0734885707f * fTemp301) + ((0.0245979186f * fTemp302) + ((0.0153813288f * fTemp303) + ((0.0387585089f * fTemp304) + ((0.0465712473f * fTemp305) + ((0.0434583575f * fTemp306) + ((0.0311288796f * fTemp307) + ((0.0135196997f * fTemp54) + ((0.00894192327f * fTemp308) + ((0.0469069481f * fTemp309) + ((0.0813318267f * fTemp509) + ((0.106570639f * fTemp310) + ((0.117526777f * fTemp311) + ((0.105563521f * fTemp312) + ((0.10278634f * fTemp314) + ((0.0972014517f * fTemp315) + ((0.0562456138f * fTemp61) + ((0.016235847f * fTemp318) + ((0.0657368675f * fTemp319) + ((0.156498924f * fTemp320) + ((0.175115213f * fTemp321) + ((0.147587508f * fTemp322) + ((0.0892971605f * fTemp135) + ((0.188512832f * fTemp323) + ((0.211554304f * fTemp324) + ((0.167241439f * fTemp325) + ((0.0766624957f * fTemp80) + ((0.164403215f * fTemp81) + ((0.177770317f * fTemp82) + ((0.777550578f * fTemp328) + (fTemp329 + ((0.783898413f * fTemp331) + ((0.398022413f * fTemp332) + ((0.000244148076f * ((fTemp188 - fTemp244) - fTemp513)) + ((3.05185094e-05f * (fTemp333 + (fTemp366 + (fTemp247 - fTemp359)))) + ((0.000366222113f * (fTemp334 + (fTemp352 + (fTemp451 + (fTemp202 + (fTemp207 + fTemp368)))))) + ((0.000671407208f * (fTemp231 + (fTemp112 - fTemp364))) + ((0.00106814783f * (fTemp336 + ((fTemp498 - fTemp147) - fTemp377))) + ((0.00109866634f * (fTemp341 + (fTemp424 - fTemp367))) + ((6.10370189e-05f * (fTemp365 - fTemp113)) + ((0.000152592547f * (fTemp389 - fTemp142)) + ((0.000488296151f * (fTemp390 + (fTemp372 + (fTemp408 + (fTemp145 + (fTemp148 + fTemp116)))))) + ((0.000183111057f * ((fTemp409 - fTemp350) - fTemp529)) + ((0.00186162908f * ((fTemp121 + (fTemp446 + fTemp111)) - fTemp396)) + ((0.000274666585f * (fTemp139 + (fTemp526 - fTemp163))) + ((0.000396740623f * (fTemp108 + (fTemp174 - fTemp499))) + ((0.000854518265f * (fTemp99 + (fTemp120 + fTemp175))) + ((0.00115970336f * (fTemp338 + fTemp384)) + ((0.00210577715f * (fTemp420 + (fTemp151 - fTemp103))) + ((0.000946073793f * (fTemp426 + fTemp414)) + ((0.00326548051f * ((fTemp227 + fTemp422) - fTemp373)) + ((0.00555436872f * (fTemp95 - fTemp431)) + ((0.00592059083f * ((fTemp471 - fTemp482) - fTemp26)) + ((0.00360118411f * (fTemp419 - fTemp438)) + ((0.00207525864f * ((((fTemp369 - fTemp154) - fTemp126) - fTemp187) - fTemp170)) + ((0.00143436994f * (fTemp146 + fTemp137)) + ((0.00125125889f * (fTemp172 + fTemp232)) + ((0.000335703604f * (fTemp440 - fTemp22)) + ((0.00238044374f * (fTemp122 + fTemp461)) + ((9.15555283e-05f * ((fTemp228 + (fTemp514 + fTemp491)) - fTemp18)) + ((0.00402844325f * (fTemp459 + (fTemp436 - fTemp165))) + ((0.00256355479f * (fTemp342 - fTemp141)) + ((0.00341807306f * (fTemp485 - fTemp123)) + ((0.00146488845f * (fTemp432 + fTemp391)) + ((0.00744651631f * (fTemp258 - fTemp476)) + ((0.00857570115f * (fTemp259 - fTemp196)) + ((0.00750755332f * (fTemp261 - fTemp478)) + ((0.00573747978f * (fTemp93 + fTemp31)) + ((0.00570696127f * (fTemp486 + fTemp190)) + ((0.0132450331f * (fTemp313 - fTemp480)) + ((0.00268562883f * (fTemp203 - fTemp363)) + ((0.00134281442f * ((fTemp92 + (fTemp249 - fTemp238)) - fTemp378)) + ((0.00152592547f * (fTemp445 - fTemp226)) + ((0.001617481f * (fTemp357 + fTemp41)) + ((0.0019531846f * (fTemp496 + (fTemp248 - fTemp386))) + ((0.00320444349f * (fTemp495 + (fTemp263 - fTemp412))) + ((((0.00631733146f * (fTemp288 + fTemp42)) + (0.0136417737f * (fTemp287 + fTemp44))) + (0.0102237007f * ((fTemp275 + fTemp43) - fTemp270))) + (0.00369273964f * (fTemp515 + fTemp30))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.318704784f * fTemp402) + ((0.175756097f * fTemp3) + ((0.0856959745f * fTemp4) + (fTemp715 + ((0.130863369f * fTemp7) + ((0.0485549495f * fTemp223) + ((0.00244148076f * fTemp211) + ((0.00543229468f * fTemp490) + ((0.00628681295f * fTemp421) + ((0.00634784997f * fTemp96) + (fTemp716 + ((0.0108645894f * fTemp91) + ((0.0195623655f * fTemp475) + ((0.0236518458f * fTemp466) + ((0.0208136234f * fTemp138) + ((0.0121158483f * fTemp358) + ((0.00619525742f * fTemp381) + ((0.0142521439f * fTemp450) + ((0.019470809f * fTemp209) + ((0.0222785119f * fTemp193) + ((0.0225531794f * fTemp184) + ((0.0198675506f * fTemp208) + ((0.0138859218f * fTemp467) + ((0.00506607257f * fTemp110) + ((0.00869777519f * fTemp339) + ((0.0122379223f * fTemp388) + ((0.0119327372f * fTemp489) + ((0.00878933072f * fTemp462) + ((0.00500503555f * fTemp206) + ((0.00723288674f * fTemp437) + ((0.00659199804f * fTemp183) + ((0.00396740623f * fTemp398) + ((0.00439466536f * fTemp12) + ((0.00521866512f * fTemp469) + ((0.0111087374f * fTemp17) + ((0.00915555283f * fTemp521) + ((0.00653096102f * fTemp90) + ((0.00274666585f * fTemp20) + ((0.00283822138f * fTemp185) + ((0.00497451704f * fTemp166) + ((0.0058290353f * fTemp434) + ((0.00509659108f * fTemp27) + ((0.00433362834f * fTemp162) + ((0.00234992523f * fTemp127) + ((0.00131229591f * fTemp125) + ((0.00173955504f * fTemp240) + ((0.00296029542f * fTemp143) + ((0.0028992584f * fTemp252) + ((0.00216681417f * fTemp401) + ((0.00350962859f * fTemp497) + ((0.0054933317f * fTemp429) + ((0.00576799829f * fTemp180) + ((0.004852443f * fTemp520) + ((0.00756859034f * fTemp28) + ((0.00930814538f * fTemp29) + ((0.0102542192f * fTemp385) + ((0.00921658985f * fTemp271) + ((0.00704977568f * fTemp370) + ((0.00372325815f * fTemp186) + ((0.00332651753f * fTemp272) + ((0.0093691824f * fTemp273) + ((0.0135807367f * fTemp274) + ((0.0145878475f * fTemp169) + ((0.011322367f * fTemp32) + ((0.00454725791f * fTemp33) + ((0.00735496078f * fTemp279) + ((0.0168767367f * fTemp280) + ((0.0190435499f * fTemp281) + ((0.0144047365f * fTemp215) + ((0.00384533219f * fTemp290) + ((0.00482192449f * fTemp505) + ((0.0133671071f * fTemp479) + ((0.0296639912f * fTemp35) + ((0.0301828068f * fTemp38) + ((0.0168462172f * fTemp39) + ((0.00585955381f * fTemp40) + ((0.0217902157f * fTemp47) + ((0.0396130271f * fTemp48) + (fTemp636 + ((0.0440076925f * fTemp295) + ((0.0252693258f * fTemp213) + ((0.0446180627f * fTemp50) + ((0.103244118f * fTemp51) + ((0.118137151f * fTemp52) + ((0.0832544938f * fTemp53) + ((0.00708029419f * fTemp55) + ((0.0468153954f * fTemp57) + ((0.0551469475f * fTemp144) + ((0.0259102155f * fTemp508) + ((0.0489822067f * fTemp212) + ((0.102450639f * fTemp58) + ((0.121921442f * fTemp59) + ((0.0769066438f * fTemp60) + ((0.0438550971f * fTemp62) + ((0.073397018f * fTemp63) + ((0.0946379006f * fTemp64) + ((0.137333289f * fTemp65) + ((0.141880557f * fTemp66) + ((0.123966187f * fTemp67) + (fTemp317 + ((0.0204168838f * fTemp68) + ((0.105960265f * fTemp69) + ((0.160405293f * fTemp70) + ((0.140812397f * fTemp71) + ((0.0416882858f * fTemp72) + ((0.011383404f * fTemp326) + ((0.0621967241f * fTemp73) + ((0.0903042704f * fTemp74) + ((0.137668997f * fTemp75) + ((0.217200235f * fTemp76) + ((0.28846094f * fTemp77) + ((0.285134435f * fTemp507) + ((0.191076383f * fTemp78) + ((0.0565202795f * fTemp79) + ((0.0232856236f * fTemp83) + ((0.219214454f * fTemp84) + ((0.455183566f * fTemp327) + ((0.667775512f * fTemp85) + ((0.706167817f * fTemp86) + ((0.418958098f * fTemp87) + (((0.000885036774f * ((fTemp404 - fTemp149) - fTemp98)) + ((0.000976592302f * ((((fTemp140 + ((fTemp167 + (fTemp235 - fTemp200)) - fTemp428)) - fTemp376) - fTemp337) - fTemp101)) + ((0.00103762932f * (((fTemp19 - fTemp442) - fTemp106) - fTemp107)) + ((0.000793481246f * ((fTemp340 - fTemp464) - fTemp345)) + ((0.000213629566f * ((fTemp118 + (fTemp361 + ((fTemp134 + (fTemp393 + ((fTemp289 - fTemp246) - fTemp168))) - fTemp375))) - fTemp360)) + ((0.000427259132f * (fTemp374 + fTemp250)) + ((0.000640888698f * (fTemp346 + ((fTemp102 + (fTemp115 - fTemp229)) - fTemp354))) + ((0.000732444227f * (fTemp124 - fTemp458)) + ((0.000701925717f * (fTemp353 + (fTemp394 + (fTemp405 - fTemp460)))) + ((0.0022583697f * (fTemp399 + fTemp668)) + ((0.00213629566f * (fTemp403 - fTemp152)) + ((0.00170903653f * (fTemp130 + (fTemp178 + fTemp291))) + ((0.00119022187f * (fTemp131 - fTemp179)) + ((0.000610370189f * (fTemp119 - fTemp109)) + ((0.0012817774f * ((fTemp15 - fTemp224) - fTemp355)) + ((0.000762962736f * ((fTemp392 + (((fTemp487 + (fTemp269 - fTemp264)) - fTemp406) - fTemp397)) - fTemp410)) + ((0.00057985168f * ((fTemp89 - fTemp335) - fTemp417)) + ((0.00137333293f * (((fTemp236 + (fTemp237 + (fTemp265 + fTemp46))) - fTemp181) - fTemp100)) + ((0.00158696249f * ((fTemp500 + fTemp516) - fTemp150)) + ((0.000823999755f * ((fTemp161 + fTemp173) - fTemp382)) + ((0.000457777642f * (((fTemp455 + fTemp457) - fTemp97) - fTemp156)) + ((0.0019226661f * (fTemp425 + ((((fTemp415 + fTemp216) - fTemp210) - fTemp191) - fTemp351))) + ((0.00610370189f * (fTemp24 + fTemp474)) + ((0.00100711081f * (fTemp23 + (fTemp205 + fTemp470))) + ((0.00183111057f * ((fTemp504 + fTemp241) - fTemp177)) + ((0.00122074038f * (fTemp164 + fTemp465)) + ((0.00405896176f * ((fTemp225 + fTemp511) - fTemp463)) + ((0.0109866634f * (fTemp189 - fTemp201)) + ((0.0090334788f * (fTemp16 - fTemp349)) + ((0.00491348002f * ((fTemp195 - fTemp348) - fTemp433)) + ((0.00167851802f * (fTemp133 - fTemp198)) + ((0.00292977691f * (fTemp157 - fTemp447)) + ((0.0284127332f * ((fTemp159 + fTemp56) - fTemp453)) + ((0.0061342204f * (fTemp468 - fTemp473)) + ((0.00650044251f * (fTemp413 + (fTemp199 - fTemp296))) + ((0.00204474013f * ((fTemp242 + fTemp416) - fTemp194)) + ((0.00271614734f * ((fTemp243 - fTemp6) - fTemp493)) + ((0.00250251777f * (fTemp362 - fTemp204)) + ((0.00177007355f * (fTemp423 - fTemp494)) + ((0.0404370241f * (fTemp36 + fTemp37)) + (0.00149540696f * (fTemp502 + fTemp239)))))))))))))))))))))))))))))))))))))))))) + (0.00054933317f * (fTemp88 + ((fTemp383 - fTemp136) - fTemp114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.0573137626f * fTemp0) + ((0.0132145146f * fTemp6) + ((0.00335703604f * fTemp128) + ((0.00363170262f * fTemp104) + ((0.00482192449f * fTemp11) + ((0.00665303506f * fTemp339) + ((0.00238044374f * fTemp398) + ((0.0022583697f * fTemp432) + ((0.00408948027f * fTemp151) + ((0.00378429517f * fTemp122) + ((0.000823999755f * fTemp403) + ((0.00164799951f * fTemp399) + ((0.00155644398f * fTemp346) + ((0.00292977691f * fTemp371) + ((0.00274666585f * fTemp366) + ((0.00109866634f * fTemp231) + ((0.00283822138f * fTemp232) + ((0.00500503555f * fTemp496) + ((0.003234962f * fTemp495) + ((0.00534073915f * fTemp111) + ((0.00738547929f * fTemp92) + ((0.00308236945f * fTemp238) + ((0.0077517014f * fTemp504) + ((0.00659199804f * fTemp241) + ((0.00369273964f * fTemp470) + ((0.00723288674f * fTemp244) + ((0.00955229346f * fTemp246) + ((0.0105594043f * fTemp247) + ((0.00811792351f * fTemp487) + ((0.00726340525f * fTemp491) + ((0.012939848f * fTemp526) + ((0.0148319956f * fTemp174) + ((0.0105288858f * fTemp175) + ((0.00943021942f * fTemp401) + ((0.014679403f * fTemp404) + ((0.0142521439f * fTemp253) + ((0.00888088625f * fTemp254) + ((0.00552385021f * fTemp260) + ((0.0144047365f * fTemp261) + ((0.019531846f * fTemp262) + ((0.0187688842f * fTemp263) + ((0.0138248848f * fTemp264) + ((0.0166631062f * fTemp267) + ((0.0160222184f * fTemp268) + ((0.0121463668f * fTemp269) + ((0.0120853297f * fTemp370) + ((0.0213934761f * fTemp186) + ((0.0239265114f * fTemp188) + ((0.0173650328f * fTemp30) + ((0.0051576281f * fTemp31) + ((0.0163274035f * fTemp32) + ((0.0248725861f * fTemp33) + ((0.0226752535f * fTemp492) + ((0.0111697745f * fTemp275) + ((0.0154118473f * fTemp471) + ((0.0249336231f * fTemp279) + ((0.0252693258f * fTemp280) + ((0.0186162908f * fTemp281) + ((0.00994903408f * fTemp215) + ((0.0181890316f * fTemp284) + ((0.0304879919f * fTemp285) + ((0.0313119926f * fTemp286) + ((0.0248115491f * fTemp287) + ((0.0146488845f * fTemp288) + ((0.0199591052f * fTemp292) + ((0.0348216183f * fTemp293) + ((0.0314951017f * fTemp484) + ((0.0165105145f * fTemp34) + ((0.0189519953f * fTemp38) + ((0.0404065065f * fTemp39) + ((0.0466017649f * fTemp40) + ((0.0299996957f * fTemp41) + ((0.00762962736f * fTemp46) + ((0.0232245866f * fTemp47) + ((0.0311899167f * fTemp48) + ((0.0286568813f * fTemp49) + ((0.0661946461f * fTemp300) + ((0.0777306408f * fTemp301) + ((0.0558793917f * fTemp302) + ((0.0102542192f * fTemp304) + ((0.043794062f * fTemp305) + ((0.0215765871f * fTemp54) + ((0.037446212f * fTemp508) + ((0.0831018984f * fTemp308) + ((0.0861537531f * fTemp309) + ((0.0562150963f * fTemp509) + ((0.0285958443f * fTemp310) + ((0.0184331797f * fTemp311) + ((0.0123905148f * fTemp199) + ((0.0409863591f * fTemp62) + ((0.0120242927f * fTemp63) + ((0.0288094729f * fTemp65) + ((0.0532547981f * fTemp66) + ((0.0058290353f * fTemp67) + ((0.228431046f * fTemp320) + ((0.218726158f * fTemp321) + ((0.0578325763f * fTemp322) + ((0.0287789553f * fTemp70) + ((0.151036099f * fTemp323) + ((0.342875451f * fTemp324) + ((0.382641077f * fTemp325) + ((0.171483502f * fTemp75) + ((0.392895281f * fTemp76) + ((0.116824858f * fTemp77) + ((0.0408948027f * fTemp78) + ((0.177983955f * fTemp79) + ((0.0770897567f * fTemp80) + ((0.254768521f * fTemp84) + ((0.572222054f * fTemp327) + ((0.36890775f * fTemp85) + ((0.179235205f * fTemp328) + ((0.751792967f * fTemp329) + ((0.619830906f * fTemp331) + ((0.250862151f * fTemp332) + ((((0.000640888698f * (fTemp334 + (fTemp97 - fTemp225))) + ((0.00152592547f * (fTemp98 + ((fTemp516 - fTemp347) - fTemp172))) + ((0.00180059206f * fTemp705) + ((0.00189214759f * (fTemp336 + (fTemp383 + (fTemp10 + (fTemp488 - fTemp356))))) + ((0.00158696249f * (fTemp345 + (fTemp353 + (fTemp132 + fTemp400)))) + ((0.00177007355f * (fTemp114 + (fTemp150 + fTemp457))) + ((0.00210577715f * (fTemp352 + (fTemp393 + (fTemp181 + fTemp203)))) + ((0.00268562883f * (fTemp113 + (fTemp355 + ((fTemp255 - fTemp498) - fTemp160)))) + ((0.00167851802f * (fTemp374 + (fTemp408 + fTemp102))) + ((0.00244148076f * (fTemp361 - fTemp168)) + ((0.00247199927f * (fTemp112 + fTemp179)) + ((0.000793481246f * (fTemp375 + (fTemp409 + (fTemp119 + (fTemp207 + fTemp210))))) + ((0.00057985168f * (fTemp529 + fTemp142)) + ((0.000732444227f * (fTemp394 + fTemp162)) + ((0.00112918485f * (fTemp125 + (fTemp26 + (fTemp14 + fTemp183)))) + ((0.0012817774f * (fTemp127 + (fTemp27 + fTemp129))) + ((0.000213629566f * (fTemp131 + (fTemp134 + (fTemp382 + fTemp123)))) + ((0.000122074038f * (fTemp405 + (fTemp115 + (fTemp140 + (fTemp198 - fTemp335))))) + ((0.00228888821f * (fTemp139 + (fTemp459 - fTemp490))) + ((0.00119022187f * (fTemp340 + (fTemp410 + (fTemp456 + fTemp200)))) + ((0.000305185094f * (fTemp417 - fTemp378)) + ((0.000427259132f * ((fTemp96 + fTemp271) - fTemp145)) + ((0.00134281442f * (fTemp100 + fTemp93)) + ((0.00213629566f * (fTemp121 + (fTemp252 - fTemp226))) + ((0.00204474013f * (fTemp152 + (fTemp228 - fTemp349))) + ((0.00106814783f * (fTemp420 + (fTemp428 - fTemp443))) + ((6.10370189e-05f * (fTemp427 + (fTemp13 + (fTemp395 - fTemp8)))) + ((0.000152592547f * (fTemp161 - fTemp387)) + ((0.000183111057f * (fTemp163 + (fTemp191 + fTemp350))) + ((0.000518814661f * fTemp706) + ((0.000396740623f * (fTemp24 + fTemp224)) + ((0.000885036774f * ((fTemp486 + fTemp137) - fTemp22)) + ((0.00766014587f * (fTemp50 - fTemp182)) + ((0.00479140598f * (fTemp461 - fTemp455)) + ((0.00256355479f * (fTemp463 - fTemp447)) + ((0.00131229591f * (fTemp342 + fTemp379)) + ((0.00695822015f * (fTemp239 - fTemp476)) + ((0.00360118411f * (((fTemp242 + (fTemp169 + fTemp312)) - fTemp110) - fTemp418)) + ((0.00262459181f * (((fTemp445 + fTemp221) - fTemp421) - fTemp116)) + ((0.00814844202f * (fTemp240 - fTemp178)) + ((0.0139774773f * (fTemp295 - fTemp206)) + ((0.0133365886f * (fTemp506 - fTemp489)) + ((0.00433362834f * (fTemp158 - fTemp171)) + ((0.00265511032f * (fTemp499 - fTemp392)) + ((0.00531022064f * (fTemp266 - fTemp415)) + ((0.00708029419f * (fTemp265 - fTemp423)) + ((0.00457777642f * (fTemp520 + fTemp60)) + ((0.0657368675f * (fTemp306 + fTemp218)) + ((0.0570390932f * (fTemp307 + fTemp220)) + (0.00564592425f * fTemp647)))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000854518265f * (fTemp513 + fTemp368))) + (0.00122074038f * (fTemp88 + fTemp372))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.694265544f * fTemp1) + ((0.212775052f * fTemp2) + ((0.20355846f * fTemp402) + ((0.0148930326f * fTemp3) + ((0.0792260543f * fTemp219) + ((0.0952787846f * fTemp4) + ((0.025696585f * fTemp7) + ((0.0343333222f * fTemp222) + (fTemp707 + ((0.00616473891f * fTemp141) + ((0.00350962859f * fTemp211) + ((0.00241096225f * fTemp165) + ((0.00286873989f * fTemp190) + ((0.0061342204f * fTemp138) + (fTemp708 + ((0.00628681295f * fTemp377) + ((0.00778221991f * fTemp193) + ((0.00692770164f * fTemp184) + ((0.00448622089f * fTemp208) + ((0.00317392498f * fTemp467) + ((0.00418103579f * fTemp439) + ((0.0164189581f * fTemp462) + (fTemp576 + ((0.00332651753f * fTemp367) + ((0.00729392376f * fTemp442) + ((0.00622577593f * fTemp157) + ((0.00390636921f * fTemp482) + ((9.15555283e-05f * fTemp201) + ((0.00207525864f * fTemp192) + ((0.00454725791f * fTemp478) + ((0.00674459059f * fTemp195) + (fTemp709 + ((0.00186162908f * fTemp433) + ((0.00927762687f * fTemp469) + ((0.00967436749f * fTemp16) + ((0.00347911008f * fTemp189) + (fTemp21 + ((0.008087405f * fTemp185) + (fTemp710 + ((0.000335703604f * fTemp425) + ((0.000274666585f * fTemp109) + ((0.00314340647f * fTemp436) + ((0.00326548051f * fTemp233) + ((0.001617481f * fTemp419) + ((0.00463881344f * fTemp500) + (fTemp574 + ((0.00897244178f * fTemp386) + ((0.0028992584f * fTemp465) + ((0.00341807306f * fTemp248) + ((0.00555436872f * fTemp249) + ((0.00521866512f * fTemp250) + ((0.00302133244f * fTemp251) + ((0.00424207281f * fTemp257) + (fTemp711 + ((0.00949125644f * fTemp180) + ((0.0042115543f * fTemp362) + ((0.00540177617f * fTemp28) + ((0.0134281442f * fTemp29) + ((0.0152592547f * fTemp385) + ((0.00982696004f * fTemp270) + ((0.0108340709f * fTemp503) + ((0.0113528855f * fTemp272) + ((0.009704886f * fTemp273) + ((0.00543229468f * fTemp274) + ((0.0108035523f * fTemp277) + ((0.0129703665f * fTemp278) + ((0.00866725668f * fTemp501) + ((0.0145878475f * fTemp282) + ((0.0240180679f * fTemp283) + ((0.0201422162f * fTemp290) + ((0.0326853245f * fTemp505) + ((0.0272835474f * fTemp511) + ((0.0346385092f * fTemp479) + ((0.0338145085f * fTemp35) + ((0.0238959938f * fTemp36) + ((0.0357982107f * fTemp214) + ((0.0486770235f * fTemp43) + ((0.014557329f * fTemp45) + ((0.00958281197f * fTemp213) + ((0.0321054719f * fTemp296) + ((0.0434278399f * fTemp430) + ((0.0355540626f * fTemp297) + ((0.00823999755f * fTemp298) + ((0.0389416181f * fTemp51) + ((0.0584124289f * fTemp52) + (fTemp712 + ((0.0336924344f * fTemp159) + ((0.0155034028f * fTemp303) + ((0.02252266f * fTemp55) + ((0.0569475405f * fTemp56) + ((0.0704672411f * fTemp57) + ((0.0592059083f * fTemp144) + ((0.0742515326f * fTemp313) + ((0.0857875273f * fTemp212) + ((0.0592364259f * fTemp58) + ((0.00546281319f * fTemp59) + ((0.0289620664f * fTemp314) + ((0.054811243f * fTemp315) + ((0.0369579159f * fTemp61) + ((0.187170014f * fTemp316) + ((0.219946891f * fTemp318) + ((0.13675344f * fTemp319) + ((0.100741602f * fTemp68) + ((0.0209967345f * fTemp69) + ((0.100161746f * fTemp71) + ((0.101260416f * fTemp72) + ((0.0103457747f * fTemp135) + ((0.455427706f * fTemp326) + ((0.708121002f * fTemp73) + ((0.38398388f * fTemp74) + ((0.205664232f * fTemp507) + ((0.0684530139f * fTemp81) + ((0.184026614f * fTemp82) + ((0.128604993f * fTemp83) + ((0.415448457f * fTemp86) + (fTemp655 + (((0.00173955504f * ((((fTemp413 + fTemp243) - fTemp444) - fTemp354) - fTemp101)) + ((0.00201422162f * ((fTemp276 - fTemp18) - fTemp341)) + ((0.0019226661f * ((fTemp450 + fTemp514) - fTemp106)) + ((0.00170903653f * ((fTemp166 + (fTemp364 + fTemp256)) - fTemp337)) + ((0.00231940672f * ((fTemp197 + (fTemp411 - fTemp202)) - fTemp360)) + ((0.00250251777f * (((fTemp236 - fTemp384) - fTemp338) - fTemp365)) + ((0.00216681417f * ((fTemp438 + (fTemp23 + fTemp464)) - fTemp118)) + ((0.00149540696f * (((fTemp187 - fTemp414) - fTemp396) - fTemp124)) + ((0.00296029542f * (fTemp234 - fTemp389)) + ((0.00299081393f * (fTemp42 - fTemp390)) + ((0.000488296151f * (((fTemp452 + fTemp497) - fTemp90) - fTemp130)) + ((0.00222785119f * ((fTemp449 - fTemp177) - fTemp136)) + ((0.00103762932f * (fTemp289 - fTemp108)) + ((0.00183111057f * ((fTemp407 + (fTemp416 - fTemp474)) - fTemp99)) + ((0.0019531846f * (fTemp237 - fTemp376)) + ((0.000671407208f * (fTemp148 + (fTemp434 - fTemp473))) + ((0.000457777642f * ((fTemp397 - fTemp458) - fTemp120)) + ((0.000915555283f * (((fTemp424 + fTemp343) - fTemp351) - fTemp344)) + ((0.000946073793f * ((fTemp468 - fTemp230) - fTemp426)) + ((0.00143436994f * (((fTemp515 - fTemp381) - fTemp19) - fTemp431)) + ((0.00198370311f * (fTemp170 + (fTemp153 + (fTemp259 - fTemp388)))) + ((0.0038758507f * (fTemp451 + fTemp147)) + ((0.000762962736f * (fTemp359 + (fTemp453 - fTemp194))) + ((0.00466933195f * (fTemp164 + fTemp441)) + ((0.000976592302f * ((fTemp380 + fTemp475) - fTemp149)) + ((0.00714133121f * (fTemp17 - fTemp363)) + ((0.00570696127f * (fTemp15 + fTemp216)) + ((0.00280770287f * ((fTemp510 - fTemp391) - fTemp229)) + ((0.00503555406f * (fTemp454 + (fTemp154 + fTemp291))) + ((0.00595110934f * (fTemp133 + fTemp196)) + ((0.00320444349f * (fTemp12 + fTemp466)) + ((0.00115970336f * (fTemp437 - fTemp483)) + ((0.00637836847f * (fTemp348 + fTemp412)) + ((0.00344859157f * (fTemp103 + fTemp217)) + ((0.000366222113f * (fTemp205 + fTemp105)) + ((0.00589007232f * (fTemp480 + fTemp357)) + (((((((((((0.0310983621f * (fTemp64 - fTemp299)) + (0.0242316965f * (fTemp485 + fTemp5))) + (0.0379345082f * (fTemp44 - fTemp294))) + (0.0201727357f * (fTemp477 + fTemp223))) + (0.00494399853f * (fTemp502 + fTemp258))) + (0.0057985168f * (fTemp37 - fTemp94))) + (0.00573747978f * (fTemp95 - fTemp369))) + (0.00512710959f * fTemp713)) + (0.00381481368f * (fTemp176 + fTemp448))) + (3.05185094e-05f * (fTemp235 - fTemp493))) + (0.00277718436f * (fTemp435 + fTemp173))))))))))))))))))))))))))))))))))))))) + (0.00054933317f * ((((fTemp521 + (fTemp227 - fTemp460)) - fTemp446) - fTemp155) - fTemp333)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow22 ? (iSlow24 ? ((fTemp223 + ((0.00277718436f * fTemp96) + ((0.00274666585f * fTemp439) + ((0.00256355479f * fTemp343) + ((0.0035401471f * fTemp363) + ((0.00329599902f * fTemp339) + ((0.00411999878f * fTemp480) + ((0.00439466536f * fTemp462) + ((0.00332651753f * fTemp178) + (fTemp696 + ((0.00286873989f * fTemp207) + ((0.00173955504f * fTemp348) + ((0.00491348002f * fTemp197) + ((0.00717184972f * fTemp153) + (fTemp697 + ((0.0106814783f * fTemp13) + ((0.0111697745f * fTemp414) + ((0.01126133f * fTemp14) + ((0.00912503432f * fTemp228) + ((0.00454725791f * fTemp229) + ((0.00946073793f * fTemp342) + ((0.0136112552f * fTemp463) + ((0.0153813288f * fTemp459) + ((0.0142826624f * fTemp230) + ((0.0115054781f * fTemp191) + ((0.00445570238f * fTemp455) + ((0.00500503555f * fTemp451) + ((0.00524918362f * fTemp172) + ((0.00564592425f * fTemp446) + ((0.00643940549f * fTemp146) + ((0.00369273964f * fTemp170) + ((0.00396740623f * fTemp26) + ((0.00610370189f * fTemp431) + ((0.00827051606f * fTemp27) + ((0.00976592302f * fTemp162) + ((0.0103152562f * fTemp373) + ((0.0101626636f * fTemp425) + ((0.00955229346f * fTemp89) + ((0.00857570115f * fTemp97) + ((0.00735496078f * fTemp428) + ((0.00573747978f * fTemp426) + (fTemp698 + ((0.00280770287f * fTemp420) + ((0.00436414685f * fTemp152) + ((0.00595110934f * fTemp121) + ((0.00811792351f * fTemp150) + ((0.00964384899f * fTemp100) + ((0.00900296029f * fTemp344) + (fTemp699 + ((0.00552385021f * fTemp338) + ((0.00268562883f * fTemp142) + (fTemp700 + ((0.00283822138f * fTemp399) + ((0.0019531846f * fTemp396) + ((0.00183111057f * fTemp390) + (((0.00521866512f * fTemp397) + ((0.00106814783f * fTemp111) + ((0.00317392498f * fTemp236) + ((0.00366222113f * fTemp500) + ((0.00784325693f * fTemp412) + ((0.0109866634f * fTemp143) + ((0.0131839961f * fTemp416) + ((0.0118411817f * fTemp470) + ((0.00637836847f * fTemp244) + ((0.00375377666f * fTemp457) + ((0.00793481246f * fTemp491) + ((0.011322367f * fTemp526) + ((0.0119327372f * fTemp174) + ((0.00967436749f * fTemp175) + ((0.0201727357f * fTemp370) + ((0.0477614664f * fTemp186) + ((0.0587786511f * fTemp188) + ((0.0393078402f * fTemp30) + ((0.00418103579f * fTemp169) + ((0.0182805881f * fTemp215) + ((0.0396740623f * fTemp468) + ((0.0482497625f * fTemp282) + ((0.0408948027f * fTemp283) + ((0.0141300699f * fTemp477) + ((0.0424817652f * fTemp289) + ((0.0739158317f * fTemp290) + ((0.0568865016f * fTemp505) + ((0.00781273842f * fTemp511) + ((0.0263374746f * fTemp38) + ((0.0609454624f * fTemp39) + ((0.0868556798f * fTemp40) + ((0.0846278295f * fTemp41) + ((0.077822201f * fTemp42) + ((0.0271004364f * fTemp214) + ((0.0711691678f * fTemp48) + (fTemp679 + ((0.105533004f * fTemp295) + ((0.0233771782f * fTemp213) + ((0.00952177495f * fTemp298) + ((0.0693990886f * fTemp299) + ((0.0613727234f * fTemp300) + (fTemp528 + ((0.286080509f * fTemp304) + ((0.364665657f * fTemp305) + ((0.276436657f * fTemp306) + ((0.0625324249f * fTemp57) + ((0.764854908f * fTemp144) + ((0.690847516f * fTemp508) + ((0.268898576f * fTemp308) + ((0.0667439774f * fTemp309) + ((0.0261238441f * fTemp509) + ((0.0077517014f * fTemp310) + ((0.000122074038f * (fTemp334 + ((fTemp384 + (fTemp349 + fTemp603)) - fTemp139))) + ((0.00219733268f * ((fTemp411 - fTemp93) - fTemp336)) + ((0.00158696249f * ((fTemp19 + (fTemp461 - fTemp165)) - fTemp341)) + ((0.00057985168f * (fTemp345 + fTemp465)) + ((0.000305185094f * (fTemp114 + (fTemp29 + fTemp325))) + ((0.000701925717f * ((fTemp442 - fTemp225) - fTemp352)) + ((0.00344859157f * ((fTemp132 + (fTemp472 + fTemp388)) - fTemp118)) + ((0.00238044374f * ((fTemp131 + (fTemp163 + (fTemp24 + (fTemp438 + (fTemp415 + fTemp357))))) - fTemp124)) + ((0.00170903653f * ((fTemp434 + fTemp227) - fTemp353)) + ((0.000152592547f * (fTemp361 + (((fTemp319 + (fTemp220 + fTemp69)) - fTemp6) - fTemp164))) + ((0.00112918485f * (fTemp389 + fTemp473)) + ((0.0022583697f * (fTemp112 + fTemp158)) + ((0.00198370311f * (fTemp375 + (fTemp126 - fTemp147))) + ((0.00167851802f * (fTemp529 + fTemp166)) + ((0.00143436994f * (fTemp394 + fTemp493)) + ((0.00146488845f * (fTemp125 + (fTemp382 + (fTemp184 - fTemp358)))) + ((0.00378429517f * (fTemp127 + fTemp206)) + ((0.00402844325f * (fTemp403 + fTemp156)) + ((0.000213629566f * (fTemp134 + (fTemp129 + fTemp65))) + ((3.05185094e-05f * (((fTemp458 + ((fTemp235 + (fTemp271 + (fTemp67 + ((fTemp322 + (fTemp68 + (fTemp507 + (fTemp81 + (fTemp82 + (fTemp86 + (fTemp87 + fTemp567))))))) - fTemp4)))) - fTemp387)) - fTemp340) - fTemp393)) + ((9.15555283e-05f * ((((fTemp63 + (fTemp66 + (fTemp320 + (fTemp135 + (fTemp73 + (fTemp74 + (fTemp75 + (fTemp76 + (fTemp402 + fTemp701))))))))) - fTemp61) - fTemp359) - fTemp102)) + ((0.000854518265f * (fTemp119 + fTemp199)) + ((0.00473036896f * (fTemp108 + (fTemp18 + fTemp350))) + ((0.00607318338f * (fTemp99 + (fTemp351 + (fTemp32 - fTemp440)))) + ((0.00335703604f * (fTemp355 + fTemp266)) + ((0.000183111057f * (fTemp109 + (((fTemp3 + (fTemp72 + fTemp323)) - fTemp59) - fTemp347))) + ((0.00103762932f * (fTemp427 + fTemp385)) + ((0.00122074038f * (fTemp161 + (fTemp421 - fTemp7))) + ((0.0051576281f * (fTemp364 + fTemp12)) + ((0.00314340647f * (fTemp167 + (fTemp137 + (fTemp210 + fTemp10)))) + ((0.000396740623f * (fTemp22 - fTemp177)) + ((0.000518814661f * ((fTemp60 - fTemp157) - fTemp179)) + ((0.000762962736f * ((fTemp123 + (fTemp450 - fTemp380)) - fTemp182)) + ((0.000976592302f * ((fTemp367 - fTemp368) - fTemp185)) + ((0.00823999755f * (fTemp149 - fTemp469)) + ((6.10370189e-05f * ((fTemp315 + ((fTemp318 + (fTemp321 + (fTemp219 + (fTemp71 + (fTemp77 + (fTemp80 + (fTemp2 + (fTemp83 + (fTemp84 + (fTemp327 + (fTemp0 + fTemp85))))))))))) - fTemp62)) - fTemp478)) + ((0.00164799951f * (fTemp702 - fTemp201)) + ((0.00137333293f * ((fTemp128 + fTemp173) - fTemp482)) + ((0.00244148076f * (fTemp418 + (fTemp483 + fTemp392))) + ((0.00296029542f * (fTemp198 + fTemp217)) + ((0.00253303628f * (fTemp8 + (fTemp413 + fTemp154))) + ((0.00216681417f * (fTemp467 + fTemp242)) + ((0.00189214759f * (fTemp208 + fTemp447)) + ((0.000274666585f * (fTemp209 + (fTemp475 + fTemp626))) + ((0.000915555283f * (fTemp502 - fTemp190)) + ((0.00134281442f * (fTemp515 - fTemp514)) + ((0.000366222113f * ((fTemp314 - fTemp248) - fTemp200)) + ((0.0038758507f * (fTemp176 + ((fTemp281 + fTemp36) - fTemp255))) + ((0.00820947904f * (fTemp37 - fTemp277)) + (0.00601214636f * (fTemp445 - fTemp94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000946073793f * fTemp513))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0331431031f * fTemp222) + ((0.0012817774f * fTemp460) + ((0.00213629566f * fTemp398) + ((0.00695822015f * fTemp196) + ((0.0134281442f * fTemp476) + ((0.0164189581f * fTemp195) + ((0.0137028107f * fTemp133) + ((0.00558488723f * fTemp454) + ((0.004852443f * fTemp424) + ((0.00726340525f * fTemp15) + ((0.00708029419f * fTemp189) + ((0.00476088747f * fTemp148) + ((0.00762962736f * fTemp145) + ((0.00790429395f * fTemp417) + ((0.00320444349f * fTemp376) + ((0.003234962f * fTemp374) + ((0.00372325815f * fTemp371) + ((0.00311288796f * fTemp365) + ((0.00201422162f * fTemp360) + ((0.000640888698f * fTemp106) + ((0.00119022187f * fTemp494) + ((0.00308236945f * fTemp395) + ((0.00228888821f * fTemp495) + ((0.00393688772f * fTemp234) + ((0.00650044251f * fTemp92) + ((0.00866725668f * fTemp238) + ((0.0107730338f * fTemp239) + ((0.00939970091f * fTemp240) + ((0.00589007232f * fTemp504) + ((0.0074159978f * fTemp247) + (fTemp703 + ((0.00433362834f * fTemp216) + ((0.008087405f * fTemp249) + ((0.0139469588f * fTemp250) + ((0.0160222184f * fTemp251) + ((0.0127872555f * fTemp252) + ((0.00704977568f * fTemp401) + ((0.0104983672f * fTemp258) + ((0.0137943663f * fTemp259) + ((0.0189825129f * fTemp260) + ((0.022644734f * fTemp261) + ((0.0196234025f * fTemp262) + ((0.0133060701f * fTemp263) + ((0.00628681295f * fTemp264) + ((0.00988799706f * fTemp497) + ((0.0126041444f * fTemp429) + ((0.00350962859f * fTemp506) + ((0.0155949583f * fTemp267) + ((0.0309457686f * fTemp269) + ((0.0232551042f * fTemp520) + ((0.00653096102f * fTemp31) + ((0.0543839857f * fTemp95) + ((0.0792260543f * fTemp503) + ((0.0681478307f * fTemp272) + ((0.0392773226f * fTemp273) + ((0.00985747855f * fTemp274) + ((0.000427259132f * fTemp33) + ((0.0122684408f * fTemp275) + ((0.00863673817f * fTemp278) + (fTemp527 + ((0.0156559963f * fTemp488) + ((0.0179448836f * fTemp471) + ((0.012939848f * fTemp279) + ((0.0817590877f * fTemp284) + ((0.119602039f * fTemp285) + ((0.127994627f * fTemp286) + ((0.0935392305f * fTemp287) + ((0.0285042878f * fTemp288) + ((0.0338145085f * fTemp291) + ((0.0607318357f * fTemp292) + ((0.0643330216f * fTemp293) + ((0.0670796856f * fTemp294) + ((0.0740379021f * fTemp484) + ((0.0790429413f * fTemp34) + ((0.0684530139f * fTemp441) + ((0.0478530228f * fTemp485) + ((0.0247199927f * fTemp479) + ((0.0306711029f * fTemp43) + ((0.0982390791f * fTemp44) + ((0.126529738f * fTemp45) + ((0.129032254f * fTemp46) + ((0.0506607257f * fTemp47) + ((0.0943632349f * fTemp296) + ((0.146488845f * fTemp430) + ((0.116641745f * fTemp297) + ((0.0231940672f * fTemp301) + ((0.0966826379f * fTemp302) + ((0.174657434f * fTemp50) + ((0.19721061f * fTemp51) + ((0.180547506f * fTemp52) + ((0.136021003f * fTemp53) + ((0.0261543635f * fTemp159) + ((0.110599078f * fTemp307) + ((0.588244259f * fTemp54) + ((0.870479465f * fTemp55) + ((0.646168411f * fTemp56) + ((0.0166325886f * fTemp311) + ((0.031037325f * fTemp312) + ((0.0253608823f * fTemp313) + ((0.0139164403f * fTemp212) + (((0.000732444227f * ((fTemp231 + ((((fTemp369 + (fTemp436 - fTemp221)) - fTemp456) - fTemp378) - fTemp193)) - fTemp333)) + ((0.00155644398f * (fTemp98 + ((fTemp160 + fTemp591) - fTemp23))) + ((0.00210577715f * (fTemp101 + (fTemp498 - fTemp486))) + ((0.00231940672f * (fTemp107 - fTemp372)) + ((0.000244148076f * ((fTemp466 - fTemp194) - fTemp337)) + ((0.00363170262f * (fTemp366 + (fTemp113 - fTemp11))) + ((0.0028992584f * (fTemp346 - fTemp356)) + ((0.000885036774f * (fTemp383 + (fTemp122 + (fTemp138 + (fTemp224 + fTemp253))))) + ((0.00234992523f * ((fTemp449 - fTemp453) - fTemp354)) + ((0.00125125889f * ((fTemp246 - fTemp464) - fTemp405)) + ((0.00054933317f * (fTemp409 + (fTemp136 - fTemp91))) + ((0.00616473891f * (fTemp410 - fTemp443)) + ((0.00204474013f * (((fTemp386 - fTemp203) - fTemp474) - fTemp155)) + ((0.00109866634f * (fTemp151 - fTemp105)) + ((0.00100711081f * (fTemp20 + fTemp423)) + ((0.000335703604f * (fTemp187 + (fTemp490 - fTemp218))) + ((0.00247199927f * (fTemp90 - fTemp104)) + ((0.00802636798f * (fTemp17 + fTemp180)) + ((0.00842310861f * (fTemp16 + fTemp492)) + ((0.000671407208f * fTemp704) + ((0.00894192327f * (fTemp276 - fTemp433)) + ((0.00796533097f * (fTemp280 - fTemp168)) + ((0.00885036774f * (fTemp28 - fTemp192)) + ((0.00222785119f * (fTemp202 - fTemp335)) + ((0.00207525864f * (fTemp183 + fTemp211)) + ((0.00186162908f * (fTemp437 + (fTemp406 - fTemp381))) + ((0.0025940733f * ((fTemp404 - fTemp205) - fTemp452)) + ((0.00140385143f * (fTemp448 - fTemp103)) + ((0.00463881344f * (fTemp419 - fTemp489)) + ((0.00241096225f * (fTemp254 - fTemp110)) + ((0.0019226661f * (fTemp171 + (fTemp377 - fTemp204))) + ((0.00152592547f * (fTemp241 - fTemp444)) + ((0.00265511032f * (fTemp233 - fTemp141)) + ((0.00537125766f * (fTemp265 - fTemp232)) + ((0.00390636921f * (fTemp499 - fTemp496)) + ((0.0042115543f * (fTemp237 + fTemp270)) + ((0.00497451704f * (fTemp58 - fTemp243)) + ((0.00943021942f * (fTemp487 + fTemp257)) + ((0.0067751091f * (fTemp256 + fTemp35)) + ((0.0283822138f * (fTemp268 + fTemp510)) + (0.00531022064f * fTemp611))))))))))))))))))))))))))))))))))))))))) + (0.000793481246f * ((fTemp408 + (fTemp400 - fTemp140)) - fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : ((fTemp223 + ((0.00292977691f * fTemp447) + ((0.006469924f * fTemp493) + ((0.00717184972f * fTemp224) + ((0.00381481368f * fTemp460) + ((0.0019531846f * fTemp181) + (fTemp688 + ((0.00585955381f * fTemp200) + ((0.00766014587f * fTemp514) + ((0.00781273842f * fTemp147) + ((0.00680562761f * fTemp211) + ((0.00527970213f * fTemp165) + ((0.00439466536f * fTemp490) + ((0.0042115543f * fTemp421) + ((0.00384533219f * fTemp474) + ((0.00112918485f * fTemp226) + ((0.0019226661f * fTemp435) + ((0.00347911008f * fTemp190) + ((0.00518814661f * fTemp444) + ((0.0051576281f * fTemp473) + ((0.00265511032f * fTemp377) + ((0.00344859157f * fTemp464) + ((0.00350962859f * fTemp227) + ((0.00213629566f * fTemp348) + ((0.00201422162f * fTemp157) + ((0.00122074038f * fTemp398) + ((0.00189214759f * fTemp201) + ((0.00228888821f * fTemp347) + ((0.00262459181f * fTemp197) + ((0.000762962736f * fTemp19) + ((0.000946073793f * fTemp122) + ((0.00186162908f * fTemp438) + ((0.00137333293f * fTemp89) + ((0.00164799951f * fTemp97) + ((0.000671407208f * fTemp410) + ((0.00152592547f * fTemp119) + ((0.00424207281f * fTemp396) + ((0.00634784997f * fTemp125) + ((0.00375377666f * fTemp346) + ((0.00592059083f * fTemp374) + ((0.00708029419f * fTemp118) + ((0.00595110934f * fTemp113) + ((0.00280770287f * fTemp107) + ((0.00238044374f * fTemp406) + ((0.00408948027f * fTemp494) + ((0.00506607257f * fTemp448) + ((0.00411999878f * fTemp449) + ((0.00402844325f * fTemp111) + ((0.003234962f * fTemp203) + ((0.00732444227f * fTemp422) + ((0.0077517014f * fTemp92) + ((0.00692770164f * fTemp440) + ((0.00805688649f * fTemp499) + ((0.0114139225f * fTemp235) + ((0.0128482925f * fTemp236) + ((0.0093691824f * fTemp500) + ((0.00787377544f * fTemp243) + ((0.0101931822f * fTemp412) + ((0.0106814783f * fTemp143) + ((0.0111392559f * fTemp416) + ((0.011322367f * fTemp470) + ((0.00817896053f * fTemp244) + ((0.00247199927f * fTemp516) + ((0.004852443f * fTemp216) + ((0.0120242927f * fTemp174) + ((0.0115665151f * fTemp175) + ((0.00918607134f * fTemp255) + ((0.0139469588f * fTemp256) + ((0.00857570115f * fTemp257) + ((0.00943021942f * fTemp180) + ((0.0298165847f * fTemp362) + ((0.0388805829f * fTemp266) + ((0.0352183618f * fTemp506) + ((0.0221564379f * fTemp267) + ((0.0130314035f * fTemp268) + ((0.00537125766f * fTemp269) + ((0.0390636921f * fTemp186) + ((0.0555436872f * fTemp188) + ((0.0411389507f * fTemp30) + ((0.011383404f * fTemp31) + ((0.00854518265f * fTemp273) + ((0.00390636921f * fTemp274) + ((0.0319528803f * fTemp276) + ((0.0516678356f * fTemp277) + ((0.0631122813f * fTemp278) + ((0.0684224963f * fTemp501) + ((0.0579241328f * fTemp488) + ((0.0215155501f * fTemp471) + ((0.0326853245f * fTemp510) + ((0.0792870894f * fTemp284) + ((0.085665457f * fTemp285) + ((0.052064579f * fTemp286) + ((0.0152287362f * fTemp287) + ((0.0138248848f * fTemp34) + ((0.0361949541f * fTemp441) + ((0.04031495f * fTemp485) + ((0.0458082817f * fTemp479) + ((0.076967679f * fTemp35) + ((0.107303083f * fTemp36) + ((0.0716574639f * fTemp37) + ((0.0057985168f * fTemp38) + ((0.014435255f * fTemp45) + ((0.128482923f * fTemp46) + ((0.188299209f * fTemp47) + ((0.167058319f * fTemp48) + ((0.0522476882f * fTemp49) + ((0.0334482864f * fTemp50) + ((0.118259221f * fTemp51) + ((0.173223063f * fTemp52) + ((0.153599665f * fTemp53) + ((0.00668355357f * fTemp159) + ((0.00683614612f * fTemp305) + ((0.143040255f * fTemp306) + ((0.0321359895f * fTemp307) + ((0.638752401f * fTemp144) + ((0.767448962f * fTemp508) + ((0.319193095f * fTemp308) + ((0.0608233884f * fTemp309) + ((0.00619525742f * fTemp324) + ((0.00219733268f * (((fTemp138 + (fTemp370 - fTemp233)) - fTemp341) - fTemp513)) + ((0.000305185094f * ((fTemp102 + (fTemp152 + (fTemp443 + (fTemp172 + (fTemp177 + (fTemp230 + fTemp123)))))) - fTemp333)) + ((0.0022583697f * (fTemp334 + (fTemp452 + (fTemp160 + fTemp526)))) + ((0.00430310983f * (fTemp231 + (fTemp378 + fTemp349))) + ((0.00521866512f * (fTemp98 - fTemp337)) + ((0.00460829493f * (fTemp101 + fTemp413)) + ((0.000366222113f * (fTemp336 + (fTemp12 + (fTemp128 + ((fTemp7 + fTemp78) - fTemp415))))) + ((0.00283822138f * (fTemp371 + (fTemp104 + fTemp171))) + ((0.00183111057f * (fTemp124 + (fTemp339 + fTemp135))) + ((0.000793481246f * (fTemp353 + (fTemp132 + (fTemp187 + fTemp234)))) + ((0.00253303628f * (fTemp375 + fTemp456)) + ((0.00106814783f * ((fTemp24 + (fTemp368 + fTemp251)) - fTemp366)) + ((0.00210577715f * (fTemp399 + (fTemp442 + (fTemp466 + fTemp240)))) + ((0.000122074038f * (fTemp409 + (fTemp136 + (fTemp109 + (fTemp26 + ((fTemp424 + (fTemp432 + (fTemp6 + ((fTemp67 + ((fTemp70 + (((fTemp327 + fTemp1) - fTemp84) - fTemp2)) - fTemp69)) - fTemp64)))) - fTemp521)))))) + ((0.000457777642f * (fTemp408 + (fTemp148 + ((fTemp163 + (fTemp18 + (fTemp459 + (fTemp478 + (fTemp8 + ((fTemp76 - fTemp75) - fTemp275)))))) - fTemp344)))) + ((0.000213629566f * (((fTemp156 + (fTemp446 + (fTemp342 + (fTemp208 + (fTemp212 + fTemp221))))) - fTemp150) - fTemp139)) + ((0.00103762932f * (fTemp340 + (fTemp427 + (fTemp364 + (fTemp164 + (fTemp13 + fTemp689)))))) + ((0.00155644398f * (fTemp142 + fTemp359)) + ((0.00140385143f * (fTemp108 + (fTemp11 + fTemp225))) + ((0.001617481f * (fTemp338 + (fTemp407 + (fTemp482 + fTemp158)))) + ((0.00167851802f * (fTemp355 + fTemp170)) + ((0.00100711081f * (fTemp376 + (fTemp420 + (fTemp382 + (fTemp388 + fTemp380))))) + ((0.000335703604f * ((fTemp193 + fTemp690) - fTemp120)) + ((0.00109866634f * (fTemp155 + fTemp137)) + ((0.00119022187f * (fTemp140 + (fTemp183 + fTemp209))) + ((0.000976592302f * (fTemp161 + (fTemp192 + fTemp198))) + ((0.00057985168f * (fTemp426 + ((fTemp229 + (fTemp433 + (fTemp489 + (fTemp74 - fTemp173)))) - fTemp189))) + ((0.00131229591f * (fTemp428 + (fTemp202 + fTemp691))) + ((0.000732444227f * (fTemp425 + (fTemp133 + fTemp141))) + ((9.15555283e-05f * (((fTemp451 + (((fTemp184 + (fTemp59 + (fTemp199 + ((fTemp315 + fTemp692) - fTemp314)))) - fTemp16) - fTemp458)) - fTemp351) - fTemp373)) + ((0.0012817774f * ((fTemp462 + fTemp343) - fTemp27)) + ((0.000823999755f * ((fTemp453 + (fTemp467 + fTemp693)) - fTemp431)) + ((0.00173955504f * (fTemp166 + (fTemp154 + fTemp386))) + ((0.000488296151f * (((fTemp196 + (fTemp168 + (fTemp480 + fTemp71))) - fTemp22) - fTemp167)) + ((0.00149540696f * (fTemp151 + (fTemp14 + fTemp93))) + ((0.00180059206f * (fTemp179 + (fTemp356 + (fTemp335 + (fTemp246 - fTemp232))))) + ((0.000427259132f * (fTemp185 + fTemp357)) + ((0.000152592547f * (fTemp350 + (fTemp397 + ((fTemp318 + ((fTemp83 - fTemp81) - fTemp79)) - fTemp445)))) + ((0.00134281442f * (fTemp228 + fTemp437)) + ((0.00170903653f * (fTemp414 + fTemp126)) + ((0.000518814661f * (fTemp472 + fTemp476)) + ((0.00271614734f * (fTemp411 + fTemp369)) + ((0.00204474013f * (fTemp418 + fTemp217)) + ((0.00317392498f * (fTemp486 + (fTemp91 + fTemp252))) + ((0.00308236945f * (fTemp367 + (fTemp381 + fTemp502))) + ((0.00158696249f * (fTemp206 + fTemp110)) + ((0.000701925717f * (fTemp10 + fTemp326)) + ((0.00216681417f * (fTemp439 + fTemp241)) + ((0.00231940672f * (fTemp450 + fTemp504)) + ((0.00241096225f * (fTemp358 + fTemp475)) + ((0.00466933195f * (fTemp379 + fTemp419)) + ((0.00454725791f * fTemp694) + ((0.00207525864f * (fTemp392 + fTemp395)) + ((0.0083925901f * (fTemp194 + fTemp94)) + ((0.000244148076f * (fTemp515 + ((fTemp66 + (fTemp4 + fTemp82)) - fTemp310))) + ((0.00399792474f * (fTemp242 + fTemp509)) + ((0.000885036774f * (fTemp264 - fTemp218)) + ((6.10370189e-05f * (((fTemp316 + (fTemp220 + ((fTemp321 + ((fTemp332 - fTemp87) - fTemp85)) - fTemp320))) - fTemp61) - fTemp312)) + (0.00115970336f * fTemp117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.000854518265f * fTemp162) + ((0.00177007355f * fTemp131) + ((0.00976592302f * fTemp112) + ((0.00906399731f * fTemp390) + ((0.00598162785f * fTemp389) + ((0.00256355479f * fTemp361) + ((0.0045167394f * fTemp365) + ((0.00650044251f * fTemp360) + ((0.00729392376f * fTemp352) + ((0.00704977568f * fTemp114) + ((0.00622577593f * fTemp345) + ((0.00393688772f * fTemp106) + (((0.00335703604f * fTemp496) + ((0.00329599902f * fTemp461) + (fTemp648 + ((0.00378429517f * fTemp423) + ((0.00762962736f * fTemp465) + ((0.00939970091f * fTemp457) + ((0.00604266487f * fTemp491) + ((0.0132450331f * fTemp248) + ((0.0169377737f * fTemp249) + ((0.00921658985f * fTemp250) + ((0.0166020691f * fTemp404) + ((0.0163579211f * fTemp253) + ((0.00463881344f * fTemp254) + ((0.0028992584f * fTemp258) + ((0.0175481439f * fTemp259) + ((0.0281991027f * fTemp260) + ((0.0272835474f * fTemp261) + ((0.0139164403f * fTemp262) + ((0.00991851557f * fTemp265) + ((0.0163884405f * fTemp497) + ((0.0104678487f * fTemp429) + ((0.00665303506f * fTemp28) + ((0.0140079958f * fTemp29) + ((0.025696585f * fTemp385) + ((0.0359202847f * fTemp270) + ((0.0285653248f * fTemp271) + ((0.0136722922f * fTemp95) + ((0.021210365f * fTemp503) + ((0.00842310861f * fTemp272) + ((0.0292977691f * fTemp169) + ((0.0616168715f * fTemp32) + ((0.0665913895f * fTemp33) + ((0.0406811722f * fTemp492) + (fTemp695 + ((0.0618610196f * fTemp280) + ((0.0794702023f * fTemp281) + ((0.0789513811f * fTemp215) + ((0.0782799795f * fTemp468) + ((0.0791039765f * fTemp282) + ((0.0664693117f * fTemp283) + ((0.0261543635f * fTemp477) + ((0.0183416251f * fTemp288) + ((0.0538041331f * fTemp289) + ((0.0772728696f * fTemp290) + ((0.0781579018f * fTemp505) + ((0.0827661976f * fTemp511) + ((0.096499525f * fTemp291) + ((0.111636706f * fTemp292) + ((0.102694787f * fTemp293) + ((0.0688497573f * fTemp294) + ((0.0257881414f * fTemp484) + ((0.0232856236f * fTemp39) + ((0.0335093252f * fTemp40) + ((0.0415356904f * fTemp41) + ((0.0741599798f * fTemp42) + ((0.119266339f * fTemp214) + ((0.154545739f * fTemp43) + ((0.105410933f * fTemp44) + ((0.0905484185f * fTemp295) + ((0.169133574f * fTemp213) + ((0.157719657f * fTemp296) + ((0.0888393819f * fTemp430) + ((0.0422681347f * fTemp297) + ((0.0438550971f * fTemp298) + ((0.101718195f * fTemp299) + ((0.145268112f * fTemp300) + ((0.146824554f * fTemp301) + ((0.0860622004f * fTemp302) + ((0.124515519f * fTemp303) + ((0.150486767f * fTemp304) + ((0.360423595f * fTemp54) + ((0.804223776f * fTemp55) + ((0.746879458f * fTemp56) + ((0.137485892f * fTemp57) + ((0.008087405f * fTemp323) + (((0.00738547929f * (fTemp354 - fTemp394)) + ((0.00268562883f * (fTemp372 - fTemp483)) + ((0.00625629444f * (fTemp401 - fTemp529)) + ((0.00054933317f * ((fTemp23 - fTemp454) - fTemp127)) + ((0.000640888698f * (fTemp403 + (fTemp134 + (((fTemp72 - fTemp182) - fTemp145) - fTemp417)))) + ((0.00143436994f * (fTemp130 - fTemp434)) + ((0.00146488845f * (fTemp405 + ((((fTemp400 + fTemp238) - fTemp178) - fTemp384) - fTemp99))) + ((0.000396740623f * (fTemp100 + (((fTemp387 + ((fTemp520 + (fTemp77 - fTemp60)) - fTemp498)) - fTemp15) - fTemp463))) + ((0.000610370189f * ((fTemp17 + ((fTemp73 - fTemp239) - fTemp195)) - fTemp20)) + ((0.00234992523f * ((fTemp436 - fTemp103) - fTemp153)) + ((0.00198370311f * (fTemp487 - fTemp363)) + ((3.05185094e-05f * ((fTemp62 + ((fTemp65 + (fTemp319 + (fTemp322 + (fTemp0 + fTemp68)))) - fTemp63)) - fTemp129)) + ((0.000183111057f * (((fTemp313 + fTemp3) - fTemp222) - fTemp311)) + (0.00125125889f * (fTemp237 - fTemp495))))))))))))))) + (0.000274666585f * (fTemp383 + (fTemp393 + (fTemp455 + (((((fTemp263 + fTemp507) - fTemp469) - fTemp90) - fTemp191) - fTemp149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00326548051f * fTemp88)))))))))))))))) : (iSlow23 ? (((0.00054933317f * fTemp220) + ((0.0012817774f * fTemp211) + ((0.00494399853f * fTemp165) + ((0.00488296151f * fTemp444) + ((0.00674459059f * fTemp473) + ((0.0057985168f * fTemp91) + ((0.00402844325f * fTemp358) + ((0.000732444227f * fTemp129) + ((0.00439466536f * fTemp450) + ((0.00503555406f * fTemp209) + ((0.00500503555f * fTemp193) + ((0.0042115543f * fTemp184) + ((0.00299081393f * fTemp356) + ((0.00317392498f * fTemp343) + ((0.00363170262f * fTemp388) + (fTemp677 + ((0.00140385143f * fTemp452) + ((0.00152592547f * fTemp418) + ((0.0045167394f * fTemp197) + ((0.00424207281f * fTemp407) + ((0.00329599902f * fTemp476) + ((0.00250251777f * fTemp472) + ((0.00369273964f * fTemp414) + ((0.00326548051f * fTemp14) + ((0.00320444349f * fTemp166) + ((0.00115970336f * fTemp431) + ((0.00314340647f * fTemp115) + ((0.00308236945f * fTemp120) + ((0.00149540696f * fTemp145) + ((0.00131229591f * fTemp340) + ((0.00274666585f * fTemp403) + ((0.00292977691f * fTemp399) + ((0.00268562883f * fTemp529) + ((0.00357066561f * fTemp113) + ((0.0077517014f * fTemp366) + ((0.0083925901f * fTemp365) + ((0.00680562761f * fTemp360) + ((0.00540177617f * fTemp231) + ((0.00784325693f * fTemp333) + ((0.00552385021f * fTemp461) + ((0.00460829493f * fTemp400) + ((0.00442518387f * fTemp406) + ((0.00787377544f * fTemp494) + ((0.00955229346f * fTemp448) + ((0.00576799829f * fTemp419) + ((0.00631733146f * fTemp422) + ((0.00683614612f * fTemp94) + ((0.00695822015f * fTemp92) + ((0.0074159978f * fTemp242) + ((0.00982696004f * fTemp423) + (fTemp595 + ((0.0054933317f * fTemp252) + ((0.0256050304f * fTemp401) + ((0.0337839909f * fTemp404) + ((0.0297555476f * fTemp253) + ((0.0162053294f * fTemp254) + ((0.0071108127f * fTemp255) + ((0.0334482864f * fTemp264) + ((0.0500198379f * fTemp265) + ((0.0357066579f * fTemp497) + ((0.00598162785f * fTemp429) + ((0.0279854741f * fTemp385) + ((0.0469374694f * fTemp270) + ((0.0576494634f * fTemp271) + ((0.0623798333f * fTemp370) + ((0.0520035401f * fTemp186) + ((0.0159611814f * fTemp188) + ((0.0306711029f * fTemp32) + ((0.0762657523f * fTemp33) + ((0.0822168663f * fTemp492) + ((0.0485244319f * fTemp275) + ((0.0117801446f * fTemp276) + ((0.0163579211f * fTemp282) + ((0.0380565822f * fTemp283) + ((0.0416882858f * fTemp477) + ((0.0472426526f * fTemp510) + ((0.0781273842f * fTemp284) + ((0.107333601f * fTemp285) + ((0.0175786614f * fTemp293) + ((0.132267222f * fTemp294) + ((0.191473126f * fTemp484) + ((0.16980499f * fTemp34) + ((0.0545670949f * fTemp441) + ((0.0435193963f * fTemp214) + ((0.126926482f * fTemp43) + ((0.180547506f * fTemp44) + ((0.161839649f * fTemp45) + ((0.0168156996f * fTemp46) + ((0.0155339213f * fTemp49) + ((0.151432842f * fTemp295) + ((0.0420545079f * fTemp213) + ((0.647846937f * fTemp299) + (fTemp300 + ((0.764305532f * fTemp301) + ((0.317178875f * fTemp302) + ((0.0600604266f * fTemp50) + ((0.000305185094f * fTemp53) + (fTemp683 + (((((0.00338755455f * (fTemp98 + (fTemp478 + (fTemp339 + (fTemp171 + fTemp506))))) + ((0.00198370311f * (fTemp101 + (fTemp131 + (fTemp172 - fTemp456)))) + ((0.000854518265f * (fTemp107 + (fTemp11 - fTemp147))) + ((0.00277718436f * (fTemp352 + fTemp217)) + ((0.00573747978f * (fTemp371 + fTemp421)) + ((0.00189214759f * (fTemp118 + (fTemp22 - fTemp204))) + ((0.000610370189f * (fTemp374 + (fTemp349 + fTemp502))) + ((0.000183111057f * ((fTemp152 + (fTemp303 + (fTemp57 + (fTemp7 + (fTemp323 - fTemp70))))) - fTemp346)) + ((9.15555283e-05f * (((((fTemp54 + (fTemp56 + (((fTemp684 - fTemp218) - fTemp324) - fTemp199))) - fTemp159) - fTemp52) - fTemp395) - fTemp353)) + ((0.001617481f * (fTemp389 + (fTemp26 + fTemp177))) + ((0.00100711081f * (fTemp112 + (fTemp136 + (fTemp162 + (fTemp359 + (fTemp447 + fTemp4)))))) + ((0.000915555283f * (fTemp354 + (fTemp139 + (fTemp393 + (fTemp164 + (fTemp178 + (fTemp462 + fTemp190))))))) + ((0.00210577715f * (fTemp375 + (fTemp18 + (fTemp398 + fTemp368)))) + ((0.00280770287f * (fTemp125 + (fTemp201 + fTemp227))) + ((0.00283822138f * (fTemp396 + fTemp149)) + ((0.00296029542f * (fTemp127 + fTemp427)) + ((0.00234992523f * (fTemp130 + (fTemp338 + (fTemp157 + (fTemp464 + fTemp207))))) + ((0.00183111057f * (fTemp405 + (fTemp437 + (fTemp483 + fTemp65)))) + ((0.00180059206f * (fTemp134 + (fTemp163 + (fTemp167 - fTemp474)))) + ((0.00164799951f * (fTemp409 + (fTemp89 + (fTemp367 + fTemp116)))) + ((0.00109866634f * (fTemp102 + fTemp373)) + ((0.00155644398f * (fTemp119 + fTemp126)) + ((0.00204474013f * (fTemp142 + fTemp173)) + ((0.00244148076f * (fTemp99 + (fTemp15 + fTemp454))) + ((0.00238044374f * (fTemp376 + (fTemp93 + (fTemp198 + fTemp413)))) + ((0.00219733268f * (fTemp410 + (fTemp100 + fTemp348))) + ((0.00186162908f * (fTemp148 + fTemp443)) + ((0.00265511032f * (fTemp109 + (fTemp382 + (fTemp459 + (fTemp133 + fTemp137))))) + ((0.00286873989f * (fTemp344 + (fTemp434 + (fTemp13 + fTemp210)))) + ((0.00146488845f * (fTemp150 + fTemp179)) + ((0.000701925717f * (fTemp121 + fTemp318)) + ((0.000488296151f * (fTemp132 + fTemp435)) + ((0.00134281442f * (fTemp420 + (fTemp426 + (fTemp425 + (fTemp182 + (fTemp103 + fTemp8)))))) + ((0.00222785119f * (fTemp155 + fTemp123)) + ((0.00302133244f * (fTemp140 + (fTemp438 + fTemp424))) + ((0.00247199927f * (fTemp161 + (fTemp442 + fTemp379))) + ((0.00143436994f * (fTemp156 - fTemp391)) + ((0.00177007355f * (fTemp97 + (fTemp451 + (fTemp122 + (fTemp151 + (fTemp185 + fTemp489)))))) + ((0.000885036774f * (fTemp27 + fTemp380)) + ((0.0022583697f * (fTemp24 + fTemp446)) + ((0.00253303628f * (fTemp170 + fTemp439)) + ((0.00207525864f * (fTemp364 + (fTemp146 + (fTemp521 + fTemp160)))) + ((0.00170903653f * (fTemp458 + (fTemp187 + (fTemp19 + (fTemp128 - fTemp225))))) + ((0.003234962f * (fTemp191 + (fTemp12 + fTemp208))) + ((0.00213629566f * (fTemp463 + (fTemp90 + fTemp363))) + ((0.00201422162f * (fTemp342 + (fTemp350 + (fTemp189 + (fTemp17 + (fTemp469 + (fTemp183 + (fTemp482 + fTemp232)))))))) + ((0.00378429517f * (fTemp432 + fTemp440)) + ((0.00408948027f * (fTemp229 + fTemp685)) + ((0.00262459181f * (fTemp433 + fTemp486)) + ((0.00335703604f * (fTemp196 + fTemp158)) + ((0.00341807306f * (fTemp168 + (fTemp347 - fTemp181))) + ((0.00411999878f * (fTemp411 + (fTemp104 + fTemp51))) + ((0.000366222113f * (fTemp10 + ((fTemp307 + (fTemp55 + fTemp219)) - fTemp96))) + ((0.00430310983f * (fTemp381 + fTemp386)) + ((0.00344859157f * (fTemp138 + fTemp234)) + ((0.00350962859f * (fTemp466 + fTemp498)) + ((0.00689718314f * (fTemp378 + fTemp490)) + ((0.000793481246f * (fTemp105 - fTemp200)) + ((0.000335703604f * (fTemp415 + (fTemp686 - fTemp267))) + ((3.05185094e-05f * (((fTemp509 + ((fTemp221 + (((((fTemp80 + (fTemp327 + (fTemp85 + fTemp687))) - fTemp79) - fTemp73) - fTemp61) - fTemp314)) - fTemp59)) - fTemp508) - fTemp460)) + ((0.000152592547f * ((fTemp313 + (fTemp62 + ((fTemp325 - fTemp135) - fTemp71))) - fTemp233)) + ((0.00610370189f * (fTemp287 + fTemp67)) + ((0.000244148076f * (fTemp72 - fTemp304)) + ((0.000122074038f * ((fTemp308 + ((fTemp326 + fTemp74) - fTemp310)) - fTemp144)) + ((0.000457777642f * (fTemp321 - fTemp320)) + (6.10370189e-05f * (fTemp223 + ((fTemp58 + (fTemp60 + (fTemp625 - fTemp6))) - fTemp309)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00723288674f * (fTemp334 + fTemp243))) + (0.00622577593f * (fTemp513 + fTemp449))) + (0.00311288796f * (fTemp88 + fTemp387))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.000640888698f * fTemp5) + ((0.00106814783f * fTemp224) + ((0.0035401471f * fTemp154) + ((0.00524918362f * fTemp392) + ((0.00512710959f * fTemp335) + ((0.00122074038f * fTemp514) + ((0.000427259132f * fTemp124) + ((0.00656147953f * fTemp345) + ((0.00836207159f * fTemp337) + ((0.00729392376f * fTemp106) + (((0.00173955504f * fTemp397) + ((0.00506607257f * fTemp369) + ((0.00759910885f * fTemp235) + ((0.00643940549f * fTemp236) + ((0.00811792351f * fTemp238) + ((0.0124210333f * fTemp239) + ((0.014557329f * fTemp240) + ((0.0110782189f * fTemp504) + ((0.0025940733f * fTemp241) + ((0.0176702179f * fTemp143) + ((0.0214850307f * fTemp416) + ((0.0135502182f * fTemp470) + ((0.0101321451f * fTemp247) + ((0.0209051799f * fTemp487) + ((0.021149328f * fTemp516) + ((0.009704886f * fTemp216) + ((0.00720236823f * fTemp457) + ((0.0222479943f * fTemp491) + ((0.0330210291f * fTemp526) + ((0.0315256193f * fTemp174) + ((0.0176091809f * fTemp175) + ((0.00271614734f * fTemp248) + ((0.0140690329f * fTemp249) + ((0.0205389578f * fTemp250) + ((0.014496292f * fTemp251) + ((0.00570696127f * fTemp257) + ((0.0116885891f * fTemp258) + ((0.019287698f * fTemp259) + ((0.0303048808f * fTemp260) + ((0.0399487279f * fTemp261) + ((0.0324411765f * fTemp262) + ((0.0195013285f * fTemp180) + ((0.0142826624f * fTemp266) + ((0.0332651772f * fTemp268) + ((0.0661336109f * fTemp269) + ((0.0712607205f * fTemp520) + ((0.0449537635f * fTemp28) + ((0.0287179183f * fTemp30) + ((0.0665303543f * fTemp31) + ((0.0836207196f * fTemp95) + ((0.0820947886f * fTemp503) + ((0.0801416039f * fTemp272) + ((0.0798669383f * fTemp273) + ((0.0670186505f * fTemp274) + ((0.0207831059f * fTemp277) + ((0.0550859086f * fTemp278) + ((0.0773644224f * fTemp501) + ((0.0777306408f * fTemp488) + ((0.0818811581f * fTemp471) + ((0.0949430838f * fTemp279) + ((0.109500416f * fTemp280) + ((0.100131229f * fTemp281) + ((0.0664387941f * fTemp215) + ((0.0230719931f * fTemp468) + ((0.0221564379f * fTemp288) + ((0.032227546f * fTemp289) + ((0.0401623584f * fTemp290) + ((0.113956116f * fTemp511) + ((0.148747221f * fTemp291) + ((0.100924708f * fTemp292) + ((0.0874660462f * fTemp485) + ((0.164036989f * fTemp479) + ((0.149662778f * fTemp35) + ((0.0796838254f * fTemp36) + ((0.0344553962f * fTemp37) + ((0.0371105075f * fTemp38) + ((0.0935087129f * fTemp39) + ((0.135593742f * fTemp40) + ((0.135410622f * fTemp41) + ((0.0746787935f * fTemp42) + ((0.113620408f * fTemp47) + ((0.140354618f * fTemp48) + ((0.347025961f * fTemp296) + ((0.785241246f * fTemp430) + ((0.725211322f * fTemp297) + ((0.119083226f * fTemp298) + ((0.00793481246f * fTemp66) + ((0.000823999755f * fTemp316) + ((0.000396740623f * fTemp322) + (((((0.00125125889f * (fTemp515 - fTemp361)) + ((0.00137333293f * (((fTemp203 - fTemp408) - fTemp372) - fTemp390)) + ((0.0028992584f * (((fTemp244 - fTemp480) - fTemp195) - fTemp394)) + ((0.00231940672f * (((fTemp263 - fTemp202) - fTemp355) - fTemp108)) + ((0.00241096225f * ((fTemp237 - fTemp110) - fTemp384)) + ((0.00167851802f * (((fTemp141 - fTemp493) - fTemp455) - fTemp417)) + ((0.00158696249f * (fTemp436 - fTemp428)) + ((0.0019531846f * ((((fTemp500 - fTemp205) - fTemp16) - fTemp20) - fTemp23)) + ((0.00305185094f * (fTemp111 - fTemp230)) + ((0.00375377666f * (fTemp445 - fTemp192)) + ((0.00454725791f * ((fTemp412 + fTemp29) - fTemp153)) + ((0.00256355479f * ((fTemp499 - fTemp467) - fTemp453)) + ((0.000274666585f * ((fTemp256 + (fTemp68 - fTemp212)) - fTemp194)) + ((0.00457777642f * (fTemp357 + fTemp176)) + (((0.0273445845f * (fTemp362 + fTemp169)) + ((0.000213629566f * ((fTemp63 - fTemp222) - fTemp305)) + (0.0713522732f * (fTemp505 - fTemp286)))) + (0.00463881344f * (fTemp495 - fTemp496))))))))))))))))) + (0.00057985168f * ((fTemp226 + (fTemp246 + fTemp319)) - fTemp383))) + (0.00228888821f * (fTemp114 - fTemp351))) + (0.00427259132f * (fTemp341 - fTemp475)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00119022187f * fTemp336))))))))))))) : (((0.000335703604f * fTemp4) + ((0.000610370189f * fTemp221) + ((0.0509353913f * fTemp223) + ((0.00100711081f * fTemp343) + ((0.00057985168f * fTemp453) + ((0.000793481246f * fTemp388) + ((0.00183111057f * fTemp489) + ((0.00320444349f * fTemp168) + ((0.00540177617f * fTemp12) + ((0.00674459059f * fTemp478) + ((0.00656147953f * fTemp196) + ((0.00457777642f * fTemp476) + ((0.00958281197f * fTemp228) + ((0.0142216254f * fTemp229) + ((0.0148014771f * fTemp432) + ((0.0111697745f * fTemp424) + ((0.00204474013f * fTemp459) + ((0.0140690329f * fTemp191) + ((0.0151676992f * fTemp149) + ((0.0137638478f * fTemp18) + ((0.0101626636f * fTemp187) + ((0.00854518265f * fTemp20) + ((0.00326548051f * fTemp164) + ((0.00430310983f * fTemp179) + ((0.00476088747f * fTemp151) + ((0.0019226661f * fTemp458) + ((0.00213629566f * fTemp22) + ((0.00277718436f * fTemp23) + ((0.00274666585f * fTemp167) + ((0.00329599902f * fTemp172) + ((0.00592059083f * fTemp351) + ((0.00973540451f * fTemp443) + ((0.0116885891f * fTemp364) + ((0.012878811f * fTemp170) + ((0.0123905148f * fTemp438) + ((0.0103457747f * fTemp166) + ((0.00585955381f * fTemp24) + ((0.00503555406f * fTemp26) + ((0.00537125766f * fTemp431) + ((0.00668355357f * fTemp27) + ((0.0119632557f * fTemp373) + ((0.019348735f * fTemp97) + ((0.0170293283f * fTemp426) + ((0.0152592547f * fTemp156) + ((0.0100711081f * fTemp427) + ((0.0109256264f * fTemp420) + ((0.0173345134f * fTemp152) + ((0.0203253273f * fTemp121) + ((0.0215460677f * fTemp150) + ((0.0205389578f * fTemp100) + ((0.0176702179f * fTemp344) + ((0.00772118289f * fTemp417) + ((0.00943021942f * fTemp376) + ((0.0107119968f * fTemp355) + ((0.0134891812f * fTemp338) + ((0.0165105145f * fTemp99) + ((0.0177617725f * fTemp108) + ((0.0173039958f * fTemp142) + ((0.0157780703f * fTemp119) + ((0.014618366f * fTemp340) + ((0.0132755516f * fTemp102) + ((0.0101931822f * fTemp139) + ((0.00930814538f * fTemp136) + ((0.0106814783f * fTemp409) + ((0.0152287362f * fTemp405) + ((0.0174260698f * fTemp131) + ((0.0187383648f * fTemp403) + ((0.0183111057f * fTemp127) + ((0.0179448836f * fTemp399) + ((0.017853329f * fTemp396) + ((0.0178228095f * fTemp125) + ((0.0177922919f * fTemp394) + ((0.017975403f * fTemp529) + ((0.0188909583f * fTemp372) + ((0.0195623655f * fTemp354) + ((0.0201116987f * fTemp112) + ((0.0201422162f * fTemp390) + ((0.0192571804f * fTemp389) + ((0.0176396985f * fTemp361) + ((0.0147404401f * fTemp353) + ((0.0127872555f * fTemp346) + ((0.0135196997f * fTemp360) + ((0.0134586627f * fTemp345) + ((0.0126651814f * fTemp337) + ((0.0115970336f * fTemp341) + ((0.0114139225f * fTemp336) + ((0.0112308115f * fTemp107) + ((0.011200293f * fTemp101) + ((0.0116275521f * fTemp231) + ((0.0122379223f * fTemp513) + (((0.00296029542f * fTemp370) + ((0.0166020691f * fTemp188) + ((0.0169072542f * fTemp30) + ((0.0171514023f * fTemp215) + ((0.0271919928f * fTemp468) + ((0.0382091738f * fTemp282) + ((0.0249336231f * fTemp283) + ((0.00897244178f * fTemp477) + ((0.0238349568f * fTemp511) + ((0.0428785048f * fTemp291) + ((0.0279549547f * fTemp292) + ((0.0432752483f * fTemp38) + ((0.0657673851f * fTemp39) + ((0.0787682757f * fTemp40) + ((0.0573747978f * fTemp41) + ((0.0825220495f * fTemp42) + ((0.0614642799f * fTemp214) + ((0.0561540574f * fTemp43) + ((0.0423902087f * fTemp44) + ((0.0222479943f * fTemp45) + ((0.0987579003f * fTemp213) + ((0.142155215f * fTemp296) + ((0.142551959f * fTemp430) + ((0.0275276955f * fTemp297) + ((0.128147215f * fTemp159) + ((0.0869472325f * fTemp303) + ((0.114902191f * fTemp304) + ((0.566667676f * fTemp508) + (fTemp308 + ((0.95461899f * fTemp309) + ((0.481673628f * fTemp509) + ((0.115970336f * fTemp310) + ((0.000915555283f * fTemp314) + ((0.000976592302f * fTemp315) + ((0.000640888698f * fTemp61) + ((0.000427259132f * fTemp66) + (((0.0117801446f * (fTemp334 + (fTemp140 + (fTemp186 - fTemp385)))) + ((0.0117496261f * (fTemp366 + (fTemp374 + (fTemp275 - fTemp17)))) + ((0.0111392559f * (fTemp371 + (fTemp118 - fTemp447))) + ((0.0109561449f * (fTemp113 + fTemp115)) + ((0.0138248848f * (fTemp124 + (fTemp163 - fTemp211))) + ((0.0183721427f * fTemp673) + ((0.0186468102f * (fTemp130 + fTemp428)) + ((0.012817774f * (fTemp134 + fTemp161)) + ((0.00952177495f * (fTemp408 - fTemp474)) + ((0.00946073793f * (fTemp384 + (fTemp109 + (fTemp155 + (fTemp382 + fTemp230))))) + ((0.00921658985f * (fTemp410 - fTemp435)) + ((0.00631733146f * (fTemp145 - fTemp358)) + ((0.00888088625f * (fTemp162 - fTemp342)) + ((0.00238044374f * (fTemp451 + ((fTemp480 - fTemp450) - fTemp207))) + ((0.0028992584f * fTemp674) + ((0.00439466536f * (fTemp122 - fTemp183)) + ((0.00338755455f * (fTemp359 - fTemp482)) + ((0.00436414685f * (fTemp182 - fTemp91)) + ((0.00650044251f * (fTemp185 - fTemp138)) + ((0.00375377666f * (fTemp15 - fTemp348)) + ((0.0019531846f * (fTemp414 - fTemp126)) + ((0.000305185094f * ((fTemp462 + fTemp64) - fTemp195)) + ((0.000274666585f * (fTemp192 + (fTemp62 + (fTemp63 + (fTemp5 + (fTemp316 + (fTemp318 + fTemp68))))))) + ((3.05185094e-05f * (fTemp570 - fTemp367)) + ((0.000396740623f * (fTemp67 - fTemp217)) + ((0.0122074038f * (fTemp311 - fTemp448)) + ((0.000244148076f * (fTemp31 + (fTemp320 + (fTemp321 + (fTemp322 + (fTemp219 + (fTemp69 + (fTemp70 + (fTemp3 + fTemp71))))))))) + ((0.000183111057f * (fTemp135 + fTemp402)) + ((0.000152592547f * (fTemp323 + (fTemp324 + (fTemp74 + (fTemp76 + (fTemp77 + (fTemp507 + fTemp78))))))) + ((6.10370189e-05f * (fTemp218 + fTemp675)) + ((9.15555283e-05f * (fTemp326 + (fTemp73 + (fTemp81 + (fTemp82 + (fTemp2 + fTemp84)))))) + ((0.000122074038f * (fTemp199 + (fTemp325 + (fTemp75 + (fTemp79 + (fTemp80 + (fTemp83 + (fTemp327 + fTemp676)))))))) + ((0.000213629566f * (fTemp319 + (fTemp220 + fTemp72))) + (0.000366222113f * (fTemp6 + fTemp65))))))))))))))))))))))))))))))))))) + (0.0119937742f * (fTemp333 + fTemp106))))))))))))))))))))))))))))))))))))))) + (0.0126956999f * fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0203558467f * fTemp7) + ((0.00985747855f * fTemp204) + ((0.011444441f * fTemp493) + ((0.0104068117f * fTemp194) + ((0.0093691824f * fTemp224) + ((0.0074159978f * fTemp173) + ((0.00698873866f * fTemp415) + ((0.00625629444f * fTemp154) + ((0.00836207159f * fTemp181) + ((0.0149845881f * fTemp147) + ((0.0090334788f * fTemp490) + ((0.00759910885f * fTemp421) + ((0.00814844202f * fTemp96) + ((0.0106509598f * fTemp456) + ((0.01126133f * fTemp225) + ((0.0106204413f * fTemp226) + ((0.00628681295f * fTemp349) + ((0.00527970213f * fTemp105) + ((0.0042115543f * fTemp473) + ((0.00494399853f * fTemp475) + ((0.00576799829f * fTemp466) + ((0.00512710959f * fTemp377) + ((0.0035401471f * fTemp171) + ((0.00216681417f * fTemp160) + ((0.00167851802f * fTemp380) + ((0.001617481f * fTemp129) + ((0.00198370311f * fTemp158) + ((0.00234992523f * fTemp104) + ((0.00219733268f * fTemp193) + ((0.000732444227f * fTemp439) + ((0.00164799951f * fTemp10) + (fTemp677 + (fTemp678 + ((0.00103762932f * fTemp198) + ((0.00143436994f * fTemp210) + ((0.00180059206f * fTemp137) + ((0.000885036774f * fTemp464) + ((0.00262459181f * fTemp486) + ((0.00280770287f * fTemp483) + ((0.00271614734f * fTemp452) + ((0.00308236945f * fTemp418) + ((0.00357066561f * fTemp157) + ((0.00369273964f * fTemp437) + ((0.00546281319f * fTemp398) + ((0.00653096102f * fTemp202) + ((0.00799584948f * fTemp411) + ((0.00756859034f * fTemp197) + ((0.00311288796f * fTemp407) + ((0.008087405f * fTemp133) + ((0.0172429588f * fTemp454) + ((0.0234382153f * fTemp472) + ((0.0235908087f * fTemp433) + ((0.0173650328f * fTemp13) + ((0.0108645894f * fTemp189) + ((0.0104983672f * fTemp521) + ((0.0112918485f * fTemp90) + ((0.0122684408f * fTemp123) + ((0.0077517014f * fTemp176) + ((0.00906399731f * fTemp232) + ((0.00964384899f * fTemp496) + ((0.00924710836f * fTemp461) + ((0.00881984923f * fTemp400) + ((0.0101016266f * fTemp494) + ((0.0138859218f * fTemp395) + ((0.0127262184f * fTemp495) + ((0.0139774773f * fTemp234) + ((0.0147709586f * fTemp419) + ((0.0153813288f * fTemp422) + ((0.0153202917f * fTemp94) + ((0.0141300699f * fTemp92) + ((0.0133365886f * fTemp440) + ((0.0139164403f * fTemp499) + ((0.0143742179f * fTemp235) + ((0.0139469588f * fTemp236) + ((0.0156865139f * fTemp237) + ((0.0226142164f * fTemp239) + ((0.0237434004f * fTemp240) + ((0.0218817722f * fTemp504) + ((0.0133976256f * fTemp243) + ((0.00955229346f * fTemp143) + ((0.00894192327f * fTemp246) + ((0.0151371807f * fTemp487) + ((0.0187078472f * fTemp516) + ((0.0199285876f * fTemp216) + ((0.018097477f * fTemp386) + ((0.0169988107f * fTemp423) + ((0.0157170333f * fTemp465) + ((0.0115359966f * fTemp457) + ((0.00558488723f * fTemp491) + ((0.00265511032f * fTemp526) + ((0.00750755332f * fTemp175) + ((0.0116580706f * fTemp445) + ((0.016052736f * fTemp251) + ((0.0184331797f * fTemp252) + ((0.0198370311f * fTemp401) + ((0.0218207352f * fTemp404) + ((0.0230719931f * fTemp253) + ((0.0238044374f * fTemp254) + ((0.0228888821f * fTemp255) + ((0.0229804385f * fTemp256) + ((0.0283822138f * fTemp257) + ((0.0332651772f * fTemp258) + ((0.0414746553f * fTemp259) + ((0.0486770235f * fTemp260) + ((0.0498062074f * fTemp261) + ((0.0440992452f * fTemp262) + ((0.0371715464f * fTemp263) + ((0.030793177f * fTemp264) + ((0.0209967345f * fTemp265) + ((0.0205694754f * fTemp429) + ((0.0227362905f * fTemp180) + ((0.0223700684f * fTemp266) + ((0.029114658f * fTemp506) + ((0.0375682861f * fTemp267) + ((0.0451979116f * fTemp268) + ((0.0479140617f * fTemp269) + ((0.0420545079f * fTemp520) + ((0.0280465111f * fTemp28) + ((0.0143436994f * fTemp270) + ((0.024567401f * fTemp95) + ((0.042298656f * fTemp503) + ((0.0440382101f * fTemp272) + ((0.0404370241f * fTemp273) + ((0.0424817652f * fTemp274) + ((0.0474562831f * fTemp169) + ((0.0489211716f * fTemp32) + ((0.0363780633f * fTemp33) + ((0.014496292f * fTemp492) + ((0.0391857661f * fTemp277) + ((0.0701315328f * fTemp278) + ((0.0643330216f * fTemp501) + ((0.032898955f * fTemp488) + ((0.00729392376f * fTemp280) + ((0.00268562883f * fTemp281) + ((0.0234992523f * fTemp510) + ((0.0468459129f * fTemp284) + ((0.0685445741f * fTemp285) + ((0.0892666429f * fTemp286) + ((0.106387526f * fTemp287) + ((0.11548204f * fTemp288) + ((0.104983672f * fTemp289) + ((0.0765404254f * fTemp290) + ((0.0255134739f * fTemp505) + ((0.0252082888f * fTemp293) + ((0.0712607205f * fTemp294) + ((0.113650933f * fTemp484) + ((0.107791379f * fTemp34) + ((0.101290934f * fTemp441) + ((0.0719321296f * fTemp485) + ((0.070223093f * fTemp479) + ((0.0557268001f * fTemp35) + ((0.0354625098f * fTemp36) + ((0.0226752535f * fTemp46) + ((0.0922269374f * fTemp47) + ((0.15158543f * fTemp48) + (fTemp679 + ((0.0405896194f * fTemp295) + ((0.0442518406f * fTemp298) + ((0.136295661f * fTemp299) + ((0.124393448f * fTemp300) + ((0.0941190869f * fTemp301) + ((0.0700094625f * fTemp302) + ((0.120609149f * fTemp50) + ((0.191381574f * fTemp51) + ((0.0903653055f * fTemp52) + ((0.0400097668f * fTemp53) + ((0.0170903653f * fTemp305) + ((0.068727687f * fTemp306) + ((0.0662556812f * fTemp307) + (fTemp597 + ((0.0196234025f * fTemp55) + ((0.117740408f * fTemp56) + ((0.171636105f * fTemp57) + ((0.232856229f * fTemp144) + ((0.00149540696f * fTemp312) + ((0.0334788039f * fTemp313) + ((0.036896877f * fTemp212) + ((0.0310983621f * fTemp58) + ((0.00155644398f * fTemp60) + (((0.0140079958f * (((fTemp203 + fTemp29) - fTemp352) - fTemp114)) + ((0.0126346629f * (fTemp369 - fTemp365)) + ((0.0159611814f * (fTemp497 - fTemp383)) + ((0.0117191076f * ((fTemp200 + fTemp247) - fTemp393)) + ((0.00659199804f * (fTemp470 - fTemp148)) + ((0.0136112552f * (fTemp502 - fTemp120)) + ((0.0137333293f * (fTemp449 - fTemp132)) + ((0.0155339213f * (fTemp242 - fTemp425)) + ((0.00769066438f * (fTemp416 - fTemp434)) + ((0.00747703481f * ((fTemp93 + (fTemp190 + fTemp244)) - fTemp146)) + ((0.00454725791f * ((fTemp469 + (fTemp379 + fTemp174)) - fTemp446)) + ((0.00244148076f * ((fTemp11 + fTemp209) - fTemp455)) + ((0.0119327372f * (fTemp412 - fTemp19)) + ((0.00424207281f * (fTemp463 + fTemp378)) + ((0.0100405896f * fTemp680) + ((0.00790429395f * (fTemp14 + fTemp471)) + ((0.00589007232f * (fTemp153 + fTemp392)) + ((0.00823999755f * (fTemp347 + fTemp387)) + ((0.00796533097f * (fTemp201 + fTemp397)) + ((0.00405896176f * (fTemp442 + fTemp444)) + ((0.00186162908f * (fTemp227 + fTemp128)) + ((0.000701925717f * (fTemp103 + (fTemp116 + fTemp653))) + ((0.00137333293f * fTemp681) + ((0.00247199927f * (fTemp363 + fTemp381)) + ((0.000457777642f * (fTemp8 - fTemp356)) + ((0.000854518265f * (fTemp110 + fTemp276)) + ((0.00735496078f * (fTemp413 + fTemp271)) + ((0.0138554033f * (fTemp514 + (fTemp111 + fTemp248))) + ((0.00701925717f * (fTemp335 + fTemp141)) + ((0.00863673817f * fTemp682) + ((0.0083925901f * (fTemp357 + fTemp59)) + ((((((0.0051576281f * (fTemp279 + fTemp37)) + (0.0195928831f * (fTemp362 + fTemp222))) + (0.0189214759f * (fTemp238 + fTemp241))) + (0.0136417737f * (fTemp233 + (fTemp500 + fTemp249)))) + (0.0135502182f * (fTemp515 + (fTemp436 + fTemp250)))) + (0.0087282937f * (fTemp498 + fTemp406)))))))))))))))))))))))))))))))))) + (0.0113528855f * ((fTemp350 + fTemp165) - fTemp98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow4 ? (iSlow13 ? (iSlow17 ? (iSlow19 ? (((0.0265816227f * fTemp218) + ((0.00610370189f * fTemp220) + ((0.0297250282f * fTemp5) + ((0.141239658f * fTemp223) + ((0.000915555283f * fTemp349) + ((0.0061342204f * fTemp126) + ((0.00616473891f * fTemp103) + ((0.00357066561f * fTemp464) + (fTemp662 + ((0.000610370189f * fTemp347) + ((0.00262459181f * fTemp454) + ((0.00299081393f * fTemp17) + ((0.00442518387f * fTemp342) + ((0.00744651631f * fTemp359) + ((0.00344859157f * fTemp122) + ((0.00311288796f * fTemp177) + ((0.00619525742f * fTemp431) + ((0.00564592425f * fTemp27) + ((0.00234992523f * fTemp89) + ((0.00183111057f * fTemp97) + ((0.00500503555f * fTemp382) + ((0.00250251777f * fTemp152) + ((0.00827051606f * fTemp120) + ((0.00820947904f * fTemp109) + ((0.0057985168f * fTemp148) + ((0.000305185094f * fTemp403) + ((0.00473036896f * fTemp125) + ((0.00469985045f * fTemp372) + ((0.00320444349f * fTemp389) + ((0.00347911008f * fTemp353) + (fTemp663 + ((0.00125125889f * fTemp118) + ((0.00277718436f * fTemp461) + (fTemp664 + ((0.00384533219f * fTemp234) + ((0.000762962736f * fTemp499) + ((0.000183111057f * fTemp412) + ((0.0035401471f * fTemp244) + ((0.00759910885f * fTemp175) + ((0.0105594043f * fTemp445) + ((0.0132755516f * fTemp248) + ((0.0134586627f * fTemp249) + (fTemp665 + ((0.00415051728f * fTemp29) + ((0.0122684408f * fTemp273) + ((0.00552385021f * fTemp274) + ((0.0170293283f * fTemp276) + ((0.0115665151f * fTemp277) + ((0.017853329f * fTemp279) + ((0.0271614734f * fTemp280) + ((0.0377513953f * fTemp281) + ((0.046967987f * fTemp215) + ((0.0486770235f * fTemp468) + ((0.0490432456f * fTemp282) + ((0.0411389507f * fTemp283) + ((0.0348216183f * fTemp477) + ((0.0263985116f * fTemp510) + ((0.021271402f * fTemp291) + ((0.0395519882f * fTemp292) + ((0.011383404f * fTemp293) + (fTemp666 + ((0.0615558326f * fTemp38) + ((0.087160863f * fTemp39) + ((0.0790124238f * fTemp40) + ((0.0654927194f * fTemp41) + ((0.079317607f * fTemp42) + ((0.0928678215f * fTemp214) + ((0.090578936f * fTemp43) + ((0.0805383474f * fTemp44) + ((0.040192876f * fTemp45) + ((0.0354319885f * fTemp295) + ((0.0857875273f * fTemp213) + ((0.0593584999f * fTemp296) + ((0.0054933317f * fTemp430) + ((0.0392162837f * fTemp304) + ((0.0185552537f * fTemp305) + ((0.717856407f * fTemp508) + (fTemp308 + ((0.840388179f * fTemp309) + ((0.411175877f * fTemp509) + ((0.108401746f * fTemp310) + ((0.0269173253f * fTemp311) + ((0.0242622159f * fTemp312) + ((0.00546281319f * fTemp313) + ((0.0307321399f * fTemp62) + ((0.0402844325f * fTemp63) + ((0.0401318409f * fTemp64) + ((0.013061922f * fTemp320) + ((0.0152897732f * fTemp321) + ((0.0140385143f * fTemp322) + ((0.0342417695f * fTemp326) + ((0.0320749544f * fTemp73) + ((0.0213019196f * fTemp74) + ((0.00985747855f * fTemp80) + ((0.0123905148f * fTemp81) + ((0.0117191076f * fTemp82) + (((0.000396740623f * (fTemp334 + (fTemp106 + (fTemp113 + fTemp105)))) + ((0.00134281442f * ((fTemp352 + (fTemp469 + fTemp195)) - fTemp107)) + ((0.00119022187f * (fTemp337 + fTemp327)) + ((0.00170903653f * (fTemp345 + (fTemp114 + ((fTemp128 - fTemp358) - fTemp418)))) + ((0.000640888698f * (fTemp360 + (fTemp156 + fTemp437))) + ((0.000244148076f * ((fTemp23 - fTemp13) - fTemp366)) + ((0.000152592547f * ((fTemp364 - fTemp15) - fTemp371)) + ((0.00213629566f * (fTemp374 + fTemp363)) + ((0.00338755455f * fTemp667) + ((0.00332651753f * (fTemp383 - fTemp376)) + ((0.00372325815f * (fTemp390 + (fTemp132 + fTemp187))) + ((0.00430310983f * (fTemp112 + ((((fTemp246 - fTemp176) - fTemp368) - fTemp451) - fTemp134))) + ((0.00460829493f * (fTemp375 + (fTemp10 - fTemp413))) + ((0.00369273964f * (fTemp399 + (fTemp252 + (fTemp501 + fTemp79)))) + ((0.00210577715f * (fTemp127 + (fTemp140 + (fTemp123 + (fTemp129 + fTemp440))))) + ((0.00207525864f * (((fTemp496 - fTemp474) - fTemp146) - fTemp408)) + ((0.00180059206f * (fTemp139 - fTemp173)) + ((0.00326548051f * (fTemp393 + (fTemp142 + fTemp115))) + ((0.00433362834f * (fTemp102 + fTemp427)) + ((0.00424207281f * (fTemp119 + fTemp406)) + ((0.00216681417f * (fTemp108 + fTemp380)) + ((0.00158696249f * (fTemp497 - fTemp384)) + ((0.00381481368f * ((fTemp166 - fTemp18) - fTemp410)) + ((0.00637836847f * (fTemp344 + fTemp26)) + ((0.00222785119f * (fTemp150 + (fTemp189 - fTemp478))) + ((0.00177007355f * (fTemp121 - fTemp444)) + ((0.00476088747f * (fTemp420 - fTemp466)) + ((0.00115970336f * (fTemp161 - fTemp196)) + ((0.000671407208f * (fTemp163 + (fTemp92 + fTemp416))) + ((0.00479140598f * (fTemp162 + ((fTemp526 - fTemp516) - fTemp462))) + ((0.00512710959f * (fTemp434 + fTemp68)) + ((0.00244148076f * (fTemp438 + fTemp343)) + ((0.00350962859f * ((fTemp453 + fTemp84) - fTemp446)) + ((0.00204474013f * (fTemp22 + fTemp278)) + ((0.00454725791f * (fTemp151 + fTemp498)) + ((0.0087282937f * fTemp668) + ((0.00662251655f * (fTemp20 - fTemp191)) + ((0.00622577593f * (fTemp491 - fTemp149)) + ((0.000885036774f * (fTemp90 + fTemp171)) + ((0.00112918485f * (fTemp521 + (fTemp158 + fTemp435))) + ((0.00256355479f * (fTemp16 + (fTemp472 + fTemp494))) + ((0.0022583697f * (fTemp133 - fTemp181)) + ((0.00268562883f * (fTemp419 - fTemp12)) + ((0.00201422162f * ((fTemp227 - fTemp388) - fTemp192)) + ((0.00100711081f * ((fTemp183 + (fTemp217 - fTemp381)) - fTemp153)) + ((0.00164799951f * (fTemp93 + fTemp160)) + ((0.00155644398f * (fTemp398 + (fTemp356 + fTemp470))) + ((0.000335703604f * (fTemp482 + (fTemp104 - fTemp379))) + ((0.00497451704f * (fTemp205 + fTemp385)) + ((0.000946073793f * (fTemp137 - fTemp110)) + ((0.000274666585f * (fTemp439 - fTemp392)) + ((0.00466933195f * ((fTemp457 - fTemp0) - fTemp184)) + ((0.000213629566f * ((fTemp154 + fTemp422) - fTemp377)) + ((9.15555283e-05f * (fTemp141 + fTemp143)) + ((0.00146488845f * (fTemp265 - fTemp397)) + ((0.00103762932f * (fTemp232 + ((fTemp465 - fTemp242) - fTemp436))) + (((0.0140690329f * ((fTemp284 - fTemp503) - fTemp268)) + (((0.00625629444f * (fTemp75 + fTemp83)) + (0.0124820704f * (fTemp65 + fTemp325))) + (0.014557329f * (fTemp471 - fTemp30)))) + (0.00845362712f * (fTemp488 - fTemp369))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00186162908f * (fTemp88 - fTemp198))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00598162785f * fTemp1) + ((0.0187078472f * fTemp402) + ((0.0191351064f * fTemp3) + ((0.0281380657f * fTemp4) + ((0.0292367321f * fTemp221) + ((0.00927762687f * fTemp204) + ((0.009704886f * fTemp447) + ((0.00674459059f * fTemp224) + ((0.00329599902f * fTemp387) + ((0.00686666463f * fTemp200) + ((0.00863673817f * fTemp514) + ((0.00955229346f * fTemp147) + ((0.00976592302f * fTemp211) + ((0.00802636798f * fTemp490) + ((0.00314340647f * fTemp96) + ((0.00341807306f * fTemp473) + ((0.00271614734f * fTemp450) + ((0.00427259132f * fTemp209) + ((0.00491348002f * fTemp193) + ((0.00241096225f * fTemp116) + ((0.000732444227f * fTemp483) + ((0.001617481f * fTemp452) + ((0.00561540574f * fTemp414) + ((0.00668355357f * fTemp228) + ((0.0019226661f * fTemp424) + ((6.10370189e-05f * fTemp19) + ((0.0019531846f * fTemp167) + ((0.00363170262f * fTemp455) + ((0.00405896176f * fTemp405) + ((0.00143436994f * fTemp130) + ((0.000457777642f * fTemp341) + ((0.00109866634f * fTemp101) + ((0.000701925717f * fTemp98) + ((0.00723288674f * fTemp357) + ((0.00231940672f * fTemp449) + ((0.00671407208f * fTemp495) + ((0.00396740623f * fTemp235) + ((0.0100100711f * fTemp236) + ((0.0140079958f * fTemp500) + ((0.0153813288f * fTemp502) + ((0.0159306619f * fTemp237) + ((0.016052736f * fTemp238) + ((0.014435255f * fTemp239) + ((0.0108951079f * fTemp240) + ((0.00698873866f * fTemp386) + ((0.00494399853f * fTemp401) + ((0.0148930326f * fTemp404) + ((0.0236823633f * fTemp253) + ((0.0289620664f * fTemp254) + ((0.0262764376f * fTemp255) + ((0.0193182174f * fTemp256) + ((0.0103457747f * fTemp257) + ((0.00305185094f * fTemp258) + ((0.00238044374f * fTemp259) + ((0.00885036774f * fTemp260) + ((0.0138859218f * fTemp261) + ((0.0139469588f * fTemp262) + ((0.00943021942f * fTemp263) + ((0.00933866389f * fTemp180) + ((0.0149540696f * fTemp266) + ((0.0110477004f * fTemp506) + ((0.00891140476f * fTemp267) + ((0.0162053294f * fTemp269) + ((0.0143436994f * fTemp520) + ((0.0109561449f * fTemp271) + ((0.0151066622f * fTemp370) + ((0.0189214759f * fTemp186) + ((0.0154118473f * fTemp188) + ((0.0167241432f * fTemp31) + (fTemp669 + ((0.0618610196f * fTemp32) + ((0.0722678304f * fTemp33) + ((0.0451979116f * fTemp492) + ((0.0226142164f * fTemp286) + ((0.0486159846f * fTemp287) + ((0.0749839768f * fTemp288) + ((0.0904568657f * fTemp289) + ((0.0921048597f * fTemp290) + (fTemp670 + ((0.022461623f * fTemp511) + ((0.0453199856f * fTemp294) + ((0.109042637f * fTemp484) + ((0.147038177f * fTemp34) + ((0.153447062f * fTemp441) + ((0.129978329f * fTemp485) + ((0.103274636f * fTemp479) + ((0.0696432367f * fTemp35) + ((0.0227973275f * fTemp36) + ((0.0155339213f * fTemp46) + ((0.0595416129f * fTemp47) + ((0.0739158317f * fTemp48) + ((0.0296334736f * fTemp49) + ((0.0906704888f * fTemp297) + ((0.142368853f * fTemp298) + ((0.156620994f * fTemp299) + ((0.115298927f * fTemp300) + (fTemp671 + ((0.0929593816f * fTemp51) + ((0.108767971f * fTemp52) + ((0.111514635f * fTemp53) + ((0.0289010294f * fTemp159) + ((0.00997955259f * fTemp303) + ((0.0214850307f * fTemp307) + ((0.110477008f * fTemp54) + ((0.271523178f * fTemp55) + ((0.495132297f * fTemp56) + ((0.584582031f * fTemp57) + ((0.398907423f * fTemp144) + ((0.00286873989f * fTemp212) + ((0.00735496078f * fTemp58) + ((0.0133976256f * fTemp59) + (fTemp672 + ((0.0267036967f * fTemp314) + ((0.0177312549f * fTemp315) + ((0.00650044251f * fTemp66) + ((0.021332439f * fTemp67) + ((0.025757622f * fTemp316) + ((0.0166325886f * fTemp318) + ((0.00982696004f * fTemp70) + ((0.0273751039f * fTemp71) + ((0.0319833979f * fTemp72) + (fTemp589 + ((0.0207831059f * fTemp323) + ((0.0170598477f * fTemp77) + ((0.0137333293f * fTemp507) + ((0.00488296151f * fTemp87) + ((0.00411999878f * fTemp331) + (((0.000976592302f * ((((fTemp443 + (fTemp456 + (fTemp335 + (fTemp306 + fTemp85)))) - fTemp426) - fTemp338) - fTemp333)) + ((0.000122074038f * (fTemp231 + (fTemp136 + ((((fTemp448 + fTemp243) - fTemp225) - fTemp476) - fTemp355)))) + ((0.00106814783f * (fTemp336 + fTemp459)) + ((3.05185094e-05f * ((fTemp157 - fTemp339) - fTemp365)) + ((0.00308236945f * ((fTemp86 - fTemp207) - fTemp361)) + ((0.00463881344f * (((fTemp230 + fTemp275) - fTemp340) - fTemp354)) + ((0.00448622089f * (fTemp28 - fTemp529)) + ((0.00457777642f * ((fTemp319 - fTemp396) - fTemp394)) + ((0.00302133244f * (fTemp131 + ((fTemp14 + (fTemp178 + fTemp61)) - fTemp425))) + ((0.00366222113f * (fTemp409 + fTemp264)) + ((0.00189214759f * (fTemp417 - fTemp145)) + ((0.00399792474f * ((fTemp172 + fTemp206) - fTemp100)) + ((0.00518814661f * ((fTemp515 + fTemp329) - fTemp155)) + ((0.00137333293f * (fTemp272 - fTemp428)) + ((0.00378429517f * (fTemp332 - fTemp373)) + ((0.00601214636f * ((fTemp328 - fTemp179) - fTemp24)) + ((0.00122074038f * (((fTemp348 - fTemp190) - fTemp201) - fTemp170)) + ((0.0028992584f * (fTemp351 + (fTemp423 - fTemp247))) + ((0.00292977691f * (fTemp241 - fTemp458)) + ((0.00836207159f * (fTemp216 - fTemp164)) + ((0.00814844202f * (fTemp203 - fTemp185)) + ((0.00253303628f * ((fTemp168 + fTemp467) - fTemp463)) + ((0.0038758507f * ((fTemp480 - fTemp11) - fTemp350)) + ((0.00393688772f * (fTemp432 + fTemp208)) + ((0.0058290353f * (fTemp229 + fTemp91)) + ((0.00167851802f * (fTemp69 - fTemp433)) + ((0.00057985168f * (fTemp197 + (fTemp415 + fTemp94))) + ((0.00054933317f * (fTemp442 + (fTemp487 - fTemp486))) + ((0.0051576281f * (fTemp270 - fTemp367)) + ((0.000823999755f * (fTemp210 - fTemp226)) + ((0.004852443f * (fTemp489 + fTemp378)) + ((0.00436414685f * ((fTemp391 + fTemp395) - fTemp8)) + ((0.00576799829f * (fTemp475 + fTemp302)) + ((0.00640888698f * (fTemp421 + fTemp504)) + ((0.00924710836f * (fTemp165 - fTemp2)) + ((0.00534073915f * (fTemp460 + fTemp324)) + ((0.00811792351f * (fTemp194 + fTemp76)) + ((0.00897244178f * (fTemp493 + fTemp111)) + ((0.0025940733f * (fTemp429 - fTemp233)) + ((0.00509659108f * (fTemp78 - fTemp174)) + ((0.0145878475f * (fTemp362 - fTemp6)) + ((0.0259712525f * (fTemp169 + fTemp199)) + ((0.0102237007f * (fTemp7 - fTemp219)) + (0.0173345134f * (fTemp50 - fTemp222))))))))))))))))))))))))))))))))))))))))))))) + (0.00149540696f * (((fTemp407 + fTemp285) - fTemp99) - fTemp513))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.00802636798f * fTemp2) + ((0.0154118473f * fTemp5) + ((0.0117801446f * fTemp222) + ((0.00228888821f * fTemp476) + ((0.0108645894f * fTemp432) + ((0.0107730338f * fTemp424) + ((0.0112308115f * fTemp149) + ((0.0101931822f * fTemp18) + ((0.00561540574f * fTemp187) + ((0.00238044374f * fTemp185) + ((0.000427259132f * fTemp455) + ((0.0019226661f * fTemp146) + ((0.000274666585f * fTemp431) + ((0.000305185094f * fTemp27) + ((0.00112918485f * fTemp162) + ((0.0119937742f * fTemp428) + ((0.0116580706f * fTemp426) + ((0.00454725791f * fTemp161) + ((0.00137333293f * fTemp115) + ((0.00177007355f * fTemp155) + ((0.00430310983f * fTemp420) + ((0.00817896053f * fTemp132) + ((0.0124515519f * fTemp152) + ((0.0148319956f * fTemp121) + ((0.0139164403f * fTemp150) + ((0.00402844325f * fTemp355) + ((0.00604266487f * fTemp338) + ((0.00704977568f * fTemp99) + ((0.00366222113f * fTemp142) + ((0.00131229591f * fTemp119) + ((0.000732444227f * fTemp393) + ((0.0058290353f * fTemp405) + ((0.00833155308f * fTemp354) + ((0.00912503432f * fTemp112) + ((0.00918607134f * fTemp390) + ((0.00823999755f * fTemp389) + ((0.00311288796f * fTemp353) + ((9.15555283e-05f * fTemp118) + ((0.000457777642f * fTemp113) + ((0.00317392498f * fTemp365) + ((0.00280770287f * fTemp345) + ((0.00216681417f * fTemp336) + ((0.00305185094f * fTemp334) + ((0.00378429517f * fTemp333) + (((0.00173955504f * fTemp370) + ((0.00631733146f * fTemp186) + ((0.0136112552f * fTemp31) + ((0.00427259132f * fTemp276) + ((0.0235602893f * fTemp281) + ((0.0301828068f * fTemp215) + ((0.0255439933f * fTemp468) + ((0.0195013285f * fTemp282) + ((0.0174260698f * fTemp283) + ((0.0143436994f * fTemp477) + ((0.00668355357f * fTemp510) + ((0.0258491784f * fTemp511) + ((0.0529496148f * fTemp291) + ((0.0426038392f * fTemp292) + ((0.0442518406f * fTemp39) + ((0.0433362834f * fTemp40) + ((0.0490737632f * fTemp41) + ((0.0646382049f * fTemp42) + ((0.0842310861f * fTemp214) + ((0.0742515326f * fTemp43) + ((0.0491042808f * fTemp44) + ((0.0184636991f * fTemp45) + ((0.102175973f * fTemp296) + ((0.103762932f * fTemp430) + ((0.0356151015f * fTemp297) + ((0.0811181962f * fTemp305) + ((0.0627460554f * fTemp306) + ((0.0427564308f * fTemp307) + ((0.0328684337f * fTemp54) + ((0.0831324235f * fTemp55) + ((0.0134586627f * fTemp56) + ((0.0442823581f * fTemp508) + ((0.66917938f * fTemp308) + (fTemp309 + ((0.813684523f * fTemp509) + ((0.377513975f * fTemp310) + ((0.109500416f * fTemp311) + ((0.0287179183f * fTemp312) + ((0.0022583697f * fTemp63) + ((0.00994903408f * fTemp64) + ((0.0109561449f * fTemp322) + ((0.0129093295f * fTemp75) + ((0.00943021942f * fTemp76) + ((0.00274666585f * fTemp77) + ((0.000488296151f * fTemp81) + ((0.00552385021f * fTemp82) + ((0.00103762932f * fTemp85) + (((0.00247199927f * (fTemp231 + (fTemp366 + fTemp478))) + ((0.00213629566f * (fTemp98 + fTemp101)) + ((0.00222785119f * (fTemp107 - fTemp418)) + ((0.00198370311f * fTemp658) + ((0.00326548051f * (fTemp114 + ((fTemp67 + fTemp69) - fTemp192))) + ((0.00350962859f * (fTemp352 + fTemp360)) + ((0.00140385143f * (fTemp371 + fTemp195)) + ((0.000366222113f * (fTemp374 - fTemp148)) + ((0.00109866634f * (fTemp346 + (fTemp139 + fTemp182))) + ((0.00201422162f * (fTemp124 - fTemp359)) + ((0.00463881344f * (fTemp383 - fTemp392)) + ((0.00708029419f * (fTemp375 + (fTemp163 - fTemp126))) + ((0.00680562761f * (fTemp125 - fTemp10)) + ((0.00567644276f * (fTemp396 + (fTemp130 - fTemp414))) + ((0.00283822138f * (fTemp409 - fTemp1)) + ((0.00601214636f * (fTemp108 - fTemp128)) + ((0.00296029542f * (fTemp376 + (fTemp277 - fTemp486))) + ((0.00393688772f * (fTemp410 + (fTemp344 + (fTemp443 - fTemp206)))) + ((0.00411999878f * (fTemp417 - fTemp178)) + ((0.000823999755f * (fTemp382 + fTemp427)) + ((0.00781273842f * (fTemp89 + (fTemp73 - fTemp482))) + ((0.00268562883f * (fTemp373 - fTemp110)) + ((0.000915555283f * (fTemp26 + fTemp446)) + ((0.00372325815f * (fTemp434 + fTemp20)) + ((0.0054933317f * (fTemp166 - fTemp141)) + ((0.00701925717f * (fTemp438 + fTemp68)) + ((0.0012817774f * (fTemp451 - fTemp167)) + ((0.000396740623f * (fTemp70 - fTemp164)) + ((0.0113528855f * (fTemp188 - fTemp342)) + ((0.0143742179f * (fTemp30 - fTemp17)) + ((0.00537125766f * (fTemp15 - fTemp210)) + ((0.0067751091f * (fTemp229 - fTemp193)) + ((0.000946073793f * (fTemp228 - fTemp3)) + (((0.00598162785f * ((fTemp84 - fTemp293) - fTemp103)) + ((0.00335703604f * (fTemp327 - fTemp217)) + ((0.00796533097f * ((fTemp321 + fTemp83) - fTemp473)) + ((0.00653096102f * (fTemp95 - fTemp105)) + ((0.00982696004f * (fTemp37 - fTemp514)) + ((0.0121768853f * (fTemp74 - fTemp395)) + ((0.0119022187f * (fTemp66 - fTemp436)) + ((0.0316476934f * (fTemp38 - fTemp259)) + (0.0163579211f * (fTemp65 - fTemp92)))))))))) + (0.00143436994f * (fTemp12 + fTemp320)))))))))))))))))))))))))))))))))))) + (0.00448622089f * (fTemp513 + fTemp399)))))))))))))))))))))))))))))))))))))))))))))))))) + (0.004852443f * fTemp88)))))))))))))))))))))))))))))))))))))))))))))) - ((0.00149540696f * fTemp0) + ((0.00827051606f * fTemp6) + ((0.0267036967f * fTemp7) + ((0.431592762f * fTemp223) + ((0.00778221991f * fTemp194) + ((0.00482192449f * fTemp368) + ((0.00476088747f * fTemp387) + ((0.00961333048f * fTemp200) + ((0.00979644153f * fTemp456) + ((0.00946073793f * fTemp225) + ((0.00885036774f * fTemp226) + ((0.00735496078f * fTemp190) + ((0.00671407208f * fTemp349) + ((0.00689718314f * fTemp379) + ((0.00750755332f * fTemp444) + ((0.00924710836f * fTemp475) + ((0.00939970091f * fTemp358) + ((0.00894192327f * fTemp377) + ((0.00695822015f * fTemp160) + ((0.00747703481f * fTemp209) + ((0.00506607257f * fTemp343) + ((0.00405896176f * fTemp388) + (fTemp659 + ((0.00256355479f * fTemp462) + ((0.00418103579f * fTemp198) + ((0.00714133121f * fTemp207) + ((0.00732444227f * fTemp205) + ((0.00241096225f * fTemp227) + ((0.00320444349f * fTemp483) + ((0.0028992584f * fTemp348) + ((0.00698873866f * fTemp437) + ((0.00585955381f * fTemp183) + ((0.00592059083f * fTemp202) + ((0.00625629444f * fTemp93) + ((0.00640888698f * fTemp201) + ((0.00115970336f * fTemp133) + ((0.0139469588f * fTemp472) + ((0.0189825129f * fTemp433) + ((0.0184331797f * fTemp13) + ((0.012878811f * fTemp14) + ((0.0124210333f * fTemp189) + ((0.00949125644f * fTemp521) + ((0.00952177495f * fTemp123) + ((0.0110477004f * fTemp350) + ((0.0090334788f * fTemp463) + ((0.00329599902f * fTemp459) + ((0.00265511032f * fTemp179) + ((0.0035401471f * fTemp177) + ((0.00494399853f * fTemp458) + ((0.00347911008f * fTemp23) + ((0.000640888698f * fTemp120) + ((0.00726340525f * fTemp397) + ((0.00836207159f * fTemp461) + ((0.0102542192f * fTemp406) + ((0.0112918485f * fTemp494) + ((0.0121158483f * fTemp448) + ((0.0123599963f * fTemp449) + ((0.0126956999f * fTemp495) + (fTemp660 + ((0.0134281442f * fTemp111) + ((0.012939848f * fTemp203) + ((0.0126041444f * fTemp515) + ((0.0110171819f * fTemp233) + ((0.0107425153f * fTemp234) + ((0.0120853297f * fTemp419) + ((0.0141911069f * fTemp422) + ((0.0158085879f * fTemp94) + ((0.0167851802f * fTemp440) + ((0.0169377737f * fTemp499) + ((0.0165715516f * fTemp235) + ((0.0153508103f * fTemp236) + ((0.014618366f * fTemp500) + ((0.014496292f * fTemp502) + ((0.014557329f * fTemp237) + ((0.0137943663f * fTemp238) + ((0.0115970336f * fTemp240) + ((0.0135807367f * fTemp504) + ((0.01617481f * fTemp241) + ((0.0159611814f * fTemp242) + ((0.00589007232f * fTemp143) + ((0.00207525864f * fTemp244) + ((0.00570696127f * fTemp487) + ((0.0119632557f * fTemp216) + ((0.0120548112f * fTemp386) + ((0.0122684408f * fTemp423) + (fTemp629 + ((0.00390636921f * fTemp526) + ((0.000671407208f * fTemp175) + ((0.00134281442f * fTemp248) + ((0.00546281319f * fTemp250) + ((0.00875881221f * fTemp251) + ((0.0118411817f * fTemp252) + ((0.0125431074f * fTemp401) + ((0.0140385143f * fTemp404) + ((0.0148014771f * fTemp253) + ((0.0172429588f * fTemp254) + ((0.0173955504f * fTemp255) + ((0.0173345134f * fTemp256) + ((0.0200811792f * fTemp257) + ((0.0266121402f * fTemp258) + ((0.0311899167f * fTemp260) + ((0.025757622f * fTemp261) + ((0.022766808f * fTemp262) + ((0.0246589556f * fTemp263) + ((0.025940733f * fTemp264) + ((0.0226142164f * fTemp265) + ((0.0173650328f * fTemp497) + ((0.0160832554f * fTemp429) + ((0.0189214759f * fTemp180) + ((0.0235908087f * fTemp362) + ((0.0231940672f * fTemp266) + ((0.0181279946f * fTemp506) + ((0.0135502182f * fTemp267) + ((0.0281075481f * fTemp269) + ((0.0359813236f * fTemp520) + ((0.0314340666f * fTemp28) + ((0.0202642903f * fTemp29) + ((0.00344859157f * fTemp270) + ((0.0245979186f * fTemp272) + ((0.0365306549f * fTemp273) + ((0.0345469527f * fTemp274) + ((0.024323253f * fTemp169) + ((0.0168767367f * fTemp32) + ((0.0191351064f * fTemp33) + ((0.0162663665f * fTemp278) + ((0.0431531742f * fTemp501) + ((0.0630207211f * fTemp488) + ((0.0599688701f * fTemp471) + ((0.0339060649f * fTemp279) + ((0.00881984923f * fTemp284) + ((0.0293282885f * fTemp285) + ((0.0510879867f * fTemp286) + ((0.0734275356f * fTemp287) + ((0.0838648677f * fTemp288) + ((0.0802941993f * fTemp289) + ((0.0571001321f * fTemp290) + ((0.021149328f * fTemp505) + ((0.0561235398f * fTemp294) + ((0.0878017545f * fTemp484) + ((0.0912808627f * fTemp34) + ((0.0768761262f * fTemp441) + ((0.0617389455f * fTemp485) + ((0.0558793917f * fTemp479) + ((0.0457472466f * fTemp35) + ((0.0199896246f * fTemp36) + ((0.0148930326f * fTemp46) + ((0.0402844325f * fTemp47) + ((0.0737632364f * fTemp48) + ((0.0824610144f * fTemp49) + ((0.0475173183f * fTemp295) + ((0.0916165635f * fTemp299) + ((0.0947294533f * fTemp300) + ((0.0454115421f * fTemp301) + ((0.0302133244f * fTemp51) + ((0.0494094677f * fTemp52) + ((0.0806909427f * fTemp53) + ((0.127536848f * fTemp159) + ((0.0868556798f * fTemp303) + ((0.0218512528f * fTemp304) + ((0.23007904f * fTemp57) + ((0.445631266f * fTemp144) + ((0.00469985045f * fTemp313) + ((0.0216376241f * fTemp212) + ((0.0282601397f * fTemp58) + ((0.017975403f * fTemp59) + ((0.00878933072f * fTemp60) + ((0.0140079958f * fTemp316) + ((0.0166020691f * fTemp318) + ((0.0137333293f * fTemp319) + ((0.00155644398f * fTemp71) + ((0.00610370189f * fTemp323) + ((0.0126651814f * fTemp78) + ((0.0106814783f * fTemp79) + ((0.00558488723f * fTemp80) + ((0.00521866512f * fTemp329) + (((0.00650044251f * ((fTemp339 + fTemp4) - fTemp361)) + ((0.00744651631f * ((fTemp153 + fTemp411) - fTemp372)) + ((0.00729392376f * (((fTemp104 + fTemp447) - fTemp170) - fTemp394)) + ((0.00396740623f * ((fTemp470 + fTemp135) - fTemp127)) + ((0.0045167394f * (fTemp62 - fTemp403)) + ((0.00717184972f * (fTemp325 - fTemp529)) + ((0.00637836847f * (fTemp357 - fTemp131)) + ((0.00436414685f * (fTemp332 - fTemp134)) + ((0.00170903653f * ((fTemp247 + (fTemp87 - fTemp326)) - fTemp408)) + ((0.00122074038f * (fTemp445 - fTemp136)) + ((0.000183111057f * ((fTemp280 - fTemp340) - fTemp102)) + ((0.00262459181f * (((fTemp249 - fTemp196) - fTemp140) - fTemp384)) + ((0.00204474013f * (fTemp109 - fTemp24)) + ((0.00964384899f * (fTemp498 - fTemp100)) + ((0.009704886f * ((fTemp474 + fTemp516) - fTemp156)) + ((0.0105594043f * (fTemp507 - fTemp97)) + ((0.00503555406f * ((fTemp22 + fTemp416) - fTemp425)) + ((0.00616473891f * ((fTemp8 + fTemp380) - fTemp364)) + ((0.000854518265f * (fTemp246 - fTemp351)) + ((0.00125125889f * (fTemp174 - fTemp172)) + ((0.00787377544f * ((fTemp197 + fTemp496) - fTemp19)) + ((0.0093691824f * ((fTemp138 + fTemp147) - fTemp191)) + ((0.0038758507f * (fTemp621 - fTemp230)) + ((0.00857570115f * (fTemp90 + fTemp211)) + ((0.0115665151f * (fTemp16 + fTemp465)) + ((0.00381481368f * (fTemp469 + (fTemp199 + fTemp218))) + ((0.00665303506f * fTemp661) + ((0.00057985168f * (fTemp168 + fTemp86)) + ((0.00573747978f * (fTemp407 + fTemp460)) + ((0.00674459059f * (fTemp347 + fTemp220)) + ((0.00540177617f * (fTemp398 + fTemp335)) + ((0.00692770164f * (fTemp157 + (fTemp181 + fTemp224))) + ((0.00479140598f * (fTemp442 + (fTemp154 + fTemp402))) + ((0.00277718436f * (fTemp452 + (fTemp439 + fTemp221))) + ((0.00302133244f * (fTemp464 + fTemp467)) + ((0.00439466536f * (fTemp367 + fTemp356)) + ((0.006469924f * (fTemp137 + fTemp315)) + ((0.00119022187f * (fTemp489 + fTemp271)) + ((0.00555436872f * (fTemp453 + fTemp331)) + ((0.00534073915f * (fTemp184 + fTemp173)) + ((0.0077517014f * (fTemp450 + fTemp493)) + ((0.00766014587f * (fTemp381 + fTemp232)) + ((0.00659199804f * (fTemp158 + fTemp204)) + ((0.00576799829f * (fTemp129 + fTemp415)) + ((0.00805688649f * (fTemp171 + (fTemp165 + fTemp412))) + ((0.00933866389f * (fTemp466 + fTemp96)) + ((0.00897244178f * (fTemp91 + (fTemp413 + fTemp400))) + ((0.00845362712f * (fTemp378 + fTemp421)) + ((0.008087405f * (fTemp435 + fTemp490)) + ((0.00851466414f * (fTemp391 + fTemp61)) + ((0.0122379223f * (fTemp239 + fTemp243)) + ((0.0102237007f * (fTemp457 - fTemp219)) + ((0.0186773278f * (fTemp268 + fTemp492)) + ((0.0083925901f * (fTemp385 + fTemp503)) + ((0.00762962736f * (fTemp275 + fTemp324)) + ((0.0387585089f * (fTemp298 - fTemp213)) + ((0.00183111057f * (fTemp302 + fTemp50)) + ((0.00408948027f * (fTemp314 + fTemp328)) + (0.0074159978f * fTemp651))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00231940672f * (((fTemp122 + (fTemp151 + fTemp72)) - fTemp145) - fTemp337)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow18 ? (((0.0628681332f * fTemp0) + ((0.0238044374f * fTemp2) + ((0.0498062074f * fTemp219) + ((0.0524613187f * fTemp221) + ((0.0297860652f * fTemp222) + ((0.00140385143f * fTemp91) + ((0.001617481f * fTemp450) + ((0.00253303628f * fTemp10) + ((0.00402844325f * fTemp228) + ((0.00585955381f * fTemp229) + ((0.00561540574f * fTemp432) + ((0.00546281319f * fTemp90) + ((0.00213629566f * fTemp494) + ((0.000915555283f * fTemp111) + (fTemp648 + ((0.00320444349f * fTemp491) + ((0.00369273964f * fTemp526) + ((0.00247199927f * fTemp250) + ((0.00262459181f * fTemp254) + ((0.00384533219f * fTemp256) + ((0.00570696127f * fTemp258) + ((0.00521866512f * fTemp259) + ((0.00189214759f * fTemp261) + ((0.00170903653f * fTemp264) + ((0.00363170262f * fTemp266) + ((0.000946073793f * fTemp28) + ((0.00338755455f * fTemp492) + ((0.00482192449f * fTemp277) + (fTemp649 + ((0.00833155308f * fTemp501) + ((0.00335703604f * fTemp488) + ((0.0058290353f * fTemp215) + ((0.00308236945f * fTemp468) + ((0.00625629444f * fTemp285) + ((0.00518814661f * fTemp291) + ((0.00277718436f * fTemp38) + ((0.00875881221f * fTemp39) + ((0.00766014587f * fTemp40) + ((0.0109561449f * fTemp44) + ((0.0127262184f * fTemp45) + ((0.0213934761f * fTemp298) + ((0.0373851731f * fTemp299) + ((0.0395825058f * fTemp300) + ((0.0198980682f * fTemp301) + ((0.0187078472f * fTemp53) + ((0.0228278451f * fTemp159) + ((0.00601214636f * fTemp54) + ((0.00698873866f * fTemp309) + ((0.0251472518f * fTemp509) + ((0.0446180627f * fTemp310) + ((0.0528580584f * fTemp311) + ((0.046540726f * fTemp312) + ((0.0114139225f * fTemp313) + ((0.0805688649f * fTemp314) + ((0.0627155378f * fTemp315) + ((0.0226142164f * fTemp61) + ((0.0513931699f * fTemp320) + ((0.0876186416f * fTemp321) + ((0.0707419068f * fTemp322) + ((0.0262154005f * fTemp68) + ((0.00750755332f * fTemp69) + ((0.0415051728f * fTemp135) + ((0.142765582f * fTemp323) + ((0.144199952f * fTemp324) + ((0.0842310861f * fTemp325) + ((0.0482802838f * fTemp75) + ((0.0880459026f * fTemp76) + ((0.0387890264f * fTemp77) + ((0.034272287f * fTemp81) + ((0.00955229346f * fTemp82) + ((0.157628104f * fTemp83) + ((0.35834834f * fTemp84) + ((0.28858304f * fTemp327) + ((0.348948628f * fTemp328) + ((0.825647771f * fTemp329) + ((0.656971931f * fTemp331) + ((0.26206243f * fTemp332) + ((0.000396740623f * ((fTemp112 + (((fTemp146 + (fTemp444 + (fTemp236 + fTemp520))) - fTemp427) - fTemp139)) - fTemp333)) + ((0.000518814661f * ((((fTemp367 + fTemp516) - fTemp393) - fTemp134) - fTemp334)) + (((0.000244148076f * (fTemp106 + ((fTemp201 + (fTemp238 + fTemp412)) - fTemp396))) + ((9.15555283e-05f * ((((fTemp374 + (fTemp354 + (((fTemp132 + (fTemp425 + (fTemp453 + ((fTemp423 + fTemp188) - fTemp387)))) - fTemp109) - fTemp403))) - fTemp360) - fTemp352) - fTemp114)) + ((6.10370189e-05f * (fTemp366 + ((fTemp361 + ((fTemp272 - fTemp155) - fTemp121)) - fTemp124))) + ((0.000335703604f * (fTemp389 + ((fTemp344 + (fTemp446 + (fTemp411 + (fTemp600 - fTemp205)))) - fTemp408))) + ((0.000213629566f * (((fTemp410 + (fTemp120 + (fTemp172 + (((fTemp92 + fTemp269) - fTemp200) - fTemp164)))) - fTemp119) - fTemp372)) + ((0.000457777642f * (((fTemp376 + (fTemp398 + (fTemp210 + fTemp419))) - fTemp340) - fTemp405)) + ((0.000427259132f * ((fTemp443 + (fTemp350 + (fTemp14 + (fTemp227 + fTemp368)))) - fTemp409)) + ((0.000305185094f * (((fTemp351 + (fTemp464 + (fTemp138 + (fTemp416 + fTemp385)))) - fTemp148) - fTemp136)) + ((0.000885036774f * (fTemp108 + (((((fTemp194 + fTemp237) - fTemp421) - fTemp190) - fTemp349) - fTemp170))) + ((0.00146488845f * (fTemp338 + (fTemp650 - fTemp454))) + ((0.00125125889f * (fTemp355 + (fTemp198 + (fTemp8 + (fTemp369 + fTemp220))))) + ((0.000793481246f * (fTemp384 + ((fTemp486 - fTemp358) - fTemp230))) + ((0.00100711081f * (fTemp484 - fTemp115)) + ((0.00305185094f * (((fTemp362 + fTemp506) - fTemp20) - fTemp163)) + ((0.00149540696f * ((fTemp407 + (fTemp158 + (fTemp475 + fTemp176))) - fTemp426)) + ((0.000640888698f * (fTemp89 + ((fTemp196 - fTemp207) - fTemp13))) + ((0.000610370189f * ((fTemp103 + ((fTemp422 + fTemp429) - fTemp105)) - fTemp373)) + ((0.00112918485f * ((fTemp466 + (fTemp461 - fTemp435)) - fTemp162)) + ((0.00137333293f * ((fTemp463 + (((fTemp515 - fTemp456) - fTemp225) - fTemp433)) - fTemp27)) + ((0.00164799951f * ((fTemp116 + (fTemp178 + (fTemp267 + (fTemp503 - fTemp270)))) - fTemp431)) + ((0.00228888821f * ((fTemp388 + fTemp457) - fTemp24)) + ((0.00238044374f * ((fTemp263 - fTemp171) - fTemp166)) + ((0.00180059206f * ((fTemp359 + (fTemp462 + ((fTemp400 + (fTemp495 + fTemp180)) - fTemp217))) - fTemp438)) + ((0.000701925717f * (((fTemp209 + (fTemp460 + fTemp496)) - fTemp133) - fTemp455)) + ((0.00183111057f * (((fTemp448 + fTemp262) - fTemp377) - fTemp23)) + ((0.0022583697f * (fTemp303 - fTemp22)) + ((0.00201422162f * (fTemp122 + fTemp487)) + ((0.00347911008f * (fTemp151 + fTemp174)) + ((0.00326548051f * (fTemp179 + (fTemp651 - fTemp18))) + ((0.00311288796f * (fTemp175 - fTemp191)) + ((0.00280770287f * (fTemp123 + fTemp445)) + ((0.00473036896f * (fTemp521 + fTemp286)) + ((0.00906399731f * (fTemp306 - fTemp469)) + ((0.00381481368f * ((fTemp510 + (fTemp297 - fTemp46)) - fTemp15)) + ((0.00210577715f * (fTemp424 + (fTemp381 - fTemp160))) + ((0.00186162908f * (fTemp414 + (fTemp157 + fTemp449))) + ((0.000671407208f * (fTemp476 + (fTemp234 + fTemp94))) + ((0.000732444227f * (fTemp12 + (fTemp473 + fTemp240))) + ((0.00106814783f * (fTemp168 + (fTemp470 - fTemp413))) + ((0.00143436994f * (fTemp192 + (fTemp447 + (fTemp502 + fTemp281)))) + ((0.000823999755f * (fTemp183 + (((fTemp224 + fTemp232) - fTemp415) - fTemp181))) + ((0.00152592547f * (fTemp442 + (fTemp204 + (fTemp436 + fTemp294)))) + ((0.00158696249f * (fTemp206 + fTemp357)) + ((0.00222785119f * (fTemp480 + fTemp511)) + ((0.00271614734f * (fTemp339 + fTemp253)) + ((0.00103762932f * (((fTemp29 + fTemp34) - fTemp490) - fTemp343)) + ((0.00198370311f * fTemp652) + ((0.00115970336f * ((fTemp242 + (fTemp465 + fTemp288)) - fTemp380)) + ((0.00134281442f * ((fTemp504 + fTemp33) - fTemp211)) + ((0.00302133244f * (fTemp246 + (fTemp404 + (fTemp255 + fTemp275)))) + ((0.00265511032f * (fTemp248 + fTemp276)) + ((0.00219733268f * (fTemp251 + fTemp95)) + ((0.0116885891f * (fTemp307 - fTemp304)) + (0.00350962859f * (fTemp260 + fTemp287))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000274666585f * (((((((fTemp142 + ((fTemp126 + ((fTemp653 - fTemp110) - fTemp137)) - fTemp189)) - fTemp131) - fTemp125) - fTemp394) - fTemp107) - fTemp513) - fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.492812902f * fTemp1) + ((0.0459303558f * fTemp402) + ((0.0328073986f * fTemp218) + ((0.102084413f * fTemp3) + ((0.019531846f * fTemp4) + ((0.0489516892f * fTemp5) + ((0.0150151066f * fTemp6) + ((0.0787987933f * fTemp7) + ((0.0202337727f * fTemp223) + (fTemp654 + ((0.00167851802f * fTemp356) + ((0.0104068117f * fTemp16) + ((0.00668355357f * fTemp17) + ((0.00256355479f * fTemp19) + ((0.00299081393f * fTemp185) + ((0.00268562883f * fTemp156) + ((0.00509659108f * fTemp169) + ((0.00427259132f * fTemp471) + ((0.00915555283f * fTemp279) + ((0.006469924f * fTemp280) + ((0.00216681417f * fTemp282) + ((0.00405896176f * fTemp283) + ((0.00564592425f * fTemp479) + ((0.00390636921f * fTemp35) + ((0.014679403f * fTemp42) + ((0.0205084383f * fTemp47) + ((0.0202032533f * fTemp48) + ((0.0028992584f * fTemp213) + ((0.00729392376f * fTemp296) + ((0.0117496261f * fTemp302) + ((0.0361033976f * fTemp50) + ((0.0358592495f * fTemp51) + ((0.00912503432f * fTemp52) + ((0.00445570238f * fTemp305) + ((0.0087282937f * fTemp56) + ((0.0138859218f * fTemp57) + ((0.0173345134f * fTemp508) + ((0.00851466414f * fTemp308) + ((0.0154118473f * fTemp212) + ((0.0494399853f * fTemp58) + ((0.0870082676f * fTemp59) + ((0.0612201318f * fTemp60) + ((0.00543229468f * fTemp199) + ((0.0324716941f * fTemp62) + ((0.0357371755f * fTemp63) + ((0.0336313993f * fTemp64) + ((0.0694906488f * fTemp65) + ((0.0724204257f * fTemp66) + ((0.0484328754f * fTemp67) + ((0.00375377666f * fTemp318) + ((0.0178228095f * fTemp319) + ((0.0385753959f * fTemp70) + ((0.142185733f * fTemp71) + ((0.0820032358f * fTemp72) + ((0.116916411f * fTemp326) + ((0.131656855f * fTemp73) + ((0.0473647267f * fTemp74) + ((0.119327374f * fTemp507) + ((0.177678764f * fTemp78) + ((0.161168247f * fTemp79) + ((0.0734275356f * fTemp80) + ((0.166081727f * fTemp85) + ((0.770653427f * fTemp86) + (fTemp655 + (((0.000488296151f * (fTemp101 + ((fTemp141 + (fTemp235 + fTemp216)) - fTemp390))) + ((3.05185094e-05f * (fTemp336 + (fTemp345 + (fTemp365 + ((((fTemp143 - fTemp193) - fTemp364) - fTemp420) - fTemp346))))) + ((0.000183111057f * ((fTemp399 + (fTemp145 + ((fTemp428 + (fTemp451 - fTemp195)) - fTemp100))) - fTemp341)) + ((0.000152592547f * (((((fTemp154 + (fTemp497 - fTemp239)) - fTemp347) - fTemp113) - fTemp371) - fTemp337)) + ((0.000122074038f * ((fTemp353 + (fTemp383 + (fTemp127 + (fTemp130 + (fTemp382 + (fTemp177 + fTemp656)))))) - fTemp118)) + ((0.000366222113f * (fTemp375 + (fTemp529 + ((((fTemp514 + fTemp392) - fTemp202) - fTemp93) - fTemp342)))) + ((0.00131229591f * (((fTemp226 + fTemp657) - fTemp437) - fTemp99)) + ((0.00177007355f * (fTemp140 + fTemp458)) + ((0.0025940733f * (fTemp161 + (fTemp187 + (fTemp273 - fTemp249)))) + ((0.0019531846f * (fTemp26 + (fTemp182 + fTemp41))) + ((0.00244148076f * (fTemp434 + fTemp37)) + ((0.00122074038f * (fTemp167 - fTemp493)) + ((0.00393688772f * (fTemp149 + (fTemp36 - fTemp293))) + ((0.00119022187f * (((((fTemp477 - fTemp500) - fTemp233) - fTemp397) - fTemp153) - fTemp459)) + ((0.00173955504f * (fTemp472 - fTemp482)) + ((0.000762962736f * (((fTemp186 - fTemp243) - fTemp483) - fTemp197)) + ((0.000976592302f * ((fTemp505 - fTemp203) - fTemp348)) + ((0.00204474013f * (fTemp441 - fTemp489)) + ((0.00109866634f * (fTemp439 + (fTemp289 - fTemp378))) + ((0.000854518265f * ((fTemp147 + (fTemp335 + (fTemp173 + fTemp499))) - fTemp128)) + ((0.00054933317f * (fTemp391 + (fTemp440 + fTemp386))) + ((0.00241096225f * (fTemp32 - fTemp498)) + ((0.00250251777f * (fTemp290 - fTemp406)) + ((0.00207525864f * (fTemp55 - fTemp244)) + ((0.00231940672f * (fTemp370 - fTemp252)) + ((0.00283822138f * (fTemp271 - fTemp401)) + ((0.004852443f * (fTemp274 - fTemp257)) + ((0.00671407208f * (fTemp49 - fTemp284)) + (((0.00567644276f * (fTemp43 + fTemp430)) + (0.0169682913f * (fTemp214 + fTemp144))) + (0.00555436872f * (fTemp485 - fTemp292))))))))))))))))))))))))))))))) + (0.00057985168f * (fTemp231 + (fTemp98 + (fTemp102 + ((((((fTemp316 - fTemp30) - fTemp268) - fTemp452) - fTemp418) - fTemp478) - fTemp97))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.170537427f * fTemp223) + ((0.00433362834f * fTemp204) + ((0.0051576281f * fTemp447) + ((0.00418103579f * fTemp387) + ((0.0028992584f * fTemp415) + ((0.00491348002f * fTemp147) + ((0.00497451704f * fTemp211) + ((0.00369273964f * fTemp165) + ((0.00170903653f * fTemp171) + ((0.00463881344f * fTemp10) + ((0.00378429517f * fTemp363) + ((0.0038758507f * fTemp462) + ((0.00375377666f * fTemp206) + ((0.00274666585f * fTemp126) + ((0.00238044374f * fTemp103) + ((0.00244148076f * fTemp486) + ((0.00253303628f * fTemp452) + ((0.00692770164f * fTemp133) + ((0.00726340525f * fTemp454) + ((0.00537125766f * fTemp472) + ((0.00601214636f * fTemp90) + ((0.00708029419f * fTemp123) + ((0.00494399853f * fTemp18) + ((0.00503555406f * fTemp19) + ((0.0045167394f * fTemp187) + ((0.00415051728f * fTemp20) + ((0.00384533219f * fTemp179) + ((0.00250251777f * fTemp122) + ((0.00424207281f * fTemp26) + ((0.00427259132f * fTemp27) + ((0.00457777642f * fTemp162) + ((0.00445570238f * fTemp373) + ((0.00347911008f * fTemp148) + ((0.000854518265f * fTemp393) + ((0.000732444227f * fTemp112) + ((0.000823999755f * fTemp390) + ((0.00198370311f * fTemp111) + ((0.00469985045f * fTemp238) + ((0.00875881221f * fTemp239) + ((0.0115665151f * fTemp504) + (fTemp644 + ((0.00405896176f * fTemp416) + ((0.00720236823f * fTemp470) + ((0.00717184972f * fTemp244) + ((0.00573747978f * fTemp247) + ((0.00701925717f * fTemp487) + ((0.00732444227f * fTemp516) + ((0.00787377544f * fTemp216) + ((0.00476088747f * fTemp386) + ((0.00363170262f * fTemp457) + ((0.00561540574f * fTemp491) + ((0.00430310983f * fTemp526) + ((0.00659199804f * fTemp250) + ((0.00778221991f * fTemp257) + ((0.0108645894f * fTemp258) + ((0.00506607257f * fTemp259) + ((0.0426343568f * fTemp28) + ((0.0688497573f * fTemp29) + ((0.0444349498f * fTemp385) + ((0.00360118411f * fTemp30) + ((0.0147099216f * fTemp274) + ((0.00762962736f * fTemp276) + ((0.0058290353f * fTemp488) + ((0.00833155308f * fTemp471) + ((0.0160222184f * fTemp279) + ((0.0232856236f * fTemp280) + ((0.0274666585f * fTemp281) + ((0.0195013285f * fTemp215) + ((0.0423902087f * fTemp286) + ((0.0762657523f * fTemp287) + ((0.0538346507f * fTemp288) + ((0.0101931822f * fTemp34) + ((0.0174260698f * fTemp441) + ((0.022705771f * fTemp485) + ((0.0582598336f * fTemp37) + ((0.0829493105f * fTemp38) + ((0.0756248683f * fTemp39) + ((0.0953093022f * fTemp46) + ((0.13241981f * fTemp47) + ((0.125492111f * fTemp48) + ((0.0155949583f * fTemp49) + ((0.0237434004f * fTemp297) + ((0.0792565718f * fTemp298) + ((0.206762895f * fTemp159) + ((0.376049072f * fTemp303) + ((0.33710745f * fTemp304) + ((0.0974455997f * fTemp55) + ((0.820856333f * fTemp56) + (fTemp57 + ((0.59163183f * fTemp144) + ((0.0333567299f * fTemp508) + ((0.0241706595f * fTemp308) + ((0.00393688772f * fTemp309) + ((0.00140385143f * ((fTemp398 + fTemp490) - fTemp513)) + ((0.0022583697f * ((fTemp443 + (fTemp356 + (fTemp369 + fTemp278))) - fTemp231)) + ((0.00277718436f * ((fTemp446 + (fTemp23 + fTemp339)) - fTemp98)) + ((0.000335703604f * ((fTemp139 + ((((fTemp72 + fTemp331) - fTemp320) - fTemp212) - fTemp105)) - fTemp341)) + ((0.00143436994f * ((fTemp125 + (fTemp420 + (fTemp15 + (fTemp141 + fTemp494)))) - fTemp345)) + ((0.00219733268f * ((fTemp142 + (fTemp412 + fTemp299)) - fTemp114)) + ((0.00189214759f * ((fTemp442 + fTemp348) - fTemp371)) + ((0.00100711081f * (((fTemp168 + fTemp193) - fTemp529) - fTemp118)) + ((0.000213629566f * (((fTemp7 + (fTemp74 + ((fTemp329 - fTemp2) - fTemp402))) - fTemp232) - fTemp353)) + ((9.15555283e-05f * (fTemp361 + (fTemp354 + (((fTemp221 + (fTemp5 + (fTemp65 + fTemp73))) - fTemp436) - fTemp413)))) + ((0.000518814661f * (fTemp389 + (fTemp132 - fTemp12))) + ((0.00115970336f * (fTemp645 - fTemp375)) + ((0.00280770287f * (fTemp396 + (fTemp451 + (fTemp455 + (fTemp217 + fTemp449))))) + ((0.00326548051f * (fTemp399 + (fTemp97 + fTemp197))) + ((0.000793481246f * (fTemp403 + (fTemp230 - fTemp349))) + ((0.00112918485f * ((fTemp340 + fTemp59) - fTemp130)) + ((0.00262459181f * ((fTemp463 + fTemp483) - fTemp131)) + ((0.00338755455f * ((fTemp428 + (fTemp207 + fTemp489)) - fTemp405)) + ((0.00286873989f * ((fTemp355 + (fTemp201 + fTemp460)) - fTemp409)) + ((0.000946073793f * (fTemp102 + (fTemp275 + fTemp199))) + ((0.00152592547f * (fTemp119 + (fTemp100 + (fTemp202 + (fTemp184 + (fTemp473 + fTemp203)))))) + ((0.003234962f * (fTemp108 + fTemp198)) + ((0.00439466536f * (fTemp99 + (fTemp344 + (fTemp188 + fTemp468)))) + ((0.00473036896f * (fTemp338 + fTemp24)) + ((0.0019531846f * ((fTemp458 + fTemp474) - fTemp145)) + ((0.00671407208f * (fTemp109 + fTemp120)) + ((0.000457777642f * (fTemp70 - fTemp150)) + ((0.0019226661f * (fTemp155 + (fTemp464 + (fTemp367 + fTemp200)))) + ((0.00204474013f * (fTemp382 + fTemp104)) + ((0.00216681417f * (fTemp427 + (fTemp140 + (fTemp229 + (fTemp418 + (fTemp227 + fTemp395)))))) + ((0.00213629566f * (fTemp115 + (fTemp191 + fTemp93))) + ((0.00271614734f * (fTemp163 + fTemp351)) + ((0.00317392498f * (fTemp156 + (fTemp453 + fTemp252))) + ((0.00350962859f * (fTemp426 + (fTemp151 + (fTemp411 + (fTemp347 + fTemp400))))) + ((0.00344859157f * (fTemp89 + fTemp210)) + ((0.00396740623f * (fTemp425 + fTemp423)) + ((0.00402844325f * (fTemp431 + (fTemp149 + fTemp8))) + ((0.00454725791f * (fTemp434 + fTemp11)) + ((0.00366222113f * (fTemp166 + fTemp185)) + ((0.00186162908f * (fTemp364 + fTemp177)) + ((0.00283822138f * (fTemp172 + (fTemp167 + fTemp433))) + ((0.00332651753f * (fTemp359 + fTemp639)) + ((0.00314340647f * (fTemp182 + fTemp467)) + ((0.000915555283f * (fTemp459 + (fTemp289 - fTemp499))) + ((0.00500503555f * (fTemp342 + fTemp251)) + ((0.00436414685f * (fTemp521 + (fTemp493 + (fTemp277 - fTemp270)))) + ((0.00155644398f * (fTemp17 + fTemp60)) + ((0.0012817774f * (fTemp16 + (fTemp158 + fTemp391))) + ((0.00125125889f * (fTemp432 + fTemp357)) + ((0.00210577715f * (fTemp14 + fTemp192)) + ((0.00164799951f * (fTemp13 + (fTemp498 - fTemp196))) + ((0.00408948027f * (fTemp195 + fTemp461)) + ((0.00173955504f * ((fTemp335 + (fTemp495 + fTemp143)) - fTemp478)) + ((0.00302133244f * (fTemp228 + (fTemp414 + fTemp514))) + ((0.00299081393f * (fTemp153 + (fTemp465 - fTemp94))) + ((0.00137333293f * (fTemp183 + fTemp444)) + ((0.00149540696f * (fTemp437 + fTemp358)) + ((0.00311288796f * (fTemp205 + fTemp116)) + ((0.0025940733f * (fTemp480 + fTemp224)) + ((0.00234992523f * (fTemp343 + (fTemp208 + (fTemp381 + fTemp226)))) + ((0.00177007355f * (fTemp450 + fTemp377)) + ((0.000122074038f * (fTemp128 + (fTemp501 + (fTemp75 - fTemp315)))) + ((0.000488296151f * ((fTemp68 - fTemp218) - fTemp475)) + ((0.00054933317f * (fTemp378 + (fTemp379 + ((fTemp67 + (fTemp316 + fTemp69)) - fTemp190)))) + ((0.00305185094f * (fTemp225 + (fTemp194 + fTemp496))) + ((0.000701925717f * (fTemp96 + fTemp520)) + ((0.00390636921f * (fTemp173 + fTemp266)) + ((0.00106814783f * (fTemp406 + fTemp249)) + ((0.00122074038f * (fTemp300 - fTemp233)) + ((0.000762962736f * ((fTemp169 - fTemp236) - fTemp235)) + ((0.000396740623f * (fTemp237 + (fTemp3 + fTemp332))) + ((0.0108035523f * (fTemp240 + fTemp241)) + ((0.00546281319f * (fTemp243 + fTemp506)) + ((0.0122684408f * (fTemp41 - fTemp497)) + ((0.0183721427f * (fTemp273 - fTemp429)) + ((0.0513931699f * (fTemp40 - fTemp290)) + (0.00698873866f * (fTemp272 - fTemp362))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0110477004f * fTemp222) + (fTemp646 + ((0.00857570115f * fTemp410) + ((0.00292977691f * fTemp101) + ((0.00180059206f * fTemp334) + ((0.00158696249f * fTemp333) + (((0.00335703604f * fTemp419) + ((0.00222785119f * fTemp92) + ((0.0101321451f * fTemp175) + ((0.0114749596f * fTemp445) + ((0.0106204413f * fTemp404) + ((0.0149235511f * fTemp253) + ((0.0198065136f * fTemp254) + ((0.0151371807f * fTemp255) + ((0.00674459059f * fTemp256) + ((0.0116275521f * fTemp261) + ((0.0126041444f * fTemp262) + ((0.0150761437f * fTemp263) + ((0.00714133121f * fTemp264) + ((0.0115359966f * fTemp265) + ((0.0126956999f * fTemp180) + ((0.0178838465f * fTemp268) + ((0.0256355479f * fTemp269) + ((0.0405590981f * fTemp271) + ((0.0396435447f * fTemp370) + ((0.0141300699f * fTemp186) + ((0.0172734763f * fTemp31) + (fTemp534 + ((0.0140690329f * fTemp503) + ((0.0135502182f * fTemp32) + ((0.0153202917f * fTemp33) + ((0.00686666463f * fTemp492) + ((0.0200811792f * fTemp282) + ((0.0588702038f * fTemp283) + ((0.0925016031f * fTemp477) + ((0.101565599f * fTemp510) + ((0.0762047172f * fTemp284) + ((0.0189519953f * fTemp285) + ((0.0754112378f * fTemp505) + ((0.0874965638f * fTemp511) + ((0.0851771608f * fTemp292) + ((0.0610065013f * fTemp294) + ((0.0270088818f * fTemp484) + ((0.00817896053f * fTemp479) + ((0.0152592547f * fTemp35) + ((0.0123294778f * fTemp36) + ((0.0380870998f * fTemp42) + ((0.0874660462f * fTemp214) + ((0.130680263f * fTemp43) + ((0.128452405f * fTemp44) + ((0.0487380587f * fTemp45) + ((0.110446483f * fTemp295) + ((0.193365276f * fTemp213) + ((0.167332992f * fTemp296) + ((0.0507522821f * fTemp430) + ((0.0862147883f * fTemp301) + ((0.091830194f * fTemp302) + ((0.238044381f * fTemp50) + ((0.231452376f * fTemp51) + ((0.190832242f * fTemp52) + ((0.0219733268f * fTemp53) + ((0.075075537f * fTemp305) + ((0.522843122f * fTemp306) + ((0.871761203f * fTemp307) + ((0.636402488f * fTemp54) + ((0.0177617725f * fTemp509) + ((0.0307321399f * fTemp310) + ((0.0311288796f * fTemp311) + ((0.0230109561f * fTemp312) + ((0.000610370189f * fTemp324) + (((0.00131229591f * (fTemp336 + fTemp647)) + ((0.000152592547f * (fTemp106 + ((fTemp421 + ((fTemp77 + (fTemp82 + fTemp85)) - fTemp135)) - fTemp380))) + ((0.00057985168f * (fTemp337 + (fTemp346 + (fTemp136 - fTemp435)))) + ((0.00256355479f * (fTemp352 + (fTemp360 - fTemp146))) + ((0.00231940672f * (fTemp365 + ((fTemp260 - fTemp388) - fTemp161))) + ((0.00207525864f * (fTemp366 - fTemp392)) + ((0.00146488845f * (fTemp113 + (fTemp384 - fTemp469))) + ((0.000640888698f * (fTemp374 + (fTemp152 - fTemp476))) + ((0.000366222113f * (fTemp124 + ((fTemp87 - fTemp71) - fTemp515))) + ((3.05185094e-05f * (fTemp383 + (fTemp62 + (((fTemp322 + (fTemp76 + (fTemp327 - fTemp80))) - fTemp319) - fTemp63)))) + ((0.000671407208f * (fTemp372 + ((fTemp325 - fTemp4) - fTemp138))) + ((6.10370189e-05f * (fTemp394 + ((((fTemp79 + (fTemp81 + (fTemp84 + fTemp328))) - fTemp64) - fTemp6) - fTemp61))) + ((0.00247199927f * (fTemp397 - fTemp127)) + ((0.00341807306f * (fTemp134 + (fTemp267 - fTemp439))) + ((0.00183111057f * (fTemp408 + ((fTemp176 - fTemp157) - fTemp170))) + ((0.00622577593f * (fTemp376 + (fTemp248 - fTemp246))) + ((0.0067751091f * (fTemp417 - fTemp350)) + ((0.00296029542f * (fTemp401 - fTemp164)) + ((0.00268562883f * ((((fTemp174 - fTemp448) - fTemp456) - fTemp407) - fTemp189)) + ((0.00167851802f * (fTemp502 - fTemp482)) + ((0.0035401471f * ((fTemp422 - fTemp110) - fTemp137)) + ((0.000305185094f * (fTemp129 + ((((fTemp86 - fTemp0) - fTemp219) - fTemp318) - fTemp66))) + ((0.00109866634f * (fTemp500 - fTemp160)) + ((0.000274666585f * (fTemp466 + (fTemp91 + fTemp314))) + ((0.00201422162f * (fTemp234 - fTemp154)) + ((0.082064271f * (fTemp291 + fTemp293)) + ((0.000183111057f * (fTemp323 + (fTemp507 + (fTemp78 + fTemp83)))) + (0.000244148076f * (fTemp58 + (fTemp220 + (fTemp321 + (fTemp326 + fTemp1)))))))))))))))))))))))))))))))) + (0.00241096225f * (fTemp107 + ((fTemp313 - fTemp22) - fTemp438)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00134281442f * fTemp88))))))))))) : (iSlow14 ? (iSlow16 ? (((0.0313425101f * fTemp221) + (fTemp632 + ((0.00436414685f * fTemp432) + ((0.00506607257f * fTemp121) + ((0.00778221991f * fTemp150) + ((0.00622577593f * fTemp100) + ((0.00326548051f * fTemp340) + ((0.000823999755f * fTemp360) + ((0.00125125889f * fTemp345) + ((0.000885036774f * fTemp337) + ((0.00396740623f * fTemp416) + ((0.00552385021f * fTemp470) + ((0.00488296151f * fTemp244) + ((0.00628681295f * fTemp526) + ((0.0067751091f * fTemp174) + ((0.00369273964f * fTemp175) + ((0.00756859034f * fTemp257) + ((0.00939970091f * fTemp258) + ((0.00900296029f * fTemp259) + ((0.00781273842f * fTemp497) + ((0.0148014771f * fTemp429) + ((0.0227973275f * fTemp180) + ((0.0267647337f * fTemp362) + ((0.0221259203f * fTemp266) + ((0.0153508103f * fTemp506) + ((0.00793481246f * fTemp267) + ((0.0100100711f * fTemp29) + ((0.00753807183f * fTemp385) + ((0.012878811f * fTemp186) + ((0.0196539201f * fTemp188) + ((0.0199285876f * fTemp30) + ((0.0165715516f * fTemp31) + ((0.00704977568f * fTemp95) + ((0.0345774703f * fTemp492) + ((0.0576189458f * fTemp275) + ((0.0544145033f * fTemp276) + (fTemp620 + ((0.0280770287f * fTemp279) + ((0.0419324338f * fTemp280) + ((0.0318308063f * fTemp281) + ((0.00689718314f * fTemp215) + ((0.0113528855f * fTemp283) + ((0.0331736207f * fTemp477) + ((0.0190435499f * fTemp510) + ((0.0121158483f * fTemp505) + ((0.0539567247f * fTemp511) + ((0.0946379006f * fTemp291) + ((0.120914333f * fTemp292) + ((0.110782191f * fTemp293) + ((0.0657673851f * fTemp294) + ((0.0126956999f * fTemp479) + ((0.0741904974f * fTemp35) + ((0.0998870805f * fTemp36) + ((0.0992461964f * fTemp37) + ((0.0840174556f * fTemp38) + ((0.0859401226f * fTemp39) + ((0.0791955292f * fTemp40) + ((0.0643024966f * fTemp41) + ((0.0437025055f * fTemp42) + ((0.0477004312f * fTemp213) + ((0.115451522f * fTemp296) + ((0.164006472f * fTemp430) + ((0.168065429f * fTemp297) + ((0.0569475405f * fTemp298) + ((0.0739768669f * fTemp50) + ((0.137241736f * fTemp51) + ((0.144383073f * fTemp52) + ((0.0609149449f * fTemp53) + ((0.0997650102f * fTemp304) + ((0.102572709f * fTemp305) + ((0.120303966f * fTemp306) + ((0.0705893114f * fTemp307) + ((0.0643940568f * fTemp54) + ((0.0390942097f * fTemp55) + ((0.0217596982f * fTemp56) + ((0.0951261967f * fTemp308) + ((0.419354826f * fTemp309) + ((0.677297294f * fTemp509) + ((0.521103561f * fTemp310) + ((0.0189825129f * fTemp60) + ((0.0310983621f * fTemp199) + ((0.0234687347f * fTemp314) + ((0.0117496261f * fTemp315) + (((((0.0028992584f * ((((fTemp265 - fTemp262) - fTemp110) - fTemp469) - fTemp375)) + ((0.00177007355f * ((fTemp246 + fTemp491) - fTemp125)) + ((0.00497451704f * (fTemp520 - fTemp408)) + (((0.00219733268f * (fTemp102 - fTemp458)) + ((0.00347911008f * (fTemp119 - fTemp198)) + ((0.00604266487f * (fTemp370 - fTemp132)) + ((0.00274666585f * ((fTemp228 - fTemp206) - fTemp438)) + ((0.00430310983f * ((fTemp471 - fTemp406) - fTemp164)) + ((0.000762962736f * (fTemp261 - fTemp149)) + ((0.00054933317f * (fTemp350 - fTemp14)) + ((0.003234962f * (((fTemp256 + fTemp61) - fTemp210) - fTemp23)) + ((0.0042115543f * (fTemp229 + (fTemp214 - fTemp171))) + ((0.00231940672f * ((fTemp268 - fTemp419) - fTemp407)) + ((0.000640888698f * ((fTemp6 - fTemp5) - fTemp104)) + ((0.00204474013f * (fTemp271 - fTemp247)) + ((0.00454725791f * (fTemp270 - fTemp457)) + (0.00573747978f * (fTemp260 - fTemp487))))))))))))))) + (0.000457777642f * (fTemp389 + fTemp446)))))) + (0.000305185094f * (((fTemp143 - fTemp227) - fTemp112) - fTemp365))) + (0.00140385143f * (fTemp352 - fTemp437))) + (0.000427259132f * (fTemp106 - fTemp367)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0200506616f * fTemp7) + ((1.00003052f * fTemp222) + ((0.115573592f * fTemp223) + ((0.00851466414f * fTemp447) + ((0.00845362712f * fTemp493) + ((0.00750755332f * fTemp194) + ((0.00433362834f * fTemp460) + ((0.00183111057f * fTemp141) + ((0.000335703604f * fTemp147) + ((0.0038758507f * fTemp456) + ((0.00457777642f * fTemp226) + ((0.00418103579f * fTemp435) + (fTemp633 + ((0.00329599902f * fTemp105) + ((0.00366222113f * fTemp475) + ((0.00469985045f * fTemp466) + ((0.00521866512f * fTemp358) + ((0.000915555283f * fTemp450) + ((0.00357066561f * fTemp343) + ((0.00238044374f * fTemp480) + ((0.00216681417f * fTemp489) + ((0.00122074038f * fTemp483) + ((0.00222785119f * fTemp192) + ((0.00280770287f * fTemp472) + ((0.00408948027f * fTemp359) + ((0.00262459181f * fTemp162) + ((0.00625629444f * fTemp382) + ((0.0083925901f * fTemp155) + ((0.00885036774f * fTemp420) + ((0.00384533219f * fTemp145) + ((0.00567644276f * fTemp417) + ((0.00717184972f * fTemp410) + ((0.00674459059f * fTemp376) + ((0.00241096225f * fTemp139) + ((0.00405896176f * fTemp409) + ((0.00103762932f * fTemp405) + ((0.000610370189f * fTemp127) + ((0.00659199804f * fTemp176) + ((0.00610370189f * fTemp232) + ((0.00662251655f * fTemp496) + ((0.006469924f * fTemp461) + ((0.00546281319f * fTemp400) + ((0.00643940549f * fTemp449) + ((0.00692770164f * fTemp495) + ((0.00595110934f * fTemp369) + ((0.00308236945f * fTemp94) + ((0.00344859157f * fTemp440) + ((0.0054933317f * fTemp502) + ((0.00463881344f * fTemp237) + ((0.00299081393f * fTemp242) + (fTemp634 + ((0.00866725668f * fTemp516) + ((0.0112308115f * fTemp216) + ((0.0124210333f * fTemp386) + ((0.0118717002f * fTemp423) + ((0.00946073793f * fTemp465) + ((0.000793481246f * fTemp445) + ((0.00466933195f * fTemp248) + ((0.00607318338f * fTemp249) + ((0.00766014587f * fTemp250) + ((0.0123905148f * fTemp252) + ((0.0151676992f * fTemp401) + ((0.0168462172f * fTemp404) + ((0.0147404401f * fTemp253) + ((0.00427259132f * fTemp263) + ((0.00292977691f * fTemp264) + ((0.0294198431f * fTemp272) + ((0.0416577645f * fTemp273) + ((0.0456862077f * fTemp274) + ((0.043794062f * fTemp169) + ((0.0314035453f * fTemp32) + ((0.0172429588f * fTemp501) + ((0.0157780703f * fTemp488) + ((0.0220038462f * fTemp468) + ((0.0177617725f * fTemp282) + ((0.00564592425f * fTemp284) + ((0.0246589556f * fTemp285) + ((0.0245979186f * fTemp286) + ((0.0254524369f * fTemp287) + ((0.0249031037f * fTemp288) + ((0.0242011789f * fTemp289) + ((0.0137333293f * fTemp290) + ((0.0645771697f * fTemp34) + ((0.0832239762f * fTemp441) + ((0.0451063588f * fTemp485) + ((0.0280159917f * fTemp43) + ((0.0240180679f * fTemp44) + (fTemp635 + ((0.0537430942f * fTemp46) + ((0.0579241328f * fTemp47) + ((0.0454725809f * fTemp48) + (fTemp636 + ((0.00503555406f * fTemp295) + ((0.0822779015f * fTemp299) + ((0.165807068f * fTemp300) + ((0.147465438f * fTemp301) + ((0.0425122827f * fTemp302) + ((0.00823999755f * fTemp159) + ((0.0134281442f * fTemp57) + ((0.0993377492f * fTemp144) + ((0.122470781f * fTemp508) + ((0.105075225f * fTemp311) + ((0.789117098f * fTemp312) + ((0.624042511f * fTemp313) + ((0.191625714f * fTemp212) + ((0.0365611762f * fTemp58) + ((0.00201422162f * fTemp59) + (((0.000183111057f * (fTemp513 + (((fTemp436 + fTemp321) - fTemp390) - fTemp231))) + ((3.05185094e-05f * (fTemp333 + (fTemp101 + (((fTemp62 + (fTemp66 + ((fTemp70 + (fTemp72 + (fTemp135 + (fTemp74 + ((fTemp507 + (fTemp78 + (fTemp85 + fTemp553))) - fTemp76))))) - fTemp68))) - fTemp342) - fTemp341)))) + (((0.000274666585f * (fTemp107 + fTemp220)) + ((0.000244148076f * (fTemp336 + ((fTemp319 + fTemp320) - fTemp124))) + ((0.00149540696f * ((fTemp374 + fTemp12) - fTemp114)) + ((0.00167851802f * (fTemp366 + fTemp278)) + ((0.00271614734f * (fTemp371 + fTemp115)) + ((0.00302133244f * (fTemp113 + fTemp148)) + ((0.00250251777f * (fTemp118 + (fTemp394 + fTemp129))) + ((0.000488296151f * (fTemp346 + ((fTemp403 - fTemp172) - fTemp353))) + ((0.00057985168f * ((((fTemp152 + fTemp63) - fTemp338) - fTemp361) - fTemp383)) + ((0.00109866634f * (fTemp354 + (fTemp478 + fTemp96))) + ((0.00213629566f * (fTemp372 + (fTemp133 + fTemp411))) + ((0.00305185094f * (fTemp529 + fTemp10)) + ((0.00119022187f * (fTemp396 + fTemp183)) + ((0.000854518265f * (fTemp399 + (fTemp191 + (fTemp90 + (fTemp514 + fTemp64))))) + ((0.000396740623f * (fTemp130 + (fTemp131 + (fTemp351 - fTemp413)))) + ((0.00247199927f * (fTemp134 + fTemp235)) + ((0.00439466536f * (fTemp136 + fTemp182)) + ((0.000213629566f * ((fTemp451 + fTemp65) - fTemp393)) + ((0.00332651753f * ((fTemp17 + fTemp379) - fTemp142)) + ((0.00268562883f * ((fTemp474 + fTemp422) - fTemp108)) + ((0.00180059206f * ((fTemp426 + (fTemp13 + (fTemp181 + fTemp154))) - fTemp99)) + ((0.001617481f * (fTemp355 + fTemp234)) + ((0.00445570238f * (fTemp384 + (fTemp498 + fTemp111))) + ((0.00296029542f * (fTemp109 + (fTemp439 + fTemp91))) + ((0.00164799951f * (fTemp120 + (fTemp195 + fTemp348))) + ((0.00198370311f * ((fTemp373 + fTemp335) - fTemp344)) + ((0.00411999878f * fTemp637) + ((0.00186162908f * (fTemp140 + (fTemp19 + (fTemp521 + fTemp504)))) + ((0.00152592547f * (fTemp161 + (fTemp428 + (fTemp177 + fTemp459)))) + ((0.00173955504f * (fTemp163 + fTemp452)) + ((0.00189214759f * (fTemp156 + (fTemp418 + fTemp638))) + ((0.00112918485f * (fTemp97 + fTemp476)) + ((0.000976592302f * (fTemp89 + fTemp103)) + ((0.00134281442f * (fTemp425 + (fTemp443 + (fTemp442 + (fTemp209 - fTemp421))))) + ((0.00317392498f * (fTemp27 + fTemp639)) + ((0.00314340647f * (fTemp431 + fTemp380)) + ((0.00283822138f * (fTemp26 + (fTemp166 + (fTemp137 + (fTemp467 + (fTemp378 + fTemp412)))))) + ((0.00256355479f * (fTemp24 + (fTemp167 + (fTemp187 + fTemp239)))) + ((0.00265511032f * (fTemp434 + ((fTemp208 + fTemp203) - fTemp424))) + ((0.00207525864f * (fTemp170 + (fTemp205 + fTemp241))) + ((0.00146488845f * (fTemp364 + (fTemp455 + fTemp391))) + ((0.00106814783f * (fTemp146 - fTemp165)) + ((0.00311288796f * (fTemp22 + (fTemp217 + (fTemp236 + fTemp255)))) + ((0.00170903653f * (fTemp122 + fTemp128)) + ((0.0025940733f * (fTemp151 + (fTemp189 + (fTemp433 + fTemp454)))) + ((0.00350962859f * (fTemp179 + (fTemp453 + (fTemp92 + fTemp238)))) + ((0.00338755455f * (fTemp20 + (fTemp356 + fTemp444))) + ((0.00115970336f * (fTemp18 + fTemp200)) + ((0.00143436994f * (fTemp230 + fTemp482)) + ((0.000946073793f * (fTemp463 + (fTemp196 + (fTemp398 + fTemp515)))) + ((0.00372325815f * (fTemp16 + fTemp160)) + ((0.000366222113f * (fTemp15 - fTemp211)) + ((0.00100711081f * ((fTemp202 + fTemp158) - fTemp414)) + ((0.0019226661f * (fTemp168 + (fTemp347 + fTemp415))) + ((0.00234992523f * (fTemp153 + fTemp184)) + ((0.00228888821f * (fTemp197 + fTemp462)) + ((0.00158696249f * (fTemp201 + (fTemp126 + fTemp33))) + ((0.0012817774f * (fTemp93 + fTemp157)) + ((0.000671407208f * (fTemp486 + fTemp640)) + ((0.00244148076f * (fTemp207 + fTemp387)) + ((0.0035401471f * (fTemp116 + fTemp303)) + ((0.00277718436f * (fTemp388 + fTemp499)) + ((0.00320444349f * (fTemp339 + (fTemp11 + (fTemp8 + fTemp473)))) + ((0.00335703604f * (fTemp363 + fTemp349)) + ((0.00473036896f * (fTemp377 + fTemp500)) + ((0.00527970213f * (fTemp138 + fTemp448)) + ((0.00460829493f * fTemp641) + ((0.00210577715f * (fTemp173 + fTemp240)) + ((0.00601214636f * (fTemp224 + fTemp397)) + ((0.00787377544f * (fTemp204 + fTemp484)) + ((0.00720236823f * (fTemp357 + fTemp395)) + ((0.00949125644f * fTemp642) + ((0.00891140476f * (fTemp503 - fTemp28)) + ((0.000122074038f * (fTemp80 + fTemp82)) + (6.10370189e-05f * ((fTemp322 + (fTemp3 + (fTemp71 + (fTemp323 + (fTemp324 + (fTemp325 + (fTemp326 + ((fTemp83 + (fTemp86 + (fTemp1 + (fTemp329 + fTemp331)))) - fTemp402)))))))) - fTemp316)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (9.15555283e-05f * ((((fTemp318 + (fTemp218 + (fTemp79 + (fTemp2 + fTemp643)))) - fTemp4) - fTemp67) - fTemp334))))) + (0.000152592547f * (fTemp88 + (((fTemp464 + (fTemp81 - fTemp269)) - fTemp123) - fTemp98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.000183111057f * fTemp219) + ((0.627094328f * fTemp223) + ((0.00762962736f * fTemp447) + ((0.00750755332f * fTemp493) + ((0.0035401471f * fTemp368) + ((0.00375377666f * fTemp173) + ((0.00436414685f * fTemp154) + ((0.00384533219f * fTemp181) + ((0.00509659108f * fTemp200) + (fTemp628 + ((0.00238044374f * fTemp421) + ((0.00216681417f * fTemp105) + ((0.00350962859f * fTemp473) + ((0.00207525864f * fTemp475) + ((0.00299081393f * fTemp138) + ((0.00219733268f * fTemp208) + ((0.00177007355f * fTemp453) + ((0.00277718436f * fTemp8) + ((0.00222785119f * fTemp339) + ((0.00109866634f * fTemp388) + ((0.000244148076f * fTemp483) + ((0.00390636921f * fTemp348) + ((0.00378429517f * fTemp442) + ((0.00320444349f * fTemp157) + ((0.00253303628f * fTemp398) + ((0.00527970213f * fTemp201) + ((0.0134281442f * fTemp454) + ((0.0169072542f * fTemp472) + ((0.0170598477f * fTemp433) + ((0.0132450331f * fTemp13) + ((0.0109866634f * fTemp123) + ((0.0122074038f * fTemp350) + ((0.0108035523f * fTemp342) + ((0.00769066438f * fTemp463) + ((0.00308236945f * fTemp22) + ((0.00433362834f * fTemp23) + ((0.006469924f * fTemp172) + ((0.00424207281f * fTemp351) + ((0.00396740623f * fTemp496) + ((0.00430310983f * fTemp498) + ((0.00531022064f * fTemp494) + ((0.00418103579f * fTemp449) + ((0.00360118411f * fTemp111) + ((0.00366222113f * fTemp203) + ((0.00134281442f * fTemp436) + ((0.0104678487f * fTemp504) + ((0.0111697745f * fTemp241) + ((0.009704886f * fTemp242) + ((0.00744651631f * fTemp412) + ((0.00561540574f * fTemp143) + ((0.000885036774f * fTemp487) + ((0.00479140598f * fTemp216) + ((0.00622577593f * fTemp386) + ((0.00805688649f * fTemp423) + ((0.0087282937f * fTemp465) + (fTemp629 + ((0.00411999878f * fTemp174) + ((0.0042115543f * fTemp175) + ((0.00393688772f * fTemp445) + ((0.00292977691f * fTemp249) + ((0.00463881344f * fTemp251) + ((0.00555436872f * fTemp28) + ((0.0143436994f * fTemp29) + ((0.0266426597f * fTemp385) + ((0.0294198431f * fTemp270) + ((0.024323253f * fTemp271) + ((0.0216681417f * fTemp370) + ((0.0163579211f * fTemp186) + ((0.0114139225f * fTemp272) + ((0.0207525864f * fTemp273) + ((0.0202642903f * fTemp274) + ((0.0190130323f * fTemp169) + ((0.0154118473f * fTemp32) + ((0.0093691824f * fTemp278) + ((0.0138248848f * fTemp501) + ((0.0197149571f * fTemp488) + ((0.0313119926f * fTemp471) + ((0.0399792492f * fTemp279) + ((0.0479140617f * fTemp280) + ((0.0486159846f * fTemp281) + ((0.0403759889f * fTemp215) + ((0.0220954008f * fTemp468) + ((0.00619525742f * fTemp282) + ((0.0653401315f * fTemp288) + ((0.07849361f * fTemp289) + ((0.0378124341f * fTemp290) + ((0.0140995514f * fTemp479) + ((0.0397961363f * fTemp35) + ((0.0545365773f * fTemp36) + ((0.0476699136f * fTemp37) + ((0.0599688701f * fTemp38) + ((0.0578325763f * fTemp39) + ((0.0518204309f * fTemp40) + ((0.00952177495f * fTemp41) + ((0.0883510858f * fTemp47) + ((0.117038481f * fTemp48) + ((0.0577715375f * fTemp49) + ((0.0257271044f * fTemp304) + ((0.0761131644f * fTemp305) + ((0.172643214f * fTemp56) + ((0.813074112f * fTemp57) + (fTemp144 + ((0.235847041f * fTemp508) + ((0.0650654659f * fTemp308) + ((0.0191045869f * fTemp309) + ((0.00057985168f * fTemp199) + ((0.00262459181f * ((fTemp395 - fTemp113) - fTemp98)) + ((0.00234992523f * (fTemp237 - fTemp101)) + ((0.001617481f * (((fTemp502 - fTemp227) - fTemp170) - fTemp107)) + ((0.00112918485f * (fTemp341 + (fTemp114 + (fTemp355 + fTemp373)))) + ((0.00228888821f * (fTemp106 + ((fTemp148 + fTemp515) - fTemp118))) + ((0.0025940733f * (fTemp337 + ((fTemp431 + fTemp248) - fTemp89))) + ((0.00103762932f * ((fTemp396 + fTemp24) - fTemp124)) + ((0.00247199927f * (fTemp262 - fTemp354)) + ((0.00119022187f * (fTemp233 - fTemp529)) + ((0.00054933317f * (fTemp125 + ((fTemp443 + fTemp59) - fTemp425))) + ((0.000823999755f * (fTemp399 + (fTemp393 - fTemp486))) + ((0.0022583697f * ((fTemp26 + fTemp146) - fTemp372)) + ((0.00854518265f * (fTemp243 - fTemp131)) + ((0.0051576281f * (fTemp239 - fTemp136)) + ((0.00457777642f * (fTemp102 + fTemp391)) + ((0.00784325693f * fTemp630) + ((0.00921658985f * (fTemp119 - fTemp432)) + ((0.00280770287f * (fTemp99 + fTemp377)) + ((0.00772118289f * ((fTemp90 + fTemp204) - fTemp410)) + ((0.00494399853f * (fTemp109 - fTemp161)) + ((0.00503555406f * (fTemp120 + fTemp514)) + ((0.00335703604f * (fTemp344 + fTemp363)) + ((0.00115970336f * (fTemp100 + fTemp381)) + ((0.00592059083f * (fTemp33 - fTemp155)) + ((0.00442518387f * ((fTemp93 + (fTemp392 + fTemp460)) - fTemp426)) + ((0.00204474013f * (fTemp162 + (fTemp470 - fTemp192))) + ((0.00250251777f * (fTemp27 + fTemp91)) + ((0.00180059206f * ((fTemp193 + fTemp435) - fTemp166)) + ((0.000732444227f * ((fTemp407 + (fTemp210 + (fTemp356 + fTemp60))) - fTemp364)) + ((0.00595110934f * (fTemp446 + fTemp397)) + ((0.0061342204f * (fTemp451 + fTemp224)) + ((0.00558488723f * (fTemp455 + fTemp411)) + ((0.000946073793f * (fTemp458 + fTemp198)) + ((0.00488296151f * (fTemp406 - fTemp151)) + ((0.00735496078f * (fTemp176 - fTemp359)) + ((0.00799584948f * (fTemp240 - fTemp187)) + ((0.00271614734f * ((fTemp225 + fTemp413) - fTemp191)) + ((0.00402844325f * (fTemp459 + fTemp335)) + ((0.00338755455f * (fTemp252 - fTemp15)) + ((0.0012817774f * (fTemp234 - fTemp414)) + ((0.00305185094f * (fTemp153 + fTemp418)) + ((0.00778221991f * (fTemp133 + fTemp357)) + ((0.00341807306f * (fTemp202 + (fTemp10 + fTemp46))) + ((0.00186162908f * (fTemp437 - fTemp103)) + ((0.00201422162f * ((fTemp184 + fTemp401) - fTemp367)) + ((3.05185094e-05f * ((((fTemp73 + (fTemp77 + (fTemp507 + (fTemp79 + (fTemp2 + (fTemp83 + (fTemp84 + (fTemp85 + (fTemp86 + (fTemp87 + (fTemp1 + (fTemp0 + fTemp328)))))))))))) - fTemp326) - fTemp7) - fTemp178)) + ((0.000915555283f * ((fTemp343 + fTemp422) - fTemp462)) + ((9.15555283e-05f * (fTemp480 + (fTemp315 + (fTemp62 + (fTemp66 + (fTemp4 + (fTemp316 + (fTemp220 + (fTemp320 + (fTemp321 + (fTemp325 + fTemp76))))))))))) + ((0.00381481368f * (fTemp11 + fTemp416)) + ((0.00213629566f * (fTemp110 + fTemp495)) + ((6.10370189e-05f * ((fTemp509 + (fTemp61 + (fTemp6 + (fTemp67 + (fTemp218 + (fTemp74 + (fTemp75 + (fTemp402 + (fTemp78 + (fTemp80 + (fTemp81 + fTemp82))))))))))) - fTemp158)) + ((0.000610370189f * (fTemp500 - fTemp128)) + ((0.000762962736f * (fTemp160 + fTemp261)) + ((0.003234962f * (fTemp358 + (fTemp378 + fTemp96))) + ((0.00347911008f * (fTemp444 + fTemp387)) + ((0.00311288796f * (fTemp474 + fTemp238)) + ((0.00500503555f * (fTemp147 + fTemp277)) + ((0.00454725791f * (fTemp415 + (fTemp232 + fTemp250))) + ((0.00140385143f * (fTemp419 + fTemp188)) + ((0.00314340647f * (fTemp516 - fTemp440)) + ((0.0139164403f * (fTemp287 - fTemp283)) + ((0.000122074038f * (fTemp314 + (fTemp65 + (fTemp318 + (fTemp319 + (fTemp322 + (fTemp68 + (fTemp3 + (fTemp71 + (fTemp72 + fTemp324)))))))))) + ((0.000152592547f * (fTemp63 + (fTemp64 + (fTemp5 + (fTemp69 + (fTemp70 + (fTemp135 + fTemp323))))))) + ((0.00357066561f * fTemp622) + (0.00833155308f * fTemp601))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0245979186f * fTemp222) + ((0.000854518265f * fTemp129) + ((0.00625629444f * fTemp196) + ((0.0101931822f * fTemp229) + ((0.00106814783f * fTemp16) + ((0.00543229468f * fTemp149) + ((0.00601214636f * fTemp182) + ((0.00680562761f * fTemp164) + ((0.00674459059f * fTemp179) + ((0.00302133244f * fTemp122) + (fTemp631 + ((0.00210577715f * fTemp438) + ((0.00415051728f * fTemp97) + ((0.00445570238f * fTemp156) + ((0.00521866512f * fTemp382) + ((0.00634784997f * fTemp420) + ((0.00610370189f * fTemp132) + ((0.00650044251f * fTemp417) + ((0.00534073915f * fTemp376) + ((0.00717184972f * fTemp408) + ((0.00878933072f * fTemp409) + ((0.00985747855f * fTemp134) + ((0.00988799706f * fTemp405) + ((0.00265511032f * fTemp403) + ((0.000793481246f * fTemp361) + ((0.00283822138f * fTemp371) + ((0.0102847377f * fTemp255) + ((0.0163274035f * fTemp256) + ((0.016296884f * fTemp257) + ((0.0149235511f * fTemp258) + ((0.0127872555f * fTemp259) + ((0.00653096102f * fTemp260) + ((0.00183111057f * fTemp263) + ((0.00817896053f * fTemp264) + ((0.0121768853f * fTemp429) + ((0.0127262184f * fTemp180) + ((0.0150761437f * fTemp362) + ((0.0199285876f * fTemp266) + ((0.0224005859f * fTemp506) + ((0.0189825129f * fTemp267) + ((0.013000885f * fTemp268) + ((0.00759910885f * fTemp269) + ((0.014557329f * fTemp30) + ((0.0207831059f * fTemp31) + ((0.0184942167f * fTemp95) + ((0.036896877f * fTemp477) + ((0.0648823529f * fTemp510) + ((0.0864284188f * fTemp284) + ((0.0810266435f * fTemp285) + ((0.0429700613f * fTemp286) + ((0.0226752535f * fTemp505) + ((0.0712912381f * fTemp511) + ((0.0985442698f * fTemp291) + ((0.0992156714f * fTemp292) + ((0.094576858f * fTemp293) + ((0.0958281234f * fTemp294) + ((0.0980254561f * fTemp484) + ((0.0766319782f * fTemp34) + ((0.0516983569f * fTemp441) + ((0.0202948097f * fTemp485) + ((0.0240180679f * fTemp42) + ((0.0398571752f * fTemp214) + ((0.0627460554f * fTemp43) + ((0.0792565718f * fTemp44) + ((0.0628681332f * fTemp45) + ((0.0275276955f * fTemp295) + ((0.0869777501f * fTemp213) + ((0.116458632f * fTemp296) + ((0.103061005f * fTemp430) + ((0.0585039817f * fTemp297) + ((0.017853329f * fTemp298) + ((0.0330515467f * fTemp299) + ((0.054933317f * fTemp300) + ((0.132816553f * fTemp301) + ((0.14831996f * fTemp302) + ((0.093081452f * fTemp50) + ((0.087588124f * fTemp51) + ((0.0657368675f * fTemp52) + ((0.106418043f * fTemp53) + ((0.114932708f * fTemp159) + ((0.127994627f * fTemp303) + ((0.170110166f * fTemp306) + ((0.433423877f * fTemp307) + ((0.599932849f * fTemp54) + ((0.398999006f * fTemp55) + ((0.0222785119f * fTemp310) + ((0.0318002887f * fTemp311) + ((0.0325937681f * fTemp312) + ((0.0124820704f * fTemp313) + ((0.00439466536f * fTemp212) + (((0.000457777642f * (fTemp513 - fTemp230)) + ((0.00137333293f * (fTemp333 + (fTemp346 + (fTemp247 - fTemp439)))) + ((0.0019531846f * (fTemp334 + (fTemp390 - fTemp183))) + ((0.00241096225f * (fTemp231 - fTemp482)) + ((0.000427259132f * (fTemp336 + fTemp207)) + ((0.00231940672f * ((fTemp112 + (fTemp145 - fTemp226)) - fTemp345)) + ((0.00244148076f * (fTemp365 + (fTemp139 + ((((fTemp92 - fTemp369) - fTemp490) - fTemp466) - fTemp467)))) + ((0.00274666585f * (fTemp366 - fTemp456)) + ((0.00170903653f * (fTemp360 + (fTemp375 + (fTemp235 - fTemp195)))) + ((0.00189214759f * (fTemp374 - fTemp338)) + ((0.000518814661f * (fTemp353 + fTemp434)) + ((0.00146488845f * (fTemp389 + (fTemp126 + fTemp404))) + ((0.000396740623f * (fTemp394 + fTemp236)) + ((0.000213629566f * (fTemp127 - fTemp137)) + ((0.00589007232f * (fTemp130 + fTemp185)) + ((0.00506607257f * ((fTemp152 - fTemp167) - fTemp108)) + ((0.00152592547f * (fTemp384 + (fTemp469 + (fTemp276 - fTemp349)))) + ((0.000366222113f * (fTemp352 + fTemp383)) + ((0.00100711081f * (fTemp150 + (fTemp58 - fTemp189))) + ((0.00317392498f * (fTemp121 + (fTemp476 - fTemp379))) + ((0.00476088747f * (fTemp427 + fTemp168)) + ((0.00469985045f * (fTemp115 + fTemp428)) + ((0.00482192449f * (fTemp140 + fTemp163)) + ((0.0067751091f * (fTemp20 + fTemp12)) + ((0.00732444227f * (fTemp18 - fTemp194)) + ((0.00405896176f * (fTemp275 - fTemp521)) + ((0.000640888698f * (fTemp17 + (fTemp94 - fTemp116))) + ((0.00637836847f * (fTemp424 - fTemp14)) + ((0.0074159978f * (fTemp228 + fTemp478)) + ((0.00460829493f * ((fTemp253 - fTemp141) - fTemp197)) + ((0.00573747978f * (fTemp254 - fTemp347)) + ((0.00158696249f * (fTemp246 - fTemp452)) + ((0.0019226661f * (fTemp464 - fTemp171)) + ((0.000976592302f * (fTemp205 - fTemp217)) + ((0.000671407208f * (fTemp206 + fTemp489)) + ((0.00155644398f * (((fTemp492 - fTemp190) - fTemp450) - fTemp209)) + ((0.000274666585f * (fTemp380 - fTemp221)) + ((0.00296029542f * (fTemp499 - fTemp165)) + ((0.0131839961f * (fTemp265 + fTemp497)) + (0.00540177617f * ((fTemp503 - fTemp526) - fTemp448))))))))))))))))))))))))))))))))))))))))) + (0.000488296151f * ((fTemp520 - fTemp104) - fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow15 ? (((0.0325937681f * fTemp7) + ((0.690969586f * fTemp223) + ((0.0126651814f * fTemp204) + ((0.0143436994f * fTemp447) + ((0.0118106632f * fTemp493) + ((0.00155644398f * fTemp224) + ((0.0107425153f * fTemp173) + ((0.0110782189f * fTemp415) + ((0.00823999755f * fTemp154) + ((0.00656147953f * fTemp392) + ((0.00665303506f * fTemp181) + ((0.00766014587f * fTemp200) + ((0.00585955381f * fTemp147) + ((0.00527970213f * fTemp211) + ((0.0148625141f * fTemp421) + ((0.0175176244f * fTemp413) + ((0.0170903653f * fTemp96) + ((0.0103152562f * fTemp435) + ((0.0153813288f * fTemp190) + ((0.0111087374f * fTemp444) + ((0.00878933072f * fTemp473) + ((0.00790429395f * fTemp378) + ((0.00695822015f * fTemp91) + ((0.00350962859f * fTemp466) + ((0.00708029419f * fTemp160) + ((0.0111697745f * fTemp129) + ((0.0122074038f * fTemp128) + ((0.00802636798f * fTemp104) + ((0.00427259132f * fTemp450) + ((0.00305185094f * fTemp110) + ((0.00372325815f * fTemp439) + ((0.00216681417f * fTemp11) + ((0.00476088747f * fTemp198) + ((0.00296029542f * fTemp210) + ((0.000946073793f * fTemp205) + ((0.00183111057f * fTemp418) + ((0.0115054781f * fTemp93) + ((0.0135807367f * fTemp201) + ((0.0119937742f * fTemp347) + ((0.00860621966f * fTemp411) + ((0.00460829493f * fTemp153) + ((0.00335703604f * fTemp407) + ((0.00772118289f * fTemp454) + (fTemp618 + ((0.0120853297f * fTemp13) + ((0.00137333293f * fTemp15) + ((0.00698873866f * fTemp469) + ((0.0100711081f * fTemp16) + ((0.00854518265f * fTemp17) + ((0.00445570238f * fTemp189) + ((0.00173955504f * fTemp90) + ((0.00912503432f * fTemp342) + ((0.00140385143f * fTemp459) + ((0.00219733268f * fTemp182) + ((0.000976592302f * fTemp164) + ((0.00692770164f * fTemp23) + ((0.00534073915f * fTemp451) + ((0.00378429517f * fTemp172) + ((0.00509659108f * fTemp120) + ((0.00152592547f * fTemp142) + ((0.00164799951f * fTemp393) + ((0.00256355479f * fTemp139) + ((0.00885036774f * fTemp357) + ((0.00732444227f * fTemp176) + ((0.00946073793f * fTemp232) + ((0.0112918485f * fTemp498) + ((0.0104373302f * fTemp494) + ((0.0110171819f * fTemp448) + ((0.0126041444f * fTemp449) + ((0.0143131809f * fTemp395) + ((0.00994903408f * fTemp111) + ((0.0182500686f * fTemp233) + ((0.0225531794f * fTemp419) + ((0.0141300699f * fTemp94) + ((0.00576799829f * fTemp499) + ((0.0172734763f * fTemp236) + ((0.0169682913f * fTemp502) + ((0.0133671071f * fTemp237) + ((0.00918607134f * fTemp238) + ((0.00759910885f * fTemp504) + ((0.0121768853f * fTemp243) + ((0.00933866389f * fTemp143) + ((0.00204474013f * fTemp526) + ((0.0102237007f * fTemp174) + ((0.016235847f * fTemp175) + ((0.0158391073f * fTemp445) + ((0.01126133f * fTemp248) + ((0.00488296151f * fTemp249) + ((0.00054933317f * fTemp250) + ((0.001617481f * fTemp251) + (fTemp585 + ((0.0124210333f * fTemp401) + ((0.0185857732f * fTemp404) + ((0.0244758446f * fTemp253) + ((0.0236213263f * fTemp254) + ((0.0146488845f * fTemp255) + ((0.00411999878f * fTemp256) + ((0.0119327372f * fTemp258) + ((0.0252998453f * fTemp259) + ((0.0353099145f * fTemp260) + ((0.0335093252f * fTemp261) + ((0.0272225104f * fTemp262) + ((0.0257881414f * fTemp263) + ((0.0259102155f * fTemp264) + ((0.0223090313f * fTemp265) + ((0.00320444349f * fTemp429) + ((0.00671407208f * fTemp362) + ((0.0142216254f * fTemp266) + ((0.0184331797f * fTemp506) + ((0.0175481439f * fTemp267) + ((0.0209662169f * fTemp269) + ((0.025940733f * fTemp520) + ((0.0284432508f * fTemp28) + ((0.0255745109f * fTemp29) + (fTemp619 + ((0.000640888698f * fTemp370) + ((0.00244148076f * fTemp272) + ((0.0304879919f * fTemp273) + ((0.0492263548f * fTemp274) + ((0.0507522821f * fTemp169) + ((0.027619252f * fTemp32) + ((0.00106814783f * fTemp33) + (fTemp620 + ((0.0409558415f * fTemp278) + ((0.0406811722f * fTemp501) + ((0.0268562883f * fTemp488) + ((0.0189825129f * fTemp471) + ((0.0133060701f * fTemp279) + ((0.0174871068f * fTemp280) + ((0.0177007355f * fTemp281) + ((0.0149235511f * fTemp215) + ((0.00222785119f * fTemp285) + ((0.0263985116f * fTemp286) + ((0.0609759837f * fTemp287) + ((0.100405894f * fTemp288) + ((0.118961148f * fTemp289) + ((0.109927669f * fTemp290) + ((0.0626850203f * fTemp505) + ((0.00399792474f * fTemp511) + ((0.0435499139f * fTemp484) + ((0.0787682757f * fTemp34) + ((0.0934476778f * fTemp441) + ((0.0949125662f * fTemp485) + ((0.0865199715f * fTemp479) + ((0.07104709f * fTemp35) + ((0.0487990975f * fTemp36) + ((0.0227362905f * fTemp37) + ((0.00448622089f * fTemp46) + ((0.0352793969f * fTemp47) + ((0.0892361253f * fTemp48) + ((0.103152566f * fTemp49) + ((0.0707113892f * fTemp295) + ((0.0847804174f * fTemp299) + ((0.112216562f * fTemp300) + ((0.117679372f * fTemp301) + ((0.0370799899f * fTemp302) + ((0.0452589504f * fTemp52) + ((0.0638752431f * fTemp53) + ((0.0741599798f * fTemp159) + ((0.0480666533f * fTemp303) + ((0.0182195511f * fTemp304) + ((0.168401137f * fTemp57) + ((0.536851108f * fTemp144) + ((0.325510412f * fTemp508) + ((0.027558215f * fTemp212) + ((0.0360118411f * fTemp58) + ((0.0220648833f * fTemp59) + ((0.00976592302f * fTemp60) + ((0.00271614734f * fTemp199) + ((0.00778221991f * ((fTemp244 - fTemp179) - fTemp513)) + ((0.00643940549f * ((fTemp171 + fTemp194) - fTemp333)) + ((0.00714133121f * (((fTemp514 + (fTemp391 + fTemp271)) - fTemp155) - fTemp107)) + ((0.0061342204f * (((fTemp202 + fTemp377) - fTemp384) - fTemp365)) + ((0.00561540574f * (fTemp240 - fTemp118)) + ((0.00927762687f * ((fTemp458 - fTemp191) - fTemp372)) + ((0.0101016266f * (fTemp412 - fTemp529)) + ((0.0122379223f * (fTemp497 - fTemp131)) + ((0.0125431074f * (fTemp369 - fTemp134)) + ((0.00814844202f * ((fTemp397 - fTemp12) - fTemp409)) + ((0.00109866634f * (fTemp108 + fTemp178)) + ((0.00189214759f * ((fTemp464 + fTemp257) - fTemp99)) + ((0.00469985045f * (((fTemp123 + fTemp216) - fTemp230) - fTemp417)) + ((0.000396740623f * (fTemp148 + fTemp221)) + ((0.00482192449f * (fTemp109 + fTemp381)) + ((0.00112918485f * (fTemp294 - fTemp27)) + ((0.00180059206f * (fTemp446 + fTemp227)) + ((0.0090334788f * (fTemp22 - fTemp478)) + ((0.00662251655f * (fTemp463 + fTemp193)) + ((0.00122074038f * (fTemp521 + fTemp460)) + ((0.0130314035f * (fTemp242 - fTemp228)) + ((0.00149540696f * (fTemp14 + fTemp126)) + ((0.0178228095f * (fTemp433 + fTemp268)) + ((0.000885036774f * (fTemp486 - fTemp480)) + ((0.0012817774f * (fTemp367 + fTemp103)) + ((0.00439466536f * fTemp621) + ((0.00338755455f * (fTemp440 - fTemp206)) + ((0.00292977691f * (fTemp388 + fTemp467)) + ((0.011200293f * (fTemp158 + fTemp386)) + ((0.00881984923f * (fTemp380 + (fTemp387 + fTemp276))) + ((0.00466933195f * (fTemp358 + fTemp368)) + ((0.0151676992f * (fTemp379 + fTemp436)) + ((0.0187383648f * (fTemp105 + fTemp500)) + ((0.0190130323f * (fTemp349 + fTemp385)) + ((0.0108340709f * (fTemp456 + (fTemp490 + (fTemp406 + fTemp416)))) + (((0.0108035523f * (fTemp496 + fTemp241)) + ((((((0.006469924f * (fTemp239 + fTemp465)) + (0.0122684408f * (fTemp235 + fTemp423))) + (0.00704977568f * (fTemp92 + fTemp313))) + (0.0203253273f * (fTemp234 + fTemp422))) + (0.0117496261f * (fTemp515 + fTemp470))) + (0.0116885891f * fTemp622))) + (0.0145878475f * (fTemp474 + fTemp495))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0139774773f * fTemp222) + ((0.00167851802f * fTemp343) + ((0.00302133244f * fTemp8) + ((0.00454725791f * fTemp489) + ((0.00402844325f * fTemp482) + ((0.00634784997f * fTemp437) + ((0.00518814661f * fTemp183) + ((0.00796533097f * fTemp196) + ((0.00631733146f * fTemp476) + ((0.00830103457f * fTemp414) + ((0.012939848f * fTemp229) + ((0.0120242927f * fTemp149) + ((0.0123599963f * fTemp18) + ((0.0111392559f * fTemp19) + ((0.00842310861f * fTemp187) + ((0.00360118411f * fTemp359) + ((0.00143436994f * fTemp122) + ((0.00207525864f * fTemp146) + ((0.00396740623f * fTemp443) + ((0.00598162785f * fTemp364) + ((0.00817896053f * fTemp166) + ((0.0051576281f * fTemp434) + ((0.00213629566f * fTemp24) + ((0.00341807306f * fTemp162) + ((0.0074159978f * fTemp425) + ((0.00848414563f * fTemp89) + ((0.00836207159f * fTemp97) + ((0.00463881344f * fTemp426) + ((0.00286873989f * fTemp156) + ((0.00277718436f * fTemp163) + ((0.00558488723f * fTemp115) + ((0.00637836847f * fTemp382) + ((0.00988799706f * fTemp132) + ((0.0123294778f * fTemp152) + ((0.0139164403f * fTemp121) + ((0.0125736259f * fTemp150) + ((0.000518814661f * fTemp340) + ((0.0139469588f * fTemp405) + ((0.00915555283f * fTemp130) + ((0.00701925717f * fTemp403) + ((0.00668355357f * fTemp127) + ((0.00851466414f * fTemp125) + ((0.0102542192f * fTemp375) + ((0.00787377544f * fTemp390) + ((0.0083925901f * fTemp389) + ((0.00781273842f * fTemp361) + ((0.00604266487f * fTemp383) + ((0.00430310983f * fTemp353) + ((0.0038758507f * fTemp371) + ((0.00479140598f * fTemp366) + ((0.00659199804f * fTemp360) + ((0.00405896176f * fTemp114) + ((0.00344859157f * fTemp337) + ((0.00512710959f * fTemp106) + ((0.00689718314f * fTemp341) + ((0.00503555406f * fTemp231) + ((0.00546281319f * fTemp334) + (((0.00857570115f * fTemp487) + ((0.0025940733f * fTemp491) + ((0.0127262184f * fTemp188) + ((0.0171208847f * fTemp30) + ((0.0214850307f * fTemp31) + ((0.0253303628f * fTemp95) + ((0.0165105145f * fTemp503) + ((0.0128482925f * fTemp492) + (fTemp623 + ((0.000762962736f * fTemp468) + ((0.0180059206f * fTemp282) + ((0.0333262123f * fTemp283) + ((0.0361033976f * fTemp477) + ((0.0292062145f * fTemp510) + ((0.0145268105f * fTemp284) + ((0.0476699136f * fTemp291) + ((0.0592669472f * fTemp292) + ((0.041871395f * fTemp293) + ((0.0077517014f * fTemp38) + ((0.0311288796f * fTemp39) + ((0.0477919877f * fTemp40) + ((0.0397656187f * fTemp41) + ((0.0524918362f * fTemp42) + ((0.0730307922f * fTemp214) + ((0.0959501937f * fTemp43) + ((0.0721762776f * fTemp44) + ((0.0476393923f * fTemp45) + ((0.0368358418f * fTemp213) + ((0.105044708f * fTemp296) + ((0.133884698f * fTemp430) + ((0.0758384988f * fTemp297) + ((0.000793481246f * fTemp51) + ((0.012817774f * fTemp306) + ((0.0929593816f * fTemp54) + ((0.166112244f * fTemp55) + ((0.130863369f * fTemp56) + ((0.42835781f * fTemp308) + ((1.00003052f * fTemp309) + ((0.993408024f * fTemp509) + ((0.544175565f * fTemp310) + ((0.170995206f * fTemp311) + ((0.0449842848f * fTemp312) + ((0.00057985168f * fTemp315) + ((0.000610370189f * fTemp61) + ((((((((0.00607318338f * (fTemp374 - fTemp184)) + ((0.0042115543f * (fTemp124 + fTemp376)) + ((0.00744651631f * (fTemp112 + fTemp186)) + ((0.00799584948f * (fTemp354 + (fTemp396 - fTemp350))) + ((0.00924710836f * (fTemp394 + fTemp438)) + ((0.00735496078f * (fTemp399 - fTemp165)) + ((0.00268562883f * (fTemp408 + fTemp516)) + ((0.00131229591f * (fTemp50 - fTemp136)) + ((9.15555283e-05f * ((fTemp133 + (fTemp4 + (fTemp326 + fTemp84))) - fTemp102)) + ((0.000274666585f * ((fTemp219 + (fTemp79 + fTemp87)) - fTemp119)) + ((0.00567644276f * (fTemp338 - fTemp167)) + ((0.00726340525f * (fTemp355 + (fTemp100 + fTemp151))) + ((0.00384533219f * (fTemp410 - fTemp348)) + ((0.00381481368f * (fTemp145 + (fTemp161 + (fTemp305 - fTemp442)))) + ((6.10370189e-05f * ((((fTemp70 + (fTemp325 + (fTemp81 + (fTemp83 + fTemp328)))) - fTemp483) - fTemp26) - fTemp344)) + ((0.00827051606f * (fTemp420 + fTemp170)) + ((0.00589007232f * (fTemp427 - fTemp197)) + ((0.00500503555f * (fTemp140 - fTemp339)) + ((0.0067751091f * (fTemp428 - fTemp226)) + ((0.0054933317f * (fTemp373 - fTemp177)) + ((0.000366222113f * (((fTemp6 + (fTemp66 + (fTemp321 + fTemp624))) - fTemp207) - fTemp431)) + ((0.000213629566f * (fTemp351 + (fTemp62 + fTemp323))) + ((0.000305185094f * (fTemp185 + (fTemp180 + (fTemp320 + fTemp625)))) + ((0.00473036896f * (fTemp20 + fTemp168)) + ((0.00494399853f * (fTemp424 - fTemp475)) + ((0.00991851557f * (fTemp432 - fTemp141)) + ((0.000152592547f * (fTemp192 + (fTemp75 + (fTemp76 + fTemp1)))) + ((0.000457777642f * (fTemp398 + fTemp65)) + ((0.000488296151f * (fTemp626 - fTemp157)) + ((0.000427259132f * ((fTemp457 + fTemp322) - fTemp452)) + ((0.000915555283f * ((fTemp10 - fTemp356) - fTemp137)) + ((0.00564592425f * (fTemp462 - fTemp209)) + ((0.00329599902f * (fTemp453 - fTemp138)) + ((0.00723288674f * (fTemp298 - fTemp225)) + ((0.00964384899f * (fTemp307 - fTemp203)) + ((0.000244148076f * (fTemp246 + (fTemp314 + (fTemp67 + (fTemp68 + ((fTemp77 + fTemp85) - fTemp218)))))) + ((0.000335703604f * (fTemp63 + (fTemp135 + fTemp78))) + ((0.000183111057f * (fTemp80 + fTemp327)) + ((0.000122074038f * (fTemp220 + (fTemp71 + fTemp627))) + (3.05185094e-05f * (fTemp316 + (fTemp319 + (fTemp69 + ((fTemp74 + fTemp539) - fTemp3)))))))))))))))))))))))))))))))))))))))))))) + (0.00442518387f * (fTemp113 + (fTemp195 - fTemp363)))) + (0.00570696127f * (fTemp352 - fTemp455))) + (0.00299081393f * (fTemp345 - fTemp217))) + (0.00756859034f * (fTemp336 + fTemp247))) + (0.00610370189f * (fTemp101 - fTemp335))) + (0.00524918362f * (fTemp98 + fTemp346))))))))))))))))))))))))))))))))))))))))))))))) + (0.00900296029f * fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.00378429517f * fTemp402) + ((0.00527970213f * fTemp4) + ((0.0152592547f * fTemp7) + ((0.0187078472f * fTemp222) + ((0.000946073793f * fTemp200) + ((0.00210577715f * fTemp490) + ((0.00213629566f * fTemp456) + ((0.00131229591f * fTemp105) + ((0.000183111057f * fTemp378) + ((0.00952177495f * fTemp133) + ((0.0136417737f * fTemp454) + ((0.0118411817f * fTemp472) + ((0.000854518265f * fTemp16) + ((0.00695822015f * fTemp189) + ((0.00930814538f * fTemp90) + ((0.00238044374f * fTemp341) + ((0.00231940672f * fTemp107) + ((0.00112918485f * fTemp101) + ((0.00204474013f * fTemp461) + ((0.00625629444f * fTemp400) + ((0.00799584948f * fTemp498) + ((0.00720236823f * fTemp406) + ((0.00332651753f * fTemp449) + ((0.00299081393f * fTemp395) + ((0.009704886f * fTemp234) + ((0.00985747855f * fTemp419) + ((0.00729392376f * fTemp94) + ((0.00790429395f * fTemp92) + ((0.0077517014f * fTemp440) + ((0.00704977568f * fTemp238) + (fTemp608 + ((0.0103152562f * fTemp247) + ((0.0110477004f * fTemp487) + ((0.00570696127f * fTemp516) + ((0.0038758507f * fTemp249) + ((0.00656147953f * fTemp401) + ((0.00637836847f * fTemp253) + ((0.0141605884f * fTemp255) + ((0.025696585f * fTemp257) + ((0.0283516962f * fTemp258) + ((0.0260628071f * fTemp259) + ((0.0256050304f * fTemp260) + ((0.024445327f * fTemp261) + ((0.024567401f * fTemp262) + ((0.0153813288f * fTemp263) + ((0.006469924f * fTemp429) + ((0.0111697745f * fTemp180) + ((0.0153508103f * fTemp362) + ((0.0195928831f * fTemp266) + ((0.030915251f * fTemp506) + ((0.0386364348f * fTemp267) + ((0.041993469f * fTemp268) + ((0.0315256193f * fTemp269) + ((0.0223395489f * fTemp520) + ((0.000885036774f * fTemp29) + ((0.00167851802f * fTemp30) + ((0.0135502182f * fTemp31) + ((0.0324716941f * fTemp95) + ((0.0361339152f * fTemp503) + ((0.0304269549f * fTemp272) + (fTemp609 + ((0.024506364f * fTemp275) + ((0.0517288744f * fTemp276) + ((0.0740684196f * fTemp277) + ((0.0671407208f * fTemp278) + ((0.0534684286f * fTemp501) + ((0.0331736207f * fTemp488) + ((0.0173955504f * fTemp471) + ((0.0264290292f * fTemp510) + ((0.0511185043f * fTemp284) + ((0.0842616037f * fTemp285) + ((0.101596117f * fTemp286) + ((0.106997892f * fTemp287) + ((0.0798669383f * fTemp288) + ((0.0377513953f * fTemp289) + ((0.0574968718f * fTemp293) + ((0.0794091597f * fTemp294) + ((0.0884426385f * fTemp484) + ((0.116977446f * fTemp34) + ((0.135105446f * fTemp441) + ((0.138584554f * fTemp485) + ((0.101565599f * fTemp479) + ((0.0643635392f * fTemp35) + ((0.0351878405f * fTemp36) + ((0.0104373302f * fTemp37) + ((0.0836817548f * fTemp44) + ((0.174077585f * fTemp45) + ((0.232245862f * fTemp46) + ((0.182744831f * fTemp47) + ((0.0887478292f * fTemp48) + ((0.0782189369f * fTemp297) + ((0.181737721f * fTemp298) + ((0.259620965f * fTemp299) + ((0.207434312f * fTemp300) + ((0.106540114f * fTemp301) + ((0.0548722818f * fTemp302) + ((0.0384533219f * fTemp50) + ((0.0443433933f * fTemp51) + ((0.00643940549f * fTemp53) + ((0.0275276955f * fTemp303) + ((0.0263374746f * fTemp307) + ((0.174657434f * fTemp54) + ((0.350749224f * fTemp55) + ((0.505966365f * fTemp56) + ((0.467390984f * fTemp57) + ((0.219367042f * fTemp144) + ((0.0319223627f * fTemp313) + ((0.0318308063f * fTemp212) + (fTemp610 + ((0.00796533097f * fTemp59) + ((0.00619525742f * fTemp199) + ((0.00149540696f * fTemp315) + ((0.0025940733f * fTemp319) + ((0.00207525864f * fTemp86) + ((0.00360118411f * fTemp87) + ((0.00344859157f * (((((fTemp436 - fTemp173) - fTemp453) - fTemp103) - fTemp360) - fTemp88)) + ((0.00302133244f * ((fTemp171 + (fTemp465 - fTemp357)) - fTemp334)) + ((0.00271614734f * (fTemp336 + fTemp377)) + ((0.00146488845f * (fTemp106 + (fTemp202 - fTemp475))) + ((0.00256355479f * (((fTemp495 + fTemp500) - fTemp227) - fTemp365)) + ((0.00119022187f * (fTemp113 + (fTemp442 + fTemp312))) + ((3.05185094e-05f * (fTemp353 + (fTemp421 + fTemp335))) + ((0.0019226661f * ((fTemp157 - fTemp452) - fTemp383)) + ((0.0042115543f * ((fTemp318 + fTemp78) - fTemp361)) + ((0.00634784997f * (fTemp252 - fTemp389)) + ((0.000701925717f * ((fTemp369 + fTemp76) - fTemp394)) + ((0.000305185094f * ((fTemp348 + fTemp331) - fTemp408)) + ((0.00177007355f * (fTemp136 - fTemp26)) + ((0.00265511032f * (fTemp393 + (fTemp195 + ((fTemp514 + (fTemp423 - fTemp397)) - fTemp483)))) + ((0.00442518387f * ((fTemp507 - fTemp470) - fTemp142)) + ((0.00912503432f * (fTemp28 - fTemp338)) + ((0.00735496078f * (fTemp240 - fTemp384)) + ((0.000671407208f * (fTemp410 + (fTemp220 + fTemp80))) + ((0.00439466536f * (fTemp417 + (fTemp71 - fTemp120))) + ((0.00585955381f * (fTemp145 + fTemp221)) + ((0.00054933317f * (fTemp109 + fTemp129)) + ((0.00686666463f * (fTemp233 - fTemp132)) + ((0.00430310983f * ((fTemp504 + fTemp135) - fTemp420)) + ((0.00219733268f * (fTemp274 - fTemp115)) + ((0.0102237007f * (fTemp251 - fTemp373)) + ((0.00863673817f * (fTemp499 - fTemp170)) + ((0.00369273964f * (fTemp67 - fTemp451)) + ((0.00372325815f * ((fTemp435 + fTemp502) - fTemp455)) + ((0.00366222113f * (fTemp448 - fTemp179)) + ((0.00308236945f * ((fTemp323 - fTemp176) - fTemp182)) + ((0.0213019196f * (fTemp256 - fTemp191)) + ((0.00109866634f * (((fTemp216 - fTemp244) - fTemp493) - fTemp342)) + ((0.00433362834f * (fTemp350 - fTemp141)) + ((0.00787377544f * (fTemp123 + fTemp254)) + ((0.00918607134f * fTemp611) + ((0.00402844325f * (fTemp17 + fTemp328)) + ((0.00524918362f * ((fTemp316 - fTemp339) - fTemp13)) + ((0.00460829493f * fTemp612) + ((0.000823999755f * (fTemp197 + fTemp457)) + ((0.00143436994f * (fTemp411 + fTemp347)) + ((0.00244148076f * (fTemp183 + fTemp349)) + ((0.000762962736f * ((fTemp473 + ((fTemp66 - fTemp496) - fTemp392)) - fTemp418)) + ((0.00497451704f * (fTemp237 - fTemp207)) + ((0.00476088747f * (fTemp72 - fTemp356)) + ((0.00393688772f * ((fTemp165 + fTemp314) - fTemp110)) + ((0.000213629566f * ((fTemp138 + (fTemp391 + fTemp460)) - fTemp104)) + ((0.000732444227f * (fTemp444 - fTemp413)) + ((0.00347911008f * (fTemp190 + fTemp226)) + ((0.00488296151f * (fTemp211 - fTemp2)) + ((0.00491348002f * ((fTemp494 + fTemp404) - fTemp415)) + ((0.000274666585f * (fTemp224 + fTemp85)) + ((0.00866725668f * (fTemp239 + fTemp264)) + ((0.00457777642f * fTemp613) + ((0.0307321399f * (fTemp292 - fTemp282)) + (((0.00250251777f * (fTemp77 + fTemp329)) + (0.00100711081f * fTemp603)) + (0.0028992584f * (fTemp52 + fTemp79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00338755455f * fTemp0) + ((0.00598162785f * fTemp219) + ((0.00506607257f * fTemp5) + ((0.00234992523f * fTemp6) + ((0.269081712f * fTemp223) + ((0.000335703604f * fTemp368) + ((0.0019531846f * fTemp387) + ((0.00103762932f * fTemp466) + ((0.000427259132f * fTemp381) + ((0.000976592302f * fTemp209) + ((0.000640888698f * fTemp193) + ((0.000793481246f * fTemp184) + (fTemp614 + ((0.00424207281f * fTemp343) + ((0.00659199804f * fTemp388) + ((0.00781273842f * fTemp480) + ((0.00805688649f * fTemp462) + ((0.00674459059f * fTemp206) + ((0.00540177617f * fTemp178) + ((0.00463881344f * fTemp116) + ((0.00479140598f * fTemp210) + ((0.00280770287f * fTemp367) + (fTemp615 + ((0.00286873989f * fTemp486) + ((0.00152592547f * fTemp153) + ((0.0045167394f * fTemp407) + ((0.0103457747f * fTemp168) + ((0.0117191076f * fTemp12) + ((0.0119632557f * fTemp478) + ((0.00967436749f * fTemp196) + ((0.012878811f * fTemp414) + ((0.011383404f * fTemp14) + ((0.0122379223f * fTemp228) + ((0.0105899228f * fTemp229) + ((0.00842310861f * fTemp432) + ((0.00546281319f * fTemp424) + ((0.0156254768f * fTemp459) + ((0.0202642903f * fTemp230) + ((0.018097477f * fTemp149) + ((0.0136112552f * fTemp18) + ((0.00216681417f * fTemp151) + ((0.000396740623f * fTemp22) + ((0.001617481f * fTemp23) + ((0.00311288796f * fTemp172) + ((0.00555436872f * fTemp443) + ((0.00717184972f * fTemp364) + ((0.00961333048f * fTemp438) + ((0.00869777519f * fTemp166) + ((0.00610370189f * fTemp434) + ((0.00320444349f * fTemp24) + ((0.00531022064f * fTemp27) + ((0.0122074038f * fTemp425) + ((0.0134586627f * fTemp89) + ((0.0139164403f * fTemp97) + ((0.0126651814f * fTemp428) + ((0.0103762932f * fTemp426) + ((0.00793481246f * fTemp156) + ((0.0057985168f * fTemp163) + ((0.00198370311f * fTemp382) + ((0.00991851557f * fTemp152) + ((0.0126956999f * fTemp121) + ((0.0135807367f * fTemp150) + ((0.0123599963f * fTemp100) + ((0.00897244178f * fTemp344) + ((0.00915555283f * fTemp355) + ((0.00640888698f * fTemp108) + ((0.00222785119f * fTemp119) + ((0.00314340647f * fTemp409) + ((0.00650044251f * fTemp134) + ((0.00958281197f * fTemp405) + ((0.0118106632f * fTemp131) + ((0.0124515519f * fTemp130) + ((0.0116885891f * fTemp403) + ((0.0093691824f * fTemp127) + (fTemp616 + ((0.00317392498f * fTemp375) + ((0.00500503555f * fTemp372) + ((0.00665303506f * fTemp354) + ((0.00762962736f * fTemp112) + ((0.00753807183f * fTemp390) + ((0.00115970336f * fTemp366) + ((0.00350962859f * fTemp352) + ((0.0012817774f * fTemp345) + ((0.000518814661f * fTemp98) + ((0.00341807306f * fTemp333) + ((0.00057985168f * fTemp203) + ((0.00335703604f * fTemp412) + ((0.00466933195f * fTemp175) + ((0.0129703665f * fTemp385) + ((0.0263985116f * fTemp270) + ((0.0309457686f * fTemp271) + ((0.0246284381f * fTemp370) + ((0.0134281442f * fTemp186) + ((0.0158085879f * fTemp280) + ((0.0254829563f * fTemp281) + ((0.0325022116f * fTemp215) + ((0.0285042878f * fTemp468) + ((0.0204168838f * fTemp283) + ((0.0185857732f * fTemp290) + ((0.0618915372f * fTemp505) + ((0.0628986508f * fTemp511) + ((0.0249031037f * fTemp291) + ((0.0334788039f * fTemp38) + ((0.0843531638f * fTemp39) + ((0.12839137f * fTemp40) + ((0.168126464f * fTemp41) + ((0.162480548f * fTemp42) + ((0.100955233f * fTemp214) + ((0.0191656239f * fTemp43) + ((0.0635395348f * fTemp49) + ((0.179387793f * fTemp295) + ((0.257423639f * fTemp213) + ((0.185186312f * fTemp296) + ((0.0855433792f * fTemp430) + ((0.0297860652f * fTemp159) + ((0.0252388082f * fTemp305) + ((0.0650349408f * fTemp306) + ((0.765312672f * fTemp508) + (fTemp617 + ((0.826868474f * fTemp309) + ((0.408459723f * fTemp509) + ((0.118533894f * fTemp310) + ((0.0230414756f * fTemp311) + ((0.00399792474f * fTemp62) + ((0.00543229468f * fTemp63) + ((0.00552385021f * fTemp326) + ((0.00534073915f * fTemp73) + ((0.00186162908f * fTemp332) + ((((((0.00164799951f * ((((fTemp320 - fTemp358) - fTemp380) - fTemp102) - fTemp118)) + ((0.00183111057f * ((fTemp208 + fTemp69) - fTemp374)) + ((0.00180059206f * (fTemp169 - fTemp346)) + ((0.00125125889f * (((fTemp241 - fTemp93) - fTemp201) - fTemp124)) + ((0.00155644398f * (fTemp529 + fTemp75)) + ((0.00106814783f * (fTemp125 + (fTemp122 + (fTemp469 - fTemp474)))) + ((0.00305185094f * (fTemp396 + (fTemp140 + fTemp204))) + ((0.00268562883f * ((fTemp446 + (fTemp467 + fTemp154)) - fTemp139)) + ((6.10370189e-05f * (fTemp340 + (fTemp158 - fTemp128))) + ((0.00811792351f * (fTemp99 + (fTemp33 - fTemp250))) + ((0.00384533219f * (fTemp376 + fTemp416)) + ((0.00436414685f * ((fTemp174 - fTemp1) - fTemp148)) + ((0.00277718436f * (fTemp155 + fTemp232)) + ((0.00173955504f * (fTemp427 + fTemp20)) + ((0.00427259132f * (fTemp161 + fTemp445)) + ((0.00814844202f * (fTemp162 + fTemp463)) + ((0.00274666585f * (fTemp431 - fTemp437)) + ((0.00415051728f * (fTemp146 - fTemp433)) + ((0.00292977691f * (fTemp351 + (fTemp10 - fTemp225))) + ((0.00283822138f * (fTemp167 + fTemp8)) + ((9.15555283e-05f * (fTemp458 - fTemp181)) + ((0.00469985045f * (fTemp359 + fTemp205)) + ((0.00473036896f * (fTemp164 + fTemp439)) + ((0.00158696249f * (fTemp185 + (fTemp492 + (fTemp325 + fTemp327)))) + ((0.00454725791f * (fTemp187 + (fTemp68 + fTemp83))) + ((0.00845362712f * (fTemp19 + fTemp188)) + ((0.003234962f * (fTemp15 - fTemp3)) + ((0.00778221991f * (fTemp192 + fTemp32)) + ((0.00189214759f * (fTemp81 - fTemp398)) + ((0.00411999878f * (fTemp126 + (fTemp526 - fTemp147))) + ((0.0051576281f * (fTemp137 + fTemp243)) + ((0.00448622089f * (fTemp198 + fTemp363)) + ((0.00860621966f * (fTemp489 + fTemp477)) + ((0.000915555283f * (fTemp450 + fTemp91)) + ((0.00253303628f * (fTemp65 - fTemp160)) + ((0.000610370189f * (fTemp61 - fTemp379)) + ((0.000457777642f * (fTemp194 + (fTemp111 + fTemp386))) + ((0.00122074038f * (fTemp279 - fTemp515)) + ((0.00601214636f * (fTemp64 - fTemp235)) + ((0.00381481368f * (fTemp242 + fTemp74)) + ((0.00326548051f * (fTemp143 + fTemp491)) + ((0.00329599902f * (fTemp84 - fTemp265)) + ((0.00396740623f * (fTemp321 + (fTemp218 + fTemp82))) + (0.00573747978f * (fTemp322 - fTemp60))))))))))))))))))))))))))))))))))))))))))))) + (0.00262459181f * (fTemp114 + (fTemp248 - fTemp482)))) + (0.000244148076f * (((fTemp177 + fTemp96) - fTemp371) - fTemp337))) + (0.00201422162f * (fTemp231 + fTemp447))) + (0.0035401471f * (fTemp513 + fTemp11))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow5 ? (iSlow10 ? (iSlow12 ? (((0.0986663401f * fTemp7) + ((0.799157679f * fTemp222) + ((0.140171513f * fTemp223) + ((0.00543229468f * fTemp154) + ((0.00637836847f * fTemp392) + ((0.00234992523f * fTemp391) + ((0.00262459181f * fTemp147) + ((0.00747703481f * fTemp474) + ((0.0074159978f * fTemp456) + ((0.00210577715f * fTemp444) + ((0.00158696249f * fTemp378) + ((0.00463881344f * fTemp377) + ((0.00372325815f * fTemp110) + ((0.00314340647f * fTemp217) + ((0.00219733268f * fTemp343) + ((0.00103762932f * fTemp388) + ((0.00531022064f * fTemp198) + ((0.00344859157f * fTemp207) + ((0.00607318338f * fTemp486) + ((0.00683614612f * fTemp483) + ((0.00698873866f * fTemp418) + ((0.00634784997f * fTemp348) + ((0.00469985045f * fTemp157) + ((0.00411999878f * fTemp482) + ((0.00976592302f * fTemp414) + ((0.0103457747f * fTemp14) + ((0.0090334788f * fTemp521) + ((0.0151066622f * fTemp90) + ((0.0165105145f * fTemp350) + ((0.012939848f * fTemp342) + ((0.0067751091f * fTemp463) + ((0.00982696004f * fTemp179) + ((0.0145878475f * fTemp151) + ((0.0167241432f * fTemp122) + ((0.0162663665f * fTemp177) + ((0.0140690329f * fTemp458) + ((0.0105594043f * fTemp22) + ((0.0025940733f * fTemp351) + ((0.00402844325f * fTemp146) + ((0.00167851802f * fTemp431) + ((0.00164799951f * fTemp162) + ((0.00396740623f * fTemp428) + ((0.00442518387f * fTemp161) + ((0.00360118411f * fTemp140) + ((0.00238044374f * fTemp115) + ((0.00302133244f * fTemp152) + ((0.0101016266f * fTemp100) + ((0.0108951079f * fTemp344) + ((0.0111697745f * fTemp120) + ((0.0103762932f * fTemp109) + ((0.00930814538f * fTemp148) + ((0.00570696127f * fTemp417) + ((0.00366222113f * fTemp139) + ((0.00564592425f * fTemp136) + ((0.0061342204f * fTemp134) + ((0.00204474013f * fTemp394) + ((0.0035401471f * fTemp529) + ((0.00643940549f * fTemp354) + ((0.00631733146f * fTemp112) + ((0.00363170262f * fTemp114) + ((0.00503555406f * fTemp236) + ((0.00585955381f * fTemp240) + ((0.00561540574f * fTemp504) + ((0.00598162785f * fTemp241) + ((0.00524918362f * fTemp243) + ((0.0140079958f * fTemp416) + ((0.0134586627f * fTemp470) + ((0.0123599963f * fTemp244) + ((0.00512710959f * fTemp247) + ((0.00405896176f * fTemp487) + ((0.00659199804f * fTemp423) + ((0.0054933317f * fTemp457) + ((0.00534073915f * fTemp174) + ((0.00280770287f * fTemp175) + ((0.0187383648f * fTemp520) + ((0.0488601327f * fTemp28) + (fTemp602 + ((0.0477309488f * fTemp385) + ((0.0191351064f * fTemp270) + ((0.021149328f * fTemp273) + ((0.0597857609f * fTemp274) + ((0.0726950914f * fTemp169) + ((0.0397656187f * fTemp32) + ((0.00784325693f * fTemp471) + ((0.0377819166f * fTemp281) + ((0.0455030985f * fTemp215) + ((0.0414136164f * fTemp468) + ((0.0268562883f * fTemp282) + ((0.0134281442f * fTemp289) + ((0.0445265062f * fTemp290) + ((0.0606707968f * fTemp505) + ((0.0498672463f * fTemp511) + ((0.0215155501f * fTemp291) + ((0.0140995514f * fTemp39) + ((0.0265816227f * fTemp40) + ((0.0599688701f * fTemp41) + ((0.0644856095f * fTemp42) + ((0.0754417554f * fTemp214) + ((0.0758995339f * fTemp43) + ((0.0410168767f * fTemp44) + ((0.0422376171f * fTemp45) + ((0.01617481f * fTemp430) + ((0.0878627896f * fTemp297) + ((0.154332101f * fTemp298) + ((0.120059818f * fTemp299) + ((0.0376293212f * fTemp300) + ((0.00997955259f * fTemp307) + ((0.0112308115f * fTemp144) + ((0.0859401226f * fTemp508) + ((0.331431001f * fTemp312) + (fTemp313 + ((0.808801532f * fTemp212) + ((0.403302103f * fTemp58) + ((0.00143436994f * fTemp199) + ((0.000823999755f * fTemp61) + ((0.000732444227f * fTemp62) + ((0.0149540696f * fTemp83) + ((0.000244148076f * (fTemp88 + (fTemp142 + (fTemp355 + ((fTemp71 + (fTemp135 - fTemp72)) - fTemp5))))) + ((0.00109866634f * (fTemp513 - fTemp380)) + ((0.000793481246f * (fTemp231 + (fTemp340 + ((fTemp434 - fTemp6) - fTemp420)))) + ((0.00189214759f * (fTemp345 + (fTemp371 + fTemp105))) + ((0.00476088747f * (fTemp352 + (fTemp426 + fTemp443))) + ((0.00506607257f * (fTemp360 + fTemp390)) + ((0.00433362834f * (fTemp365 + fTemp499)) + ((0.00311288796f * (fTemp366 - fTemp124)) + ((0.00149540696f * ((fTemp373 + fTemp306) - fTemp374)) + ((0.00247199927f * (fTemp271 - fTemp346)) + ((0.00299081393f * (fTemp389 + (fTemp437 - fTemp158))) + ((0.004852443f * (fTemp375 + fTemp242)) + ((0.000305185094f * ((fTemp67 + fTemp603) - fTemp125)) + ((0.00265511032f * (fTemp405 + fTemp488)) + ((0.00717184972f * (fTemp408 + fTemp452)) + ((0.00213629566f * (fTemp393 + fTemp183)) + ((0.00112918485f * (fTemp102 - fTemp381)) + ((0.000457777642f * (fTemp119 - fTemp209)) + ((0.000213629566f * ((fTemp68 - fTemp66) - fTemp99)) + ((0.00115970336f * (fTemp384 + (fTemp489 + fTemp507))) + ((0.0022583697f * (fTemp376 + fTemp89)) + ((0.00830103457f * (fTemp150 - fTemp424)) + ((0.00567644276f * (fTemp121 + fTemp604)) + ((0.000518814661f * (fTemp132 + (fTemp459 + fTemp73))) + ((0.00119022187f * ((fTemp166 + (fTemp605 - fTemp133)) - fTemp155)) + ((0.000885036774f * (fTemp427 + ((fTemp86 - fTemp76) - fTemp315))) + ((0.00491348002f * (fTemp163 + fTemp283)) + ((0.00497451704f * (fTemp156 + fTemp210)) + ((0.003234962f * (fTemp97 - fTemp478)) + ((0.00183111057f * (fTemp27 + (fTemp363 + fTemp200))) + ((0.000915555283f * (fTemp24 + fTemp398)) + ((0.00216681417f * (fTemp438 + fTemp327)) + ((0.00436414685f * (fTemp364 + fTemp237)) + ((0.00137333293f * (fTemp455 - fTemp168)) + ((0.00375377666f * (fTemp167 + fTemp181)) + ((0.00701925717f * (fTemp23 - fTemp187)) + ((0.00390636921f * (fTemp359 + fTemp435)) + ((0.00186162908f * ((fTemp454 + (fTemp10 + (fTemp184 + fTemp460))) - fTemp164)) + ((0.00668355357f * (fTemp266 - fTemp185)) + ((0.00680562761f * (fTemp412 - fTemp20)) + ((0.00430310983f * (fTemp229 + fTemp137)) + ((0.00766014587f * (fTemp228 + (fTemp176 + fTemp246))) + ((0.00979644153f * (fTemp13 + fTemp143)) + ((0.00787377544f * (fTemp433 + fTemp491)) + ((0.00494399853f * (fTemp472 + fTemp116)) + ((0.00241096225f * ((fTemp356 + (fTemp422 + fTemp81)) - fTemp12)) + ((0.00134281442f * (fTemp197 + fTemp411)) + ((0.000427259132f * (fTemp201 + (fTemp65 + fTemp218))) + ((6.10370189e-05f * (fTemp93 + ((fTemp320 - fTemp219) - fTemp4))) + ((9.15555283e-05f * (fTemp202 + ((fTemp322 - fTemp3) - fTemp220))) + ((0.00521866512f * (fTemp227 + fTemp226)) + ((0.00408948027f * (fTemp464 + fTemp239)) + ((0.00250251777f * (fTemp103 - fTemp194)) + ((0.00256355479f * (fTemp126 + fTemp369)) + ((0.00283822138f * (fTemp205 + (fTemp190 + fTemp357))) + ((0.00384533219f * (fTemp178 + fTemp362)) + ((0.00177007355f * (fTemp462 + (fTemp8 + (fTemp473 + fTemp349)))) + ((0.0019226661f * (fTemp11 + fTemp91)) + ((0.00329599902f * (fTemp467 + fTemp490)) + ((0.00292977691f * (fTemp208 + fTemp421)) + ((0.000366222113f * (fTemp160 + fTemp173)) + ((0.00500503555f * (fTemp358 + fTemp440)) + ((0.00653096102f * (fTemp225 + fTemp92)) + ((0.00595110934f * (fTemp96 + (fTemp232 + fTemp500))) + ((0.00457777642f * (fTemp413 - fTemp447)) + ((0.000854518265f * (fTemp415 + fTemp77)) + ((0.000122074038f * (fTemp387 + (fTemp332 - fTemp321))) + ((0.000671407208f * ((fTemp64 + fTemp75) - fTemp224)) + ((0.00155644398f * (fTemp79 - fTemp204)) + ((0.000274666585f * (fTemp495 + (fTemp316 + fTemp329))) + ((0.0051576281f * (fTemp94 + fTemp516)) + ((0.00888088625f * (fTemp216 + (fTemp386 + fTemp59))) + ((0.0266426597f * (fTemp280 - fTemp265)) + (0.0152592547f * (fTemp279 - fTemp258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0105288858f * fTemp2) + ((0.00106814783f * fTemp402) + ((0.00100711081f * fTemp192) + ((0.00381481368f * fTemp476) + ((0.0143742179f * fTemp15) + ((0.0167851802f * fTemp469) + ((0.0142216254f * fTemp16) + ((0.008087405f * fTemp191) + ((0.00885036774f * fTemp149) + ((0.00842310861f * fTemp18) + ((0.00738547929f * fTemp19) + ((0.00589007232f * fTemp130) + ((0.00820947904f * fTemp127) + ((0.000335703604f * fTemp118) + ((0.0042115543f * fTemp498) + ((0.00180059206f * fTemp448) + ((0.00341807306f * fTemp395) + ((0.00466933195f * fTemp233) + ((0.00122074038f * fTemp419) + ((0.00796533097f * fTemp248) + ((0.00827051606f * fTemp249) + ((0.00689718314f * fTemp250) + ((0.00601214636f * fTemp251) + ((0.00692770164f * fTemp404) + ((0.00662251655f * fTemp254) + ((0.0130314035f * fTemp257) + ((0.0191656239f * fTemp259) + ((0.0179448836f * fTemp260) + ((0.00927762687f * fTemp261) + ((0.0186773278f * fTemp264) + ((0.035828732f * fTemp497) + ((0.0266121402f * fTemp429) + ((0.0109866634f * fTemp180) + ((0.011200293f * fTemp506) + ((0.0187688842f * fTemp267) + ((0.0132145146f * fTemp268) + ((0.028931547f * fTemp31) + ((0.0460524298f * fTemp95) + ((0.0475478396f * fTemp503) + ((0.01803644f * fTemp272) + ((0.0111392559f * fTemp33) + ((0.0682393909f * fTemp492) + ((0.0966826379f * fTemp275) + ((0.0978118256f * fTemp276) + ((0.0681478307f * fTemp277) + ((0.0321665108f * fTemp278) + ((0.0102542192f * fTemp501) + ((0.0182805881f * fTemp477) + ((0.0377208777f * fTemp510) + ((0.051759392f * fTemp284) + ((0.0575273894f * fTemp285) + ((0.0542924292f * fTemp286) + ((0.04242073f * fTemp287) + ((0.0204474013f * fTemp292) + ((0.0557878353f * fTemp293) + ((0.0792565718f * fTemp294) + ((0.0935087129f * fTemp484) + ((0.0959196761f * fTemp34) + ((0.109927669f * fTemp441) + ((0.123325296f * fTemp485) + ((0.130436108f * fTemp479) + ((0.133243814f * fTemp35) + ((0.0987884179f * fTemp36) + ((0.0635090172f * fTemp37) + ((0.0200811792f * fTemp38) + ((0.0101321451f * fTemp47) + ((0.0190740693f * fTemp48) + ((0.046967987f * fTemp49) + ((0.0413525812f * fTemp295) + ((0.0562150963f * fTemp213) + ((0.013061922f * fTemp296) + ((0.0674153864f * fTemp301) + ((0.110629596f * fTemp302) + ((0.107058935f * fTemp50) + ((0.0522171706f * fTemp51) + ((0.0178228095f * fTemp52) + ((0.0448622108f * fTemp53) + ((0.135532707f * fTemp159) + ((0.189245284f * fTemp303) + ((0.168248549f * fTemp304) + ((0.110324413f * fTemp305) + ((0.164922029f * fTemp55) + ((0.15491195f * fTemp56) + ((0.133671075f * fTemp57) + ((0.0474257655f * fTemp308) + ((0.49296549f * fTemp309) + ((0.657032967f * fTemp509) + ((0.630176723f * fTemp310) + ((0.248786896f * fTemp311) + ((0.00054933317f * fTemp326) + ((((0.000152592547f * (fTemp98 + (fTemp338 + fTemp407))) + ((0.000976592302f * (fTemp101 - fTemp446)) + ((0.001617481f * (fTemp107 + (fTemp383 - fTemp453))) + ((0.00207525864f * (fTemp336 + (fTemp341 + (fTemp104 + fTemp80)))) + ((0.000183111057f * ((fTemp328 - fTemp319) - fTemp337)) + ((0.000762962736f * (((fTemp188 - fTemp193) - fTemp189) - fTemp113)) + ((0.00286873989f * (fTemp353 - fTemp475)) + ((0.000488296151f * ((fTemp263 + (fTemp60 + (fTemp325 - fTemp1))) - fTemp361)) + ((0.00573747978f * (fTemp370 - fTemp372)) + ((0.00317392498f * (fTemp396 - fTemp367)) + ((0.00616473891f * (fTemp399 - fTemp335)) + ((0.00814844202f * (fTemp403 + fTemp17)) + ((0.00173955504f * (fTemp131 - fTemp425)) + ((0.00756859034f * ((fTemp54 - fTemp526) - fTemp409)) + ((3.05185094e-05f * (fTemp108 + (fTemp451 + (fTemp494 + (fTemp318 + (fTemp69 + (fTemp331 - fTemp0))))))) + ((0.0038758507f * ((fTemp269 - fTemp466) - fTemp410)) + ((0.00750755332f * (fTemp46 - fTemp145)) + ((0.000396740623f * (fTemp382 + (fTemp515 + fTemp606))) + ((0.00152592547f * ((fTemp432 - fTemp379) - fTemp26)) + ((0.00335703604f * (fTemp82 - fTemp170)) + ((0.00518814661f * (fTemp182 + fTemp186)) + ((0.00488296151f * (fTemp230 - fTemp138)) + ((0.0176702179f * (fTemp288 - fTemp123)) + ((0.0028992584f * (fTemp195 + (fTemp129 + fTemp449))) + ((0.00378429517f * (fTemp196 + ((fTemp84 - fTemp238) - fTemp235))) + ((0.00057985168f * (fTemp87 - fTemp153)) + ((0.00125125889f * ((fTemp85 - fTemp314) - fTemp347)) + ((0.00277718436f * ((fTemp262 - fTemp203) - fTemp206)) + ((0.000701925717f * ((fTemp221 + fTemp74) - fTemp480)) + ((0.00320444349f * ((fTemp128 - fTemp165) - fTemp439)) + ((0.00552385021f * ((fTemp607 - fTemp502) - fTemp442)) + ((0.00296029542f * (fTemp234 - fTemp171)) + ((0.00326548051f * (fTemp436 - fTemp211)) + ((0.00140385143f * ((fTemp78 - fTemp368) - fTemp514)) + ((0.00347911008f * (fTemp461 - fTemp141)) + ((0.00790429395f * (fTemp255 - fTemp397)) + ((0.00537125766f * (fTemp400 + fTemp256)) + ((0.00897244178f * (fTemp252 + fTemp253)) + (0.00473036896f * (fTemp30 - fTemp111)))))))))))))))))))))))))))))))))))))))) + (0.00131229591f * ((fTemp106 + fTemp450) - fTemp334))) + (0.00146488845f * (fTemp406 - fTemp333)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.0789819062f * fTemp0) + ((0.240913108f * fTemp1) + ((0.126346633f * fTemp402) + ((0.0535294674f * fTemp220) + ((0.0464491732f * fTemp4) + ((0.0201422162f * fTemp6) + ((0.109561451f * fTemp221) + ((0.0136722922f * fTemp223) + ((0.00424207281f * fTemp158) + ((0.00686666463f * fTemp381) + ((0.00415051728f * fTemp450) + ((0.00372325815f * fTemp356) + ((0.00634784997f * fTemp453) + ((0.00500503555f * fTemp10) + ((0.00320444349f * fTemp11) + ((0.00347911008f * fTemp207) + ((0.00204474013f * fTemp348) + (fTemp588 + ((0.00186162908f * fTemp197) + ((0.0057985168f * fTemp424) + ((0.00332651753f * fTemp463) + (fTemp524 + ((0.00155644398f * fTemp97) + ((0.00100711081f * fTemp100) + ((0.00216681417f * fTemp338) + ((0.000823999755f * fTemp107) + ((0.00244148076f * fTemp494) + ((0.00231940672f * fTemp448) + ((0.00170903653f * fTemp449) + ((0.00445570238f * fTemp504) + ((0.0045167394f * fTemp241) + ((0.00787377544f * fTemp255) + ((0.00918607134f * fTemp256) + ((0.00985747855f * fTemp257) + ((0.00979644153f * fTemp258) + ((0.00753807183f * fTemp260) + ((0.00631733146f * fTemp261) + ((0.0108645894f * fTemp492) + ((0.0117801446f * fTemp275) + ((0.0111087374f * fTemp276) + ((0.0108951079f * fTemp278) + ((0.0074159978f * fTemp501) + ((0.00442518387f * fTemp510) + ((0.0051576281f * fTemp284) + ((0.00662251655f * fTemp285) + ((0.00680562761f * fTemp288) + ((0.00555436872f * fTemp289) + ((0.00827051606f * fTemp290) + ((0.0137943663f * fTemp505) + ((0.0161442924f * fTemp511) + ((0.0122074038f * fTemp291) + ((0.00802636798f * fTemp292) + ((0.0123294778f * fTemp293) + ((0.024323253f * fTemp294) + ((0.0314340666f * fTemp484) + ((0.0227973275f * fTemp34) + ((0.00592059083f * fTemp213) + ((0.0176702179f * fTemp296) + ((0.0389416181f * fTemp430) + ((0.0612201318f * fTemp297) + ((0.0724509433f * fTemp298) + ((0.0657063499f * fTemp299) + ((0.0454725809f * fTemp300) + ((0.02438429f * fTemp301) + ((0.0125125889f * fTemp302) + ((0.00915555283f * fTemp50) + ((0.00723288674f * fTemp51) + ((0.00509659108f * fTemp52) + ((0.00695822015f * fTemp53) + ((0.0174260698f * fTemp159) + ((0.0362865068f * fTemp303) + ((0.0529190972f * fTemp304) + ((0.0503250211f * fTemp305) + ((0.0240180679f * fTemp306) + ((0.0509964302f * fTemp508) + ((0.0731223524f * fTemp308) + ((0.0655842796f * fTemp309) + ((0.0444044322f * fTemp509) + ((0.0284432508f * fTemp310) + ((0.0207525864f * fTemp311) + ((0.016296884f * fTemp312) + ((0.018097477f * fTemp313) + ((0.0149845881f * fTemp212) + ((0.0334482864f * fTemp199) + ((0.139927372f * fTemp314) + ((0.117221594f * fTemp315) + ((0.0663167238f * fTemp61) + ((0.0905484185f * fTemp316) + ((0.0921659023f * fTemp318) + ((0.0751976073f * fTemp319) + ((0.036774803f * fTemp320) + ((0.0188299213f * fTemp321) + (fTemp589 + ((0.214880824f * fTemp323) + ((0.299050868f * fTemp324) + ((0.209601119f * fTemp325) + ((0.0756248683f * fTemp77) + ((0.122989595f * fTemp507) + ((0.0784020498f * fTemp78) + ((0.059602648f * fTemp83) + ((0.317209393f * fTemp84) + ((0.072542496f * fTemp327) + ((0.926389337f * fTemp328) + ((0.950773656f * fTemp329) + ((0.574419379f * fTemp331) + ((0.237556085f * fTemp332) + ((0.000427259132f * ((fTemp372 - fTemp382) - fTemp88)) + ((6.10370189e-05f * ((fTemp334 - fTemp12) - fTemp333)) + ((0.000274666585f * (fTemp98 + (fTemp124 + ((fTemp22 + (fTemp464 - fTemp475)) - fTemp140)))) + ((0.000946073793f * (fTemp106 + (fTemp383 + fTemp165))) + ((0.000671407208f * (fTemp337 + (fTemp354 + ((fTemp272 - fTemp236) - fTemp183)))) + ((0.000457777642f * (fTemp345 + (fTemp113 + (fTemp161 + (fTemp413 + fTemp493))))) + ((0.000244148076f * (fTemp114 + (fTemp375 + fTemp340))) + ((9.15555283e-05f * (fTemp352 - fTemp121)) + ((0.000122074038f * (fTemp360 + (fTemp374 + (fTemp346 + (fTemp417 + (((fTemp89 + ((fTemp486 + fTemp227) - fTemp23)) - fTemp155) - fTemp152)))))) + ((0.000305185094f * (fTemp365 + (fTemp118 + fTemp14))) + ((0.000518814661f * (fTemp353 + ((fTemp446 + fTemp200) - fTemp136))) + ((0.00131229591f * (fTemp361 + ((((fTemp176 + fTemp243) - fTemp224) - fTemp405) - fTemp131))) + ((0.00134281442f * (fTemp390 + (fTemp438 + (fTemp443 + (fTemp418 + fTemp379))))) + ((0.000366222113f * ((fTemp150 - fTemp151) - fTemp394)) + ((0.00119022187f * ((fTemp109 + (fTemp210 + fTemp190)) - fTemp134)) + ((0.000976592302f * ((fTemp384 + fTemp349) - fTemp409)) + ((0.000335703604f * ((fTemp145 + (fTemp172 + (fTemp96 + (fTemp143 + fTemp246)))) - fTemp139)) + ((0.000183111057f * (fTemp590 - fTemp393)) + ((0.000640888698f * (fTemp119 + (fTemp209 + fTemp421))) + ((0.00180059206f * (fTemp108 + (fTemp156 + (fTemp364 + (fTemp192 + fTemp397))))) + ((0.000732444227f * ((fTemp148 + (fTemp122 + (fTemp363 + (fTemp456 + fTemp395)))) - fTemp408)) + ((0.00219733268f * (fTemp426 + ((fTemp232 + fTemp32) - fTemp24))) + ((0.00262459181f * ((fTemp137 + (fTemp477 - fTemp422)) - fTemp373)) + ((0.001617481f * ((fTemp191 + (fTemp444 + fTemp470)) - fTemp179)) + ((0.00491348002f * (fTemp18 + fTemp262)) + ((0.0019531846f * (fTemp228 + fTemp400)) + ((0.00137333293f * (fTemp168 - fTemp181)) + ((0.00140385143f * (fTemp347 + fTemp591)) + ((0.00207525864f * (fTemp442 + fTemp592)) + ((0.00292977691f * (fTemp126 - fTemp171)) + ((0.0019226661f * (fTemp103 - fTemp116)) + ((0.00561540574f * (fTemp343 + fTemp254)) + ((0.00698873866f * (fTemp104 + fTemp33)) + ((0.00253303628f * (fTemp253 - fTemp129)) + ((0.00256355479f * ((fTemp441 - fTemp392) - fTemp377)) + ((0.0022583697f * ((fTemp496 + fTemp406) - fTemp358)) + ((0.00158696249f * (fTemp264 - fTemp233)) + ((0.003234962f * (fTemp263 - fTemp94)) + ((((0.00845362712f * (fTemp286 - fTemp271)) + (0.0110477004f * (fTemp277 - fTemp269))) + (0.00881984923f * fTemp593)) + (0.00314340647f * fTemp594)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.31083101f * fTemp2) + ((0.00479140598f * fTemp218) + ((0.154332101f * fTemp3) + ((0.0361339152f * fTemp219) + ((0.141636401f * fTemp5) + ((0.0380565822f * fTemp7) + ((0.00250251777f * fTemp141) + ((0.00210577715f * fTemp335) + ((0.00177007355f * fTemp138) + ((0.00369273964f * fTemp380) + ((0.00643940549f * fTemp208) + ((0.00762962736f * fTemp467) + ((0.00659199804f * fTemp110) + ((0.00650044251f * fTemp489) + ((0.00628681295f * fTemp462) + ((0.00341807306f * fTemp178) + ((0.00418103579f * fTemp196) + ((0.00524918362f * fTemp476) + ((0.00408948027f * fTemp133) + ((0.00277718436f * fTemp454) + ((0.00527970213f * fTemp521) + ((0.00476088747f * fTemp90) + ((0.00567644276f * fTemp185) + ((0.00570696127f * fTemp182) + ((0.00433362834f * fTemp164) + ((0.00305185094f * fTemp27) + ((0.000762962736f * fTemp125) + ((0.00201422162f * fTemp234) + ((0.00228888821f * fTemp419) + ((0.0038758507f * fTemp440) + ((0.00317392498f * fTemp499) + ((0.00308236945f * fTemp487) + ((0.00466933195f * fTemp386) + (fTemp595 + (fTemp596 + ((0.00274666585f * fTemp174) + ((0.00268562883f * fTemp248) + ((0.00463881344f * fTemp429) + ((0.00494399853f * fTemp362) + ((0.0025940733f * fTemp266) + ((0.0133365886f * fTemp520) + ((0.0120548112f * fTemp28) + ((0.00885036774f * fTemp385) + ((0.0093691824f * fTemp270) + ((0.0054933317f * fTemp370) + ((0.00241096225f * fTemp31) + ((0.00213629566f * fTemp95) + ((0.00976592302f * fTemp471) + ((0.0177922919f * fTemp279) + ((0.0209967345f * fTemp280) + ((0.0187688842f * fTemp281) + ((0.0143436994f * fTemp215) + ((0.0104373302f * fTemp468) + ((0.00625629444f * fTemp282) + ((0.0142216254f * fTemp485) + ((0.0185857732f * fTemp479) + ((0.0166325886f * fTemp35) + ((0.01617481f * fTemp36) + ((0.0157170333f * fTemp37) + ((0.0107119968f * fTemp38) + ((0.0141605884f * fTemp42) + ((0.0139774773f * fTemp214) + ((0.0172124393f * fTemp43) + ((0.0325632505f * fTemp44) + ((0.0522782058f * fTemp45) + ((0.0599688701f * fTemp46) + ((0.0502945036f * fTemp47) + ((0.0299996957f * fTemp48) + ((0.0114139225f * fTemp49) + ((0.00894192327f * fTemp307) + (fTemp597 + ((0.0394909531f * fTemp55) + ((0.0412610248f * fTemp56) + ((0.0364391021f * fTemp57) + ((0.0187078472f * fTemp144) + ((0.0598162785f * fTemp59) + (fTemp598 + ((0.0214239936f * fTemp63) + ((0.0748619065f * fTemp64) + ((0.158970922f * fTemp65) + ((0.110995822f * fTemp66) + ((0.0302743614f * fTemp67) + ((0.0203253273f * fTemp68) + ((0.0570390932f * fTemp70) + ((0.204840243f * fTemp71) + ((0.138279364f * fTemp72) + ((0.190374464f * fTemp326) + ((0.253547788f * fTemp73) + ((0.237220377f * fTemp74) + ((0.171300396f * fTemp75) + ((0.037446212f * fTemp76) + ((0.0280159917f * fTemp79) + ((0.186071351f * fTemp80) + ((0.376018554f * fTemp81) + ((0.483016461f * fTemp82) + ((0.573229134f * fTemp85) + (fTemp599 + ((0.665273011f * fTemp87) + (((0.000152592547f * (((fTemp167 + fTemp600) - fTemp166) - fTemp231)) + ((0.000488296151f * ((((fTemp93 + (fTemp391 + (fTemp169 - fTemp238))) - fTemp376) - fTemp366) - fTemp101)) + ((0.00103762932f * (((fTemp436 + (fTemp188 - fTemp416)) - fTemp112) - fTemp336)) + ((0.00106814783f * ((fTemp396 + (fTemp401 - fTemp105)) - fTemp341)) + ((0.00054933317f * (((fTemp433 + ((fTemp274 - fTemp273) - fTemp217)) - fTemp187) - fTemp371)) + ((0.00143436994f * ((fTemp111 + fTemp283) - fTemp389)) + ((0.00112918485f * (fTemp399 + (fTemp466 - fTemp225))) + ((0.00109866634f * (fTemp127 + (fTemp403 + (fTemp203 - fTemp211)))) + ((0.00122074038f * (fTemp130 + (((fTemp434 - fTemp177) - fTemp163) - fTemp142))) + ((3.05185094e-05f * (fTemp102 + (fTemp132 + (((fTemp404 - fTemp500) - fTemp13) - fTemp420)))) + ((0.00222785119f * (((fTemp478 + (fTemp193 + fTemp415)) - fTemp428) - fTemp99)) + ((0.00164799951f * (((fTemp267 - fTemp473) - fTemp153) - fTemp355)) + ((0.00152592547f * ((((fTemp350 + (fTemp62 - fTemp239)) - fTemp342) - fTemp230) - fTemp120)) + ((0.00146488845f * ((fTemp387 + (fTemp247 - fTemp244)) - fTemp344)) + ((0.000793481246f * (fTemp427 + (fTemp115 + (fTemp469 - fTemp490)))) + ((0.00149540696f * (fTemp425 + (fTemp472 + ((fTemp368 + fTemp30) - fTemp157)))) + ((0.00311288796f * (fTemp162 - fTemp15)) + ((0.00283822138f * (fTemp431 + fTemp359)) + ((0.00265511032f * (fTemp26 + fTemp154)) + ((0.00189214759f * ((fTemp235 - fTemp411) - fTemp170)) + ((0.000915555283f * (((fTemp202 + (fTemp398 - fTemp367)) - fTemp458) - fTemp146)) + ((0.000610370189f * (((fTemp503 - fTemp91) - fTemp452) - fTemp351)) + ((0.00338755455f * (fTemp20 + fTemp439)) + ((0.00396740623f * fTemp601) + ((0.00344859157f * (fTemp175 - fTemp149)) + ((0.00381481368f * (fTemp123 + fTemp92)) + ((0.00576799829f * (fTemp189 + fTemp180)) + ((0.00564592425f * (fTemp17 + fTemp480)) + ((0.00405896176f * (fTemp16 + (fTemp388 + fTemp516))) + ((0.00598162785f * (fTemp268 - fTemp432)) + ((0.00411999878f * (fTemp40 - fTemp229)) + ((0.000701925717f * (((fTemp506 - fTemp204) - fTemp447) - fTemp414)) + ((0.00506607257f * (fTemp195 + fTemp206)) + ((0.00167851802f * ((fTemp460 + fTemp249) - fTemp407)) + ((0.000396740623f * ((fTemp198 + (((fTemp194 + fTemp495) - fTemp474) - fTemp128)) - fTemp201)) + ((0.00350962859f * ((fTemp160 + fTemp445) - fTemp205)) + ((0.00183111057f * (fTemp339 + fTemp173)) + ((0.00610370189f * (fTemp69 - fTemp8)) + ((0.00448622089f * (fTemp184 + fTemp216)) + ((0.0012817774f * (((fTemp369 + fTemp250) - fTemp147) - fTemp378)) + ((0.00115970336f * ((fTemp251 + fTemp252) - fTemp514)) + ((0.000854518265f * (fTemp515 - fTemp357)) + ((0.004852443f * (fTemp423 + (fTemp39 + fTemp58))) + ((0.00234992523f * (fTemp526 + (fTemp497 + fTemp186))) + ((0.0150456252f * (fTemp322 - fTemp222)) + (0.009704886f * (fTemp29 + fTemp41))))))))))))))))))))))))))))))))))))))))))))))) + (0.000213629566f * (fTemp513 + (((fTemp437 + ((fTemp488 - fTemp412) - fTemp483)) - fTemp451) - fTemp410)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow11 ? (((0.000488296151f * fTemp7) + ((0.45072788f * fTemp223) + ((0.00607318338f * fTemp224) + ((0.00265511032f * fTemp173) + ((0.00555436872f * fTemp147) + ((0.000701925717f * fTemp208) + ((0.00152592547f * fTemp467) + (fTemp522 + ((0.00286873989f * fTemp198) + ((0.00314340647f * fTemp207) + (fTemp576 + (fTemp577 + ((0.00335703604f * fTemp347) + ((0.00637836847f * fTemp411) + ((0.00881984923f * fTemp197) + ((0.00976592302f * fTemp153) + ((0.00769066438f * fTemp407) + ((0.00384533219f * fTemp192) + ((0.00878933072f * fTemp472) + ((0.00930814538f * fTemp433) + ((0.00750755332f * fTemp13) + ((0.00424207281f * fTemp414) + ((0.0057985168f * fTemp14) + ((0.008087405f * fTemp123) + ((0.0136112552f * fTemp350) + ((0.0157475509f * fTemp342) + ((0.0147404401f * fTemp463) + ((0.0113528855f * fTemp459) + (fTemp563 + ((0.00381481368f * fTemp149) + ((0.00305185094f * fTemp187) + ((0.0067751091f * fTemp446) + ((0.00811792351f * fTemp146) + ((0.00650044251f * fTemp443) + ((0.00390636921f * fTemp364) + ((0.00643940549f * fTemp431) + ((0.00634784997f * fTemp162) + ((0.00659199804f * fTemp425) + ((0.00701925717f * fTemp89) + ((0.00732444227f * fTemp97) + ((0.00714133121f * fTemp428) + ((0.00662251655f * fTemp426) + ((0.00567644276f * fTemp156) + ((0.00473036896f * fTemp163) + ((0.00347911008f * fTemp161) + ((0.0028992584f * fTemp155) + ((0.003234962f * fTemp121) + ((0.0038758507f * fTemp150) + (fTemp578 + ((0.00601214636f * fTemp108) + ((0.00561540574f * fTemp119) + ((0.00509659108f * fTemp340) + ((0.00393688772f * fTemp102) + ((0.00210577715f * fTemp393) + ((0.00469985045f * fTemp403) + ((0.00631733146f * fTemp399) + ((0.00521866512f * fTemp396) + ((0.0042115543f * fTemp234) + ((0.00341807306f * fTemp419) + ((0.00280770287f * fTemp238) + ((0.00823999755f * fTemp239) + ((0.0108340709f * fTemp240) + ((0.00991851557f * fTemp504) + ((0.00674459059f * fTemp241) + ((0.00546281319f * fTemp247) + ((0.00708029419f * fTemp516) + ((0.00820947904f * fTemp216) + ((0.00817896053f * fTemp386) + ((0.00552385021f * fTemp423) + ((0.00430310983f * fTemp404) + ((0.011383404f * fTemp267) + ((0.011444441f * fTemp268) + ((0.0116580706f * fTemp520) + ((0.022461623f * fTemp28) + ((0.0411999896f * fTemp29) + ((0.046967987f * fTemp385) + ((0.0284127332f * fTemp270) + ((0.0115054781f * fTemp272) + ((0.0119937742f * fTemp278) + ((0.0235908087f * fTemp501) + ((0.0289010294f * fTemp488) + ((0.0343333222f * fTemp471) + ((0.0299996957f * fTemp279) + ((0.0308236945f * fTemp280) + ((0.0229804385f * fTemp281) + ((0.00665303506f * fTemp215) + ((0.021088291f * fTemp285) + ((0.0452589504f * fTemp286) + ((0.0574663542f * fTemp287) + ((0.045289468f * fTemp288) + ((0.0139469588f * fTemp289) + ((0.0174260698f * fTemp485) + ((0.0788598284f * fTemp479) + ((0.0626545027f * fTemp35) + ((0.0409253202f * fTemp36) + ((0.00927762687f * fTemp37) + ((0.0436109491f * fTemp38) + ((0.0664387941f * fTemp39) + ((0.0769981965f * fTemp40) + ((0.0560319833f * fTemp41) + ((0.040192876f * fTemp46) + ((0.176854759f * fTemp47) + ((0.155980095f * fTemp48) + ((0.110019229f * fTemp49) + ((0.119754635f * fTemp301) + ((0.112125002f * fTemp302) + ((0.0619220547f * fTemp50) + ((0.0221869573f * fTemp159) + ((0.140018925f * fTemp303) + ((0.112949006f * fTemp304) + ((0.571733773f * fTemp56) + (fTemp57 + ((0.893093646f * fTemp144) + ((0.124301888f * fTemp508) + ((0.028931547f * fTemp308) + ((0.00146488845f * ((fTemp354 + fTemp452) - fTemp513)) + ((0.000854518265f * (((fTemp339 + fTemp465) - fTemp352) - fTemp333)) + ((0.000305185094f * (((fTemp6 + (fTemp64 + (fTemp75 + fTemp402))) - fTemp405) - fTemp334)) + ((0.000885036774f * ((fTemp348 + fTemp59) - fTemp101)) + ((0.00125125889f * (((fTemp363 - fTemp160) - fTemp134) - fTemp107)) + ((0.000244148076f * ((fTemp390 - fTemp444) - fTemp341)) + ((0.000640888698f * (fTemp106 + (fTemp438 + fTemp69))) + ((9.15555283e-05f * ((fTemp220 + (fTemp2 + (fTemp83 + (fTemp0 + fTemp1)))) - fTemp231)) + ((0.000732444227f * (fTemp345 + (fTemp103 - fTemp193))) + ((6.10370189e-05f * (fTemp114 + (((fTemp67 + ((fTemp71 + ((fTemp79 + fTemp84) - fTemp326)) - fTemp320)) - fTemp422) - fTemp179))) + ((0.00155644398f * ((fTemp372 + fTemp166) - fTemp360)) + ((0.00177007355f * ((fTemp412 + (fTemp246 + fTemp218)) - fTemp371)) + ((0.000122074038f * (((fTemp182 + (fTemp217 + (fTemp104 + (fTemp233 + ((fTemp61 + fTemp579) - fTemp314))))) - fTemp139) - fTemp383)) + ((0.000183111057f * (((fTemp184 + (fTemp4 + (fTemp316 + fTemp77))) - fTemp483) - fTemp361)) + ((0.000152592547f * ((fTemp151 + (((fTemp5 + (fTemp322 + (fTemp70 + (fTemp135 + (fTemp324 + fTemp331))))) - fTemp494) - fTemp453)) - fTemp389)) + ((0.00167851802f * (fTemp529 + (fTemp165 + fTemp415))) + ((0.00378429517f * (fTemp125 + fTemp451)) + ((0.00598162785f * (fTemp127 + fTemp26)) + ((0.00268562883f * (fTemp130 + fTemp200)) + ((0.000976592302f * (fTemp131 + ((fTemp489 + fTemp128) - fTemp133))) + ((0.00103762932f * ((fTemp337 + fTemp395) - fTemp336)) + ((0.00589007232f * (fTemp142 + fTemp99)) + ((0.0051576281f * (fTemp338 + fTemp100)) + ((0.00317392498f * (fTemp355 - fTemp157)) + ((3.05185094e-05f * (((fTemp66 + (fTemp319 + (fTemp73 + ((fTemp82 + (fTemp327 + fTemp543)) - fTemp80)))) - fTemp221) - fTemp384)) + ((0.00119022187f * (fTemp109 - fTemp381)) + ((0.00329599902f * (fTemp152 + fTemp434)) + ((0.00344859157f * (fTemp420 - fTemp421)) + ((0.00207525864f * (fTemp382 + (fTemp462 + fTemp493))) + ((0.00173955504f * (fTemp115 - fTemp190)) + ((0.00253303628f * (fTemp140 + fTemp229)) + ((0.006469924f * (fTemp373 + (fTemp460 + fTemp487))) + ((0.00653096102f * (fTemp27 + fTemp269)) + ((0.00524918362f * (fTemp172 + fTemp368)) + ((0.000610370189f * ((fTemp388 - fTemp447) - fTemp167)) + ((0.00054933317f * (((fTemp449 - fTemp343) - fTemp164) - fTemp122)) + ((0.00057985168f * (((fTemp141 + fTemp580) - fTemp356) - fTemp359)) + ((0.00109866634f * (fTemp185 - fTemp335)) + ((0.00228888821f * (fTemp20 - fTemp202)) + ((0.00100711081f * (fTemp90 + fTemp201)) + ((0.000213629566f * (fTemp424 + (fTemp225 + (fTemp448 + ((fTemp321 + fTemp78) - fTemp58))))) + ((0.00131229591f * ((fTemp439 - fTemp349) - fTemp442)) + ((0.00201422162f * ((fTemp474 - fTemp204) - fTemp227)) + ((0.000457777642f * ((fTemp480 + (fTemp63 + fTemp72)) - fTemp367)) + ((0.00234992523f * fTemp581) + ((0.00369273964f * (fTemp178 + fTemp242)) + ((0.00143436994f * (fTemp11 + (fTemp506 - fTemp138))) + ((0.00122074038f * (fTemp10 - fTemp377)) + ((0.00186162908f * (fTemp110 + ((fTemp401 - fTemp457) - fTemp181))) + ((0.000366222113f * ((fTemp582 - fTemp96) - fTemp129)) + ((0.000823999755f * ((fTemp154 + fTemp60) - fTemp171)) + ((0.00106814783f * (((fTemp495 - fTemp406) - fTemp378) - fTemp358)) + ((0.000518814661f * ((fTemp323 - fTemp105) - fTemp473)) + ((0.000671407208f * ((fTemp264 - fTemp369) - fTemp379)) + ((0.00512710959f * (fTemp274 - fTemp470)) + ((0.000427259132f * (fTemp503 + fTemp62)) + ((0.0112918485f * (fTemp273 + fTemp309)) + ((0.000274666585f * (fTemp318 + (fTemp74 + fTemp507))) + (0.000396740623f * (fTemp199 + fTemp76))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0196234025f * fTemp222) + ((0.00137333293f * fTemp490) + ((0.00112918485f * fTemp380) + ((0.0130924406f * fTemp478) + ((0.0158085879f * fTemp196) + ((0.0140079958f * fTemp476) + ((0.00271614734f * fTemp15) + ((0.00640888698f * fTemp469) + ((0.00988799706f * fTemp16) + ((0.00939970091f * fTemp189) + ((0.00506607257f * fTemp521) + (fTemp583 + ((0.00433362834f * fTemp22) + ((0.00885036774f * fTemp145) + ((0.0106814783f * fTemp417) + ((0.00888088625f * fTemp410) + ((0.00460829493f * fTemp376) + ((0.00216681417f * fTemp408) + ((0.0022583697f * fTemp346) + ((0.00241096225f * fTemp113) + (((0.00457777642f * fTemp397) + ((0.00247199927f * fTemp461) + ((0.00366222113f * fTemp111) + ((0.00619525742f * fTemp203) + ((0.00689718314f * fTemp515) + ((0.00363170262f * fTemp436) + ((0.00497451704f * fTemp94) + ((0.00759910885f * fTemp92) + ((0.00766014587f * fTemp440) + ((0.00784325693f * fTemp235) + ((0.00985747855f * fTemp236) + (fTemp584 + ((0.00283822138f * fTemp416) + ((0.0035401471f * fTemp491) + ((0.00695822015f * fTemp174) + ((0.0071108127f * fTemp445) + ((0.00558488723f * fTemp249) + ((0.00964384899f * fTemp250) + ((0.0110477004f * fTemp251) + (fTemp585 + ((0.00296029542f * fTemp253) + ((0.0168767367f * fTemp254) + ((0.0267952513f * fTemp255) + ((0.0299386587f * fTemp256) + ((0.0250556972f * fTemp257) + ((0.0164494775f * fTemp258) + ((0.00952177495f * fTemp259) + (fTemp586 + ((0.015991699f * fTemp261) + ((0.0172124393f * fTemp262) + ((0.0114139225f * fTemp263) + ((0.0140995514f * fTemp497) + ((0.029114658f * fTemp429) + ((0.0329294726f * fTemp362) + ((0.019287698f * fTemp266) + ((0.00671407208f * fTemp271) + ((0.0345774703f * fTemp370) + ((0.0429700613f * fTemp186) + ((0.0402233973f * fTemp188) + ((0.0423596911f * fTemp30) + ((0.0371410251f * fTemp31) + ((0.0211798456f * fTemp95) + ((0.0108035523f * fTemp169) + ((0.0254829563f * fTemp32) + ((0.0383617654f * fTemp33) + ((0.0375988036f * fTemp492) + ((0.0314340666f * fTemp275) + ((0.0193182174f * fTemp276) + ((0.025940733f * fTemp468) + ((0.0574968718f * fTemp282) + ((0.0777306408f * fTemp283) + ((0.0809350908f * fTemp477) + ((0.0537125766f * fTemp510) + ((0.0180059206f * fTemp284) + ((0.022705771f * fTemp290) + ((0.0688192397f * fTemp505) + ((0.101046786f * fTemp511) + ((0.127750486f * fTemp291) + ((0.112918489f * fTemp292) + ((0.0959501937f * fTemp293) + ((0.0690939054f * fTemp294) + ((0.0567033924f * fTemp484) + ((0.0523392446f * fTemp34) + ((0.0215765871f * fTemp441) + ((0.0628070906f * fTemp214) + ((0.112216562f * fTemp43) + ((0.133854181f * fTemp44) + ((0.0657368675f * fTemp45) + ((0.0599688701f * fTemp295) + ((0.13562426f * fTemp213) + ((0.155583367f * fTemp296) + ((0.090762049f * fTemp430) + ((0.0737632364f * fTemp297) + ((0.12637715f * fTemp298) + ((0.0907010138f * fTemp299) + ((0.0548417605f * fTemp300) + ((0.151432842f * fTemp51) + ((0.17069003f * fTemp52) + ((0.123966187f * fTemp53) + ((0.0741599798f * fTemp305) + ((0.439283431f * fTemp306) + ((0.662373722f * fTemp307) + ((0.623493135f * fTemp54) + ((0.126010925f * fTemp55) + ((0.0119022187f * fTemp509) + ((0.0295724366f * fTemp310) + ((0.0305490289f * fTemp312) + (((0.00170903653f * (fTemp365 + (fTemp366 - fTemp427))) + ((0.00299081393f * (fTemp118 + fTemp23)) + ((0.00308236945f * (fTemp374 + (((fTemp176 + fTemp42) - fTemp206) - fTemp205))) + ((0.00115970336f * (fTemp124 - fTemp158)) + ((0.000946073793f * ((fTemp93 + fTemp391) - fTemp112)) + ((0.00140385143f * ((fTemp466 + (fTemp498 + fTemp265)) - fTemp375)) + ((0.00244148076f * (fTemp244 - fTemp394)) + ((0.00180059206f * (fTemp409 + (fTemp486 - fTemp456))) + ((0.00164799951f * (fTemp136 + (fTemp168 + fTemp209))) + ((0.00402844325f * fTemp587) + ((0.00488296151f * ((((fTemp482 - fTemp514) - fTemp191) - fTemp24) - fTemp120)) + ((0.00357066561f * (((fTemp237 - fTemp18) - fTemp19) - fTemp132)) + ((0.00149540696f * (fTemp400 - fTemp170)) + ((0.00790429395f * (fTemp175 - fTemp351)) + ((0.00183111057f * (((fTemp475 + fTemp226) - fTemp432) - fTemp455)) + ((0.00231940672f * (fTemp177 + (fTemp357 + fTemp277))) + ((0.0107425153f * (fTemp17 + fTemp500)) + ((0.00338755455f * ((fTemp398 - fTemp116) - fTemp228)) + ((0.00537125766f * (fTemp232 - fTemp454)) + ((0.00845362712f * (fTemp195 + fTemp313)) + ((0.00778221991f * (fTemp12 + fTemp499)) + ((0.00445570238f * (fTemp183 + fTemp248)) + ((0.00494399853f * (fTemp437 + fTemp526)) + ((0.001617481f * (fTemp464 + fTemp91)) + ((0.00250251777f * ((fTemp435 + fTemp413) - fTemp137)) + ((0.00204474013f * (fTemp450 + fTemp212)) + ((0.0357676931f * (fTemp180 + fTemp311)) + (0.00439466536f * ((fTemp496 - fTemp194) - fTemp387))))))))))))))))))))))))))))) + (0.000335703604f * (fTemp98 + (fTemp353 + (fTemp143 - fTemp392)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.0019226661f * fTemp88))))))))))))))))))))))) : (((0.000671407208f * fTemp221) + ((0.215521708f * fTemp223) + ((0.00054933317f * fTemp387) + (fTemp561 + ((0.00106814783f * fTemp184) + ((0.00473036896f * fTemp110) + ((0.00506607257f * fTemp439) + ((0.0022583697f * fTemp11) + ((0.00109866634f * fTemp339) + ((0.00332651753f * fTemp462) + ((0.00250251777f * fTemp206) + ((0.000427259132f * fTemp210) + ((0.00317392498f * fTemp126) + ((0.00381481368f * fTemp103) + ((0.00479140598f * fTemp464) + ((0.00463881344f * fTemp227) + (fTemp562 + ((0.00393688772f * fTemp452) + ((0.00280770287f * fTemp348) + ((0.0019531846f * fTemp442) + ((0.00253303628f * fTemp482) + ((0.00369273964f * fTemp398) + ((0.000701925717f * fTemp411) + ((0.00491348002f * fTemp168) + ((0.00799584948f * fTemp12) + ((0.0108645894f * fTemp478) + ((0.0126651814f * fTemp196) + ((0.0129703665f * fTemp476) + ((0.0054933317f * fTemp133) + ((0.00848414563f * fTemp228) + ((0.0147099216f * fTemp229) + ((0.0177312549f * fTemp432) + ((0.0173650328f * fTemp424) + ((0.0136417737f * fTemp15) + ((0.00833155308f * fTemp469) + (fTemp563 + ((0.0148319956f * fTemp191) + ((0.0213019196f * fTemp149) + ((0.024445327f * fTemp18) + ((0.0243537705f * fTemp19) + ((0.0170903653f * fTemp20) + ((0.012817774f * fTemp185) + ((0.00955229346f * fTemp182) + ((0.00695822015f * fTemp359) + ((0.00897244178f * fTemp122) + ((0.00918607134f * fTemp177) + ((0.00659199804f * fTemp22) + ((0.00503555406f * fTemp446) + ((0.00704977568f * fTemp351) + (fTemp564 + ((0.00830103457f * fTemp443) + ((0.00744651631f * fTemp170) + ((0.00656147953f * fTemp166) + ((0.00573747978f * fTemp434) + ((0.00445570238f * fTemp24) + ((0.00210577715f * fTemp27) + ((0.013000885f * fTemp426) + ((0.00811792351f * fTemp163) + ((0.00589007232f * fTemp161) + ((0.00241096225f * fTemp115) + ((0.00598162785f * fTemp121) + ((0.0123294778f * fTemp100) + ((0.0132145146f * fTemp344) + ((0.00698873866f * fTemp109) + ((0.00634784997f * fTemp338) + ((0.008087405f * fTemp108) + ((0.00521866512f * fTemp119) + ((0.00143436994f * fTemp102) + ((0.00231940672f * fTemp131) + ((0.00442518387f * fTemp130) + ((0.00604266487f * fTemp403) + ((0.00665303506f * fTemp127) + ((0.00531022064f * fTemp396) + ((0.00396740623f * fTemp125) + ((0.00238044374f * fTemp529) + ((0.00430310983f * fTemp354) + ((0.00509659108f * fTemp112) + ((0.00537125766f * fTemp390) + ((0.00433362834f * fTemp361) + ((0.00131229591f * fTemp337) + ((0.003234962f * fTemp498) + ((0.00146488845f * fTemp247) + ((0.00262459181f * fTemp174) + ((0.0038758507f * fTemp445) + ((0.0143742179f * fTemp186) + ((0.00271614734f * fTemp468) + ((0.0134281442f * fTemp282) + ((0.027558215f * fTemp283) + ((0.0381481387f * fTemp477) + ((0.0308847316f * fTemp510) + ((0.00796533097f * fTemp284) + ((0.0740989447f * fTemp291) + ((0.0536515415f * fTemp292) + ((0.00885036774f * fTemp293) + ((0.0156865139f * fTemp38) + ((0.0409253202f * fTemp39) + ((0.0607318357f * fTemp40) + ((0.0825525671f * fTemp41) + ((0.113315225f * fTemp42) + ((0.099276714f * fTemp214) + ((0.0780968666f * fTemp43) + ((0.0349131748f * fTemp44) + ((0.0534073934f * fTemp295) + ((0.13788262f * fTemp213) + ((0.114566483f * fTemp296) + ((0.0435804315f * fTemp430) + ((0.00622577593f * fTemp302) + ((0.0891445652f * fTemp304) + ((0.177068397f * fTemp305) + ((0.254463345f * fTemp306) + ((0.218726158f * fTemp307) + ((0.0154423658f * fTemp54) + ((0.74132514f * fTemp508) + (fTemp308 + ((0.847987294f * fTemp309) + ((0.437482834f * fTemp509) + ((0.12625508f * fTemp310) + ((0.0220954008f * fTemp311) + ((0.001617481f * (fTemp88 + (fTemp345 + fTemp455))) + ((0.000915555283f * (fTemp334 + (fTemp93 + (fTemp209 + fTemp314)))) + ((3.05185094e-05f * ((fTemp526 + fTemp332) - fTemp231)) + ((0.00198370311f * (fTemp406 - fTemp101)) + ((0.000396740623f * (fTemp106 + fTemp496)) + ((0.00137333293f * (fTemp114 + fTemp178)) + ((0.000610370189f * (fTemp352 + fTemp116)) + ((0.00320444349f * (((fTemp172 - fTemp378) - fTemp118) - fTemp371)) + ((0.00338755455f * ((fTemp372 + (fTemp152 + (fTemp162 - fTemp392))) - fTemp113)) + ((0.000213629566f * ((fTemp104 + ((fTemp316 + (fTemp318 + (fTemp220 + (fTemp219 + (fTemp68 + (fTemp323 + fTemp566)))))) - fTemp244)) - fTemp124)) + ((0.00140385143f * (fTemp353 + ((fTemp246 - fTemp224) - fTemp444))) + ((0.00518814661f * (fTemp389 - fTemp335)) + ((0.00265511032f * (fTemp375 + (fTemp30 - fTemp105))) + ((0.0028992584f * (fTemp394 + fTemp16)) + ((0.00628681295f * (fTemp399 - fTemp190)) + ((9.15555283e-05f * (fTemp405 + ((fTemp62 + (fTemp324 + fTemp567)) - fTemp141))) + ((0.00314340647f * ((fTemp26 - fTemp358) - fTemp409)) + ((0.000244148076f * ((fTemp6 + (fTemp70 + (fTemp71 + (fTemp72 + fTemp76)))) - fTemp393)) + ((0.00335703604f * (fTemp340 + (fTemp400 - fTemp123))) + ((0.00326548051f * (fTemp355 - fTemp413)) + ((0.000335703604f * (((fTemp347 + (fTemp198 + fTemp568)) - fTemp414) - fTemp384)) + ((0.0019226661f * (fTemp148 + fTemp132)) + ((0.00943021942f * (fTemp150 + fTemp425)) + ((0.00122074038f * (fTemp420 + fTemp407)) + ((0.00399792474f * (fTemp140 + fTemp483)) + ((0.0105899228f * (fTemp156 + fTemp195)) + ((0.014435255f * fTemp569) + ((0.0125736259f * (fTemp89 + fTemp188)) + ((0.00592059083f * (fTemp373 - fTemp490)) + ((0.00222785119f * (fTemp431 + fTemp205)) + ((0.00787377544f * (fTemp364 + (fTemp151 - fTemp391))) + ((0.00189214759f * (fTemp451 + (fTemp208 - fTemp447))) + ((0.00247199927f * (fTemp167 + fTemp192)) + ((0.00448622089f * (fTemp23 + (fTemp367 - fTemp349))) + ((0.00857570115f * (fTemp458 - fTemp200)) + ((0.00738547929f * (fTemp179 - fTemp226)) + ((0.000854518265f * (fTemp153 + fTemp137)) + ((0.000823999755f * (fTemp197 + ((fTemp315 - fTemp232) - fTemp129))) + ((0.000305185094f * (fTemp201 + (((fTemp494 + fTemp541) - fTemp368) - fTemp128))) + ((0.00228888821f * (fTemp202 + fTemp248)) + ((0.00201422162f * (fTemp480 + fTemp461)) + ((0.0035401471f * (fTemp10 + fTemp175)) + ((0.00460829493f * (fTemp8 - fTemp421)) + ((0.00497451704f * (fTemp343 + fTemp356)) + ((0.000518814661f * (fTemp381 + fTemp61)) + ((0.000122074038f * ((fTemp199 + (fTemp63 + (fTemp326 + (fTemp80 + (fTemp81 + (fTemp86 + (fTemp87 + fTemp1))))))) - fTemp158)) + ((0.000946073793f * (fTemp415 + (fTemp249 - fTemp460))) + ((0.00112918485f * (fTemp173 - fTemp204)) + ((0.00552385021f * (fTemp370 - fTemp416)) + ((0.000152592547f * (fTemp487 + (fTemp74 + (fTemp78 + (fTemp79 + (fTemp82 + (fTemp2 + fTemp85))))))) + ((6.10370189e-05f * (fTemp312 + (fTemp73 + fTemp570))) + ((0.000274666585f * (fTemp5 + fTemp571)) + (0.000183111057f * (fTemp64 + (fTemp319 + (fTemp320 + (fTemp322 + (fTemp135 + (fTemp325 + (fTemp75 + (fTemp83 + (fTemp84 + fTemp327)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0183721427f * fTemp7) + ((0.0219122898f * fTemp222) + ((0.00183111057f * fTemp194) + ((0.00155644398f * fTemp154) + (fTemp572 + ((0.00878933072f * fTemp514) + ((0.00845362712f * fTemp147) + ((0.00790429395f * fTemp211) + ((0.00717184972f * fTemp165) + ((0.00299081393f * fTemp474) + ((0.00595110934f * fTemp225) + ((0.00756859034f * fTemp435) + ((0.00152592547f * fTemp379) + ((0.00390636921f * fTemp91) + ((0.00418103579f * fTemp475) + ((0.00366222113f * fTemp138) + ((0.00909451582f * fTemp472) + ((0.0147709586f * fTemp433) + ((0.0152592547f * fTemp13) + ((0.00949125644f * fTemp14) + ((0.0045167394f * fTemp521) + ((0.00329599902f * fTemp350) + ((0.00100711081f * fTemp463) + ((0.00234992523f * fTemp145) + ((0.00482192449f * fTemp417) + (fTemp573 + ((0.00186162908f * fTemp139) + ((0.00305185094f * fTemp136) + ((0.00158696249f * fTemp365) + ((0.00115970336f * fTemp98) + ((0.000640888698f * fTemp357) + ((0.00216681417f * fTemp449) + ((0.00454725791f * fTemp369) + ((0.00619525742f * fTemp111) + ((0.00735496078f * fTemp203) + ((0.00900296029f * fTemp234) + ((0.0101016266f * fTemp419) + ((0.0100405896f * fTemp422) + ((0.00958281197f * fTemp94) + ((0.00924710836f * fTemp92) + ((0.0101931822f * fTemp440) + ((0.0119937742f * fTemp499) + ((0.0130924406f * fTemp235) + ((0.0131839961f * fTemp236) + ((0.01126133f * fTemp500) + ((0.00836207159f * fTemp502) + ((0.00637836847f * fTemp237) + ((0.0131534776f * fTemp239) + ((0.0185552537f * fTemp240) + ((0.0207831059f * fTemp504) + ((0.017914366f * fTemp241) + ((0.0131229591f * fTemp242) + ((0.00875881221f * fTemp243) + ((0.00692770164f * fTemp412) + (fTemp574 + ((0.00180059206f * fTemp516) + ((0.00375377666f * fTemp216) + ((0.00469985045f * fTemp423) + ((0.00411999878f * fTemp457) + ((0.00601214636f * fTemp252) + ((0.0107119968f * fTemp401) + ((0.0144657735f * fTemp404) + ((0.0165410321f * fTemp253) + ((0.0167546626f * fTemp254) + ((0.01617481f * fTemp255) + ((0.0153813288f * fTemp256) + ((0.0169682913f * fTemp257) + ((0.0285653248f * fTemp259) + ((0.0379039906f * fTemp260) + ((0.0429090261f * fTemp261) + ((0.040742211f * fTemp262) + ((0.0318918414f * fTemp263) + ((0.0103457747f * fTemp265) + ((0.009704886f * fTemp429) + ((0.0121158483f * fTemp180) + ((0.0126346629f * fTemp362) + ((0.0128482925f * fTemp266) + ((0.0118717002f * fTemp506) + ((0.0146488845f * fTemp267) + ((0.0276497696f * fTemp269) + ((0.0325022116f * fTemp520) + ((0.0343638435f * fTemp28) + ((0.0262764376f * fTemp29) + ((0.0204168838f * fTemp385) + ((0.0155339213f * fTemp270) + ((0.00863673817f * fTemp271) + ((0.021332439f * fTemp95) + ((0.0238349568f * fTemp503) + ((0.0162663665f * fTemp272) + ((0.016113773f * fTemp273) + ((0.022766808f * fTemp274) + ((0.0343028046f * fTemp169) + ((0.0405285805f * fTemp32) + ((0.0403759889f * fTemp33) + ((0.0289620664f * fTemp492) + ((0.0139774773f * fTemp275) + ((0.0141300699f * fTemp276) + ((0.0351573229f * fTemp277) + ((0.0540177636f * fTemp278) + ((0.0541093163f * fTemp501) + ((0.0364085808f * fTemp488) + ((0.0140995514f * fTemp471) + ((0.00372325815f * fTemp280) + ((0.00686666463f * fTemp281) + ((0.004852443f * fTemp215) + ((0.0315256193f * fTemp285) + ((0.0854518265f * fTemp286) + ((0.13486129f * fTemp287) + ((0.156315804f * fTemp288) + ((0.139866322f * fTemp289) + ((0.0901821926f * fTemp290) + ((0.0150761437f * fTemp505) + ((0.042542804f * fTemp294) + ((0.081667535f * fTemp484) + ((0.0917996764f * fTemp34) + ((0.0952482671f * fTemp441) + ((0.0933256f * fTemp485) + ((0.0890530124f * fTemp479) + ((0.0676290169f * fTemp35) + ((0.0458693206f * fTemp36) + ((0.0183416251f * fTemp37) + ((0.041993469f * fTemp45) + ((0.117923521f * fTemp46) + ((0.14108707f * fTemp47) + ((0.11236915f * fTemp48) + ((0.055238504f * fTemp297) + ((0.108584858f * fTemp298) + ((0.121127963f * fTemp299) + ((0.0617999807f * fTemp300) + ((0.131931514f * fTemp51) + ((0.146458328f * fTemp52) + ((0.175420389f * fTemp53) + ((0.100619525f * fTemp159) + ((0.0486770235f * fTemp303) + ((0.285836369f * fTemp55) + ((0.575518072f * fTemp56) + ((0.592089593f * fTemp57) + ((0.319528788f * fTemp144) + ((0.0357371755f * fTemp313) + ((0.0297555476f * fTemp58) + (((0.00149540696f * ((fTemp454 + (fTemp250 - fTemp207)) - fTemp333)) + ((0.00219733268f * (fTemp107 + (fTemp171 + fTemp493))) + ((0.00177007355f * (fTemp336 + fTemp134)) + ((0.000793481246f * (fTemp341 - fTemp450)) + ((0.000457777642f * (fTemp360 - fTemp218)) + ((0.0025940733f * (fTemp366 + (fTemp377 + fTemp96))) + ((0.00268562883f * (fTemp374 + fTemp342)) + ((0.00302133244f * ((fTemp495 - fTemp489) - fTemp383)) + ((0.00350962859f * (fTemp408 + (fTemp376 - fTemp437))) + ((0.00701925717f * ((fTemp497 - fTemp438) - fTemp142)) + ((0.0112308115f * (fTemp31 - fTemp120)) + ((0.000885036774f * ((fTemp176 - fTemp382) - fTemp155)) + ((0.00134281442f * (fTemp575 - fTemp427)) + ((0.00793481246f * ((fTemp233 + fTemp59) - fTemp99)) + ((0.00781273842f * (fTemp238 - fTemp164)) + ((0.0213934761f * (fTemp258 - fTemp187)) + ((0.00213629566f * ((fTemp473 + fTemp301) - fTemp459)) + ((0.00360118411f * (fTemp90 + fTemp470)) + ((0.00415051728f * (fTemp189 - fTemp183)) + ((0.00173955504f * (fTemp17 + (fTemp160 + fTemp60))) + ((0.00347911008f * ((fTemp251 - fTemp467) - fTemp418)) + ((0.00119022187f * (fTemp448 - fTemp388)) + ((0.00494399853f * (((fTemp386 + fTemp465) - fTemp217) - fTemp453)) + ((0.00125125889f * (fTemp380 + fTemp397)) + ((0.00405896176f * (fTemp466 + fTemp456)) + ((0.00256355479f * (fTemp395 + fTemp491)) + ((((0.037446212f * (fTemp50 + fTemp212)) + (0.0491958372f * (fTemp49 - fTemp511))) + (0.0191961434f * (fTemp264 + fTemp268))) + (0.00720236823f * (fTemp515 + fTemp436))))))))))))))))))))))))))))) + (0.00167851802f * ((fTemp346 - fTemp157) - fTemp513)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow6 ? (iSlow9 ? (((0.00155644398f * fTemp26) + ((0.00149540696f * fTemp111) + ((0.00210577715f * fTemp251) + ((0.00375377666f * fTemp255) + ((0.00396740623f * fTemp257) + ((0.00384533219f * fTemp180) + ((0.00341807306f * fTemp28) + ((0.0042115543f * fTemp270) + ((0.00314340647f * fTemp271) + ((0.00814844202f * fTemp272) + ((0.0137028107f * fTemp273) + ((0.0104678487f * fTemp274) + ((0.0154423658f * fTemp279) + ((0.0154728843f * fTemp280) + ((0.0122074038f * fTemp281) + ((0.00473036896f * fTemp215) + ((0.00512710959f * fTemp282) + ((0.00784325693f * fTemp283) + ((0.00753807183f * fTemp477) + ((0.0176091809f * fTemp289) + ((0.0143436994f * fTemp290) + ((0.0061342204f * fTemp505) + ((0.00344859157f * fTemp37) + ((0.0166325886f * fTemp39) + ((0.021332439f * fTemp40) + ((0.01126133f * fTemp41) + ((0.0144657735f * fTemp45) + ((0.120273449f * fTemp46) + ((0.168919951f * fTemp47) + ((0.140965f * fTemp48) + ((0.0722983479f * fTemp49) + ((0.0210577715f * fTemp295) + ((0.00393688772f * fTemp213) + ((0.000671407208f * (fTemp98 + (fTemp124 + (fTemp403 + (((fTemp395 - fTemp498) - fTemp226) - fTemp426))))) + ((0.000976592302f * (fTemp106 + (fTemp393 + ((fTemp252 - fTemp460) - fTemp343)))) + ((0.00057985168f * (fTemp114 + (fTemp338 + ((fTemp516 + fTemp258) - fTemp171)))) + ((0.000274666585f * (fTemp360 + (fTemp118 + (fTemp389 + (((((fTemp210 + fTemp552) - fTemp437) - fTemp472) - fTemp342) - fTemp405))))) + ((0.000122074038f * (fTemp365 + (fTemp97 + (fTemp476 + ((((fTemp442 + ((((fTemp51 + (fTemp52 + (fTemp303 + (fTemp304 + (fTemp305 + fTemp306))))) - fTemp216) - fTemp96) - fTemp418)) - fTemp93) - fTemp168) - fTemp478))))) + ((9.15555283e-05f * (fTemp366 + (fTemp371 + (fTemp438 + (((fTemp407 + (fTemp153 + (((fTemp157 + ((fTemp367 + (fTemp198 + (((fTemp449 + ((fTemp144 + fTemp331) - fTemp436)) - fTemp474) - fTemp466))) - fTemp464)) - fTemp482) - fTemp411))) - fTemp454) - fTemp167))))) + ((0.000152592547f * (fTemp113 + ((fTemp130 + ((fTemp417 + (((fTemp195 + (((((((fTemp53 + (fTemp307 + (fTemp55 + (fTemp56 + fTemp57)))) - fTemp448) - fTemp494) - fTemp116) - fTemp201) - fTemp347) - fTemp12)) - fTemp229) - fTemp187)) - fTemp134)) - fTemp112))) + ((0.00054933317f * (fTemp346 + ((fTemp109 + (fTemp152 + ((fTemp296 - fTemp8) - fTemp350))) - fTemp375))) + ((6.10370189e-05f * (fTemp390 + (fTemp463 + (fTemp133 + (fTemp348 + ((fTemp223 + ((fTemp67 + ((fTemp71 + (fTemp72 + (fTemp135 + (fTemp323 + (fTemp324 + (fTemp77 + (fTemp402 + (fTemp1 + (fTemp328 + (fTemp329 + fTemp553)))))))))) - fTemp322)) - fTemp310)) - fTemp497)))))) + ((0.000366222113f * (((fTemp554 - fTemp433) - fTemp13) - fTemp529)) + ((0.00152592547f * (fTemp399 + fTemp250)) + ((0.00119022187f * (fTemp127 - fTemp200)) + ((3.05185094e-05f * (fTemp409 + ((((fTemp197 + ((((((((((((fTemp6 + ((fTemp4 + (fTemp316 + (fTemp318 + ((((((fTemp3 + (fTemp325 + (((((fTemp76 + (fTemp507 + (((((fTemp543 - fTemp84) - fTemp83) - fTemp2) - fTemp82) - fTemp81))) - fTemp75) - fTemp74) - fTemp73) - fTemp326))) - fTemp69) - fTemp68) - fTemp219) - fTemp321) - fTemp320)))) - fTemp64)) - fTemp221) - fTemp60) - fTemp7) - fTemp58) - fTemp212) - fTemp313) - fTemp222) - fTemp312) - fTemp311) - fTemp309) - fTemp50)) - fTemp192) - fTemp196) - fTemp151))) + ((0.00112918485f * (fTemp102 + (fTemp362 - fTemp224))) + ((0.000183111057f * (fTemp410 + (fTemp145 + (fTemp420 + ((((fTemp103 + (fTemp205 + ((((fTemp159 + fTemp54) - fTemp456) - fTemp475) - fTemp138))) - fTemp202) - fTemp228) - fTemp155))))) + ((0.00164799951f * (fTemp373 - fTemp164)) + ((0.00173955504f * fTemp555) + ((0.00167851802f * (fTemp431 - fTemp194)) + ((0.00125125889f * ((fTemp495 + (fTemp254 + fTemp288)) - fTemp351)) + ((0.00137333293f * ((fTemp169 - fTemp386) - fTemp165)) + ((0.001617481f * ((fTemp369 + fTemp269) - fTemp461)) + ((0.00350962859f * (fTemp520 - fTemp470)) + ((0.00335703604f * (fTemp293 - fTemp465)) + ((0.00381481368f * (fTemp29 - fTemp445)) + ((0.00488296151f * (fTemp256 + fTemp468)) + ((0.00369273964f * (fTemp385 + fTemp38)) + (0.00668355357f * (fTemp471 - fTemp260))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00241096225f * fTemp493) + ((0.00140385143f * fTemp211) + ((0.00170903653f * fTemp185) + ((0.00250251777f * fTemp357) + ((0.00222785119f * fTemp176) + ((0.00204474013f * fTemp397) + ((0.0019531846f * fTemp232) + ((0.00186162908f * fTemp496) + ((0.00201422162f * fTemp419) + ((0.0022583697f * fTemp237) + ((0.00274666585f * fTemp238) + ((0.00268562883f * fTemp239) + ((0.00296029542f * fTemp504) + ((0.00302133244f * fTemp241) + ((0.0028992584f * fTemp242) + ((0.00228888821f * fTemp412) + ((0.003234962f * fTemp416) + ((0.00311288796f * fTemp244) + ((0.00213629566f * fTemp246) + ((0.00256355479f * fTemp423) + ((0.00347911008f * fTemp457) + (fTemp556 + ((0.00405896176f * fTemp174) + ((0.00390636921f * fTemp175) + ((0.00674459059f * fTemp261) + ((0.00610370189f * fTemp262) + ((0.00622577593f * fTemp263) + ((0.00631733146f * fTemp264) + ((0.00457777642f * fTemp265) + ((0.00198370311f * fTemp266) + ((0.00604266487f * fTemp186) + ((0.0141911069f * fTemp188) + ((0.0205084383f * fTemp30) + ((0.0216986611f * fTemp31) + ((0.0152287362f * fTemp95) + ((0.00823999755f * fTemp32) + ((0.0122379223f * fTemp33) + ((0.0127567369f * fTemp492) + ((0.0115665151f * fTemp275) + ((0.0189825129f * fTemp277) + ((0.0212408826f * fTemp278) + ((0.0166631062f * fTemp501) + ((0.00576799829f * fTemp488) + ((0.0118411817f * fTemp284) + ((0.0238349568f * fTemp285) + ((0.0250862148f * fTemp286) + ((0.00900296029f * fTemp511) + ((0.00698873866f * fTemp291) + ((0.00637836847f * fTemp292) + ((0.00244148076f * fTemp294) + ((0.0090334788f * fTemp484) + ((0.0151676992f * fTemp34) + ((0.0219428092f * fTemp441) + ((0.012939848f * fTemp485) + ((0.0163884405f * fTemp479) + ((0.00885036774f * fTemp36) + ((0.0188909583f * fTemp42) + ((0.0757469386f * fTemp214) + ((0.103274636f * fTemp43) + ((0.0802636817f * fTemp44) + ((0.00320444349f * fTemp430) + ((0.00567644276f * fTemp297) + ((0.00628681295f * fTemp298) + ((0.00500503555f * fTemp299) + ((0.00299081393f * fTemp300) + (((0.000885036774f * ((((fTemp163 + (fTemp172 + (((fTemp128 + fTemp105) - fTemp18) - fTemp458))) - fTemp100) - fTemp125) - fTemp513)) + ((0.000854518265f * ((fTemp104 + fTemp181) - fTemp333)) + ((0.000823999755f * (((fTemp156 + (fTemp349 + (fTemp190 + fTemp440))) - fTemp341) - fTemp334)) + ((0.000732444227f * ((((fTemp451 + ((fTemp189 + fTemp557) - fTemp230)) - fTemp89) - fTemp139) - fTemp231)) + ((0.000610370189f * ((((fTemp382 + ((fTemp16 + (fTemp480 + fTemp160)) - fTemp166)) - fTemp383) - fTemp107) - fTemp101)) + ((0.000701925717f * ((((fTemp123 + (fTemp17 + fTemp450)) - fTemp177) - fTemp353) - fTemp336)) + ((0.000762962736f * (((((fTemp90 + (fTemp462 + (fTemp381 + (fTemp378 + (fTemp435 + (fTemp335 + (fTemp247 - fTemp235))))))) - fTemp22) - fTemp150) - fTemp120) - fTemp345)) + ((0.000396740623f * ((((fTemp428 + (((fTemp339 + fTemp225) - fTemp122) - fTemp23)) - fTemp132) - fTemp355) - fTemp352)) + ((0.000427259132f * ((fTemp170 + ((fTemp15 + (fTemp91 + (fTemp500 - fTemp236))) - fTemp459)) - fTemp374)) + ((0.000457777642f * ((fTemp455 + (fTemp483 + (fTemp486 + (fTemp178 + fTemp233)))) - fTemp361)) + ((0.000305185094f * (fTemp354 + (((fTemp14 + (fTemp398 + (fTemp227 + (fTemp363 + ((fTemp401 + fTemp510) - fTemp515))))) - fTemp148) - fTemp384))) + ((0.000518814661f * (fTemp372 + (fTemp179 + ((fTemp469 + fTemp249) - fTemp19)))) + ((0.000213629566f * ((fTemp131 + (fTemp432 + (fTemp414 + ((fTemp406 - fTemp207) - fTemp126)))) - fTemp394)) + ((0.000915555283f * ((fTemp427 + (fTemp364 + ((fTemp193 + (fTemp158 + (fTemp268 - fTemp203))) - fTemp191))) - fTemp337)) + ((0.000244148076f * (((fTemp370 - fTemp137) - fTemp376) - fTemp408)) + ((0.000488296151f * ((fTemp388 + (fTemp377 + fTemp253)) - fTemp136)) + ((0.00115970336f * (((fTemp415 + fTemp558) - fTemp142) - fTemp340)) + ((0.00122074038f * ((fTemp443 + (fTemp467 + (fTemp208 + (fTemp514 + fTemp400)))) - fTemp119)) + ((0.00100711081f * (((fTemp20 + ((fTemp379 + fTemp391) - fTemp149)) - fTemp434) - fTemp108)) + ((0.000793481246f * ((fTemp521 + (fTemp453 + (fTemp209 + (fTemp129 + fTemp392)))) - fTemp99)) + ((0.00143436994f * (fTemp502 - fTemp396)) + ((0.000640888698f * (fTemp559 - fTemp121)) + ((0.00106814783f * (fTemp115 + (fTemp446 + (fTemp356 + (fTemp439 + (fTemp141 + fTemp234)))))) + ((0.00103762932f * (fTemp140 + (fTemp217 + (fTemp444 + fTemp368)))) + ((0.0012817774f * (fTemp301 - fTemp425)) + ((0.00131229591f * ((fTemp146 + fTemp147) - fTemp24)) + ((0.00109866634f * (fTemp359 + (fTemp110 + (fTemp184 + (fTemp490 + fTemp404))))) + ((0.0019226661f * (fTemp182 + fTemp92)) + (((0.00286873989f * (fTemp447 + fTemp204)) + ((0.00262459181f * (fTemp422 + fTemp240)) + ((0.00271614734f * (fTemp94 + fTemp143)) + ((0.00265511032f * (fTemp243 + fTemp248)) + ((((0.014679403f * (fTemp276 + fTemp287)) + (0.0038758507f * (fTemp506 + fTemp503))) + (0.00332651753f * ((fTemp267 + fTemp35) - fTemp429))) + (0.00372325815f * fTemp560)))))) + (0.000335703604f * (fTemp424 + (fTemp183 + (fTemp452 + (fTemp358 + (fTemp413 + fTemp302))))))))))))))))))))))))))))))))))) + (0.000946073793f * (((fTemp161 + (fTemp473 + fTemp154)) - fTemp344) - fTemp88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.00326548051f * fTemp7) + ((0.0614947975f * fTemp223) + ((0.00134281442f * fTemp454) + ((0.00122074038f * fTemp494) + ((0.00186162908f * fTemp502) + ((0.00152592547f * fTemp239) + ((0.00131229591f * fTemp243) + ((0.0022583697f * fTemp404) + ((0.00228888821f * fTemp263) + ((0.00204474013f * fTemp266) + ((0.00253303628f * fTemp267) + ((0.00292977691f * fTemp268) + ((0.00378429517f * fTemp520) + ((0.00170903653f * fTemp186) + ((0.00372325815f * fTemp273) + ((0.00643940549f * fTemp274) + ((0.0058290353f * fTemp169) + ((0.00521866512f * fTemp33) + ((0.00552385021f * fTemp492) + ((0.00381481368f * fTemp275) + ((0.00860621966f * fTemp287) + ((0.0137943663f * fTemp288) + ((0.0159306619f * fTemp289) + ((0.011322367f * fTemp290) + ((0.00317392498f * fTemp505) + ((0.00497451704f * fTemp294) + ((0.0101931822f * fTemp484) + ((0.0115665151f * fTemp34) + ((0.0125125889f * fTemp441) + ((0.0149235511f * fTemp485) + ((0.0157780703f * fTemp479) + ((0.013061922f * fTemp35) + ((0.00308236945f * fTemp36) + ((0.0119937742f * fTemp47) + ((0.0289010294f * fTemp48) + ((0.0251472518f * fTemp49) + ((0.0110782189f * fTemp295) + ((0.0186162908f * fTemp298) + ((0.0190740693f * fTemp299) + ((0.019287698f * fTemp300) + ((0.00350962859f * fTemp302) + ((0.00469985045f * fTemp53) + ((0.00976592302f * fTemp159) + ((0.0122379223f * fTemp303) + ((0.0191656239f * fTemp304) + ((0.00958281197f * fTemp305) + ((0.00973540451f * fTemp306) + ((0.00967436749f * fTemp56) + ((0.0628986508f * fTemp57) + ((0.090578936f * fTemp144) + ((0.00433362834f * fTemp212) + (fTemp548 + ((0.00183111057f * fTemp59) + (((0.00054933317f * ((((fTemp196 + (fTemp483 + (fTemp367 + (fTemp209 + (fTemp158 + (fTemp154 + fTemp387)))))) - fTemp364) - fTemp134) - fTemp231)) + ((0.00057985168f * ((((fTemp350 + (fTemp411 + (fTemp452 + (fTemp486 + (fTemp208 + (fTemp392 + (fTemp498 + (fTemp395 + fTemp276)))))))) - fTemp119) - fTemp107) - fTemp98)) + ((0.000640888698f * (((fTemp458 + (fTemp418 + (fTemp198 + (fTemp453 + (fTemp381 + (fTemp104 + (fTemp171 + (fTemp475 + (fTemp200 + (fTemp335 + (fTemp233 + (fTemp422 + (fTemp60 - fTemp249))))))))))))) - fTemp26) - fTemp101)) + ((0.000457777642f * ((((fTemp167 + (fTemp122 + ((fTemp424 + (fTemp388 + (fTemp160 + (fTemp165 + (fTemp141 + (fTemp440 + fTemp143)))))) - fTemp459))) - fTemp102) - fTemp409) - fTemp336)) + ((0.000244148076f * ((fTemp148 + (((fTemp342 + (fTemp478 + (fTemp178 + (fTemp439 + (fTemp400 + (fTemp369 + (fTemp271 + fTemp282))))))) - fTemp438) - fTemp166)) - fTemp106)) + ((0.000274666585f * ((((((fTemp129 + (fTemp204 + (fTemp495 + fTemp429))) - fTemp120) - fTemp410) - fTemp374) - fTemp118) - fTemp337)) + ((0.000305185094f * ((((((((fTemp380 + fTemp94) - fTemp229) - fTemp155) - fTemp376) - fTemp384) - fTemp346) - fTemp365) - fTemp345)) + ((0.000427259132f * ((((((((fTemp126 + (fTemp116 + (fTemp480 + (fTemp343 + (fTemp493 + fTemp180))))) - fTemp451) - fTemp427) - fTemp393) - fTemp139) - fTemp408) - fTemp352) - fTemp114)) + ((0.000213629566f * (((fTemp153 + (fTemp462 + (fTemp356 + (fTemp447 + fTemp250)))) - fTemp414) - fTemp366)) + ((0.000183111057f * (((fTemp206 + (fTemp217 + fTemp92)) - fTemp113) - fTemp371)) + ((0.000671407208f * ((((((fTemp207 + (fTemp466 + (fTemp91 + (fTemp378 + (fTemp181 + fTemp234))))) - fTemp230) - fTemp172) - fTemp443) - fTemp405) - fTemp383)) + ((0.000854518265f * (((((fTemp183 + (fTemp421 + (fTemp368 + (fTemp515 + (fTemp386 - fTemp246))))) - fTemp425) - fTemp403) - fTemp389) - fTemp361)) + ((0.000823999755f * ((((((((fTemp472 + (fTemp347 + (fTemp226 + (fTemp176 + (fTemp423 - fTemp244))))) - fTemp191) - fTemp446) - fTemp351) - fTemp373) - fTemp163) - fTemp125) - fTemp390)) + ((0.000732444227f * (((((((((fTemp23 + (fTemp157 + (fTemp348 + fTemp8))) - fTemp431) - fTemp27) - fTemp161) - fTemp152) - fTemp399) - fTemp396) - fTemp354) - fTemp112)) + ((0.000762962736f * ((((fTemp22 + ((fTemp482 + (fTemp442 + (fTemp210 + (fTemp377 + (fTemp473 + (fTemp225 + (fTemp232 + (fTemp203 + fTemp501)))))))) - fTemp185)) - fTemp146) - fTemp127) - fTemp372)) + ((0.000915555283f * ((((fTemp397 + fTemp516) - fTemp18) - fTemp394) - fTemp529)) + ((0.000793481246f * ((((fTemp123 + (fTemp437 + (fTemp137 + (fTemp358 + (fTemp456 + (fTemp419 + (fTemp412 + (fTemp279 - fTemp272)))))))) - fTemp162) - fTemp344) - fTemp131)) + ((0.000701925717f * (((fTemp10 + (fTemp138 + (fTemp391 + (fTemp194 + fTemp436)))) - fTemp108) - fTemp142)) + ((0.000610370189f * (((fTemp227 + (fTemp464 + (fTemp450 + (fTemp490 + (fTemp514 + fTemp283))))) - fTemp140) - fTemp99)) + ((0.000152592547f * ((fTemp461 - fTemp222) - fTemp417)) + ((0.000122074038f * (fTemp145 + (fTemp109 - fTemp463))) + ((0.00119022187f * ((fTemp105 + (fTemp190 + (fTemp448 + fTemp465))) - fTemp150)) + ((0.00100711081f * ((((((fTemp476 + (fTemp93 + (fTemp413 + (fTemp406 + (fTemp370 + fTemp188))))) - fTemp19) - fTemp20) - fTemp97) - fTemp428) - fTemp121)) + ((0.000335703604f * (((((((fTemp433 + (fTemp489 + fTemp487)) - fTemp228) - fTemp182) - fTemp170) - fTemp434) - fTemp382) - fTemp420)) + ((0.00103762932f * (fTemp17 + (fTemp379 + (fTemp435 + fTemp96)))) + ((0.00109866634f * (fTemp16 + fTemp216)) + ((0.00146488845f * (fTemp195 + (fTemp235 + fTemp265))) + ((0.00125125889f * (fTemp349 + (fTemp251 + (fTemp257 + fTemp362)))) + ((0.00158696249f * (fTemp236 + fTemp549)) + ((0.00180059206f * (fTemp500 + fTemp242)) + ((0.00164799951f * (fTemp238 + (fTemp256 + fTemp258))) + ((0.00201422162f * (fTemp241 + fTemp259)) + ((0.00167851802f * (fTemp252 + fTemp471)) + ((0.00219733268f * (fTemp401 + fTemp264)) + ((0.00280770287f * fTemp550) + ((0.00262459181f * (fTemp254 + (fTemp260 + fTemp286))) + ((0.00274666585f * fTemp551) + ((0.00311288796f * (fTemp269 + fTemp41)) + ((0.00524918362f * (fTemp42 - fTemp40)) + (0.00491348002f * (fTemp32 - fTemp503))))))))))))))))))))))))))))))))))))))))) + (0.000518814661f * ((((((fTemp177 + (fTemp151 + (fTemp205 + (fTemp11 + (fTemp467 + (fTemp184 + (fTemp193 + (fTemp147 + (fTemp357 + fTemp111))))))))) - fTemp115) - fTemp340) - fTemp353) - fTemp334) - fTemp88)))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00112918485f * fTemp100) + ((0.00149540696f * fTemp445) + ((0.00408948027f * fTemp31) + ((0.00573747978f * fTemp95) + ((0.00140385143f * fTemp277) + ((0.0019531846f * fTemp284) + ((0.00115970336f * fTemp285) + ((0.00729392376f * fTemp511) + ((0.0118106632f * fTemp291) + ((0.0108951079f * fTemp292) + ((0.00277718436f * fTemp293) + ((0.00717184972f * fTemp37) + ((0.014618366f * fTemp38) + ((0.0126041444f * fTemp39) + ((0.00885036774f * fTemp43) + ((0.0168767367f * fTemp44) + ((0.0166020691f * fTemp45) + ((0.0045167394f * fTemp46) + ((0.0143131809f * fTemp213) + ((0.0265205856f * fTemp296) + ((0.0197759941f * fTemp430) + ((0.0120242927f * fTemp50) + ((0.0012817774f * fTemp51) + ((0.00604266487f * fTemp52) + ((0.0161442924f * fTemp307) + ((0.0235908087f * fTemp54) + ((0.0286873989f * fTemp55) + ((0.0279854741f * fTemp508) + ((0.106448561f * fTemp308) + ((0.128330335f * fTemp309) + ((0.0896633789f * fTemp509) + ((0.0366527289f * fTemp310) + ((0.00817896053f * fTemp311) + (((0.000366222113f * (fTemp341 + (fTemp355 + ((((fTemp301 - fTemp496) - fTemp415) - fTemp197) - fTemp359)))) + ((0.000396740623f * (fTemp360 + (fTemp124 + (fTemp136 + ((((((fTemp470 + (fTemp270 + fTemp278)) - fTemp173) - fTemp128) - fTemp110) - fTemp363) - fTemp339))))) + (((0.000976592302f * (fTemp426 + (((((fTemp30 - fTemp526) - fTemp499) - fTemp460) - fTemp202) - fTemp189))) + ((0.000946073793f * (fTemp89 + ((((((fTemp175 - fTemp449) - fTemp224) - fTemp474) - fTemp398) - fTemp201) - fTemp521))) + ((6.10370189e-05f * ((fTemp14 + (((((fTemp314 + fTemp6) - fTemp174) - fTemp407) - fTemp168) - fTemp13)) - fTemp164)) + ((0.00106814783f * (fTemp187 - fTemp469)) + ((3.05185094e-05f * ((((fTemp62 + (fTemp5 + (fTemp66 + (fTemp67 + (fTemp4 + (fTemp319 + (fTemp320 + (fTemp321 + (fTemp219 + (fTemp68 + (fTemp3 + (fTemp71 + (fTemp72 + (fTemp324 + (fTemp218 + (fTemp73 + (fTemp74 + ((fTemp77 + (fTemp402 + (fTemp79 + (fTemp80 + (fTemp2 + (fTemp86 + fTemp332)))))) - fTemp75)))))))))))))))))) - fTemp477) - fTemp192) - fTemp432)) + ((0.001617481f * (((fTemp468 - fTemp29) - fTemp240) - fTemp133)) + ((9.15555283e-05f * (((fTemp315 + fTemp61) - fTemp199) - fTemp12)) + ((0.00189214759f * ((fTemp510 - fTemp504) - fTemp237)) + ((0.00143436994f * (fTemp248 + fTemp280)) + ((0.00238044374f * (fTemp312 - fTemp255)) + ((0.0025940733f * (fTemp281 - fTemp261)) + ((0.00216681417f * (fTemp297 - fTemp488)) + (0.00314340647f * (fTemp215 - fTemp28)))))))))))))) + (0.000885036774f * (fTemp375 + (fTemp130 + (fTemp156 + (fTemp149 + ((((fTemp214 - fTemp497) - fTemp444) - fTemp15) - fTemp90))))))))) + (0.000488296151f * (fTemp513 + (fTemp333 + (fTemp338 + (fTemp132 + (fTemp24 + (((fTemp247 - fTemp211) - fTemp103) - fTemp179))))))))))))))))))))))))))))))))))))))))))) : (iSlow7 ? (((0.951384008f * fTemp223) + ((0.00274666585f * fTemp447) + ((0.00430310983f * fTemp224) + ((0.00149540696f * fTemp368) + ((0.00222785119f * fTemp147) + ((0.00564592425f * fTemp208) + ((0.00671407208f * fTemp467) + ((0.00744651631f * fTemp110) + ((0.00689718314f * fTemp363) + ((0.0074159978f * fTemp388) + ((0.00155644398f * fTemp489) + ((0.00253303628f * fTemp210) + ((0.003234962f * fTemp137) + ((0.00460829493f * fTemp464) + ((0.00103762932f * fTemp483) + ((0.00894192327f * fTemp407) + ((0.0155949583f * fTemp168) + ((0.013000885f * fTemp478) + ((0.0198675506f * fTemp414) + ((0.0164494775f * fTemp14) + ((0.0190435499f * fTemp228) + ((0.014679403f * fTemp229) + ((0.00888088625f * fTemp432) + ((0.00360118411f * fTemp342) + ((0.0140385143f * fTemp463) + ((0.0234076977f * fTemp459) + ((0.0283211768f * fTemp230) + ((0.0231025126f * fTemp149) + ((0.0156865139f * fTemp18) + ((0.00769066438f * fTemp19) + ((0.0090334788f * fTemp446) + ((0.011322367f * fTemp146) + ((0.00967436749f * fTemp364) + ((0.00720236823f * fTemp170) + ((0.0186162908f * fTemp89) + ((0.0196844395f * fTemp97) + ((0.0187078472f * fTemp428) + ((0.0158696249f * fTemp426) + ((0.0116580706f * fTemp156) + ((0.00704977568f * fTemp163) + ((0.00958281197f * fTemp100) + ((0.0103457747f * fTemp344) + ((0.00857570115f * fTemp120) + ((0.00424207281f * fTemp99) + ((0.00598162785f * fTemp108) + ((0.00643940549f * fTemp142) + ((0.00595110934f * fTemp119) + ((0.00247199927f * fTemp102) + ((0.00369273964f * fTemp130) + ((0.00448622089f * fTemp399) + ((0.00335703604f * fTemp375) + ((0.00415051728f * fTemp389) + ((0.00125125889f * fTemp337) + ((0.004852443f * fTemp357) + ((0.00170903653f * fTemp397) + ((0.00540177617f * fTemp240) + ((0.00527970213f * fTemp504) + ((0.00625629444f * fTemp241) + ((0.00686666463f * fTemp242) + ((0.00708029419f * fTemp243) + ((0.00695822015f * fTemp216) + ((0.0115665151f * fTemp386) + (fTemp533 + ((0.00604266487f * fTemp457) + ((0.0108645894f * fTemp261) + ((0.0174260698f * fTemp262) + ((0.0167546626f * fTemp263) + ((0.0133976256f * fTemp264) + ((0.0147404401f * fTemp265) + ((0.0182195511f * fTemp497) + ((0.0230109561f * fTemp520) + ((0.0310678426f * fTemp28) + ((0.0311288796f * fTemp29) + ((0.025757622f * fTemp385) + ((0.0209051799f * fTemp270) + ((0.0093691824f * fTemp271) + ((0.00143436994f * fTemp30) + (fTemp534 + ((0.0318308063f * fTemp32) + ((0.0229194015f * fTemp33) + ((0.0115970336f * fTemp279) + ((0.0410473943f * fTemp280) + ((0.0601519831f * fTemp281) + ((0.0667745024f * fTemp215) + ((0.0491958372f * fTemp468) + ((0.0928678215f * fTemp289) + ((0.0915250108f * fTemp290) + ((0.0438550971f * fTemp505) + ((0.0420239866f * fTemp36) + ((0.0726035312f * fTemp37) + ((0.0948210061f * fTemp38) + ((0.112796411f * fTemp39) + ((0.109530933f * fTemp40) + ((0.11035493f * fTemp41) + ((0.0534684286f * fTemp42) + ((0.00778221991f * fTemp48) + ((0.0514542088f * fTemp49) + ((0.0397045799f * fTemp295) + ((0.0111087374f * fTemp213) + ((0.0335703604f * fTemp299) + ((0.0695211664f * fTemp53) + (fTemp535 + ((0.231299788f * fTemp303) + ((0.173406169f * fTemp304) + ((0.0860011578f * fTemp305) + ((0.47386089f * fTemp144) + (fTemp508 + ((0.669362485f * fTemp308) + ((0.272713393f * fTemp309) + ((0.0664693117f * fTemp509) + ((0.0138248848f * fTemp310) + ((0.00140385143f * ((fTemp345 + fTemp202) - fTemp88)) + ((0.000946073793f * ((fTemp287 - fTemp197) - fTemp231)) + ((0.000122074038f * (fTemp341 + ((((fTemp316 + (fTemp72 + (fTemp323 + fTemp536))) - fTemp401) - fTemp491) - fTemp128))) + ((0.000793481246f * (fTemp106 + ((((fTemp199 - fTemp452) - fTemp139) - fTemp136) - fTemp360))) + ((0.000396740623f * (fTemp352 + (fTemp436 + fTemp416))) + ((0.00491348002f * ((fTemp354 - fTemp350) - fTemp113)) + ((0.00262459181f * (fTemp361 + (fTemp358 - fTemp226))) + ((0.00512710959f * (fTemp390 + fTemp532)) + ((0.00311288796f * (fTemp529 + (fTemp424 + fTemp193))) + ((0.00436414685f * (fTemp396 + (fTemp184 - fTemp7))) + ((0.0045167394f * fTemp537) + ((0.0028992584f * (fTemp131 + fTemp161)) + ((0.00164799951f * (fTemp134 - fTemp418)) + ((3.05185094e-05f * ((fTemp63 + (fTemp319 + (fTemp220 + (fTemp321 + (fTemp539 - fTemp326))))) - fTemp408)) + ((0.000732444227f * ((fTemp166 + (((fTemp35 - fTemp448) - fTemp154) - fTemp160)) - fTemp148)) + ((0.00454725791f * (fTemp109 - fTemp151)) + ((0.00692770164f * (fTemp150 + fTemp172)) + ((0.00344859157f * (fTemp121 + fTemp207)) + ((0.000152592547f * (fTemp152 + (fTemp219 + (fTemp68 + (fTemp218 + fTemp507))))) + ((0.00219733268f * (fTemp214 - fTemp132)) + ((0.00332651753f * (fTemp238 - fTemp420)) + ((0.000213629566f * ((fTemp5 + (fTemp70 + fTemp402)) - fTemp140)) + ((0.0154423658f * (fTemp425 + fTemp12)) + ((0.0108951079f * (fTemp373 - fTemp195)) + ((0.0110477004f * (fTemp443 + fTemp169)) + ((0.000823999755f * (fTemp455 + (fTemp187 + (fTemp377 + (fTemp395 + fTemp221))))) + ((0.0280465111f * (fTemp191 + fTemp31)) + ((0.0130314035f * (fTemp423 - fTemp189)) + ((0.000854518265f * ((fTemp198 - fTemp105) - fTemp476)) + ((0.00756859034f * (fTemp196 + fTemp269)) + ((0.00427259132f * ((fTemp183 + fTemp204) - fTemp347)) + ((0.00146488845f * (fTemp482 - fTemp442)) + ((0.00393688772f * (fTemp367 + fTemp460)) + ((0.00329599902f * (fTemp103 + fTemp143)) + ((0.00341807306f * (fTemp126 + fTemp205)) + ((0.00228888821f * fTemp540) + ((0.000518814661f * (fTemp8 + fTemp381)) + ((0.000335703604f * (fTemp453 + (fTemp66 - fTemp449))) + ((0.00213629566f * (fTemp209 + fTemp252)) + ((0.00134281442f * (fTemp450 - fTemp190)) + ((0.000244148076f * (fTemp541 - fTemp104)) + ((0.000305185094f * ((fTemp315 + fTemp67) - fTemp158)) + ((0.00347911008f * (fTemp398 + (fTemp437 + fTemp466))) + ((6.10370189e-05f * ((fTemp322 + (fTemp324 + (fTemp325 + (fTemp79 + (fTemp80 + (fTemp83 + fTemp542)))))) - fTemp129)) + ((0.000427259132f * ((fTemp495 + fTemp60) - fTemp380)) + ((0.00589007232f * (fTemp234 - fTemp421)) + ((0.000976592302f * (fTemp335 + fTemp251)) + ((0.000610370189f * (fTemp314 - fTemp387)) + ((0.00561540574f * (fTemp233 + fTemp412)) + ((9.15555283e-05f * (fTemp516 + (fTemp61 + (fTemp64 + (fTemp318 + (fTemp135 + (fTemp74 + (fTemp75 + (fTemp78 + fTemp544))))))))) + ((0.0105594043f * (fTemp429 + fTemp282)) + ((0.0375377685f * (fTemp300 - fTemp276)) + ((0.000183111057f * (fTemp71 + fTemp545)) + (0.000274666585f * (fTemp65 + fTemp69)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0383922867f * fTemp222) + ((0.00308236945f * fTemp225) + ((0.00207525864f * fTemp435) + ((0.00180059206f * fTemp379) + ((0.00283822138f * fTemp444) + ((0.00241096225f * fTemp378) + ((0.00405896176f * fTemp206) + ((0.00366222113f * fTemp178) + ((0.00158696249f * fTemp116) + ((0.0190740693f * fTemp133) + ((0.0211188085f * fTemp454) + ((0.0153508103f * fTemp472) + ((0.0106509598f * fTemp17) + ((0.0138554033f * fTemp521) + ((0.012939848f * fTemp90) + ((0.0100711081f * fTemp123) + ((0.00384533219f * fTemp164) + ((0.00656147953f * fTemp122) + ((0.00799584948f * fTemp177) + ((0.00814844202f * fTemp458) + ((0.00231940672f * fTemp167) + ((0.00302133244f * fTemp24) + ((0.00305185094f * fTemp26) + ((0.00286873989f * fTemp427) + ((0.00918607134f * fTemp417) + ((0.00979644153f * fTemp376) + ((0.0071108127f * fTemp384) + ((0.00479140598f * fTemp374) + ((0.000488296151f * fTemp336) + ((0.000915555283f * fTemp107) + ((0.00186162908f * fTemp232) + ((0.00866725668f * fTemp461) + ((0.00772118289f * fTemp400) + (fTemp546 + ((0.00851466414f * fTemp111) + (fTemp547 + ((0.00640888698f * fTemp515) + ((0.00585955381f * fTemp94) + ((0.0057985168f * fTemp92) + ((0.00433362834f * fTemp440) + ((0.00152592547f * fTemp470) + ((0.006469924f * fTemp246) + ((0.00759910885f * fTemp247) + ((0.00482192449f * fTemp487) + ((0.00518814661f * fTemp445) + ((0.00216681417f * fTemp250) + ((0.0125125889f * fTemp253) + ((0.0195623655f * fTemp254) + ((0.0241706595f * fTemp255) + ((0.0245368816f * fTemp256) + ((0.0232245866f * fTemp257) + ((0.0194402914f * fTemp258) + ((0.0131839961f * fTemp259) + ((0.0428174697f * fTemp362) + ((0.0549638346f * fTemp266) + ((0.0458693206f * fTemp506) + ((0.027619252f * fTemp267) + ((0.0104373302f * fTemp268) + ((0.0237128828f * fTemp186) + ((0.0206305124f * fTemp188) + ((0.0138859218f * fTemp503) + ((0.0522476882f * fTemp272) + ((0.0587176122f * fTemp273) + ((0.0266121402f * fTemp274) + ((0.00119022187f * fTemp492) + ((0.0258491784f * fTemp275) + ((0.0319528803f * fTemp277) + ((0.0252388082f * fTemp278) + ((0.0199285876f * fTemp501) + ((0.0202337727f * fTemp488) + ((0.0357676931f * fTemp283) + ((0.0796533078f * fTemp477) + ((0.106875822f * fTemp510) + ((0.112735376f * fTemp284) + ((0.0947294533f * fTemp285) + ((0.0542619117f * fTemp286) + ((0.0532242805f * fTemp291) + ((0.074892424f * fTemp292) + ((0.0972319692f * fTemp293) + ((0.110995822f * fTemp294) + ((0.128543958f * fTemp484) + ((0.130924404f * fTemp34) + ((0.105685599f * fTemp441) + ((0.0817285702f * fTemp485) + ((0.0400097668f * fTemp479) + ((0.0720847175f * fTemp43) + ((0.0990936011f * fTemp44) + ((0.112155519f * fTemp45) + ((0.0709860548f * fTemp46) + ((0.02600177f * fTemp47) + ((0.127109587f * fTemp430) + ((0.129093289f * fTemp297) + ((0.0620441288f * fTemp298) + ((0.142002627f * fTemp302) + ((0.15491195f * fTemp50) + ((0.133518472f * fTemp51) + ((0.0332346559f * fTemp52) + ((0.173100993f * fTemp306) + ((0.396893203f * fTemp307) + ((0.640003681f * fTemp54) + ((0.74459058f * fTemp55) + ((0.609271526f * fTemp56) + ((0.193426311f * fTemp57) + ((0.0083925901f * fTemp311) + ((0.029175695f * fTemp312) + ((0.0356151015f * fTemp313) + ((0.0248115491f * fTemp212) + ((0.00054933317f * fTemp59) + (((0.00115970336f * (fTemp333 - fTemp114)) + ((0.00100711081f * (fTemp334 + fTemp98)) + ((0.00106814783f * (fTemp101 + fTemp93)) + ((0.0022583697f * (fTemp365 - fTemp405)) + ((0.0035401471f * (fTemp366 + fTemp155)) + ((0.00445570238f * (fTemp371 + fTemp244)) + ((0.00503555406f * (fTemp118 - fTemp200)) + ((0.00399792474f * (fTemp346 - fTemp438)) + ((0.00277718436f * (fTemp124 + (fTemp422 - fTemp194))) + ((0.00109866634f * (fTemp353 - fTemp338)) + ((0.000762962736f * (fTemp494 - fTemp383)) + ((0.00537125766f * (fTemp249 - fTemp112)) + ((0.00408948027f * (fTemp526 - fTemp372)) + ((0.00338755455f * ((fTemp369 - fTemp356) - fTemp394)) + ((0.00390636921f * ((fTemp433 - fTemp138) - fTemp125)) + ((0.00418103579f * (((fTemp474 - fTemp514) - fTemp451) - fTemp403)) + ((0.000885036774f * ((fTemp349 + fTemp415) - fTemp409)) + ((0.000366222113f * ((fTemp157 + fTemp392) - fTemp393)) + ((0.00299081393f * (fTemp355 + fTemp359)) + ((0.0106204413f * (fTemp410 - fTemp351)) + ((0.00576799829f * (fTemp145 - fTemp162)) + ((0.00326548051f * (fTemp382 + fTemp473)) + ((0.00198370311f * (fTemp115 + (fTemp462 - fTemp493))) + ((0.00173955504f * (fTemp431 + fTemp434)) + ((0.00497451704f * (fTemp23 + fTemp370)) + ((0.00698873866f * (fTemp22 - fTemp439)) + ((0.00317392498f * (fTemp179 - fTemp486)) + ((0.00494399853f * (fTemp182 + (fTemp96 + fTemp502))) + ((0.00543229468f * (fTemp185 + (fTemp413 + fTemp490))) + ((0.00372325815f * (fTemp20 - fTemp153)) + ((0.0077517014f * (fTemp16 + fTemp500)) + ((0.00473036896f * (fTemp469 - fTemp391)) + ((0.00796533097f * (fTemp471 - fTemp13)) + ((0.0131534776f * (fTemp58 - fTemp192)) + ((0.00363170262f * (fTemp411 + (fTemp456 + fTemp165))) + ((0.00314340647f * (fTemp201 - fTemp181)) + ((0.00177007355f * (fTemp348 - fTemp475)) + ((0.00466933195f * (((fTemp498 + fTemp175) - fTemp11) - fTemp227)) + ((0.00793481246f * (fTemp236 - fTemp339)) + ((0.0054933317f * (fTemp174 - fTemp217)) + ((0.00057985168f * (fTemp171 + fTemp141)) + ((0.000457777642f * (fTemp91 + fTemp237)) + ((0.000701925717f * (fTemp211 + fTemp511)) + ((0.00396740623f * (fTemp499 - fTemp176)) + ((((0.0622272417f * (fTemp296 - fTemp288)) + (0.0137028107f * (fTemp180 + fTemp301))) + (0.00552385021f * (fTemp248 + fTemp404))) + (0.00601214636f * (fTemp496 + fTemp235))))))))))))))))))))))))))))))))))))))))))))))) + (0.00137333293f * (fTemp513 + ((fTemp15 + ((fTemp173 + fTemp260) - fTemp343)) - fTemp27))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow8 ? (((0.168980986f * fTemp402) + ((0.29261148f * fTemp218) + ((0.183477283f * fTemp3) + ((0.00759910885f * fTemp219) + ((0.140202031f * fTemp7) + ((0.00119022187f * fTemp204) + ((0.00375377666f * fTemp460) + ((0.0025940733f * fTemp387) + ((0.00540177617f * fTemp141) + ((0.00500503555f * fTemp154) + ((0.00204474013f * fTemp335) + ((0.00299081393f * fTemp110) + ((0.00411999878f * fTemp217) + ((0.00320444349f * fTemp206) + ((0.00305185094f * fTemp116) + (fTemp518 + ((0.00405896176f * fTemp133) + ((0.00466933195f * fTemp472) + ((0.00488296151f * fTemp433) + ((0.00659199804f * fTemp469) + ((0.0101931822f * fTemp16) + ((0.00881984923f * fTemp189) + ((0.00546281319f * fTemp20) + ((0.004852443f * fTemp185) + ((0.00292977691f * fTemp451) + ((0.00241096225f * fTemp24) + ((0.000610370189f * fTemp134) + ((3.05185094e-05f * fTemp346) + ((0.00662251655f * fTemp369) + ((0.00491348002f * fTemp111) + ((0.00497451704f * fTemp502) + ((0.00366222113f * fTemp238) + ((0.00335703604f * fTemp266) + ((0.00503555406f * fTemp506) + (fTemp519 + ((0.000366222113f * fTemp269) + ((0.0045167394f * fTemp520) + ((0.0101016266f * fTemp28) + ((0.0131839961f * fTemp29) + ((0.0132755516f * fTemp270) + ((0.0152592547f * fTemp271) + ((0.0168462172f * fTemp370) + ((0.0157170333f * fTemp186) + ((0.00994903408f * fTemp188) + ((0.011383404f * fTemp272) + ((0.0231330302f * fTemp273) + ((0.029175695f * fTemp274) + ((0.0292367321f * fTemp169) + ((0.0241401419f * fTemp32) + ((0.0160222184f * fTemp33) + ((0.0058290353f * fTemp492) + ((0.00378429517f * fTemp215) + ((0.0153508103f * fTemp468) + ((0.0230414756f * fTemp283) + ((0.00875881221f * fTemp286) + ((0.0173955504f * fTemp287) + ((0.0207831059f * fTemp288) + ((0.0433362834f * fTemp290) + ((0.0458082817f * fTemp505) + ((0.0316171758f * fTemp511) + ((0.01617481f * fTemp291) + ((0.0108645894f * fTemp292) + ((0.0189519953f * fTemp293) + ((0.0271004364f * fTemp294) + ((0.0249641407f * fTemp484) + ((0.0234992523f * fTemp34) + ((0.0252388082f * fTemp441) + ((0.0387890264f * fTemp485) + ((0.0479750969f * fTemp479) + ((0.0493179113f * fTemp35) + ((0.0417188033f * fTemp36) + ((0.0316782147f * fTemp37) + ((0.0304574724f * fTemp38) + ((0.0267036967f * fTemp39) + ((0.0267342143f * fTemp40) + ((0.0122074038f * fTemp41) + ((0.00570696127f * fTemp42) + ((0.00628681295f * fTemp43) + ((0.00897244178f * fTemp44) + ((0.0122379223f * fTemp45) + ((0.0284432508f * fTemp46) + ((0.0445265062f * fTemp47) + ((0.061403241f * fTemp48) + ((0.0559099093f * fTemp49) + ((0.0541093163f * fTemp295) + ((0.0450453199f * fTemp213) + ((0.0387585089f * fTemp296) + ((0.0131534776f * fTemp430) + ((0.0464186519f * fTemp313) + ((0.102847375f * fTemp212) + ((0.142582476f * fTemp58) + ((0.10177923f * fTemp59) + ((0.0467238389f * fTemp60) + ((0.0500808731f * fTemp68) + ((0.113834038f * fTemp69) + ((0.168767363f * fTemp70) + ((0.16446425f * fTemp71) + ((0.106448561f * fTemp72) + ((0.0570696145f * fTemp135) + ((0.00802636798f * fTemp323) + ((0.0569475405f * fTemp324) + ((0.106326491f * fTemp325) + ((0.416150391f * fTemp326) + ((0.503128171f * fTemp73) + ((0.395886093f * fTemp74) + ((0.329660952f * fTemp75) + ((0.266762286f * fTemp76) + ((0.233191937f * fTemp77) + ((0.0689107925f * fTemp507) + ((0.055238504f * fTemp78) + ((0.0321665108f * fTemp80) + ((0.273689985f * fTemp327) + ((0.570207834f * fTemp85) + ((0.697561562f * fTemp86) + ((0.58861047f * fTemp87) + ((0.000885036774f * (fTemp88 + (fTemp390 + (fTemp500 + fTemp214)))) + ((0.000152592547f * (fTemp334 + ((fTemp115 + fTemp140) - fTemp408))) + ((0.00158696249f * (((((fTemp22 - fTemp475) - fTemp366) - fTemp345) - fTemp337) - fTemp106)) + ((0.000823999755f * (fTemp383 + fTemp200)) + ((0.000976592302f * (fTemp361 + (fTemp375 + (fTemp130 + (fTemp131 + (fTemp447 + (fTemp449 + (fTemp268 - fTemp216)))))))) + ((0.000518814661f * (fTemp354 + (fTemp458 + fTemp478))) + ((0.000701925717f * (fTemp372 + ((fTemp473 + fTemp362) - fTemp170))) + ((0.000946073793f * (fTemp403 + ((fTemp176 - fTemp12) - fTemp155))) + ((0.000274666585f * (fTemp409 + fTemp349)) + ((0.00213629566f * ((((fTemp431 + fTemp499) - fTemp100) - fTemp384) - fTemp142)) + ((0.00271614734f * ((fTemp172 - fTemp103) - fTemp120)) + ((0.000183111057f * ((((fTemp419 - fTemp137) - fTemp359) - fTemp425) - fTemp132)) + ((0.000640888698f * (fTemp353 + (fTemp112 + ((fTemp373 + fTemp105) - fTemp136)))) + ((0.00131229591f * (fTemp162 + (fTemp18 + (fTemp15 + fTemp474)))) + ((0.00222785119f * (fTemp446 - fTemp183)) + ((0.00308236945f * (fTemp455 - fTemp104)) + ((0.0028992584f * (fTemp167 - fTemp93)) + ((0.00152592547f * ((((fTemp343 + (fTemp208 + (fTemp30 - fTemp138))) - fTemp207) - fTemp350) - fTemp122)) + ((0.00494399853f * (fTemp187 + (fTemp521 - fTemp339))) + ((0.00262459181f * ((fTemp476 - fTemp452) - fTemp230)) + ((0.00473036896f * (fTemp13 - fTemp450)) + ((0.00302133244f * (fTemp400 - fTemp201)) + ((0.00274666585f * ((fTemp203 - fTemp418) - fTemp202)) + ((0.00347911008f * (fTemp178 + fTemp421)) + ((6.10370189e-05f * ((fTemp453 + fTemp234) - fTemp489)) + ((0.00369273964f * (fTemp439 + fTemp224)) + ((0.0042115543f * ((fTemp380 + fTemp490) - fTemp381)) + ((0.00228888821f * (fTemp413 + fTemp440)) + ((0.00399792474f * (fTemp165 + fTemp461)) + ((0.00448622089f * (fTemp415 + fTemp395)) + ((0.00244148076f * (fTemp194 + fTemp477)) + ((0.0308847316f * (fTemp289 + fTemp1)) + (0.000305185094f * (fTemp515 + (fTemp92 + fTemp143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0950956792f * fTemp0) + ((0.407086402f * fTemp2) + ((0.119907223f * fTemp220) + ((0.104647972f * fTemp4) + ((0.0694601312f * fTemp5) + ((0.0351878405f * fTemp6) + ((0.0658284277f * fTemp221) + ((0.0187994018f * fTemp222) + ((0.0935392305f * fTemp223) + (fTemp522 + ((0.00442518387f * fTemp363) + ((0.0019226661f * fTemp157) + (fTemp523 + ((0.00607318338f * fTemp229) + ((0.006469924f * fTemp432) + (fTemp524 + ((0.000488296151f * fTemp149) + ((0.00057985168f * fTemp177) + ((0.00106814783f * fTemp163) + ((0.00054933317f * fTemp420) + ((0.00265511032f * fTemp344) + ((0.00296029542f * fTemp338) + ((0.00280770287f * fTemp99) + ((0.00253303628f * fTemp108) + ((0.00122074038f * fTemp113) + ((0.000244148076f * fTemp231) + ((0.00109866634f * fTemp406) + (fTemp525 + ((0.00360118411f * fTemp526) + ((0.00592059083f * fTemp175) + ((0.00793481246f * fTemp445) + ((0.014496292f * fTemp249) + ((0.0164189581f * fTemp250) + ((0.0162053294f * fTemp251) + ((0.0143131809f * fTemp252) + ((0.0116275521f * fTemp401) + ((0.00982696004f * fTemp404) + ((0.00955229346f * fTemp253) + ((0.0117496261f * fTemp254) + ((0.0142826624f * fTemp255) + ((0.015991699f * fTemp256) + ((0.0154423658f * fTemp257) + ((0.0148930326f * fTemp258) + ((0.0149235511f * fTemp259) + ((0.016113773f * fTemp260) + ((0.0165410321f * fTemp261) + ((0.0150151066f * fTemp262) + ((0.0119632557f * fTemp263) + ((0.00845362712f * fTemp264) + ((0.00506607257f * fTemp497) + ((0.00372325815f * fTemp429) + ((0.00610370189f * fTemp31) + ((0.00772118289f * fTemp95) + ((0.0101626636f * fTemp276) + ((0.0139774773f * fTemp278) + (fTemp527 + ((0.0115970336f * fTemp488) + ((0.00906399731f * fTemp471) + ((0.00524918362f * fTemp279) + ((0.0215765871f * fTemp510) + ((0.0111697745f * fTemp285) + ((0.0274971779f * fTemp297) + ((0.0648213178f * fTemp298) + ((0.086733602f * fTemp299) + ((0.0723899081f * fTemp300) + ((0.0505691692f * fTemp301) + ((0.0271309558f * fTemp302) + ((0.0262459181f * fTemp50) + ((0.0352488793f * fTemp51) + ((0.0595416129f * fTemp52) + ((0.0892056003f * fTemp53) + ((0.106997892f * fTemp159) + (fTemp528 + ((0.0951261967f * fTemp304) + ((0.0827661976f * fTemp305) + ((0.0679647177f * fTemp306) + ((0.0441908017f * fTemp307) + ((0.0145878475f * fTemp54) + ((0.0120242927f * fTemp55) + ((0.0444044322f * fTemp56) + ((0.0877101943f * fTemp57) + ((0.105410933f * fTemp144) + ((0.0773033872f * fTemp508) + ((0.0704977587f * fTemp308) + ((0.0741599798f * fTemp309) + ((0.0741904974f * fTemp509) + ((0.0656758323f * fTemp310) + ((0.0656453148f * fTemp311) + ((0.0495620593f * fTemp312) + ((0.0210272539f * fTemp199) + ((0.0883816034f * fTemp314) + ((0.0661030933f * fTemp315) + ((0.0493789501f * fTemp61) + ((0.0605792403f * fTemp62) + ((0.0716879815f * fTemp63) + ((0.0869472325f * fTemp64) + ((0.0743430927f * fTemp65) + ((0.0766930133f * fTemp66) + ((0.0944242701f * fTemp67) + ((0.119632557f * fTemp316) + ((0.134159371f * fTemp318) + ((0.134983361f * fTemp319) + ((0.0787682757f * fTemp320) + ((0.0547807254f * fTemp321) + ((0.0183721427f * fTemp322) + ((0.00552385021f * fTemp79) + ((0.0857264921f * fTemp81) + ((0.214575633f * fTemp82) + ((0.351451159f * fTemp83) + ((0.0879848599f * fTemp84) + ((0.650654614f * fTemp328) + (fTemp330 + ((0.798760951f * fTemp331) + ((0.36185798f * fTemp332) + (((0.000427259132f * (fTemp416 - fTemp333)) + ((0.000732444227f * (fTemp98 - fTemp166)) + ((0.00112918485f * (fTemp101 + (fTemp139 + (fTemp436 - fTemp444)))) + ((0.00143436994f * (fTemp107 + (fTemp150 + (fTemp97 - fTemp164)))) + ((0.00155644398f * (fTemp336 + fTemp145)) + ((0.001617481f * (fTemp341 + (fTemp102 + fTemp10))) + ((0.00170903653f * (fTemp114 + (fTemp365 + fTemp486))) + ((0.00177007355f * (fTemp352 + (fTemp360 + (fTemp151 - fTemp514)))) + ((0.00146488845f * (fTemp371 - fTemp128)) + ((0.000915555283f * (fTemp118 + (fTemp382 + (fTemp423 + fTemp503)))) + ((0.000457777642f * (fTemp374 - fTemp414)) + ((0.000396740623f * ((fTemp427 + (fTemp378 - fTemp391)) - fTemp124)) + ((0.00103762932f * (((fTemp422 - fTemp498) - fTemp379) - fTemp389)) + ((0.00125125889f * ((fTemp417 + ((fTemp158 + (fTemp281 - fTemp456)) - fTemp210)) - fTemp529)) + ((0.00137333293f * (((fTemp179 + ((fTemp91 - fTemp96) - fTemp90)) - fTemp351) - fTemp394)) + ((0.00134281442f * ((fTemp466 + fTemp94) - fTemp125)) + ((0.00115970336f * ((fTemp410 + fTemp364) - fTemp396)) + ((0.00100711081f * (fTemp233 - fTemp399)) + ((0.000854518265f * (((fTemp89 + (fTemp443 + fTemp171)) - fTemp405) - fTemp127)) + ((0.00149540696f * (fTemp393 + fTemp376)) + ((0.00167851802f * (fTemp340 - fTemp434)) + ((0.00180059206f * (fTemp119 - fTemp27)) + ((0.00198370311f * (fTemp148 + fTemp482)) + ((0.00238044374f * (fTemp109 + (fTemp348 + fTemp193))) + ((0.00268562883f * (fTemp355 + fTemp126)) + ((0.000793481246f * (fTemp121 + ((fTemp243 - fTemp397) - fTemp181))) + ((0.000335703604f * (fTemp152 + (fTemp161 + fTemp435))) + ((0.00173955504f * (fTemp156 + fTemp180)) + ((0.00201422162f * (fTemp426 + fTemp442)) + ((0.00189214759f * (fTemp428 + fTemp191)) + ((0.00250251777f * (fTemp516 - fTemp26)) + ((0.000122074038f * (fTemp438 + (fTemp184 + (fTemp226 + fTemp235)))) + ((9.15555283e-05f * ((fTemp190 + fTemp386) - fTemp146)) + ((0.00234992523f * ((fTemp358 + fTemp494) - fTemp23)) + ((0.00329599902f * ((((fTemp407 - fTemp211) - fTemp14) - fTemp19) - fTemp182)) + ((0.00256355479f * fTemp530) + ((0.00207525864f * (fTemp342 - fTemp160)) + ((0.0110171819f * (fTemp248 - fTemp17)) + ((0.00363170262f * (fTemp424 + ((fTemp244 + (fTemp246 + fTemp280)) - fTemp392))) + ((0.00332651753f * (fTemp228 + (fTemp411 + fTemp531))) + ((0.00439466536f * (fTemp174 - fTemp454)) + ((0.00164799951f * (((fTemp448 + fTemp242) - fTemp232) - fTemp196)) + ((0.0022583697f * (fTemp168 + (fTemp532 - fTemp198))) + ((0.00314340647f * (fTemp192 + fTemp11)) + ((0.00317392498f * (fTemp153 + ((fTemp491 - fTemp496) - fTemp356))) + ((0.003234962f * (fTemp197 + (fTemp347 + (fTemp487 - fTemp368)))) + ((0.00247199927f * (fTemp398 + (fTemp377 - fTemp147))) + ((0.00219733268f * (fTemp483 + (fTemp464 + fTemp470))) + ((0.00186162908f * (fTemp227 - fTemp462)) + ((0.00231940672f * (fTemp205 + (fTemp465 - fTemp467))) + ((0.00390636921f * (fTemp388 - fTemp129)) + ((0.00424207281f * (fTemp209 + fTemp241)) + ((0.0012817774f * ((fTemp236 - fTemp357) - fTemp493)) + ((0.00650044251f * (fTemp265 - fTemp495)) + ((0.00671407208f * (fTemp240 - fTemp237)) + (((0.0263069551f * (fTemp284 - fTemp282)) + (0.0130314035f * (fTemp277 - fTemp385))) + (0.00350962859f * (fTemp247 + fTemp275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000671407208f * ((fTemp123 - fTemp225) - fTemp513)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.361003458f * fTemp1) + ((0.145207062f * fTemp2) + ((0.0596942045f * fTemp3) + ((0.0601214655f * fTemp4) + ((0.0603045747f * fTemp5) + ((0.0603350922f * fTemp6) + ((0.0892971605f * fTemp7) + (fTemp9 + ((0.00314340647f * fTemp10) + ((0.00204474013f * fTemp11) + ((0.00253303628f * fTemp12) + ((0.00341807306f * fTemp13) + ((0.00238044374f * fTemp14) + ((0.00460829493f * fTemp15) + ((0.00674459059f * fTemp16) + ((0.00427259132f * fTemp17) + ((0.00317392498f * fTemp18) + ((0.00524918362f * fTemp19) + (fTemp21 + ((0.00265511032f * fTemp22) + ((0.00292977691f * fTemp23) + (fTemp25 + ((0.00350962859f * fTemp26) + ((0.00244148076f * fTemp27) + ((0.00589007232f * fTemp28) + ((0.00497451704f * fTemp29) + ((0.00592059083f * fTemp30) + ((0.00393688772f * fTemp31) + ((0.00805688649f * fTemp32) + ((0.00650044251f * fTemp33) + ((0.00140385143f * fTemp34) + ((0.00402844325f * fTemp35) + ((0.0135502182f * fTemp36) + ((0.0261848811f * fTemp37) + ((0.0339060649f * fTemp38) + ((0.0357066579f * fTemp39) + ((0.0284432508f * fTemp40) + ((0.0179448836f * fTemp41) + ((0.00799584948f * fTemp42) + ((0.0127872555f * fTemp43) + ((0.0249946602f * fTemp44) + ((0.0361949541f * fTemp45) + ((0.0436414704f * fTemp46) + ((0.0445875414f * fTemp47) + ((0.0314340666f * fTemp48) + ((0.0101626636f * fTemp49) + ((0.0213019196f * fTemp50) + ((0.0529496148f * fTemp51) + ((0.0629291683f * fTemp52) + ((0.0422070995f * fTemp53) + ((0.00503555406f * fTemp54) + ((0.0116885891f * fTemp55) + ((0.0181890316f * fTemp56) + ((0.0141300699f * fTemp57) + ((0.0585955381f * fTemp58) + ((0.0848719776f * fTemp59) + ((0.0473647267f * fTemp60) + ((0.019226661f * fTemp61) + ((0.0752281249f * fTemp62) + ((0.0648823529f * fTemp63) + ((0.0487380587f * fTemp64) + ((0.098178044f * fTemp65) + ((0.13794367f * fTemp66) + ((0.127445295f * fTemp67) + ((0.00576799829f * fTemp68) + ((0.0625629425f * fTemp69) + ((0.077211827f * fTemp70) + ((0.0472426526f * fTemp71) + ((0.0365916938f * fTemp72) + ((0.0572832413f * fTemp73) + ((0.251991332f * fTemp74) + ((0.338633388f * fTemp75) + ((0.27149266f * fTemp76) + ((0.122775964f * fTemp77) + ((0.0970183387f * fTemp78) + ((0.166234314f * fTemp79) + ((0.173436686f * fTemp80) + ((0.103854485f * fTemp81) + ((0.112735376f * fTemp82) + ((0.12103641f * fTemp83) + ((0.0334482864f * fTemp84) + ((0.133060709f * fTemp85) + ((0.45512253f * fTemp86) + ((0.673177302f * fTemp87) + ((0.000152592547f * (fTemp88 + (fTemp89 + (fTemp90 + (fTemp91 + fTemp92))))) + ((9.15555283e-05f * (((fTemp93 + ((fTemp94 + fTemp95) - fTemp96)) - fTemp97) - fTemp98)) + ((0.000244148076f * ((fTemp99 + fTemp100) - fTemp101)) + ((0.000396740623f * (((fTemp102 + (fTemp103 + (fTemp104 - fTemp105))) - fTemp106) - fTemp107)) + ((0.000823999755f * ((((fTemp108 + (fTemp109 + (fTemp110 + fTemp111))) - fTemp112) - fTemp113) - fTemp114)) + ((0.000701925717f * (fTemp117 - fTemp118)) + ((0.000762962736f * ((fTemp119 + (fTemp120 + (fTemp121 + (fTemp122 + fTemp123)))) - fTemp124)) + ((0.00149540696f * (fTemp125 + fTemp126)) + ((0.00207525864f * (fTemp127 + (fTemp128 + fTemp129))) + ((0.00170903653f * (fTemp130 + (fTemp131 + (fTemp132 + fTemp133)))) + ((0.00198370311f * (fTemp134 + fTemp135)) + ((0.00183111057f * (fTemp136 + (fTemp137 + fTemp138))) + ((0.00125125889f * (fTemp139 + (fTemp140 - fTemp141))) + ((0.000976592302f * (fTemp142 + (fTemp143 + fTemp144))) + ((0.000274666585f * (fTemp145 + (fTemp146 - fTemp147))) + ((0.00057985168f * (fTemp148 + fTemp149)) + ((0.000366222113f * (fTemp150 + fTemp151)) + ((0.00137333293f * (fTemp152 + (fTemp153 - fTemp154))) + ((0.00109866634f * (fTemp155 + (fTemp156 + (fTemp157 + (fTemp158 + (fTemp159 - fTemp160)))))) + ((0.001617481f * (fTemp161 + fTemp162)) + ((0.00158696249f * (fTemp163 + (fTemp164 - fTemp165))) + ((0.00283822138f * (fTemp166 + (fTemp167 + (fTemp168 + fTemp169)))) + ((0.00167851802f * (fTemp170 - fTemp171)) + ((0.00115970336f * (fTemp172 + (fTemp173 + ((fTemp174 + fTemp175) - fTemp176)))) + ((0.00143436994f * (fTemp177 + fTemp178)) + ((0.000518814661f * (fTemp179 + (fTemp180 - fTemp181))) + ((0.0025940733f * (fTemp182 + (fTemp183 + fTemp184))) + ((0.00405896176f * (fTemp185 + fTemp186)) + ((0.00610370189f * (fTemp187 + fTemp188)) + ((0.00146488845f * ((fTemp189 - fTemp190) - fTemp191)) + ((0.00268562883f * (fTemp192 + (fTemp193 - fTemp194))) + ((0.0012817774f * (fTemp195 + fTemp196)) + ((0.00054933317f * (fTemp197 + ((fTemp198 + (fTemp199 - fTemp200)) - fTemp201))) + ((0.00122074038f * (fTemp202 + (fTemp203 - fTemp204))) + ((0.00222785119f * (fTemp205 + fTemp206)) + ((0.00234992523f * (fTemp207 + (fTemp208 + fTemp209))) + ((0.00103762932f * (fTemp210 - fTemp211)) + (((0.00991851557f * (fTemp212 - fTemp213)) + (0.00573747978f * (fTemp214 - fTemp215))) + (0.00112918485f * (fTemp216 - fTemp217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.162755206f * fTemp0) + ((0.218909264f * fTemp218) + ((0.0510269478f * fTemp219) + ((0.0492873937f * fTemp220) + ((0.040192876f * fTemp221) + ((0.056184575f * fTemp222) + ((0.0212408826f * fTemp223) + ((0.00320444349f * fTemp224) + ((0.00277718436f * fTemp225) + ((0.00286873989f * fTemp226) + ((0.0022583697f * fTemp227) + ((0.00299081393f * fTemp228) + ((0.00448622089f * fTemp229) + ((0.00256355479f * fTemp230) + ((0.000183111057f * fTemp231) + ((0.003234962f * fTemp232) + ((0.0035401471f * fTemp233) + ((0.00305185094f * fTemp234) + ((0.00436414685f * fTemp235) + ((0.00622577593f * fTemp236) + ((0.00363170262f * fTemp237) + ((0.00390636921f * fTemp238) + ((0.00531022064f * fTemp239) + ((0.00686666463f * fTemp240) + ((0.00720236823f * fTemp241) + ((0.00540177617f * fTemp242) + ((0.00274666585f * fTemp243) + (fTemp245 + ((0.00585955381f * fTemp246) + ((0.00473036896f * fTemp247) + ((0.00488296151f * fTemp248) + ((0.0087282937f * fTemp249) + ((0.00997955259f * fTemp250) + ((0.008087405f * fTemp251) + ((0.0045167394f * fTemp252) + ((0.00375377666f * fTemp253) + ((0.00692770164f * fTemp254) + ((0.0100711081f * fTemp255) + ((0.0118717002f * fTemp256) + ((0.0114139225f * fTemp257) + ((0.0093691824f * fTemp258) + ((0.00708029419f * fTemp259) + ((0.0058290353f * fTemp260) + ((0.00659199804f * fTemp261) + ((0.00930814538f * fTemp262) + ((0.0120242927f * fTemp263) + ((0.0120548112f * fTemp264) + ((0.0083925901f * fTemp265) + ((0.00457777642f * fTemp266) + ((0.014557329f * fTemp267) + ((0.0147099216f * fTemp268) + ((0.00891140476f * fTemp269) + ((0.00604266487f * fTemp270) + ((0.00555436872f * fTemp271) + ((0.00878933072f * fTemp272) + ((0.00924710836f * fTemp273) + ((0.00479140598f * fTemp274) + ((0.0102847377f * fTemp275) + ((0.0165715516f * fTemp276) + ((0.0171208847f * fTemp277) + ((0.0126346629f * fTemp278) + ((0.00509659108f * fTemp279) + ((0.00598162785f * fTemp280) + ((0.00567644276f * fTemp281) + ((0.00634784997f * fTemp282) + ((0.00335703604f * fTemp283) + ((0.0204779208f * fTemp284) + ((0.0303048808f * fTemp285) + ((0.0289620664f * fTemp286) + ((0.0184636991f * fTemp287) + ((0.00875881221f * fTemp288) + ((0.0057985168f * fTemp289) + ((0.00689718314f * fTemp290) + ((0.00985747855f * fTemp291) + ((0.0148014771f * fTemp292) + ((0.0166631062f * fTemp293) + ((0.0120853297f * fTemp294) + ((0.00747703481f * fTemp295) + ((0.00527970213f * fTemp296) + ((0.0038758507f * fTemp297) + ((0.0127262184f * fTemp298) + ((0.0282601397f * fTemp299) + ((0.042115543f * fTemp300) + ((0.0376293212f * fTemp301) + ((0.0142826624f * fTemp302) + ((0.030915251f * fTemp303) + ((0.0390331745f * fTemp304) + ((0.0299996957f * fTemp305) + ((0.0165105145f * fTemp306) + ((0.00494399853f * fTemp307) + ((0.0444959886f * fTemp308) + ((0.0408032462f * fTemp309) + ((0.0415356904f * fTemp310) + ((0.0546891689f * fTemp311) + ((0.0627155378f * fTemp312) + ((0.0307321399f * fTemp313) + ((0.0516068004f * fTemp314) + ((0.0281380657f * fTemp315) + (fTemp317 + ((0.102481157f * fTemp318) + ((0.0962858945f * fTemp319) + ((0.0235908087f * fTemp320) + ((0.0511490218f * fTemp321) + ((0.0719626471f * fTemp322) + ((0.0451979116f * fTemp323) + ((0.0950346366f * fTemp324) + ((0.175481424f * fTemp325) + ((0.150425732f * fTemp326) + ((0.0214850307f * fTemp327) + ((0.393169969f * fTemp328) + (fTemp330 + ((0.990935981f * fTemp331) + ((0.538529634f * fTemp332) + (((0.000305185094f * (fTemp333 + (fTemp334 + fTemp335))) + ((0.000488296151f * (fTemp336 + (fTemp337 + ((fTemp338 - fTemp339) - fTemp340)))) + ((0.000457777642f * (fTemp341 + ((fTemp342 - fTemp343) - fTemp344))) + ((0.000640888698f * (fTemp345 + (fTemp346 + (((fTemp347 + (fTemp348 + fTemp349)) - fTemp350) - fTemp351)))) + ((0.000915555283f * (fTemp352 + (fTemp353 + (fTemp354 + (fTemp355 + ((fTemp356 + (fTemp357 - fTemp358)) - fTemp359)))))) + ((0.000885036774f * (fTemp360 + (fTemp361 + ((fTemp362 - fTemp363) - fTemp364)))) + ((0.000793481246f * (fTemp365 + (fTemp366 + (fTemp367 + (fTemp368 + (fTemp369 + fTemp370)))))) + ((0.000854518265f * (fTemp371 + (fTemp372 - fTemp373))) + ((0.000610370189f * (fTemp374 + (fTemp375 + (fTemp376 + ((((fTemp377 + (fTemp378 + fTemp379)) - fTemp380) - fTemp381) - fTemp382))))) + ((0.000946073793f * (fTemp383 + (fTemp384 + (((fTemp385 - fTemp386) - fTemp387) - fTemp388)))) + ((0.000732444227f * (fTemp389 + (fTemp390 + (((fTemp391 + fTemp392) - fTemp393) - fTemp394)))) + ((0.00201422162f * (fTemp395 - fTemp396)) + ((0.00216681417f * ((fTemp397 - fTemp398) - fTemp399)) + ((0.00189214759f * ((fTemp400 + (fTemp401 - fTemp402)) - fTemp403)) + ((0.00180059206f * (fTemp404 - fTemp405)) + ((0.00213629566f * (((fTemp406 - fTemp407) - fTemp408) - fTemp409)) + ((0.000213629566f * (fTemp410 + (fTemp411 + (fTemp412 - fTemp413)))) + ((6.10370189e-05f * ((fTemp414 + (fTemp415 + fTemp416)) - fTemp417)) + ((0.00155644398f * ((fTemp418 + fTemp419) - fTemp420)) + ((0.000427259132f * (((((fTemp421 + (fTemp422 + fTemp423)) - fTemp424) - fTemp425) - fTemp426) - fTemp427)) + ((3.05185094e-05f * (fTemp428 + fTemp429)) + ((0.00308236945f * (fTemp430 - fTemp431)) + ((0.00326548051f * ((fTemp432 - fTemp433) - fTemp434)) + ((0.00231940672f * (((fTemp435 + fTemp436) - fTemp437) - fTemp438)) + ((0.000335703604f * (((fTemp439 + (fTemp440 + fTemp441)) - fTemp442) - fTemp443)) + ((0.00100711081f * ((fTemp444 + fTemp445) - fTemp446)) + ((0.00152592547f * (((fTemp447 + (fTemp448 + fTemp449)) - fTemp450) - fTemp451)) + ((0.00219733268f * (((fTemp452 - fTemp453) - fTemp454) - fTemp455)) + ((0.00210577715f * ((fTemp456 + fTemp457) - fTemp458)) + ((0.00262459181f * (fTemp459 + ((fTemp460 + fTemp461) - fTemp462))) + ((0.00177007355f * (fTemp463 + (fTemp464 + ((fTemp465 - fTemp466) - fTemp467)))) + ((0.00704977568f * (fTemp468 - fTemp469)) + ((0.00271614734f * ((fTemp470 + fTemp471) - fTemp472)) + ((0.00106814783f * (((fTemp473 + fTemp474) - fTemp475) - fTemp476)) + ((0.00186162908f * (fTemp477 - fTemp478)) + ((0.00173955504f * (fTemp481 - fTemp482)) + ((0.00250251777f * (fTemp483 + (fTemp484 + fTemp485))) + ((0.00247199927f * (fTemp486 + fTemp487)) + ((0.00241096225f * (fTemp488 - fTemp489)) + ((0.00131229591f * (fTemp490 + (fTemp491 + fTemp492))) + ((0.0019531846f * (fTemp493 + (fTemp494 + fTemp495))) + ((0.00338755455f * (fTemp496 + fTemp497)) + ((0.0019226661f * (fTemp498 + fTemp499)) + ((0.00619525742f * (fTemp500 + fTemp501)) + ((0.00482192449f * (fTemp502 + fTemp503)) + ((0.00762962736f * (fTemp504 + fTemp505)) + ((0.00988799706f * (fTemp506 + fTemp507)) + ((0.0373851731f * (fTemp508 + fTemp509)) + (0.00753807183f * fTemp512))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000122074038f * (fTemp513 + (fTemp514 + fTemp517)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
			fRec0[1] = fRec0[0];
			IOTA = (IOTA + 1);
		}
	}

};

//----------------------------------------------------------------------------
//  LV2 interface
//----------------------------------------------------------------------------

#line 286 "lv2.cpp"

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

#include <bitset>
#include <boost/circular_buffer.hpp>

#include <lv2/lv2plug.in/ns/lv2core/lv2.h>
#include <lv2/lv2plug.in/ns/ext/dynmanifest/dynmanifest.h>
#include <lv2/lv2plug.in/ns/ext/atom/util.h>
#include <lv2/lv2plug.in/ns/ext/urid/urid.h>

// Set this to the proper shared library extension for your system
#ifndef DLLEXT
#define DLLEXT ".so"
#endif

#ifndef URI_PREFIX
#define URI_PREFIX "https://faustlv2.bitbucket.io"
#endif

#ifndef PLUGIN_URI
#define PLUGIN_URI URI_PREFIX "/vintage_mics"
#endif

#define MIDI_EVENT_URI "http://lv2plug.in/ns/ext/midi#MidiEvent"

/* Setting NVOICES at compile time overrides meta data in the Faust source. If
   set, this must be an integer value >= 0. A nonzero value indicates an
   instrument (VSTi) plugin with the given maximum number of voices. Use 1 for
   a monophonic synthesizer, and 0 for a simple effect plugin. If NVOICES
   isn't defined at compile time then the number of voices of an instrument
   plugin can also be set with the global "nvoices" meta data key in the Faust
   source. This setting also adds a special "polyphony" control to the plugin
   which can be used to dynamically adjust the actual number of voices in the
   range 1..NVOICES. */
//#define NVOICES 16

/* This enables a special "tuning" control for instruments which lets you
   select the MTS tuning to be used for the synth. In order to use this, you
   just drop some sysex (.syx) files with MTS octave-based tunings in 1- or
   2-byte format into the ~/.fautvst/tuning directory (these can be generated
   with the author's sclsyx program, https://bitbucket.org/agraef/sclsyx).
   The control will only be shown if any .syx files were found at startup. 0
   selects the default tuning (standard 12-tone equal temperament), i>0 the
   tuning in the ith sysex file (in alphabetic order). */
#ifndef FAUST_MTS
#define FAUST_MTS 1
#endif

/* This allows various manifest data to be generated from the corresponding
   metadata (author, name, description, license) in the Faust source. */
#ifndef FAUST_META
#define FAUST_META 1
#endif

/* This enables automatic MIDI controller mapping based on the midi:ctrl
   attributes in the Faust source. We have this enabled by default, but you
   may have to disable it if the custom controller mapping gets in the way of
   the automation facilities that the host provides. (But then again if the
   host wants to do its own controller mapping then it probably won't, or at
   least shouldn't, send us the MIDI controllers in the first place.) */
#ifndef FAUST_MIDICC
#define FAUST_MIDICC 1
#endif

/* This enables or disables the plugin's custom Qt GUI (cf. lv2ui.cpp). Note
   that this only affects the plugin manifest, the GUI code itself is in a
   separate module created with the lv2ui.cpp architecture. Also, you'll have
   to use the alternative lv2ui manifest templates to tell the LV2 host about
   the GUI. */
#ifndef FAUST_UI
#define FAUST_UI 0
#endif

// You can define these for various debugging output items.
//#define DEBUG_META 1 // recognized MIDI controller metadata
//#define DEBUG_VOICES 1 // triggering of synth voices
//#define DEBUG_VOICE_ALLOC 1 // voice allocation
//#define DEBUG_MIDI 1 // incoming MIDI messages
//#define DEBUG_NOTES 1 // note messages
//#define DEBUG_MIDICC 1 // controller messages
//#define DEBUG_RPN 1 // RPN messages (pitch bend range, master tuning)
//#define DEBUG_MTS 1 // MTS messages (octave/scale tuning)

// Note and voice data structures.

struct NoteInfo {
  uint8_t ch;
  int8_t note;
};

struct VoiceData {
  // Octave tunings (offsets in semitones) per MIDI channel.
  float tuning[16][12];
  // Allocated voices per MIDI channel and note.
  int8_t notes[16][128];
  // Free and used voices.
  int n_free, n_used;
  boost::circular_buffer<int> free_voices;
  boost::circular_buffer<int> used_voices;
  NoteInfo *note_info;
  // Voices queued for note-offs (zero-length notes).
  set<int> queued;
  // Last gate value during run() for each voice. We need to keep track of
  // these so that we can force the Faust synth to retrigger a note when
  // needed.
  float *lastgate;
  // Current pitch bend and pitch bend range on each MIDI channel, in semitones.
  float bend[16], range[16];
  // Current coarse, fine and total master tuning on each MIDI channel (tuning
  // offset relative to A4 = 440 Hz, in semitones).
  float coarse[16], fine[16], tune[16];
  VoiceData(int n) : free_voices(n), used_voices(n) { }
};

#if FAUST_MTS

// Helper classes to read and store MTS tunings.

#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

#include <string>
#include <vector>

struct MTSTuning {
  char *name; // name of the tuning
  int len; // length of sysex data in bytes
  unsigned char *data; // sysex data
  MTSTuning() : name(0), len(0), data(0) {}
  MTSTuning& operator=(const MTSTuning &t)
  {
    if (this == &t) return *this;
    if (name) free(name); if (data) free(data);
    name = 0; data = 0; len = t.len;
    if (t.name) {
      name = strdup(t.name); assert(name);
    }
    if (t.data) {
      data = (unsigned char*)malloc(len); assert(data);
      memcpy(data, t.data, len);
    }
    return *this;
  }
  MTSTuning(const MTSTuning& t) : name(0), len(0), data(0)
  { *this = t; }
  MTSTuning(const char *filename);
  ~MTSTuning()
  { if (name) free(name); if (data) free(data); }
};

MTSTuning::MTSTuning(const char *filename)
{
  FILE *fp = fopen(filename, "rb");
  name = 0; len = 0; data = 0;
  if (!fp) return;
  struct stat st;
  if (fstat(fileno(fp), &st)) return;
  len = st.st_size;
  data = (unsigned char*)calloc(len, 1);
  if (!data) {
    len = 0; fclose(fp);
    return;
  }
  assert(len > 0);
  if (fread(data, 1, len, fp) < len) {
    free(data); len = 0; data = 0; fclose(fp);
    return;
  }
  fclose(fp);
  // Do some basic sanity checks.
  if (data[0] != 0xf0 || data[len-1] != 0xf7 || // not a sysex message
      (data[1] != 0x7e && data[1] != 0x7f) || data[3] != 8 || // not MTS
      !((len == 21 && data[4] == 8) ||
	(len == 33 && data[4] == 9))) { // no 1- or 2-byte tuning
    free(data); len = 0; data = 0;
    return;
  }
  // Name of the tuning is the basename of the file, without the trailing .syx
  // suffix.
  string nm = filename;
  size_t p = nm.rfind(".syx");
  if (p != string::npos) nm.erase(p);
  p = nm.rfind('/');
  if (p != string::npos) nm.erase(0, p+1);
  name = strdup(nm.c_str());
  assert(name);
}

struct MTSTunings {
  vector<MTSTuning> tuning;
  MTSTunings() {}
  MTSTunings(const char *path);
};

static bool compareByName(const MTSTuning &a, const MTSTuning &b)
{
  return strcmp(a.name, b.name) < 0;
}

MTSTunings::MTSTunings(const char *path)
{
  DIR *dp = opendir(path);
  if (!dp) return;
  struct dirent *d;
  while ((d = readdir(dp))) {
    string nm = d->d_name;
    if (nm.length() > 4 && nm.substr(nm.length()-4) == ".syx") {
      string pathname = path;
      pathname += "/";
      pathname += nm;
      MTSTuning t(pathname.c_str());
      if (t.data) tuning.push_back(t);
    }
  }
  closedir(dp);
  // sort found tunings by name
  sort(tuning.begin(), tuning.end(), compareByName);
}

#endif

#if FAUST_MIDICC
static float ctrlval(const ui_elem_t &el, uint8_t v)
{
  // Translate the given MIDI controller value to the range and stepsize
  // indicated by the Faust control.
  switch (el.type) {
  case UI_BUTTON: case UI_CHECK_BUTTON:
    return (float)(v>=64);
  default:
    /* Continuous controllers. The problem here is that the range 0..127 is
       not symmetric. We'd like to map 64 to the center of the range
       (max-min)/2 and at the same time retain the full control range
       min..max. So let's just pretend that there are 128 controller values
       and map value 127 to the max value anyway. */
    if (v==127)
      return el.max;
    else
      // XXXFIXME: We might want to add proper quantization according to
      // el.step here.
      return el.min+(el.max-el.min)*v/128;
  }
}
#endif

/***************************************************************************/

/* Polyphonic Faust plugin data structure. XXXTODO: At present this is just a
   big struct which exposes all requisite data. Some more work is needed to
   make the interface a bit more abstract and properly encapsulate the
   internal data structures, so that implementation details can be changed
   more easily. */

struct LV2Plugin {
  const int maxvoices;	// maximum number of voices (zero if not an instrument)
  const int ndsps;	// number of dsp instances (1 if maxvoices==0)
  bool active;		// activation status
  int rate;		// sampling rate
  int nvoices;		// current number of voices (<= maxvoices)
  int tuning_no;	// current tuning number (<= n_tunings)
  vintage_mics **dsp;		// the dsps
  LV2UI **ui;		// their Faust interface descriptions
  int n_in, n_out;	// number of input and output control ports
  int *ctrls;		// Faust ui elements (indices into ui->elems)
  float **ports;	// corresponding LV2 data
  float *portvals;	// cached port data from the last run
  float *midivals[16];	// per-midi channel data
  int *inctrls, *outctrls;	// indices for active and passive controls
  float **inputs, **outputs;	// audio buffers
  int freq, gain, gate;	// indices of voice controls
  unsigned n_samples;	// current block size
  float **outbuf;	// audio buffers for mixing down the voices
  float **inbuf;	// dummy input buffer
  LV2_Atom_Sequence* event_port; // midi input
  float *poly, *tuning;	// polyphony and tuning ports
  std::map<uint8_t,int> ctrlmap; // MIDI controller map
  // Needed host features.
  LV2_URID_Map* map;	// the urid extension
  LV2_URID midi_event;	// midi event uri
  // Current RPN MSB and LSB numbers, as set with controllers 101 and 100.
  uint8_t rpn_msb[16], rpn_lsb[16];
  // Current data entry MSB and LSB numbers, as set with controllers 6 and 38.
  uint8_t data_msb[16], data_lsb[16];
  // Synth voice data (instruments only).
  VoiceData *vd;

  // Static methods. These all use static data so they can be invoked before
  // instantiating a plugin.

  // Global meta data (dsp name, author, etc.).
  static Meta *meta;
  static void init_meta()
  {
    if (!meta && (meta = new Meta)) {
      // We allocate the temporary dsp object on the heap here, to prevent
      // large dsp objects from running out of stack in environments where
      // stack space is precious (e.g., Reaper). Note that if any of these
      // allocations fail then no meta data will be available, but at least we
      // won't make the host crash and burn.
      vintage_mics* tmp_dsp = new vintage_mics();
      if (tmp_dsp) {
	tmp_dsp->metadata(meta);
	delete tmp_dsp;
      }
    }
  }
  static const char *meta_get(const char *key, const char *deflt)
  {
    init_meta();
    return meta?meta->get(key, deflt):deflt;
  }

  static const char *pluginName()
  {
    return meta_get("name", "vintage_mics");
  }

  static const char *pluginAuthor()
  {
    return meta_get("author", "");
  }

  static const char *pluginDescription()
  {
    return meta_get("description", "");
  }

  static const char *pluginLicense()
  {
    return meta_get("license", "");
  }

  static const char *pluginVersion()
  {
    return meta_get("version", "");
  }

  // Load a collection of sysex files with MTS tunings in ~/.faust/tuning.
  static int n_tunings;
#if FAUST_MTS
  static MTSTunings *mts;

  static MTSTunings *load_sysex_data()
  {
    if (!mts) {
      string mts_path;
      // Look for FAUST_HOME. If that isn't set, try $HOME/.faust. If HOME
      // isn't set either, just assume a .faust subdir of the cwd.
      const char *home = getenv("FAUST_HOME");
      if (home)
	mts_path = home;
      else {
	home = getenv("HOME");
	if (home) {
	  mts_path = home;
	  mts_path += "/.faust";
	} else
	  mts_path = ".faust";
      }
      // MTS tunings are looked for in this subdir.
      mts_path += "/tuning";
      mts = new MTSTunings(mts_path.c_str());
#ifdef __APPLE__
      if (!mts || mts->tuning.size() == 0) {
	// Also check ~/Library/Faust/Tuning on the Mac.
	home = getenv("HOME");
	if (home) {
	  if (mts) delete mts;
	  mts_path = home;
	  mts_path += "/Library/Faust/Tuning";
	  mts = new MTSTunings(mts_path.c_str());
	}
      }
#endif
      n_tunings = mts->tuning.size();
    }
    return mts;
  }
#endif

  // The number of voices of an instrument plugin. We get this information
  // from the global meta data (nvoices key) of the dsp module if present, and
  // you can also override this setting at compile time by defining the
  // NVOICES macro. If neither is defined or the value is zero then the plugin
  // becomes a simple audio effect instead.
  static int numVoices()
  {
#ifdef NVOICES
    return NVOICES;
#else
    const char *numVoices = meta_get("nvoices", "0");
    int nvoices = atoi(numVoices);
    if (nvoices < 0 ) nvoices = 0;
    return nvoices;
#endif
  }

  // Instance methods.

  LV2Plugin(const int num_voices, const int sr)
    : maxvoices(num_voices), ndsps(num_voices<=0?1:num_voices),
      vd(num_voices>0?new VoiceData(num_voices):0)
  {
    // Initialize static data.
    init_meta();
#if FAUST_MTS
    // Synth: load tuning sysex data if present.
    if (num_voices>0) load_sysex_data();
#endif
    // Allocate data structures and set some reasonable defaults.
    dsp = (vintage_mics**)calloc(ndsps, sizeof(vintage_mics*));
    ui = (LV2UI**)calloc(ndsps, sizeof(LV2UI*));
    assert(dsp && ui);
    if (vd) {
      vd->note_info = (NoteInfo*)calloc(ndsps, sizeof(NoteInfo));
      vd->lastgate = (float*)calloc(ndsps, sizeof(float));
      assert(vd->note_info && vd->lastgate);
    }
    active = false;
    rate = sr;
    nvoices = maxvoices;
    tuning_no = 0;
    n_in = n_out = 0;
    map = NULL;
    midi_event = -1;
    event_port = NULL;
    poly = tuning = NULL;
    freq = gain = gate = -1;
    if (vd) {
      vd->n_free = maxvoices;
      for (int i = 0; i < maxvoices; i++) {
	vd->free_voices.push_back(i);
	vd->lastgate[i] = 0.0f;
      }
      for (int i = 0; i < 16; i++) {
	vd->bend[i] = 0.0f;
	vd->range[i] = 2.0f;
	vd->coarse[i] = vd->fine[i] = vd->tune[i] = 0.0f;
	for (int j = 0; j < 12; j++)
	  vd->tuning[i][j] = 0.0f;
      }
      vd->n_used = 0;
      memset(vd->notes, 0xff, sizeof(vd->notes));
    }
    n_samples = 0;
    ctrls = inctrls = outctrls = NULL;
    ports = inputs = outputs = inbuf = outbuf = NULL;
    portvals = NULL;
    memset(midivals, 0, sizeof(midivals));
    // Initialize the Faust DSPs.
    for (int i = 0; i < ndsps; i++) {
      dsp[i] = new vintage_mics();
      ui[i] = new LV2UI(num_voices);
      dsp[i]->init(rate);
      dsp[i]->buildUserInterface(ui[i]);
    }
    // The ports are numbered as follows: 0..k-1 are the control ports, then
    // come the n audio input ports, then the m audio output ports, and
    // finally the midi input port and the polyphony and tuning controls.
    int k = ui[0]->nports, p = 0, q = 0;
    int n = dsp[0]->getNumInputs(), m = dsp[0]->getNumOutputs();
    // Allocate tables for the built-in control elements and their ports.
    ctrls = (int*)calloc(k, sizeof(int));
    inctrls = (int*)calloc(k, sizeof(int));
    outctrls = (int*)calloc(k, sizeof(int));
    ports = (float**)calloc(k, sizeof(float*));
    portvals = (float*)calloc(k, sizeof(float));
    assert(k == 0 || (ctrls && inctrls && outctrls && ports && portvals));
    for (int ch = 0; ch < 16; ch++) {
      midivals[ch] = (float*)calloc(k, sizeof(float));
      assert(k == 0 || midivals[ch]);
    }
    // Scan the Faust UI for active and passive controls which become the
    // input and output control ports of the plugin, respectively.
    for (int i = 0, j = 0; i < ui[0]->nelems; i++) {
      switch (ui[0]->elems[i].type) {
      case UI_T_GROUP: case UI_H_GROUP: case UI_V_GROUP: case UI_END_GROUP:
	// control groups (ignored right now)
	break;
      case UI_H_BARGRAPH: case UI_V_BARGRAPH:
	// passive controls (output ports)
	ctrls[j++] = i;
	outctrls[q++] = i;
	break;
      default:
	// active controls (input ports)
	if (maxvoices == 0)
	  goto noinstr;
	else if (freq == -1 &&
		 !strcmp(ui[0]->elems[i].label, "freq"))
	  freq = i;
	else if (gain == -1 &&
		 !strcmp(ui[0]->elems[i].label, "gain"))
	  gain = i;
	else if (gate == -1 &&
		 !strcmp(ui[0]->elems[i].label, "gate"))
	  gate = i;
	else {
	noinstr:
#if FAUST_MIDICC
	  std::map< int, list<strpair> >::iterator it =
	    ui[0]->metadata.find(i);
	  if (it != ui[0]->metadata.end()) {
	    // Scan for controller mappings.
	    for (std::list<strpair>::iterator jt = it->second.begin();
		 jt != it->second.end(); jt++) {
	      const char *key = jt->first, *val = jt->second;
#if DEBUG_META
	      fprintf(stderr, "ctrl '%s' meta: '%s' -> '%s'\n",
		      ui[0]->elems[i].label, key, val);
#endif
	      if (strcmp(key, "midi") == 0) {
		unsigned num;
		if (sscanf(val, "ctrl %u", &num) < 1) continue;
#if 0 // enable this to get feedback about controller assignments
		fprintf(stderr, "%s: cc %d -> %s\n", PLUGIN_URI, num,
			ui[0]->elems[i].label);
#endif
		ctrlmap.insert(std::pair<uint8_t,int>(num, p));
	      }
	    }
	  }
#endif
	  ctrls[j++] = i;
	  inctrls[p++] = i;
	  int p = ui[0]->elems[i].port;
	  float val = ui[0]->elems[i].init;
	  assert(p>=0);
	  portvals[p] = val;
	  for (int ch = 0; ch < 16; ch++)
	    midivals[ch][p] = val;
	}
	break;
      }
    }
    // Realloc the inctrls and outctrls vectors to their appropriate sizes.
    inctrls = (int*)realloc(inctrls, p*sizeof(int));
    assert(p == 0 || inctrls);
    outctrls = (int*)realloc(outctrls, q*sizeof(int));
    assert(q == 0 || outctrls);
    n_in = p; n_out = q;
    // Allocate vectors for the audio input and output ports. Like
    // ports, these will be initialized in the connect_port callback.
    inputs = (float**)calloc(n, sizeof(float*));
    assert(n == 0 || inputs);
    outputs = (float**)calloc(m, sizeof(float*));
    assert(m == 0 || outputs);
    if (maxvoices > 0) {
      // Initialize the mixdown buffer.
      outbuf = (float**)calloc(m, sizeof(float*));
      assert(m == 0 || outbuf);
      // We start out with a blocksize of 512 samples here. Hopefully this is
      // enough for most realtime hosts so that we can avoid reallocations
      // later when we know what the actual blocksize is.
      n_samples = 512;
      for (int i = 0; i < m; i++) {
	outbuf[i] = (float*)malloc(n_samples*sizeof(float));
	assert(outbuf[i]);
      }
      // Initialize a 1-sample dummy input buffer used for retriggering notes.
      inbuf = (float**)calloc(n, sizeof(float*));
      assert(n == 0 || inbuf);
      for (int i = 0; i < m; i++) {
	inbuf[i] = (float*)malloc(sizeof(float));
	assert(inbuf[i]);
	*inbuf[i] = 0.0f;
      }
    }
  }

  ~LV2Plugin()
  {
    const int n = dsp[0]->getNumInputs();
    const int m = dsp[0]->getNumOutputs();
    for (int i = 0; i < ndsps; i++) {
      delete dsp[i];
      delete ui[i];
    }
    free(ctrls); free(inctrls); free(outctrls);
    free(ports); free(portvals);
    free(inputs); free(outputs);
    for (int ch = 0; ch < 16; ch++)
      free(midivals[ch]);
    if (inbuf) {
      for (int i = 0; i < n; i++)
	free(inbuf[i]);
      free(inbuf);
    }
    if (outbuf) {
      for (int i = 0; i < m; i++)
	free(outbuf[i]);
      free(outbuf);
    }
    free(dsp); free(ui);
    if (vd) {
      free(vd->note_info);
      free(vd->lastgate);
      delete vd;
    }
  }
  // Voice allocation.

#if DEBUG_VOICE_ALLOC
  void print_voices(const char *msg)
  {
    fprintf(stderr, "%s: notes =", msg);
    for (uint8_t ch = 0; ch < 16; ch++)
      for (int note = 0; note < 128; note++)
	if (vd->notes[ch][note] >= 0)
	  fprintf(stderr, " [%d] %d(#%d)", ch, note, vd->notes[ch][note]);
    fprintf(stderr, "\nqueued (%d):", vd->queued.size());
    for (int i = 0; i < nvoices; i++)
      if (vd->queued.find(i) != vd->queued.end()) fprintf(stderr, " #%d", i);
    fprintf(stderr, "\nused (%d):", vd->n_used);
    for (boost::circular_buffer<int>::iterator it = vd->used_voices.begin();
	 it != vd->used_voices.end(); it++)
      fprintf(stderr, " #%d->%d", *it, vd->note_info[*it].note);
    fprintf(stderr, "\nfree (%d):", vd->n_free);
    for (boost::circular_buffer<int>::iterator it = vd->free_voices.begin();
	 it != vd->free_voices.end(); it++)
      fprintf(stderr, " #%d", *it);
    fprintf(stderr, "\n");
  }
#endif

  int alloc_voice(uint8_t ch, int8_t note, int8_t vel)
  {
    int i = vd->notes[ch][note];
    if (i >= 0) {
      // note already playing on same channel, retrigger it
      voice_off(i);
      voice_on(i, note, vel, ch);
      // move this voice to the end of the used list
      for (boost::circular_buffer<int>::iterator it =
	     vd->used_voices.begin();
	   it != vd->used_voices.end(); it++) {
	if (*it == i) {
	  vd->used_voices.erase(it);
	  vd->used_voices.push_back(i);
	  break;
	}
      }
#if DEBUG_VOICE_ALLOC
      print_voices("retrigger");
#endif
      return i;
    } else if (vd->n_free > 0) {
      // take voice from free list
      int i = vd->free_voices.front();
      vd->free_voices.pop_front();
      vd->n_free--;
      vd->used_voices.push_back(i);
      vd->note_info[i].ch = ch;
      vd->note_info[i].note = note;
      vd->n_used++;
      voice_on(i, note, vel, ch);
      vd->notes[ch][note] = i;
#if DEBUG_VOICE_ALLOC
      print_voices("alloc");
#endif
      return i;
    } else {
      // steal a voice
      assert(vd->n_used > 0);
      // FIXME: Maybe we should look for the oldest note on the *current*
      // channel here, but this is faster.
      int i = vd->used_voices.front();
      int oldch = vd->note_info[i].ch;
      int oldnote = vd->note_info[i].note;
      voice_off(i);
      vd->notes[oldch][oldnote] = -1;
      vd->queued.erase(i);
      vd->used_voices.pop_front();
      vd->used_voices.push_back(i);
      vd->note_info[i].ch = ch;
      vd->note_info[i].note = note;
      voice_on(i, note, vel, ch);
      vd->notes[ch][note] = i;
#if DEBUG_VOICE_ALLOC
      print_voices("steal");
#endif
      return i;
    }
  }

  int dealloc_voice(uint8_t ch, int8_t note, int8_t vel)
  {
    int i = vd->notes[ch][note];
    if (i >= 0) {
      if (vd->lastgate[i] == 0.0f && gate >= 0) {
	// zero-length note, queued for later
	vd->queued.insert(i);
	vd->notes[ch][note] = -1;
#if DEBUG_VOICE_ALLOC
	print_voices("dealloc (queued)");
#endif
	return i;
      }
      assert(vd->n_free < nvoices);
      vd->free_voices.push_back(i);
      vd->n_free++;
      voice_off(i);
      vd->notes[ch][note] = -1;
      // erase this voice from the used list
      for (boost::circular_buffer<int>::iterator it =
	     vd->used_voices.begin();
	   it != vd->used_voices.end(); it++) {
	if (*it == i) {
	  vd->used_voices.erase(it);
	  vd->n_used--;
	  break;
	}
      }
#if DEBUG_VOICE_ALLOC
      print_voices("dealloc");
#endif
      return i;
    }
    return -1;
  }


  float midicps(int8_t note, uint8_t chan)
  {
    float pitch = note + vd->tune[chan] +
      vd->tuning[chan][note%12] + vd->bend[chan];
    return 440.0*pow(2, (pitch-69.0)/12.0);
  }

  void voice_on(int i, int8_t note, int8_t vel, uint8_t ch)
  {
    if (vd->lastgate[i] == 1.0f && gate >= 0) {
      // Make sure that the synth sees the 0.0f gate so that the voice is
      // properly retriggered.
      *ui[i]->elems[gate].zone = 0.0f;
      dsp[i]->compute(1, inbuf, outbuf);
    }
#if DEBUG_VOICES
    fprintf(stderr, "voice on: %d %d (%g Hz) %d (%g)\n", i,
	    note, midicps(note, ch), vel, vel/127.0);
#endif
    if (freq >= 0)
      *ui[i]->elems[freq].zone = midicps(note, ch);
    if (gate >= 0)
      *ui[i]->elems[gate].zone = 1.0f;
    if (gain >= 0)
      *ui[i]->elems[gain].zone = vel/127.0;
    // reinitialize the per-channel control data for this voice
    for (int idx = 0; idx < n_in; idx++) {
      int j = inctrls[idx], k = ui[0]->elems[j].port;
      *ui[i]->elems[j].zone = midivals[ch][k];
    }
  }

  void voice_off(int i)
  {
#if DEBUG_VOICES
    fprintf(stderr, "voice off: %d\n", i);
#endif
    if (gate >= 0)
      *ui[i]->elems[gate].zone = 0.0f;
  }

  void update_voices(uint8_t chan)
  {
    // update running voices on the given channel after tuning or pitch bend
    // changes
    for (boost::circular_buffer<int>::iterator it =
	   vd->used_voices.begin();
	 it != vd->used_voices.end(); it++) {
      int i = *it;
      if (vd->note_info[i].ch == chan && freq >= 0) {
	int note = vd->note_info[i].note;
	*ui[i]->elems[freq].zone = midicps(note, chan);
      }
    }
  }

  void all_notes_off()
  {
    for (int i = 0; i < nvoices; i++)
      voice_off(i);
    for (int i = 0; i < 16; i++)
      vd->bend[i] = 0.0f;
    memset(vd->notes, 0xff, sizeof(vd->notes));
    vd->free_voices.clear();
    vd->n_free = nvoices;
    for (int i = 0; i < nvoices; i++)
      vd->free_voices.push_back(i);
    vd->queued.clear();
    vd->used_voices.clear();
    vd->n_used = 0;
  }

  void all_notes_off(uint8_t chan)
  {
    for (boost::circular_buffer<int>::iterator it =
	   vd->used_voices.begin();
	 it != vd->used_voices.end(); ) {
      int i = *it;
      if (vd->note_info[i].ch == chan) {
	assert(vd->n_free < nvoices);
	vd->free_voices.push_back(i);
	vd->n_free++;
	voice_off(i);
	vd->notes[vd->note_info[i].ch][vd->note_info[i].note] = -1;
	vd->queued.erase(i);
	// erase this voice from the used list
	it = vd->used_voices.erase(it);
	vd->n_used--;
#if DEBUG_VOICE_ALLOC
	print_voices("dealloc (all-notes-off)");
#endif
      } else
	it++;
    }
    vd->bend[chan] = 0.0f;
  }

  void queued_notes_off()
  {
    if (vd->queued.empty()) return;
    for (int i = 0; i < nvoices; i++)
      if (vd->queued.find(i) != vd->queued.end()) {
	assert(vd->n_free < nvoices);
	vd->free_voices.push_back(i);
	vd->n_free++;
	voice_off(i);
	vd->notes[vd->note_info[i].ch][vd->note_info[i].note] = -1;
	vd->queued.erase(i);
	// erase this voice from the used list
	for (boost::circular_buffer<int>::iterator it =
	       vd->used_voices.begin();
	     it != vd->used_voices.end(); it++) {
	  if (*it == i) {
	    vd->used_voices.erase(it);
	    vd->n_used--;
	    break;
	  }
	}
#if DEBUG_VOICE_ALLOC
	print_voices("dealloc (unqueued)");
#endif
      }
  }

  // Plugin activation status. suspend() deactivates a plugin (disables audio
  // processing), resume() reactivates it. Also, set_rate() changes the sample
  // rate. Note that the audio and MIDI process functions (see below) can
  // still be called in deactivated state, but this is optional. The plugin
  // tries to do some reasonable processing in either case, no matter whether
  // the host plugin architecture actually executes callbacks in suspended
  // state or not.

  void suspend()
  {
    active = false;
    if (maxvoices > 0) all_notes_off();
  }

  void resume()
  {
    for (int i = 0; i < ndsps; i++)
      dsp[i]->init(rate);
    for (int i = 0, j = 0; i < ui[0]->nelems; i++) {
      int p = ui[0]->elems[i].port;
      if (p >= 0) {
	float val = ui[0]->elems[i].init;
	portvals[p] = val;
      }
    }
    active = true;
  }

  void set_rate(int sr)
  {
    rate = sr;
    for (int i = 0; i < ndsps; i++)
      dsp[i]->init(rate);
  }

  // Audio and MIDI process functions. The plugin should run these in the
  // appropriate real-time callbacks.

  void process_audio(int blocksz, float **inputs, float **outputs)
  {
    int n = dsp[0]->getNumInputs(), m = dsp[0]->getNumOutputs();
    AVOIDDENORMALS;
    if (maxvoices > 0) queued_notes_off();
    if (!active) {
      // Depending on the plugin architecture and host, this code might never
      // be invoked, since the plugin is deactivitated at this point. But
      // let's do something reasonable here anyway.
      if (n == m) {
	// copy inputs to outputs
	for (int i = 0; i < m; i++)
	  for (unsigned j = 0; j < blocksz; j++)
	    outputs[i][j] = inputs[i][j];
      } else {
	// silence
	for (int i = 0; i < m; i++)
	  for (unsigned j = 0; j < blocksz; j++)
	    outputs[i][j] = 0.0f;
      }
      return;
    }
    // Handle changes in the polyphony and tuning controls.
    bool is_instr = maxvoices > 0;
    if (is_instr) {
      if (!poly)
	; // this shouldn't happen but...
      else if (nvoices != (int)*poly &&
	       (int)*poly > 0 && (int)*poly <= maxvoices) {
	for (int i = 0; i < nvoices; i++)
	  voice_off(i);
        nvoices = (int)*poly;
	// Reset the voice allocation.
	memset(vd->notes, 0xff, sizeof(vd->notes));
	vd->free_voices.clear();
	vd->n_free = nvoices;
	for (int i = 0; i < nvoices; i++)
	  vd->free_voices.push_back(i);
	vd->used_voices.clear();
	vd->n_used = 0;
      } else
	*poly = nvoices;
#if FAUST_MTS
      if (tuning && tuning_no != (int)*tuning) change_tuning((int)*tuning);
#endif
    }
    // Only update the controls (of all voices simultaneously) if a port value
    // actually changed. This is necessary to allow MIDI controllers to modify
    // the values for individual MIDI channels (see processEvents below). Also
    // note that this will be done *after* processing the MIDI controller data
    // for the current audio block, so manual inputs can still override these.
    for (int i = 0; i < n_in; i++) {
      int j = inctrls[i], k = ui[0]->elems[j].port;
      float &oldval = portvals[k], newval = *ports[k];
      if (newval != oldval) {
	if (is_instr) {
	  // instrument: update running voices
	  for (boost::circular_buffer<int>::iterator it =
		 vd->used_voices.begin();
	       it != vd->used_voices.end(); it++) {
	    int i = *it;
	    *ui[i]->elems[j].zone = newval;
	  }
	} else {
	  // simple effect: here we only have a single dsp instance
	  *ui[0]->elems[j].zone = newval;
	}
	// also update the MIDI controller data for all channels (manual
	// control input is always omni)
	for (int ch = 0; ch < 16; ch++)
	  midivals[ch][k] = newval;
	// record the new value
	oldval = newval;
      }
    }
    // Initialize the output buffers.
    if (n_samples < blocksz) {
      // We need to enlarge the buffers. We're not officially allowed to do
      // this here (presumably in the realtime thread), but since we usually
      // don't know the hosts's block size beforehand, there's really nothing
      // else that we can do. Let's just hope that doing this once suffices,
      // then hopefully noone will notice.
      if (outbuf) {
	for (int i = 0; i < m; i++) {
	  outbuf[i] = (float*)realloc(outbuf[i],
				      blocksz*sizeof(float));
	  assert(outbuf[i]);
	}
      }
      n_samples = blocksz;
    }
    if (outbuf) {
      // Polyphonic instrument: Mix the voices down to one signal.
      for (int i = 0; i < m; i++)
	for (unsigned j = 0; j < blocksz; j++)
	  outputs[i][j] = 0.0f;
      for (int l = 0; l < nvoices; l++) {
	// Let Faust do all the hard work.
	dsp[l]->compute(blocksz, inputs, outbuf);
	for (int i = 0; i < m; i++)
	  for (unsigned j = 0; j < blocksz; j++)
	    outputs[i][j] += outbuf[i][j];
      }
    } else {
      // Simple effect: We can write directly to the output buffer.
      dsp[0]->compute(blocksz, inputs, outputs);
    }
    // Finally grab the passive controls and write them back to the
    // corresponding control ports. NOTE: Depending on the plugin
    // architecture, this might require a host call to get the control GUI
    // updated in real-time (if the host supports this at all).
    // FIXME: It's not clear how to aggregate the data of the different
    // voices. We compute the maximum of each control for now.
    for (int i = 0; i < n_out; i++) {
      int j = outctrls[i], k = ui[0]->elems[j].port;
      float *z = ui[0]->elems[j].zone;
      *ports[k] = *z;
      for (int l = 1; l < nvoices; l++) {
	float *z = ui[l]->elems[j].zone;
	if (*ports[k] < *z)
	  *ports[k] = *z;
      }
    }
    // Keep track of the last gates set for each voice, so that voices can be
    // forcibly retriggered if needed.
    if (gate >= 0)
      for (int i = 0; i < nvoices; i++)
	vd->lastgate[i] =
	  *ui[i]->elems[gate].zone;
  }

  // This processes just a single MIDI message, so to process an entire series
  // of MIDI events you'll have to loop over the event data in the plugin's
  // MIDI callback. XXXTODO: Sample-accurate processing of MIDI events.
  
  void process_midi(unsigned char *data, int sz)
  {
#if DEBUG_MIDI
    fprintf(stderr, "midi ev (%d bytes):", sz);
    for (int i = 0; i < sz; i++)
      fprintf(stderr, " 0x%0x", data[i]);
    fprintf(stderr, "\n");
#endif
    uint8_t status = data[0] & 0xf0, chan = data[0] & 0x0f;
    bool is_instr = maxvoices > 0;
    switch (status) {
    case 0x90: {
      if (!is_instr) break;
      // note on
#if DEBUG_NOTES
      fprintf(stderr, "note-on  chan %d, note %d, vel %d\n", chan+1,
	      data[1], data[2]);
#endif
      if (data[2] == 0) goto note_off;
      alloc_voice(chan, data[1], data[2]);
      break;
    }
    case 0x80: {
      if (!is_instr) break;
      // note off
#if DEBUG_NOTES
      fprintf(stderr, "note-off chan %d, note %d, vel %d\n", chan+1,
	      data[1], data[2]);
#endif
      note_off:
      dealloc_voice(chan, data[1], data[2]);
      break;
    }
    case 0xe0: {
      if (!is_instr) break;
      // pitch bend
      // data[1] is LSB, data[2] MSB, range is 0..0x3fff (which maps to
      // -2..+2 semitones by default), center point is 0x2000 = 8192
      int val = data[1] | (data[2]<<7);
      vd->bend[chan] =
	(val-0x2000)/8192.0f*vd->range[chan];
#if DEBUG_MIDICC
      fprintf(stderr, "pitch-bend (chan %d): %g cent\n", chan+1,
	      vd->bend[chan]*100.0);
#endif
      update_voices(chan);
      break;
    }
    case 0xb0: {
      // controller change
      switch (data[1]) {
      case 120: case 123:
	if (!is_instr) break;
	// all-sound-off and all-notes-off controllers (these are treated
	// the same in the current implementation)
	all_notes_off(chan);
#if DEBUG_MIDICC
	fprintf(stderr, "all-notes-off (chan %d)\n", chan+1);
#endif
	break;
      case 121:
	// all-controllers-off (in the current implementation, this just
	// resets the RPN-related controllers)
	data_msb[chan] = data_lsb[chan] = 0;
	rpn_msb[chan] = rpn_lsb[chan] = 0x7f;
#if DEBUG_MIDICC
	fprintf(stderr, "all-controllers-off (chan %d)\n", chan+1);
#endif
	break;
      case 101: case 100:
	// RPN MSB/LSB
	if (data[1] == 101)
	  rpn_msb[chan] = data[2];
	else
	  rpn_lsb[chan] = data[2];
	break;
      case 6: case 38:
	// data entry coarse/fine
	if (data[1] == 6)
	  data_msb[chan] = data[2];
	else
	  data_lsb[chan] = data[2];
	goto rpn;
      case 96: case 97:
	// data increment/decrement
	/* NOTE: The specification of these controllers is a complete
	   mess. Originally, the MIDI specification didn't have anything
	   to say about their exact behaviour at all. Nowadays, the
	   behaviour depends on which RPN or NRPN is being modified, which
	   is also rather confusing. Fortunately, as we only handle RPNs
	   0..2 here anyway, it's sufficient to assume the MSB for RPN #2
	   (channel coarse tuning) and the LSB otherwise. */
	if (rpn_msb[chan] == 0 && rpn_lsb[chan] == 2) {
	  // modify the MSB
	  if (data[1] == 96 && data_msb[chan] < 0x7f)
	    data_msb[chan]++;
	  else if (data[1] == 97 && data_msb[chan] > 0)
	    data_msb[chan]--;
	} else {
	  // modify the LSB
	  if (data[1] == 96 && data_lsb[chan] < 0x7f)
	    data_lsb[chan]++;
	  else if (data[1] == 97 && data_lsb[chan] > 0)
	    data_lsb[chan]--;
	}
      rpn:
	if (!is_instr) break;
	if (rpn_msb[chan] == 0) {
	  switch (rpn_lsb[chan]) {
	  case 0:
	    // pitch bend range, coarse value is in semitones, fine value
	    // in cents
	    vd->range[chan] = data_msb[chan]+
	      data_lsb[chan]/100.0;
#if DEBUG_RPN
	    fprintf(stderr, "pitch-bend-range (chan %d): %g cent\n", chan+1,
		    vd->range[chan]*100.0);
#endif
	    break;
	  case 1:
	    {
	      // channel fine tuning (14 bit value, range -100..+100 cents)
	      int value = (data_msb[chan]<<7) |
		data_lsb[chan];
	      vd->fine[chan] = (value-8192)/8192.0f;
	    }
	    goto master_tune;
	  case 2:
	    // channel coarse tuning (only msb is used, range -64..+63
	    // semitones)
	    vd->coarse[chan] = data_msb[chan]-64;
	  master_tune:
	    vd->tune[chan] = vd->coarse[chan]+
	      vd->fine[chan];
#if DEBUG_RPN
	    fprintf(stderr, "master-tuning (chan %d): %g cent\n", chan+1,
		    vd->tune[chan]*100.0);
#endif
	    update_voices(chan);
	    break;
	  default:
	    break;
	  }
	}
	break;
      default: {
#if FAUST_MIDICC
	// interpret all other controller changes according to the MIDI
	// controller map defined in the Faust plugin itself
	std::map<uint8_t,int>::iterator it = ctrlmap.find(data[1]);
	if (it != ctrlmap.end()) {
	  // defined MIDI controller
	  int j = inctrls[it->second],
	    k = ui[0]->elems[j].port;
	  float val = ctrlval(ui[0]->elems[j], data[2]);
	  midivals[chan][k] = val;
	  if (is_instr) {
	    // instrument: update running voices on this channel
	    for (boost::circular_buffer<int>::iterator it =
		   vd->used_voices.begin();
		 it != vd->used_voices.end(); it++) {
	      int i = *it;
	      if (vd->note_info[i].ch == chan)
		*ui[i]->elems[j].zone = val;
	    }
	  } else {
	    // simple effect: here we only have a single dsp instance and
	    // we're operating in omni mode, so we just update the control no
	    // matter what the midi channel is
	    *ui[0]->elems[j].zone = val;
	  }
#if DEBUG_MIDICC
	  fprintf(stderr, "ctrl-change chan %d, ctrl %d, val %d\n", chan+1,
		  data[1], data[2]);
#endif
	}
#endif
	break;
      }
      }
      break;
    }
    default:
      break;
    }
  }

  // Process an MTS sysex message and update the control values accordingly.

  void process_sysex(uint8_t *data, int sz)
  {
    if (!data || sz < 2) return;
#if DEBUG_MIDI
    fprintf(stderr, "midi sysex (%d bytes):", sz);
    for (int i = 0; i < sz; i++)
      fprintf(stderr, " 0x%0x", data[i]);
    fprintf(stderr, "\n");
#endif
    if (data[0] == 0xf0) {
      // Skip over the f0 and f7 status bytes in case they are included in the
      // dump.
      data++; sz--;
      if (data[sz-1] == 0xf7) sz--;
    }
    if ((data[0] == 0x7e || data[0] == 0x7f) && data[2] == 8) {
      // MIDI tuning standard
      bool realtime = data[0] == 0x7f;
      if ((sz == 19 && data[3] == 8) ||
	  (sz == 31 && data[3] == 9)) {
	// MTS scale/octave tuning 1- or 2-byte form
	bool onebyte = data[3] == 8;
	unsigned chanmsk = (data[4]<<14) | (data[5]<<7) | data[6];
	for (int i = 0; i < 12; i++) {
	  float t;
	  if (onebyte)
	    t = (data[i+7]-64)/100.0;
	  else
	    t = (((data[2*i+7]<<7)|data[2*i+8])-8192)/8192.0;
	  for (uint8_t ch = 0; ch < 16; ch++)
	    if (chanmsk & (1<<ch))
	      vd->tuning[ch][i] = t;
	}
	if (realtime) {
	  for (uint8_t ch = 0; ch < 16; ch++)
	    if (chanmsk & (1<<ch)) {
	      // update running voices on this channel
	      update_voices(ch);
	    }
	}
#if DEBUG_MTS
	fprintf(stderr, "octave-tuning-%s (chan ",
		realtime?"realtime":"non-realtime");
	bool first = true;
	for (uint8_t i = 0; i < 16; )
	  if (chanmsk & (1<<i)) {
	    uint8_t j;
	    for (j = i+1; j < 16 && (chanmsk&(1<<j)); )
	      j++;
	    if (first)
	      first = false;
	    else
	      fprintf(stderr, ",");
	    if (j > i+1)
	      fprintf(stderr, "%u-%u", i+1, j);
	    else
	      fprintf(stderr, "%u", i+1);
	    i = j;
	  } else
	    i++;
	fprintf(stderr, "):");
	if (onebyte) {
	  for (int i = 7; i < 19; i++) {
	    int val = data[i];
	    fprintf(stderr, " %d", val-64);
	  }
	} else {
	  for (int i = 7; i < 31; i++) {
	    int val = data[i++] << 7;
	    val |= data[i];
	    fprintf(stderr, " %g", ((double)val-8192.0)/8192.0*100.0);
	  }
	}
	fprintf(stderr, "\n");
#endif
      }
    }
  }

  // Change to a given preloaded tuning. The given tuning number may be in the
  // range 1..PFaustPlugin::n_tunings, zero denotes the default tuning (equal
  // temperament). This is only supported if FAUST_MTS is defined at compile
  // time.

  void change_tuning(int num)
  {
#if FAUST_MTS
    if (!mts || num == tuning_no) return;
    if (num < 0) num = 0;
    if (num > mts->tuning.size())
      num = mts->tuning.size();
    tuning_no = num;
    if (tuning_no > 0) {
      process_sysex(mts->tuning[tuning_no-1].data,
		    mts->tuning[tuning_no-1].len);
    } else {
      memset(vd->tuning, 0, sizeof(vd->tuning));
#if DEBUG_MTS
      fprintf(stderr,
	      "octave-tuning-default (chan 1-16): equal temperament\n");
#endif
    }
#endif
  }

};

Meta *LV2Plugin::meta = 0;
int LV2Plugin::n_tunings = 0;
#if FAUST_MTS
MTSTunings *LV2Plugin::mts = 0;
#endif

/* LV2-specific part starts here. ********************************************/

static LV2_Handle
instantiate(const LV2_Descriptor*     descriptor,
            double                    rate,
            const char*               bundle_path,
            const LV2_Feature* const* features)
{
  LV2Plugin* plugin =
    new LV2Plugin(LV2Plugin::numVoices(), (int)rate);
  // Scan host features for URID map.
  for (int i = 0; features[i]; i++) {
    if (!strcmp(features[i]->URI, LV2_URID_URI "#map")) {
      plugin->map = (LV2_URID_Map*)features[i]->data;
      plugin->midi_event =
	plugin->map->map(plugin->map->handle, MIDI_EVENT_URI);
    }
  }
  if (!plugin->map) {
    fprintf
      (stderr, "%s: host doesn't support urid:map, giving up\n",
       PLUGIN_URI);
    delete plugin;
    return 0;
  }
  return (LV2_Handle)plugin;
}

static void
cleanup(LV2_Handle instance)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  delete plugin;
}

static void
connect_port(LV2_Handle instance,
             uint32_t   port,
             void*      data)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  int i = port, k = plugin->ui[0]->nports;
  int n = plugin->dsp[0]->getNumInputs(), m = plugin->dsp[0]->getNumOutputs();
  if (i < k)
    plugin->ports[i] = (float*)data;
  else {
    i -= k;
    if (i < n)
      plugin->inputs[i] = (float*)data;
    else {
      i -= n;
      if (i < m)
	plugin->outputs[i] = (float*)data;
      else if (i == m)
	plugin->event_port = (LV2_Atom_Sequence*)data;
      else if (i == m+1)
	plugin->poly = (float*)data;
      else if (i == m+2)
	plugin->tuning = (float*)data;
      else
	fprintf(stderr, "%s: bad port number %u\n", PLUGIN_URI, port);
    }
  }
}

static void
run(LV2_Handle instance, uint32_t n_samples)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  // Process incoming MIDI events.
  if (plugin->event_port) {
    LV2_ATOM_SEQUENCE_FOREACH(plugin->event_port, ev) {
      if (ev->body.type == plugin->midi_event) {
	uint8_t *data = (uint8_t*)(ev+1);
#if 0
	// FIXME: Consider doing sample-accurate note onsets here. LV2 keeps
	// track of the exact onset in the frames and subframes fields
	// (http://lv2plug.in/ns/doc/html/structLV2__Atom__Event.html), but we
	// can't use that information at present, since our gate parameter is
	// a control variable which can only change at block boundaries. In
	// the future, the gate could be implemented as an audio signal to get
	// sample-accurate note onsets.
	uint32_t frames = ev->body.frames;
#endif
	if (data[0] == 0xf0)
	  plugin->process_sysex(data, ev->body.size);
	else
	  plugin->process_midi(data, ev->body.size);
      }
    }
  }
  // Process audio.
  plugin->process_audio(n_samples, plugin->inputs, plugin->outputs);
}

static void
activate(LV2_Handle instance)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  plugin->resume();
}

static void
deactivate(LV2_Handle instance)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  plugin->suspend();
}

const void*
extension_data(const char* uri)
{
  return NULL;
}

static const LV2_Descriptor descriptor = {
  PLUGIN_URI,
  instantiate,
  connect_port,
  activate,
  run,
  deactivate,
  cleanup,
  extension_data
};

extern "C"
LV2_SYMBOL_EXPORT
const LV2_Descriptor*
lv2_descriptor(uint32_t index)
{
  switch (index) {
  case 0:
    return &descriptor;
  default:
    return NULL;
  }
}

//----------------------------------------------------------------------------
//  Dynamic manifest
//----------------------------------------------------------------------------

// NOTE: If your LV2 host doesn't offer this extension then you'll have to
// create a static ttl file with the descriptions of the ports. You can do
// this by compiling this code to a standalone executable. Running the
// executable then prints the manifest on stdout.

extern "C"
LV2_SYMBOL_EXPORT
int lv2_dyn_manifest_open(LV2_Dyn_Manifest_Handle *handle,
			  const LV2_Feature *const *features)
{
  LV2Plugin* plugin =
    new LV2Plugin(LV2Plugin::numVoices(), 48000);
  *handle = (LV2_Dyn_Manifest_Handle)plugin;
  return 0;
}

extern "C"
LV2_SYMBOL_EXPORT
int lv2_dyn_manifest_get_subjects(LV2_Dyn_Manifest_Handle handle,
				  FILE *fp)
{
  fprintf(fp, "@prefix lv2:  <http://lv2plug.in/ns/lv2core#> .\n\
<%s> a lv2:Plugin .\n", PLUGIN_URI);
  return 0;
}

#include <string>
#include <ctype.h>

static string mangle(const string &s)
{
  string t = s;
  size_t n = s.size();
  for (size_t i = 0; i < n; i++)
    if ((i == 0 && !isalpha(t[i]) && t[i] != '_') ||
	(!isalnum(t[i]) && t[i] != '_'))
      t[i] = '_';
  return t;
}

static unsigned steps(float min, float max, float step)
{
  if (step == 0.0) return 1;
  int n = (max-min)/step;
  if (n < 0) n = -n;
  if (n == 0) n = 1;
  return n;
}

#if FAUST_META
static bool is_xmlstring(const char *s)
{
  // This is just a basic sanity check. The string must not contain any
  // (unescaped) newlines, carriage returns or double quotes.
  return !strchr(s, '\n') && !strchr(s, '\r') && !strchr(s, '"');
}
#endif

extern "C"
LV2_SYMBOL_EXPORT
int lv2_dyn_manifest_get_data(LV2_Dyn_Manifest_Handle handle,
			      FILE *fp,
			      const char *uri)
{
  LV2Plugin* plugin = (LV2Plugin*)handle;
  int k = plugin->ui[0]->nports;
  int n = plugin->dsp[0]->getNumInputs(), m = plugin->dsp[0]->getNumOutputs();
  bool is_instr = plugin->maxvoices > 0, have_midi = is_instr;
  // Scan the global metadata for plugin name, description, license etc.
  const char *plugin_name = NULL, *plugin_author = NULL, *plugin_descr = NULL,
    *plugin_version = NULL, *plugin_license = NULL;
#if FAUST_META
  plugin_name = plugin->pluginName();
  plugin_descr = plugin->pluginDescription();
  plugin_author = plugin->pluginAuthor();
  plugin_version = plugin->pluginVersion();
  plugin_license = plugin->pluginLicense();
#endif
  if (!plugin_name || !*plugin_name) plugin_name = "vintage_mics";
  fprintf(fp, "@prefix doap:  <http://usefulinc.com/ns/doap#> .\n\
@prefix foaf:  <http://xmlns.com/foaf/0.1/> .\n\
@prefix lv2:   <http://lv2plug.in/ns/lv2core#> .\n\
@prefix ui:    <http://lv2plug.in/ns/extensions/ui#> .\n\
@prefix epp:   <http://lv2plug.in/ns/ext/port-props#> .\n\
@prefix atom:  <http://lv2plug.in/ns/ext/atom#> .\n\
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n\
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .\n\
@prefix units: <http://lv2plug.in/ns/extensions/units#> .\n\
<%s>\n\
       a lv2:Plugin%s ;\n\
       doap:name \"%s\" ;\n\
       lv2:binary <vintage_mics%s> ;\n\
       lv2:optionalFeature epp:supportsStrictBounds ;\n\
       lv2:optionalFeature lv2:hardRtCapable ;\n", PLUGIN_URI,
	  is_instr?", lv2:InstrumentPlugin":"",
	  plugin_name, DLLEXT);
  if (plugin_author && *plugin_author)
    fprintf(fp, "\
       doap:maintainer [ foaf:name \"%s\" ] ;\n", plugin_author);
  // doap:description just seems to be ignored by all LV2 hosts anyway, so we
  // rather use rdfs:comment now which works with Ardour at least.
  if (plugin_descr && *plugin_descr)
    fprintf(fp, "\
       rdfs:comment \"%s\" ;\n", plugin_descr);
  if (plugin_version && *plugin_version)
    fprintf(fp, "\
       doap:revision \"%s\" ;\n", plugin_version);
  if (plugin_license && *plugin_license)
    fprintf(fp, "\
       doap:license \"%s\" ;\n", plugin_license);
#if FAUST_UI
    fprintf(fp, "\
       ui:ui <%sui> ;\n", PLUGIN_URI);
#endif
  int idx = 0;
  // control ports
  for (int i = 0; i < k; i++, idx++) {
    int j = plugin->ctrls[i];
    assert(idx == plugin->ui[0]->elems[j].port);
    fprintf(fp, "%s [\n", idx==0?"    lv2:port":" ,");
    const char *label = plugin->ui[0]->elems[j].label;
    assert(label);
    string sym = mangle(plugin->ui[0]->elems[j].label);
    switch (plugin->ui[0]->elems[j].type) {
    // active controls (input ports)
    case UI_BUTTON: case UI_CHECK_BUTTON:
    fprintf(fp, "\
	a lv2:InputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"%s_%d\" ;\n\
	lv2:name \"%s\" ;\n\
        lv2:portProperty epp:hasStrictBounds ;\n\
        lv2:portProperty lv2:toggled ;\n\
	lv2:default 0.00000 ;\n\
	lv2:minimum 0.00000 ;\n\
	lv2:maximum 1.00000 ;\n", idx, sym.c_str(), idx, label);
      break;
    case UI_NUM_ENTRY: case UI_H_SLIDER: case UI_V_SLIDER:
    fprintf(fp, "\
	a lv2:InputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"%s_%d\" ;\n\
	lv2:name \"%s\" ;\n\
        lv2:portProperty epp:hasStrictBounds ;\n\
        epp:rangeSteps %u ;\n\
	lv2:default %g ;\n\
	lv2:minimum %g ;\n\
	lv2:maximum %g ;\n", idx, sym.c_str(), idx, label,
	    steps(plugin->ui[0]->elems[j].min,
		  plugin->ui[0]->elems[j].max,
		  plugin->ui[0]->elems[j].step),
	    plugin->ui[0]->elems[j].init,
	    plugin->ui[0]->elems[j].min,
	    plugin->ui[0]->elems[j].max);
      break;
    // passive controls (output ports)
    case UI_H_BARGRAPH: case UI_V_BARGRAPH:
    fprintf(fp, "\
	a lv2:OutputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"%s_%d\" ;\n\
	lv2:name \"%s\" ;\n\
	lv2:default %g ;\n\
	lv2:minimum %g ;\n\
	lv2:maximum %g ;\n", idx, sym.c_str(), idx, label,
	    plugin->ui[0]->elems[j].min,
	    plugin->ui[0]->elems[j].min,
	    plugin->ui[0]->elems[j].max);
      break;
    default:
      assert(0 && "this can't happen");
      break;
    }
    // Scan for Faust control metadata we understand and add corresponding
    // hints to the LV2 description of the port.
    std::map< int, list<strpair> >::iterator it =
      plugin->ui[0]->metadata.find(j);
    if (it != plugin->ui[0]->metadata.end()) {
      for (std::list<strpair>::iterator jt = it->second.begin();
	   jt != it->second.end(); jt++) {
	const char *key = jt->first, *val = jt->second;
#if FAUST_MIDICC
	unsigned num;
	if (!strcmp(key, "midi") && sscanf(val, "ctrl %u", &num) == 1)
	  have_midi = true;
#endif
	if (!strcmp(key, "unit"))
	  fprintf(fp, "\
	units:unit [\n\
            a            units:Unit ;\n\
            units:name   \"%s\" ;\n\
            units:symbol \"%s\" ;\n\
            units:render \"%%f %s\"\n\
	] ;\n", val, val, val);
	if (strcmp(key, "lv2")) continue;
	if (!strcmp(val, "integer"))
	  fprintf(fp, "\
	lv2:portProperty lv2:integer ;\n");
	else if (!strcmp(val, "reportsLatency"))
	  fprintf(fp, "\
	lv2:portProperty lv2:reportsLatency ;\n\
	lv2:designation lv2:latency ;\n");
	else if (!strcmp(val, "hidden") || !strcmp(val, "notOnGUI"))
	  fprintf(fp, "\
	lv2:portProperty epp:notOnGUI ;\n");
	else if (!strncmp(val, "scalepoint", 10) ||
		 !strncmp(val, "scalePoint", 10)) {
	  val += 10;
	  if (!isspace(*val)) continue;
	  char *label = (char*)malloc(strlen(val)+1);
	  float point;
	  int pos;
	  while (sscanf(val, "%s %g%n", label, &point, &pos) == 2) {
	    fprintf(fp, "\
	lv2:scalePoint [ rdfs:label \"%s\"; rdf:value %g ] ;\n",
		    label, point);
	    val += pos;
	  }
	  free(label);
	} else
	  fprintf(stderr, "%s: bad port property '%s:%s'\n", PLUGIN_URI,
		  key, val);
      }
    }
    fprintf(fp, "    ]");
  }
  // audio inputs
  for (int i = 0; i < n; i++, idx++)
    fprintf(fp, "%s [\n\
	a lv2:InputPort ;\n\
	a lv2:AudioPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"in%d\" ;\n\
	lv2:name \"in%d\" ;\n\
    ]", idx==0?"    lv2:port":" ,", idx, i, i);
  // audio outputs
  for (int i = 0; i < m; i++, idx++)
    fprintf(fp, "%s [\n\
	a lv2:OutputPort ;\n\
	a lv2:AudioPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"out%d\" ;\n\
	lv2:name \"out%d\" ;\n\
    ]", idx==0?"    lv2:port":" ,", idx, i, i);
  if (have_midi) {
    // midi input
    fprintf(fp, "%s [\n\
	a lv2:InputPort ;\n\
	a atom:AtomPort ;\n\
	atom:bufferType atom:Sequence ;\n\
	atom:supports <http://lv2plug.in/ns/ext/midi#MidiEvent> ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"midiin\" ;\n\
	lv2:name \"midiin\"\n\
    ]", idx==0?"    lv2:port":" ,", idx);
    idx++;
  }
  if (is_instr) {
    // polyphony control
    fprintf(fp, "%s [\n\
	a lv2:InputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"polyphony\" ;\n\
	lv2:name \"polyphony\" ;\n\
        lv2:portProperty epp:hasStrictBounds ;\n\
#       lv2:portProperty epp:expensive ;\n\
        lv2:portProperty lv2:integer ;\n\
        epp:rangeSteps %d ;\n\
	lv2:default %d ;\n\
	lv2:minimum 1 ;\n\
	lv2:maximum %d ;\n\
    ]", idx==0?"    lv2:port":" ,", idx, plugin->maxvoices-1,
      plugin->maxvoices>1?plugin->maxvoices/2:1,
      plugin->maxvoices);
    idx++;
#if FAUST_MTS
    if (plugin->n_tunings > 0) {
      // tuning control
      fprintf(fp, "%s [\n\
	a lv2:InputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"tuning\" ;\n\
	lv2:name \"tuning\" ;\n\
        lv2:portProperty epp:hasStrictBounds ;\n\
        lv2:portProperty lv2:integer ;\n\
        epp:rangeSteps %d ;\n\
	lv2:default 0 ;\n\
	lv2:minimum 0 ;\n\
	lv2:maximum %d ;\n",
	idx==0?"    lv2:port":" ,", idx, plugin->n_tunings, plugin->n_tunings);
      for (int i = 0; i <= plugin->n_tunings; i++)
	fprintf(fp, "\
	lv2:scalePoint [ rdfs:label \"%s\"; rdf:value %d ] ;\n",
		(i>0)?plugin->mts->tuning[i-1].name:"default", i);
      fprintf(fp, "    ]");
      idx++;
    }
#endif
  }
  fprintf(fp, "\n.\n");
  return 0;
}

extern "C"
LV2_SYMBOL_EXPORT
void lv2_dyn_manifest_close(LV2_Dyn_Manifest_Handle handle)
{
  LV2Plugin* plugin = (LV2Plugin*)handle;
  delete plugin;
}

int main()
{
  LV2_Dyn_Manifest_Handle handle;
  LV2_Feature **features = { NULL };
  int res = lv2_dyn_manifest_open(&handle, features);
  if (res) return res;
  res = lv2_dyn_manifest_get_data(handle, stdout, PLUGIN_URI);
  return res;
}

#endif
