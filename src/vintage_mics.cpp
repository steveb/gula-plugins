/* ------------------------------------------------------------
name: "vintage_mics"
Code generated with Faust 2.21.1 (https://faust.grame.fr)
Compilation options: -lang cpp -scal -ftz 0
------------------------------------------------------------ */

#ifndef  __vintage_mics_H__
#define  __vintage_mics_H__

/************************************************************************
 ************************************************************************
    FAUST Architecture File
    Copyright (C) 2009-2016 Albert Graef <aggraef@gmail.com>
    ---------------------------------------------------------------------
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation; either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with the GNU C Library; if not, write to the Free
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.
 ************************************************************************
 ************************************************************************/

/* LV2 architecture for Faust synths. */

/* NOTE: This requires one of the Boost headers (boost/circular_buffer.hpp),
   so to compile Faust programs created with this architecture you need to
   have at least the Boost headers installed somewhere on your include path
   (the Boost libraries aren't needed). */

#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <list>
#include <map>
#include <set>

// generic Faust dsp and UI classes
/************************** BEGIN dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __dsp__
#define __dsp__

#include <string>
#include <vector>

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

class UI;
struct Meta;

/**
 * DSP memory manager.
 */

struct dsp_memory_manager {
    
    virtual ~dsp_memory_manager() {}
    
    virtual void* allocate(size_t size) = 0;
    virtual void destroy(void* ptr) = 0;
    
};

/**
* Signal processor definition.
*/

class dsp {

    public:

        dsp() {}
        virtual ~dsp() {}

        /* Return instance number of audio inputs */
        virtual int getNumInputs() = 0;
    
        /* Return instance number of audio outputs */
        virtual int getNumOutputs() = 0;
    
        /**
         * Trigger the ui_interface parameter with instance specific calls
         * to 'addBtton', 'addVerticalSlider'... in order to build the UI.
         *
         * @param ui_interface - the user interface builder
         */
        virtual void buildUserInterface(UI* ui_interface) = 0;
    
        /* Returns the sample rate currently used by the instance */
        virtual int getSampleRate() = 0;
    
        /**
         * Global init, calls the following methods:
         * - static class 'classInit': static tables initialization
         * - 'instanceInit': constants and instance state initialization
         *
         * @param sample_rate - the sampling rate in Hertz
         */
        virtual void init(int sample_rate) = 0;

        /**
         * Init instance state
         *
         * @param sample_rate - the sampling rate in Hertz
         */
        virtual void instanceInit(int sample_rate) = 0;

        /**
         * Init instance constant state
         *
         * @param sample_rate - the sampling rate in Hertz
         */
        virtual void instanceConstants(int sample_rate) = 0;
    
        /* Init default control parameters values */
        virtual void instanceResetUserInterface() = 0;
    
        /* Init instance state (delay lines...) */
        virtual void instanceClear() = 0;
 
        /**
         * Return a clone of the instance.
         *
         * @return a copy of the instance on success, otherwise a null pointer.
         */
        virtual dsp* clone() = 0;
    
        /**
         * Trigger the Meta* parameter with instance specific calls to 'declare' (key, value) metadata.
         *
         * @param m - the Meta* meta user
         */
        virtual void metadata(Meta* m) = 0;
    
        /**
         * DSP instance computation, to be called with successive in/out audio buffers.
         *
         * @param count - the number of frames to compute
         * @param inputs - the input audio buffers as an array of non-interleaved FAUSTFLOAT samples (eiher float, double or quad)
         * @param outputs - the output audio buffers as an array of non-interleaved FAUSTFLOAT samples (eiher float, double or quad)
         *
         */
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) = 0;
    
        /**
         * DSP instance computation: alternative method to be used by subclasses.
         *
         * @param date_usec - the timestamp in microsec given by audio driver.
         * @param count - the number of frames to compute
         * @param inputs - the input audio buffers as an array of non-interleaved FAUSTFLOAT samples (either float, double or quad)
         * @param outputs - the output audio buffers as an array of non-interleaved FAUSTFLOAT samples (either float, double or quad)
         *
         */
        virtual void compute(double /*date_usec*/, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { compute(count, inputs, outputs); }
       
};

/**
 * Generic DSP decorator.
 */

class decorator_dsp : public dsp {

    protected:

        dsp* fDSP;

    public:

        decorator_dsp(dsp* dsp = nullptr):fDSP(dsp) {}
        virtual ~decorator_dsp() { delete fDSP; }

        virtual int getNumInputs() { return fDSP->getNumInputs(); }
        virtual int getNumOutputs() { return fDSP->getNumOutputs(); }
        virtual void buildUserInterface(UI* ui_interface) { fDSP->buildUserInterface(ui_interface); }
        virtual int getSampleRate() { return fDSP->getSampleRate(); }
        virtual void init(int sample_rate) { fDSP->init(sample_rate); }
        virtual void instanceInit(int sample_rate) { fDSP->instanceInit(sample_rate); }
        virtual void instanceConstants(int sample_rate) { fDSP->instanceConstants(sample_rate); }
        virtual void instanceResetUserInterface() { fDSP->instanceResetUserInterface(); }
        virtual void instanceClear() { fDSP->instanceClear(); }
        virtual decorator_dsp* clone() { return new decorator_dsp(fDSP->clone()); }
        virtual void metadata(Meta* m) { fDSP->metadata(m); }
        // Beware: subclasses usually have to overload the two 'compute' methods
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { fDSP->compute(count, inputs, outputs); }
        virtual void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { fDSP->compute(date_usec, count, inputs, outputs); }
    
};

/**
 * DSP factory class.
 */

class dsp_factory {
    
    protected:
    
        // So that to force sub-classes to use deleteDSPFactory(dsp_factory* factory);
        virtual ~dsp_factory() {}
    
    public:
    
        virtual std::string getName() = 0;
        virtual std::string getSHAKey() = 0;
        virtual std::string getDSPCode() = 0;
        virtual std::string getCompileOptions() = 0;
        virtual std::vector<std::string> getLibraryList() = 0;
        virtual std::vector<std::string> getIncludePathnames() = 0;
    
        virtual dsp* createDSPInstance() = 0;
    
        virtual void setMemoryManager(dsp_memory_manager* manager) = 0;
        virtual dsp_memory_manager* getMemoryManager() = 0;
    
};

/**
 * On Intel set FZ (Flush to Zero) and DAZ (Denormals Are Zero)
 * flags to avoid costly denormals.
 */

#ifdef __SSE__
    #include <xmmintrin.h>
    #ifdef __SSE2__
        #define AVOIDDENORMALS _mm_setcsr(_mm_getcsr() | 0x8040)
    #else
        #define AVOIDDENORMALS _mm_setcsr(_mm_getcsr() | 0x8000)
    #endif
#else
    #define AVOIDDENORMALS
#endif

#endif
/**************************  END  dsp.h **************************/
/************************** BEGIN UI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __UI_H__
#define __UI_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

/*******************************************************************************
 * UI : Faust DSP User Interface
 * User Interface as expected by the buildUserInterface() method of a DSP.
 * This abstract class contains only the method that the Faust compiler can
 * generate to describe a DSP user interface.
 ******************************************************************************/

struct Soundfile;

template <typename REAL>
class UIReal
{
    
    public:
        
        UIReal() {}
        virtual ~UIReal() {}
        
        // -- widget's layouts
        
        virtual void openTabBox(const char* label) = 0;
        virtual void openHorizontalBox(const char* label) = 0;
        virtual void openVerticalBox(const char* label) = 0;
        virtual void closeBox() = 0;
        
        // -- active widgets
        
        virtual void addButton(const char* label, REAL* zone) = 0;
        virtual void addCheckButton(const char* label, REAL* zone) = 0;
        virtual void addVerticalSlider(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step) = 0;
        virtual void addHorizontalSlider(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step) = 0;
        virtual void addNumEntry(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step) = 0;
        
        // -- passive widgets
        
        virtual void addHorizontalBargraph(const char* label, REAL* zone, REAL min, REAL max) = 0;
        virtual void addVerticalBargraph(const char* label, REAL* zone, REAL min, REAL max) = 0;
        
        // -- soundfiles
        
        virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) = 0;
        
        // -- metadata declarations
        
        virtual void declare(REAL* zone, const char* key, const char* val) {}
};

class UI : public UIReal<FAUSTFLOAT>
{

    public:

        UI() {}
        virtual ~UI() {}
};

#endif
/**************************  END  UI.h **************************/

using namespace std;

typedef pair<const char*,const char*> strpair;

struct Meta : std::map<const char*, const char*>
{
  void declare(const char *key, const char *value)
  {
    (*this)[key] = value;
  }
  const char* get(const char *key, const char *def)
  {
    if (this->find(key) != this->end())
      return (*this)[key];
    else
      return def;
  }
};

/******************************************************************************
*******************************************************************************

		       VECTOR INTRINSICS

*******************************************************************************
*******************************************************************************/


/***************************************************************************
   LV2 UI interface
 ***************************************************************************/

enum ui_elem_type_t {
  UI_BUTTON, UI_CHECK_BUTTON,
  UI_V_SLIDER, UI_H_SLIDER, UI_NUM_ENTRY,
  UI_V_BARGRAPH, UI_H_BARGRAPH,
  UI_END_GROUP, UI_V_GROUP, UI_H_GROUP, UI_T_GROUP
};

struct ui_elem_t {
  ui_elem_type_t type;
  const char *label;
  int port;
  float *zone;
  void *ref;
  float init, min, max, step;
};

class LV2UI : public UI
{
public:
  bool is_instr;
  int nelems, nports;
  ui_elem_t *elems;
  map< int, list<strpair> > metadata;

  LV2UI(int maxvoices = 0);
  virtual ~LV2UI();

protected:
  void add_elem(ui_elem_type_t type, const char *label = NULL);
  void add_elem(ui_elem_type_t type, const char *label, float *zone);
  void add_elem(ui_elem_type_t type, const char *label, float *zone,
		float init, float min, float max, float step);
  void add_elem(ui_elem_type_t type, const char *label, float *zone,
		float min, float max);

  bool have_freq, have_gain, have_gate;
  bool is_voice_ctrl(const char *label);

public:
  virtual void addButton(const char* label, float* zone);
  virtual void addCheckButton(const char* label, float* zone);
  virtual void addVerticalSlider(const char* label, float* zone, float init, float min, float max, float step);
  virtual void addHorizontalSlider(const char* label, float* zone, float init, float min, float max, float step);
  virtual void addNumEntry(const char* label, float* zone, float init, float min, float max, float step);

  virtual void addHorizontalBargraph(const char* label, float* zone, float min, float max);
  virtual void addVerticalBargraph(const char* label, float* zone, float min, float max);
    
  virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) {}

  virtual void openTabBox(const char* label);
  virtual void openHorizontalBox(const char* label);
  virtual void openVerticalBox(const char* label);
  virtual void closeBox();

  virtual void run();

  virtual void declare(float* zone, const char* key, const char* value);
};

LV2UI::LV2UI(int maxvoices)
{
  is_instr = maxvoices>0;
  have_freq = have_gain = have_gate = false;
  nelems = nports = 0;
  elems = NULL;
}

LV2UI::~LV2UI()
{
  if (elems) free(elems);
}

void LV2UI::declare(float* zone, const char* key, const char* value)
{
  map< int, list<strpair> >::iterator it = metadata.find(nelems);
  if (it != metadata.end())
    it->second.push_back(strpair(key, value));
  else
    metadata[nelems] = list<strpair>(1, strpair(key, value));
}

inline void LV2UI::add_elem(ui_elem_type_t type, const char *label)
{
  ui_elem_t *elems1 = (ui_elem_t*)realloc(elems, (nelems+1)*sizeof(ui_elem_t));
  if (elems1)
    elems = elems1;
  else
    return;
  elems[nelems].type = type;
  elems[nelems].label = label;
  elems[nelems].port = -1;
  elems[nelems].zone = NULL;
  elems[nelems].ref = NULL;
  elems[nelems].init = 0.0;
  elems[nelems].min = 0.0;
  elems[nelems].max = 0.0;
  elems[nelems].step = 0.0;
  nelems++;
}

#define portno(label) (is_voice_ctrl(label)?-1:nports++)

inline void LV2UI::add_elem(ui_elem_type_t type, const char *label, float *zone)
{
  ui_elem_t *elems1 = (ui_elem_t*)realloc(elems, (nelems+1)*sizeof(ui_elem_t));
  if (elems1)
    elems = elems1;
  else
    return;
  elems[nelems].type = type;
  elems[nelems].label = label;
  elems[nelems].port = portno(label);
  elems[nelems].zone = zone;
  elems[nelems].ref = NULL;
  elems[nelems].init = 0.0;
  elems[nelems].min = 0.0;
  elems[nelems].max = 0.0;
  elems[nelems].step = 0.0;
  nelems++;
}

inline void LV2UI::add_elem(ui_elem_type_t type, const char *label, float *zone,
			     float init, float min, float max, float step)
{
  ui_elem_t *elems1 = (ui_elem_t*)realloc(elems, (nelems+1)*sizeof(ui_elem_t));
  if (elems1)
    elems = elems1;
  else
    return;
  elems[nelems].type = type;
  elems[nelems].label = label;
  elems[nelems].port = portno(label);
  elems[nelems].zone = zone;
  elems[nelems].ref = NULL;
  elems[nelems].init = init;
  elems[nelems].min = min;
  elems[nelems].max = max;
  elems[nelems].step = step;
  nelems++;
}

inline void LV2UI::add_elem(ui_elem_type_t type, const char *label, float *zone,
			     float min, float max)
{
  ui_elem_t *elems1 = (ui_elem_t*)realloc(elems, (nelems+1)*sizeof(ui_elem_t));
  if (elems1)
    elems = elems1;
  else
    return;
  elems[nelems].type = type;
  elems[nelems].label = label;
  elems[nelems].port = portno(label);
  elems[nelems].zone = zone;
  elems[nelems].ref = NULL;
  elems[nelems].init = 0.0;
  elems[nelems].min = min;
  elems[nelems].max = max;
  elems[nelems].step = 0.0;
  nelems++;
}

inline bool LV2UI::is_voice_ctrl(const char *label)
{
  if (!is_instr)
    return false;
  else if (!have_freq && !strcmp(label, "freq"))
    return (have_freq = true);
  else if (!have_gain && !strcmp(label, "gain"))
    return (have_gain = true);
  else if (!have_gate && !strcmp(label, "gate"))
    return (have_gate = true);
  else
    return false;
}

void LV2UI::addButton(const char* label, float* zone)
{ add_elem(UI_BUTTON, label, zone); }
void LV2UI::addCheckButton(const char* label, float* zone)
{ add_elem(UI_CHECK_BUTTON, label, zone); }
void LV2UI::addVerticalSlider(const char* label, float* zone, float init, float min, float max, float step)
{ add_elem(UI_V_SLIDER, label, zone, init, min, max, step); }
void LV2UI::addHorizontalSlider(const char* label, float* zone, float init, float min, float max, float step)
{ add_elem(UI_H_SLIDER, label, zone, init, min, max, step); }
void LV2UI::addNumEntry(const char* label, float* zone, float init, float min, float max, float step)
{ add_elem(UI_NUM_ENTRY, label, zone, init, min, max, step); }

void LV2UI::addHorizontalBargraph(const char* label, float* zone, float min, float max)
{ add_elem(UI_H_BARGRAPH, label, zone, min, max); }
void LV2UI::addVerticalBargraph(const char* label, float* zone, float min, float max)
{ add_elem(UI_V_BARGRAPH, label, zone, min, max); }

void LV2UI::openTabBox(const char* label)
{ add_elem(UI_T_GROUP, label); }
void LV2UI::openHorizontalBox(const char* label)
{ add_elem(UI_H_GROUP, label); }
void LV2UI::openVerticalBox(const char* label)
{ add_elem(UI_V_GROUP, label); }
void LV2UI::closeBox()
{ add_elem(UI_END_GROUP); }

void LV2UI::run() {}

//----------------------------------------------------------------------------
//  FAUST generated signal processor
//----------------------------------------------------------------------------

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>


#ifndef FAUSTCLASS 
#define FAUSTCLASS vintage_mics
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

class vintage_mics : public dsp {
	
 private:
	
	FAUSTFLOAT fEntry0;
	FAUSTFLOAT fHslider0;
	float fRec0[2];
	int IOTA;
	float fVec0[512];
	int fSampleRate;
	
 public:
	
	void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.1");
		m->declare("filename", "vintage_mics.dsp");
		m->declare("filters.lib/fir:author", "Julius O. Smith III");
		m->declare("filters.lib/fir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/fir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/lowpass0_highpass1", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("name", "vintage_mics");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() {
		return 1;
	}
	virtual int getNumOutputs() {
		return 1;
	}
	virtual int getInputRate(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	virtual int getOutputRate(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	
	virtual void instanceResetUserInterface() {
		fEntry0 = FAUSTFLOAT(0.0f);
		fHslider0 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; (l0 < 2); l0 = (l0 + 1)) {
			fRec0[l0] = 0.0f;
		}
		IOTA = 0;
		for (int l1 = 0; (l1 < 512); l1 = (l1 + 1)) {
			fVec0[l1] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual vintage_mics* clone() {
		return new vintage_mics();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("vintage_mics");
		ui_interface->declare(&fHslider0, "name", "Gain");
		ui_interface->declare(&fHslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("gain", &fHslider0, 0.0f, -40.0f, 40.0f, 0.100000001f);
		ui_interface->declare(&fEntry0, "name", "Impulse Response");
		ui_interface->declare(&fEntry0, "style", "menu{'AKGD12':0;'AKG FaultyD12':1;'Altec 639':2;'Altec 670A':3;'Altec 670B':4;'American R331':5;'Amperite RA':6;'Astatic77':7;'BBCmarconi B':8;'BeO BM2':9;'BeO BM6':10;'Beomic 1000':11;'Beyer M260':12;'Beyer M360':13;'BeyerM500Stock':14;'Coles 4038':15;'Doremi 351':16;'EMI ribbon':17;'EV RE20 Flat':18;'EV RE20 HPF':19;'FilmIndustries M8':20;'FosterDynamicDF1':21;'Framez':22;'GaumontKalee':23;'GEC 2373 Ribbon':24;'GEC bigdynamic':25;'Grampian GR2':26;'Lomo52A5M':27;'Meazzi':28;'Melodium 42B 1':29;'Melodium Model12':30;'MelodiumRM6':31;'OktavaMK18 Overload':32;'OktavaMK18Silver':33;'OktavaML16':34;'Oktava ML19':35;'RCA 44BX 1':36;'RCA 44BX 2':37;'RCA 74B':38;'RCA 77DX 1':39;'RCA 77DX 2':40;'RCA KU3a 1':41;'RCAKU3a':42;'RCA PB90':43;'RCA varacoustic fig8':44;'ResloCR600':45;'ResloDynamic':46;'Reslo RB250':47;'Reslo RB RedLabel':48;'Reslo RV':49;'Reslo SR1':50;'ResloURA':51;'Reslo VMC2':52;'Shure315 flat':53;'Shure315 HPF':54;'Shure510C':55;'Sony C37Fet':56;'STC4033 Cardioid':57;'STC4033 Pressure':58;'STC4033 Ribbon':59;'Telefunken M201':60;'Toshiba TypeG':61;'Toshiba TypeH BK5':62;'Toshiba TypeK flat':63;'Toshiba TypeK HPF':64}");
		ui_interface->addNumEntry("ir", &fEntry0, 0.0f, 0.0f, 64.0f, 1.0f);
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* output0 = outputs[0];
		float fSlow0 = float(fEntry0);
		int iSlow1 = (fSlow0 >= 33.0f);
		int iSlow2 = (fSlow0 >= 17.0f);
		int iSlow3 = (fSlow0 >= 9.0f);
		int iSlow4 = (fSlow0 >= 5.0f);
		int iSlow5 = (fSlow0 >= 3.0f);
		int iSlow6 = (fSlow0 >= 2.0f);
		int iSlow7 = (fSlow0 >= 1.0f);
		float fSlow8 = (0.00100000005f * std::pow(10.0f, (0.0500000007f * float(fHslider0))));
		int iSlow9 = (fSlow0 >= 4.0f);
		int iSlow10 = (fSlow0 >= 7.0f);
		int iSlow11 = (fSlow0 >= 6.0f);
		int iSlow12 = (fSlow0 >= 8.0f);
		int iSlow13 = (fSlow0 >= 13.0f);
		int iSlow14 = (fSlow0 >= 11.0f);
		int iSlow15 = (fSlow0 >= 10.0f);
		int iSlow16 = (fSlow0 >= 12.0f);
		int iSlow17 = (fSlow0 >= 15.0f);
		int iSlow18 = (fSlow0 >= 14.0f);
		int iSlow19 = (fSlow0 >= 16.0f);
		int iSlow20 = (fSlow0 >= 25.0f);
		int iSlow21 = (fSlow0 >= 21.0f);
		int iSlow22 = (fSlow0 >= 19.0f);
		int iSlow23 = (fSlow0 >= 18.0f);
		int iSlow24 = (fSlow0 >= 20.0f);
		int iSlow25 = (fSlow0 >= 23.0f);
		int iSlow26 = (fSlow0 >= 22.0f);
		int iSlow27 = (fSlow0 >= 24.0f);
		int iSlow28 = (fSlow0 >= 29.0f);
		int iSlow29 = (fSlow0 >= 27.0f);
		int iSlow30 = (fSlow0 >= 26.0f);
		int iSlow31 = (fSlow0 >= 28.0f);
		int iSlow32 = (fSlow0 >= 31.0f);
		int iSlow33 = (fSlow0 >= 30.0f);
		int iSlow34 = (fSlow0 >= 32.0f);
		int iSlow35 = (fSlow0 >= 49.0f);
		int iSlow36 = (fSlow0 >= 41.0f);
		int iSlow37 = (fSlow0 >= 37.0f);
		int iSlow38 = (fSlow0 >= 35.0f);
		int iSlow39 = (fSlow0 >= 34.0f);
		int iSlow40 = (fSlow0 >= 36.0f);
		int iSlow41 = (fSlow0 >= 39.0f);
		int iSlow42 = (fSlow0 >= 38.0f);
		int iSlow43 = (fSlow0 >= 40.0f);
		int iSlow44 = (fSlow0 >= 45.0f);
		int iSlow45 = (fSlow0 >= 43.0f);
		int iSlow46 = (fSlow0 >= 42.0f);
		int iSlow47 = (fSlow0 >= 44.0f);
		int iSlow48 = (fSlow0 >= 47.0f);
		int iSlow49 = (fSlow0 >= 46.0f);
		int iSlow50 = (fSlow0 >= 48.0f);
		int iSlow51 = (fSlow0 >= 57.0f);
		int iSlow52 = (fSlow0 >= 53.0f);
		int iSlow53 = (fSlow0 >= 51.0f);
		int iSlow54 = (fSlow0 >= 50.0f);
		int iSlow55 = (fSlow0 >= 52.0f);
		int iSlow56 = (fSlow0 >= 55.0f);
		int iSlow57 = (fSlow0 >= 54.0f);
		int iSlow58 = (fSlow0 >= 56.0f);
		int iSlow59 = (fSlow0 >= 61.0f);
		int iSlow60 = (fSlow0 >= 59.0f);
		int iSlow61 = (fSlow0 >= 58.0f);
		int iSlow62 = (fSlow0 >= 60.0f);
		int iSlow63 = (fSlow0 >= 63.0f);
		int iSlow64 = (fSlow0 >= 62.0f);
		int iSlow65 = (fSlow0 >= 64.0f);
		for (int i = 0; (i < count); i = (i + 1)) {
			fRec0[0] = (fSlow8 + (0.999000013f * fRec0[1]));
			float fTemp0 = (float(input0[i]) * fRec0[0]);
			fVec0[(IOTA & 511)] = fTemp0;
			float fTemp1 = fVec0[((IOTA - 511) & 511)];
			float fTemp2 = fVec0[((IOTA - 428) & 511)];
			float fTemp3 = fVec0[((IOTA - 384) & 511)];
			float fTemp4 = fVec0[((IOTA - 231) & 511)];
			float fTemp5 = fVec0[((IOTA - 293) & 511)];
			float fTemp6 = fVec0[((IOTA - 336) & 511)];
			float fTemp7 = fVec0[((IOTA - 476) & 511)];
			float fTemp8 = fVec0[((IOTA - 474) & 511)];
			float fTemp9 = fVec0[((IOTA - 253) & 511)];
			float fTemp10 = fVec0[((IOTA - 351) & 511)];
			float fTemp11 = fVec0[((IOTA - 473) & 511)];
			float fTemp12 = fVec0[((IOTA - 302) & 511)];
			float fTemp13 = fVec0[((IOTA - 303) & 511)];
			float fTemp14 = fVec0[((IOTA - 472) & 511)];
			float fTemp15 = fVec0[((IOTA - 249) & 511)];
			float fTemp16 = fVec0[((IOTA - 19) & 511)];
			float fTemp17 = fVec0[((IOTA - 192) & 511)];
			float fTemp18 = fVec0[((IOTA - 471) & 511)];
			float fTemp19 = fVec0[((IOTA - 470) & 511)];
			float fTemp20 = fVec0[((IOTA - 367) & 511)];
			float fTemp21 = fVec0[((IOTA - 441) & 511)];
			float fTemp22 = fVec0[((IOTA - 30) & 511)];
			float fTemp23 = fVec0[((IOTA - 468) & 511)];
			float fTemp24 = fVec0[((IOTA - 467) & 511)];
			float fTemp25 = fVec0[((IOTA - 466) & 511)];
			float fTemp26 = fVec0[((IOTA - 247) & 511)];
			float fTemp27 = fVec0[((IOTA - 359) & 511)];
			float fTemp28 = fVec0[((IOTA - 465) & 511)];
			float fTemp29 = fVec0[((IOTA - 296) & 511)];
			float fTemp30 = fVec0[((IOTA - 333) & 511)];
			float fTemp31 = fVec0[((IOTA - 464) & 511)];
			float fTemp32 = fVec0[((IOTA - 266) & 511)];
			float fTemp33 = fVec0[((IOTA - 435) & 511)];
			float fTemp34 = fVec0[((IOTA - 459) & 511)];
			float fTemp35 = fVec0[((IOTA - 74) & 511)];
			float fTemp36 = fVec0[((IOTA - 215) & 511)];
			float fTemp37 = fVec0[((IOTA - 451) & 511)];
			float fTemp38 = fVec0[((IOTA - 373) & 511)];
			float fTemp39 = fVec0[((IOTA - 214) & 511)];
			float fTemp40 = fVec0[((IOTA - 265) & 511)];
			float fTemp41 = fVec0[((IOTA - 450) & 511)];
			float fTemp42 = fVec0[((IOTA - 274) & 511)];
			float fTemp43 = fVec0[((IOTA - 414) & 511)];
			float fTemp44 = fVec0[((IOTA - 392) & 511)];
			float fTemp45 = fVec0[((IOTA - 449) & 511)];
			float fTemp46 = fVec0[((IOTA - 402) & 511)];
			float fTemp47 = fVec0[((IOTA - 444) & 511)];
			float fTemp48 = fVec0[((IOTA - 442) & 511)];
			float fTemp49 = fVec0[((IOTA - 267) & 511)];
			float fTemp50 = fVec0[((IOTA - 358) & 511)];
			float fTemp51 = fVec0[((IOTA - 440) & 511)];
			float fTemp52 = fVec0[((IOTA - 234) & 511)];
			float fTemp53 = fVec0[((IOTA - 344) & 511)];
			float fTemp54 = fVec0[((IOTA - 439) & 511)];
			float fTemp55 = fVec0[((IOTA - 432) & 511)];
			float fTemp56 = fVec0[((IOTA - 347) & 511)];
			float fTemp57 = fVec0[((IOTA - 304) & 511)];
			float fTemp58 = fVec0[((IOTA - 84) & 511)];
			float fTemp59 = fVec0[((IOTA - 300) & 511)];
			float fTemp60 = fVec0[((IOTA - 437) & 511)];
			float fTemp61 = fVec0[((IOTA - 431) & 511)];
			float fTemp62 = fVec0[((IOTA - 427) & 511)];
			float fTemp63 = fVec0[((IOTA - 377) & 511)];
			float fTemp64 = fVec0[((IOTA - 278) & 511)];
			float fTemp65 = fVec0[((IOTA - 205) & 511)];
			float fTemp66 = fVec0[((IOTA - 233) & 511)];
			float fTemp67 = fVec0[((IOTA - 425) & 511)];
			float fTemp68 = fVec0[((IOTA - 434) & 511)];
			float fTemp69 = fVec0[((IOTA - 433) & 511)];
			float fTemp70 = fVec0[((IOTA - 276) & 511)];
			float fTemp71 = fVec0[((IOTA - 399) & 511)];
			float fTemp72 = fVec0[((IOTA - 420) & 511)];
			float fTemp73 = fVec0[((IOTA - 370) & 511)];
			float fTemp74 = fVec0[((IOTA - 376) & 511)];
			float fTemp75 = fVec0[((IOTA - 419) & 511)];
			float fTemp76 = fVec0[((IOTA - 408) & 511)];
			float fTemp77 = fVec0[((IOTA - 152) & 511)];
			float fTemp78 = fVec0[((IOTA - 361) & 511)];
			float fTemp79 = fVec0[((IOTA - 418) & 511)];
			float fTemp80 = fVec0[((IOTA - 349) & 511)];
			float fTemp81 = fVec0[((IOTA - 237) & 511)];
			float fTemp82 = fVec0[((IOTA - 285) & 511)];
			float fTemp83 = fVec0[((IOTA - 415) & 511)];
			float fTemp84 = fVec0[((IOTA - 346) & 511)];
			float fTemp85 = fVec0[((IOTA - 314) & 511)];
			float fTemp86 = fVec0[((IOTA - 117) & 511)];
			float fTemp87 = fVec0[((IOTA - 230) & 511)];
			float fTemp88 = fVec0[((IOTA - 412) & 511)];
			float fTemp89 = fVec0[((IOTA - 198) & 511)];
			float fTemp90 = fVec0[((IOTA - 290) & 511)];
			float fTemp91 = fVec0[((IOTA - 411) & 511)];
			float fTemp92 = fVec0[((IOTA - 264) & 511)];
			float fTemp93 = fVec0[((IOTA - 254) & 511)];
			float fTemp94 = fVec0[((IOTA - 199) & 511)];
			float fTemp95 = fVec0[((IOTA - 200) & 511)];
			float fTemp96 = fVec0[((IOTA - 410) & 511)];
			float fTemp97 = fVec0[((IOTA - 307) & 511)];
			float fTemp98 = fVec0[((IOTA - 257) & 511)];
			float fTemp99 = fVec0[((IOTA - 244) & 511)];
			float fTemp100 = fVec0[((IOTA - 245) & 511)];
			float fTemp101 = fVec0[((IOTA - 409) & 511)];
			float fTemp102 = fVec0[((IOTA - 368) & 511)];
			float fTemp103 = fVec0[((IOTA - 318) & 511)];
			float fTemp104 = fVec0[((IOTA - 343) & 511)];
			float fTemp105 = fVec0[((IOTA - 405) & 511)];
			float fTemp106 = fVec0[((IOTA - 203) & 511)];
			float fTemp107 = fVec0[((IOTA - 282) & 511)];
			float fTemp108 = fVec0[((IOTA - 329) & 511)];
			float fTemp109 = fVec0[((IOTA - 404) & 511)];
			float fTemp110 = fVec0[((IOTA - 401) & 511)];
			float fTemp111 = fVec0[((IOTA - 175) & 511)];
			float fTemp112 = fVec0[((IOTA - 270) & 511)];
			float fTemp113 = fVec0[((IOTA - 398) & 511)];
			float fTemp114 = fVec0[((IOTA - 310) & 511)];
			float fTemp115 = fVec0[((IOTA - 350) & 511)];
			float fTemp116 = fVec0[((IOTA - 161) & 511)];
			float fTemp117 = fVec0[((IOTA - 397) & 511)];
			float fTemp118 = fVec0[((IOTA - 160) & 511)];
			float fTemp119 = fVec0[((IOTA - 395) & 511)];
			float fTemp120 = fVec0[((IOTA - 369) & 511)];
			float fTemp121 = fVec0[((IOTA - 142) & 511)];
			float fTemp122 = fVec0[((IOTA - 213) & 511)];
			float fTemp123 = fVec0[((IOTA - 364) & 511)];
			float fTemp124 = fVec0[((IOTA - 366) & 511)];
			float fTemp125 = fVec0[((IOTA - 365) & 511)];
			float fTemp126 = fVec0[((IOTA - 294) & 511)];
			float fTemp127 = fVec0[((IOTA - 281) & 511)];
			float fTemp128 = fVec0[((IOTA - 291) & 511)];
			float fTemp129 = fVec0[((IOTA - 360) & 511)];
			float fTemp130 = fVec0[((IOTA - 259) & 511)];
			float fTemp131 = fVec0[((IOTA - 309) & 511)];
			float fTemp132 = fVec0[((IOTA - 357) & 511)];
			float fTemp133 = fVec0[((IOTA - 354) & 511)];
			float fTemp134 = fVec0[((IOTA - 331) & 511)];
			float fTemp135 = fVec0[((IOTA - 58) & 511)];
			float fTemp136 = fVec0[((IOTA - 272) & 511)];
			float fTemp137 = fVec0[((IOTA - 352) & 511)];
			float fTemp138 = fVec0[((IOTA - 239) & 511)];
			float fTemp139 = fVec0[((IOTA - 256) & 511)];
			float fTemp140 = fVec0[((IOTA - 348) & 511)];
			float fTemp141 = fVec0[((IOTA - 115) & 511)];
			float fTemp142 = fVec0[((IOTA - 325) & 511)];
			float fTemp143 = (fTemp141 - fTemp142);
			float fTemp144 = fVec0[((IOTA - 328) & 511)];
			float fTemp145 = fVec0[((IOTA - 335) & 511)];
			float fTemp146 = fVec0[((IOTA - 334) & 511)];
			float fTemp147 = fVec0[((IOTA - 308) & 511)];
			float fTemp148 = fVec0[((IOTA - 311) & 511)];
			float fTemp149 = fVec0[((IOTA - 207) & 511)];
			float fTemp150 = fVec0[((IOTA - 315) & 511)];
			float fTemp151 = fVec0[((IOTA - 106) & 511)];
			float fTemp152 = fVec0[((IOTA - 138) & 511)];
			float fTemp153 = fVec0[((IOTA - 63) & 511)];
			float fTemp154 = fVec0[((IOTA - 97) & 511)];
			float fTemp155 = fVec0[((IOTA - 424) & 511)];
			float fTemp156 = fVec0[((IOTA - 422) & 511)];
			float fTemp157 = fVec0[((IOTA - 421) & 511)];
			float fTemp158 = (0.00357066561f * fTemp157);
			float fTemp159 = fVec0[((IOTA - 407) & 511)];
			float fTemp160 = fVec0[((IOTA - 406) & 511)];
			float fTemp161 = fVec0[((IOTA - 396) & 511)];
			float fTemp162 = (0.0054933317f * fTemp161);
			float fTemp163 = fVec0[((IOTA - 394) & 511)];
			float fTemp164 = fVec0[((IOTA - 393) & 511)];
			float fTemp165 = fVec0[((IOTA - 381) & 511)];
			float fTemp166 = fVec0[((IOTA - 380) & 511)];
			float fTemp167 = fVec0[((IOTA - 378) & 511)];
			float fTemp168 = fVec0[((IOTA - 372) & 511)];
			float fTemp169 = fVec0[((IOTA - 371) & 511)];
			float fTemp170 = fVec0[((IOTA - 362) & 511)];
			float fTemp171 = fVec0[((IOTA - 321) & 511)];
			float fTemp172 = fVec0[((IOTA - 320) & 511)];
			float fTemp173 = fVec0[((IOTA - 319) & 511)];
			float fTemp174 = (0.00332651753f * fTemp173);
			float fTemp175 = fVec0[((IOTA - 167) & 511)];
			float fTemp176 = fVec0[((IOTA - 166) & 511)];
			float fTemp177 = fVec0[((IOTA - 159) & 511)];
			float fTemp178 = fVec0[((IOTA - 158) & 511)];
			float fTemp179 = fVec0[((IOTA - 151) & 511)];
			float fTemp180 = fVec0[((IOTA - 150) & 511)];
			float fTemp181 = fVec0[((IOTA - 118) & 511)];
			float fTemp182 = fVec0[((IOTA - 114) & 511)];
			float fTemp183 = fVec0[((IOTA - 113) & 511)];
			float fTemp184 = fVec0[((IOTA - 112) & 511)];
			float fTemp185 = fVec0[((IOTA - 111) & 511)];
			float fTemp186 = fVec0[((IOTA - 110) & 511)];
			float fTemp187 = fVec0[((IOTA - 109) & 511)];
			float fTemp188 = fVec0[((IOTA - 108) & 511)];
			float fTemp189 = fVec0[((IOTA - 107) & 511)];
			float fTemp190 = fVec0[((IOTA - 105) & 511)];
			float fTemp191 = fVec0[((IOTA - 104) & 511)];
			float fTemp192 = fVec0[((IOTA - 103) & 511)];
			float fTemp193 = fVec0[((IOTA - 102) & 511)];
			float fTemp194 = fVec0[((IOTA - 101) & 511)];
			float fTemp195 = fVec0[((IOTA - 100) & 511)];
			float fTemp196 = fVec0[((IOTA - 99) & 511)];
			float fTemp197 = fVec0[((IOTA - 88) & 511)];
			float fTemp198 = fVec0[((IOTA - 87) & 511)];
			float fTemp199 = fVec0[((IOTA - 86) & 511)];
			float fTemp200 = fVec0[((IOTA - 85) & 511)];
			float fTemp201 = fVec0[((IOTA - 78) & 511)];
			float fTemp202 = fVec0[((IOTA - 77) & 511)];
			float fTemp203 = fVec0[((IOTA - 76) & 511)];
			float fTemp204 = fVec0[((IOTA - 75) & 511)];
			float fTemp205 = fVec0[((IOTA - 62) & 511)];
			float fTemp206 = fVec0[((IOTA - 61) & 511)];
			float fTemp207 = fVec0[((IOTA - 60) & 511)];
			float fTemp208 = fVec0[((IOTA - 59) & 511)];
			float fTemp209 = fVec0[((IOTA - 54) & 511)];
			float fTemp210 = fVec0[((IOTA - 53) & 511)];
			float fTemp211 = fVec0[((IOTA - 52) & 511)];
			float fTemp212 = fVec0[((IOTA - 51) & 511)];
			float fTemp213 = fVec0[((IOTA - 50) & 511)];
			float fTemp214 = fVec0[((IOTA - 49) & 511)];
			float fTemp215 = fVec0[((IOTA - 48) & 511)];
			float fTemp216 = fVec0[((IOTA - 47) & 511)];
			float fTemp217 = fVec0[((IOTA - 46) & 511)];
			float fTemp218 = fVec0[((IOTA - 45) & 511)];
			float fTemp219 = fVec0[((IOTA - 36) & 511)];
			float fTemp220 = fVec0[((IOTA - 35) & 511)];
			float fTemp221 = fVec0[((IOTA - 34) & 511)];
			float fTemp222 = fVec0[((IOTA - 33) & 511)];
			float fTemp223 = fVec0[((IOTA - 32) & 511)];
			float fTemp224 = fVec0[((IOTA - 31) & 511)];
			float fTemp225 = fVec0[((IOTA - 24) & 511)];
			float fTemp226 = fVec0[((IOTA - 23) & 511)];
			float fTemp227 = fVec0[((IOTA - 22) & 511)];
			float fTemp228 = fVec0[((IOTA - 21) & 511)];
			float fTemp229 = fVec0[((IOTA - 5) & 511)];
			float fTemp230 = fVec0[((IOTA - 6) & 511)];
			float fTemp231 = fVec0[((IOTA - 7) & 511)];
			float fTemp232 = fVec0[((IOTA - 8) & 511)];
			float fTemp233 = fVec0[((IOTA - 10) & 511)];
			float fTemp234 = fVec0[((IOTA - 11) & 511)];
			float fTemp235 = fVec0[((IOTA - 12) & 511)];
			float fTemp236 = fVec0[((IOTA - 13) & 511)];
			float fTemp237 = fVec0[((IOTA - 14) & 511)];
			float fTemp238 = fVec0[((IOTA - 15) & 511)];
			float fTemp239 = fVec0[((IOTA - 16) & 511)];
			float fTemp240 = fVec0[((IOTA - 17) & 511)];
			float fTemp241 = fVec0[((IOTA - 20) & 511)];
			float fTemp242 = fVec0[((IOTA - 509) & 511)];
			float fTemp243 = fVec0[((IOTA - 269) & 511)];
			float fTemp244 = fVec0[((IOTA - 508) & 511)];
			float fTemp245 = fVec0[((IOTA - 506) & 511)];
			float fTemp246 = fVec0[((IOTA - 429) & 511)];
			float fTemp247 = fVec0[((IOTA - 353) & 511)];
			float fTemp248 = fVec0[((IOTA - 280) & 511)];
			float fTemp249 = fVec0[((IOTA - 157) & 511)];
			float fTemp250 = fVec0[((IOTA - 232) & 511)];
			float fTemp251 = fVec0[((IOTA - 505) & 511)];
			float fTemp252 = fVec0[((IOTA - 445) & 511)];
			float fTemp253 = fVec0[((IOTA - 457) & 511)];
			float fTemp254 = fVec0[((IOTA - 504) & 511)];
			float fTemp255 = fVec0[((IOTA - 501) & 511)];
			float fTemp256 = fVec0[((IOTA - 462) & 511)];
			float fTemp257 = fVec0[((IOTA - 337) & 511)];
			float fTemp258 = fVec0[((IOTA - 288) & 511)];
			float fTemp259 = fVec0[((IOTA - 305) & 511)];
			float fTemp260 = fVec0[((IOTA - 503) & 511)];
			float fTemp261 = fVec0[((IOTA - 500) & 511)];
			float fTemp262 = fVec0[((IOTA - 461) & 511)];
			float fTemp263 = fVec0[((IOTA - 323) & 511)];
			float fTemp264 = fVec0[((IOTA - 456) & 511)];
			float fTemp265 = fVec0[((IOTA - 502) & 511)];
			float fTemp266 = fVec0[((IOTA - 446) & 511)];
			float fTemp267 = fVec0[((IOTA - 317) & 511)];
			float fTemp268 = fVec0[((IOTA - 387) & 511)];
			float fTemp269 = fVec0[((IOTA - 499) & 511)];
			float fTemp270 = fVec0[((IOTA - 489) & 511)];
			float fTemp271 = fVec0[((IOTA - 413) & 511)];
			float fTemp272 = fVec0[((IOTA - 386) & 511)];
			float fTemp273 = fVec0[((IOTA - 355) & 511)];
			float fTemp274 = fVec0[((IOTA - 287) & 511)];
			float fTemp275 = fVec0[((IOTA - 345) & 511)];
			float fTemp276 = fVec0[((IOTA - 498) & 511)];
			float fTemp277 = fVec0[((IOTA - 492) & 511)];
			float fTemp278 = fVec0[((IOTA - 482) & 511)];
			float fTemp279 = fVec0[((IOTA - 458) & 511)];
			float fTemp280 = fVec0[((IOTA - 448) & 511)];
			float fTemp281 = fVec0[((IOTA - 240) & 511)];
			float fTemp282 = fVec0[((IOTA - 313) & 511)];
			float fTemp283 = fVec0[((IOTA - 497) & 511)];
			float fTemp284 = fVec0[((IOTA - 487) & 511)];
			float fTemp285 = fVec0[((IOTA - 481) & 511)];
			float fTemp286 = fVec0[((IOTA - 455) & 511)];
			float fTemp287 = fVec0[((IOTA - 400) & 511)];
			float fTemp288 = fVec0[((IOTA - 316) & 511)];
			float fTemp289 = fVec0[((IOTA - 255) & 511)];
			float fTemp290 = fVec0[((IOTA - 297) & 511)];
			float fTemp291 = fVec0[((IOTA - 496) & 511)];
			float fTemp292 = fVec0[((IOTA - 485) & 511)];
			float fTemp293 = fVec0[((IOTA - 416) & 511)];
			float fTemp294 = fVec0[((IOTA - 174) & 511)];
			float fTemp295 = fVec0[((IOTA - 322) & 511)];
			float fTemp296 = fVec0[((IOTA - 495) & 511)];
			float fTemp297 = fVec0[((IOTA - 494) & 511)];
			float fTemp298 = fVec0[((IOTA - 338) & 511)];
			float fTemp299 = fVec0[((IOTA - 262) & 511)];
			float fTemp300 = fVec0[((IOTA - 162) & 511)];
			float fTemp301 = fVec0[((IOTA - 241) & 511)];
			float fTemp302 = fVec0[((IOTA - 493) & 511)];
			float fTemp303 = fVec0[((IOTA - 426) & 511)];
			float fTemp304 = fVec0[((IOTA - 480) & 511)];
			float fTemp305 = fVec0[((IOTA - 491) & 511)];
			float fTemp306 = fVec0[((IOTA - 330) & 511)];
			float fTemp307 = fVec0[((IOTA - 436) & 511)];
			float fTemp308 = (fTemp306 + fTemp307);
			float fTemp309 = fVec0[((IOTA - 490) & 511)];
			float fTemp310 = fVec0[((IOTA - 479) & 511)];
			float fTemp311 = fVec0[((IOTA - 453) & 511)];
			float fTemp312 = fVec0[((IOTA - 438) & 511)];
			float fTemp313 = fVec0[((IOTA - 306) & 511)];
			float fTemp314 = fVec0[((IOTA - 301) & 511)];
			float fTemp315 = fVec0[((IOTA - 298) & 511)];
			float fTemp316 = fVec0[((IOTA - 289) & 511)];
			float fTemp317 = fVec0[((IOTA - 292) & 511)];
			float fTemp318 = fVec0[((IOTA - 488) & 511)];
			float fTemp319 = fVec0[((IOTA - 460) & 511)];
			float fTemp320 = fVec0[((IOTA - 447) & 511)];
			float fTemp321 = fVec0[((IOTA - 443) & 511)];
			float fTemp322 = fVec0[((IOTA - 385) & 511)];
			float fTemp323 = fVec0[((IOTA - 403) & 511)];
			float fTemp324 = fVec0[((IOTA - 486) & 511)];
			float fTemp325 = fVec0[((IOTA - 454) & 511)];
			float fTemp326 = fVec0[((IOTA - 324) & 511)];
			float fTemp327 = fVec0[((IOTA - 263) & 511)];
			float fTemp328 = fVec0[((IOTA - 165) & 511)];
			float fTemp329 = fVec0[((IOTA - 206) & 511)];
			float fTemp330 = fVec0[((IOTA - 484) & 511)];
			float fTemp331 = fVec0[((IOTA - 483) & 511)];
			float fTemp332 = fVec0[((IOTA - 477) & 511)];
			float fTemp333 = fVec0[((IOTA - 463) & 511)];
			float fTemp334 = fVec0[((IOTA - 268) & 511)];
			float fTemp335 = fVec0[((IOTA - 271) & 511)];
			float fTemp336 = fVec0[((IOTA - 243) & 511)];
			float fTemp337 = fVec0[((IOTA - 475) & 511)];
			float fTemp338 = fVec0[((IOTA - 191) & 511)];
			float fTemp339 = fVec0[((IOTA - 469) & 511)];
			float fTemp340 = fVec0[((IOTA - 452) & 511)];
			float fTemp341 = fVec0[((IOTA - 356) & 511)];
			float fTemp342 = fVec0[((IOTA - 216) & 511)];
			float fTemp343 = fVec0[((IOTA - 279) & 511)];
			float fTemp344 = fVec0[((IOTA - 176) & 511)];
			float fTemp345 = fVec0[((IOTA - 430) & 511)];
			float fTemp346 = fVec0[((IOTA - 95) & 511)];
			float fTemp347 = fVec0[((IOTA - 423) & 511)];
			float fTemp348 = fVec0[((IOTA - 299) & 511)];
			float fTemp349 = fVec0[((IOTA - 417) & 511)];
			float fTemp350 = fVec0[((IOTA - 391) & 511)];
			float fTemp351 = fVec0[((IOTA - 286) & 511)];
			float fTemp352 = fVec0[((IOTA - 382) & 511)];
			float fTemp353 = fVec0[((IOTA - 389) & 511)];
			float fTemp354 = fVec0[((IOTA - 327) & 511)];
			float fTemp355 = fVec0[((IOTA - 250) & 511)];
			float fTemp356 = fVec0[((IOTA - 261) & 511)];
			float fTemp357 = fVec0[((IOTA - 388) & 511)];
			float fTemp358 = fVec0[((IOTA - 339) & 511)];
			float fTemp359 = fVec0[((IOTA - 312) & 511)];
			float fTemp360 = fVec0[((IOTA - 204) & 511)];
			float fTemp361 = fVec0[((IOTA - 295) & 511)];
			float fTemp362 = fVec0[((IOTA - 137) & 511)];
			float fTemp363 = fVec0[((IOTA - 379) & 511)];
			float fTemp364 = fVec0[((IOTA - 134) & 511)];
			float fTemp365 = fVec0[((IOTA - 363) & 511)];
			float fTemp366 = fVec0[((IOTA - 342) & 511)];
			float fTemp367 = fVec0[((IOTA - 116) & 511)];
			float fTemp368 = fVec0[((IOTA - 119) & 511)];
			float fTemp369 = fVec0[((IOTA - 209) & 511)];
			float fTemp370 = fVec0[((IOTA - 341) & 511)];
			float fTemp371 = fVec0[((IOTA - 275) & 511)];
			float fTemp372 = fVec0[((IOTA - 332) & 511)];
			float fTemp373 = fVec0[((IOTA - 143) & 511)];
			float fTemp374 = fVec0[((IOTA - 326) & 511)];
			float fTemp375 = fVec0[((IOTA - 277) & 511)];
			float fTemp376 = fVec0[((IOTA - 149) & 511)];
			float fTemp377 = fVec0[((IOTA - 202) & 511)];
			float fTemp378 = fVec0[((IOTA - 258) & 511)];
			float fTemp379 = fVec0[((IOTA - 242) & 511)];
			float fTemp380 = fVec0[((IOTA - 246) & 511)];
			float fTemp381 = fVec0[((IOTA - 177) & 511)];
			float fTemp382 = fVec0[((IOTA - 251) & 511)];
			float fTemp383 = fVec0[((IOTA - 229) & 511)];
			float fTemp384 = fVec0[((IOTA - 248) & 511)];
			float fTemp385 = fVec0[((IOTA - 144) & 511)];
			float fTemp386 = fVec0[((IOTA - 226) & 511)];
			float fTemp387 = fVec0[((IOTA - 156) & 511)];
			float fTemp388 = fVec0[((IOTA - 225) & 511)];
			float fTemp389 = fVec0[((IOTA - 125) & 511)];
			float fTemp390 = fVec0[((IOTA - 220) & 511)];
			float fTemp391 = fVec0[((IOTA - 18) & 511)];
			float fTemp392 = fVec0[((IOTA - 172) & 511)];
			float fTemp393 = fVec0[((IOTA - 124) & 511)];
			float fTemp394 = fVec0[((IOTA - 133) & 511)];
			float fTemp395 = (fTemp393 + fTemp394);
			float fTemp396 = fVec0[((IOTA - 69) & 511)];
			float fTemp397 = fVec0[((IOTA - 72) & 511)];
			float fTemp398 = fVec0[((IOTA - 507) & 511)];
			float fTemp399 = fVec0[((IOTA - 390) & 511)];
			float fTemp400 = fVec0[((IOTA - 375) & 511)];
			float fTemp401 = fVec0[((IOTA - 374) & 511)];
			float fTemp402 = fVec0[((IOTA - 340) & 511)];
			float fTemp403 = fVec0[((IOTA - 284) & 511)];
			float fTemp404 = fVec0[((IOTA - 283) & 511)];
			float fTemp405 = fVec0[((IOTA - 260) & 511)];
			float fTemp406 = fVec0[((IOTA - 252) & 511)];
			float fTemp407 = fVec0[((IOTA - 236) & 511)];
			float fTemp408 = fVec0[((IOTA - 235) & 511)];
			float fTemp409 = fVec0[((IOTA - 228) & 511)];
			float fTemp410 = fVec0[((IOTA - 227) & 511)];
			float fTemp411 = fVec0[((IOTA - 224) & 511)];
			float fTemp412 = fVec0[((IOTA - 223) & 511)];
			float fTemp413 = fVec0[((IOTA - 222) & 511)];
			float fTemp414 = fVec0[((IOTA - 221) & 511)];
			float fTemp415 = fVec0[((IOTA - 219) & 511)];
			float fTemp416 = fVec0[((IOTA - 218) & 511)];
			float fTemp417 = fVec0[((IOTA - 217) & 511)];
			float fTemp418 = fVec0[((IOTA - 212) & 511)];
			float fTemp419 = (0.00512710959f * fTemp418);
			float fTemp420 = fVec0[((IOTA - 211) & 511)];
			float fTemp421 = fVec0[((IOTA - 210) & 511)];
			float fTemp422 = fVec0[((IOTA - 197) & 511)];
			float fTemp423 = fVec0[((IOTA - 196) & 511)];
			float fTemp424 = fVec0[((IOTA - 195) & 511)];
			float fTemp425 = fVec0[((IOTA - 194) & 511)];
			float fTemp426 = fVec0[((IOTA - 193) & 511)];
			float fTemp427 = fVec0[((IOTA - 190) & 511)];
			float fTemp428 = fVec0[((IOTA - 189) & 511)];
			float fTemp429 = fVec0[((IOTA - 188) & 511)];
			float fTemp430 = fVec0[((IOTA - 187) & 511)];
			float fTemp431 = fVec0[((IOTA - 186) & 511)];
			float fTemp432 = fVec0[((IOTA - 185) & 511)];
			float fTemp433 = fVec0[((IOTA - 184) & 511)];
			float fTemp434 = fVec0[((IOTA - 183) & 511)];
			float fTemp435 = fVec0[((IOTA - 182) & 511)];
			float fTemp436 = fVec0[((IOTA - 181) & 511)];
			float fTemp437 = fVec0[((IOTA - 180) & 511)];
			float fTemp438 = fVec0[((IOTA - 179) & 511)];
			float fTemp439 = fVec0[((IOTA - 178) & 511)];
			float fTemp440 = fVec0[((IOTA - 173) & 511)];
			float fTemp441 = fVec0[((IOTA - 171) & 511)];
			float fTemp442 = fVec0[((IOTA - 170) & 511)];
			float fTemp443 = fVec0[((IOTA - 169) & 511)];
			float fTemp444 = fVec0[((IOTA - 164) & 511)];
			float fTemp445 = fVec0[((IOTA - 163) & 511)];
			float fTemp446 = fVec0[((IOTA - 155) & 511)];
			float fTemp447 = fVec0[((IOTA - 154) & 511)];
			float fTemp448 = fVec0[((IOTA - 153) & 511)];
			float fTemp449 = fVec0[((IOTA - 148) & 511)];
			float fTemp450 = fVec0[((IOTA - 147) & 511)];
			float fTemp451 = fVec0[((IOTA - 146) & 511)];
			float fTemp452 = fVec0[((IOTA - 145) & 511)];
			float fTemp453 = fVec0[((IOTA - 141) & 511)];
			float fTemp454 = fVec0[((IOTA - 140) & 511)];
			float fTemp455 = fVec0[((IOTA - 139) & 511)];
			float fTemp456 = fVec0[((IOTA - 136) & 511)];
			float fTemp457 = fVec0[((IOTA - 135) & 511)];
			float fTemp458 = fVec0[((IOTA - 132) & 511)];
			float fTemp459 = fVec0[((IOTA - 131) & 511)];
			float fTemp460 = fVec0[((IOTA - 130) & 511)];
			float fTemp461 = fVec0[((IOTA - 129) & 511)];
			float fTemp462 = fVec0[((IOTA - 128) & 511)];
			float fTemp463 = fVec0[((IOTA - 127) & 511)];
			float fTemp464 = fVec0[((IOTA - 126) & 511)];
			float fTemp465 = fVec0[((IOTA - 123) & 511)];
			float fTemp466 = fVec0[((IOTA - 122) & 511)];
			float fTemp467 = fVec0[((IOTA - 121) & 511)];
			float fTemp468 = fVec0[((IOTA - 120) & 511)];
			float fTemp469 = fVec0[((IOTA - 98) & 511)];
			float fTemp470 = fVec0[((IOTA - 96) & 511)];
			float fTemp471 = fVec0[((IOTA - 94) & 511)];
			float fTemp472 = fVec0[((IOTA - 93) & 511)];
			float fTemp473 = fVec0[((IOTA - 92) & 511)];
			float fTemp474 = fVec0[((IOTA - 91) & 511)];
			float fTemp475 = fVec0[((IOTA - 90) & 511)];
			float fTemp476 = fVec0[((IOTA - 89) & 511)];
			float fTemp477 = fVec0[((IOTA - 83) & 511)];
			float fTemp478 = fVec0[((IOTA - 82) & 511)];
			float fTemp479 = fVec0[((IOTA - 81) & 511)];
			float fTemp480 = fVec0[((IOTA - 80) & 511)];
			float fTemp481 = fVec0[((IOTA - 79) & 511)];
			float fTemp482 = fVec0[((IOTA - 73) & 511)];
			float fTemp483 = fVec0[((IOTA - 71) & 511)];
			float fTemp484 = fVec0[((IOTA - 70) & 511)];
			float fTemp485 = fVec0[((IOTA - 68) & 511)];
			float fTemp486 = fVec0[((IOTA - 67) & 511)];
			float fTemp487 = fVec0[((IOTA - 66) & 511)];
			float fTemp488 = fVec0[((IOTA - 65) & 511)];
			float fTemp489 = fVec0[((IOTA - 64) & 511)];
			float fTemp490 = fVec0[((IOTA - 57) & 511)];
			float fTemp491 = fVec0[((IOTA - 56) & 511)];
			float fTemp492 = fVec0[((IOTA - 55) & 511)];
			float fTemp493 = fVec0[((IOTA - 44) & 511)];
			float fTemp494 = (0.0353709534f * fTemp493);
			float fTemp495 = fVec0[((IOTA - 43) & 511)];
			float fTemp496 = fVec0[((IOTA - 42) & 511)];
			float fTemp497 = fVec0[((IOTA - 41) & 511)];
			float fTemp498 = fVec0[((IOTA - 40) & 511)];
			float fTemp499 = fVec0[((IOTA - 39) & 511)];
			float fTemp500 = fVec0[((IOTA - 38) & 511)];
			float fTemp501 = fVec0[((IOTA - 37) & 511)];
			float fTemp502 = fVec0[((IOTA - 29) & 511)];
			float fTemp503 = fVec0[((IOTA - 28) & 511)];
			float fTemp504 = fVec0[((IOTA - 27) & 511)];
			float fTemp505 = fVec0[((IOTA - 26) & 511)];
			float fTemp506 = fVec0[((IOTA - 1) & 511)];
			float fTemp507 = fVec0[((IOTA - 2) & 511)];
			float fTemp508 = fVec0[((IOTA - 3) & 511)];
			float fTemp509 = (1.00003052f * fTemp508);
			float fTemp510 = fVec0[((IOTA - 4) & 511)];
			float fTemp511 = fVec0[((IOTA - 9) & 511)];
			float fTemp512 = fVec0[((IOTA - 25) & 511)];
			float fTemp513 = fVec0[((IOTA - 510) & 511)];
			float fTemp514 = fVec0[((IOTA - 273) & 511)];
			float fTemp515 = fVec0[((IOTA - 208) & 511)];
			float fTemp516 = fVec0[((IOTA - 238) & 511)];
			float fTemp517 = (fTemp515 + fTemp516);
			float fTemp518 = fVec0[((IOTA - 478) & 511)];
			float fTemp519 = fVec0[((IOTA - 383) & 511)];
			float fTemp520 = (0.00344859157f * fTemp124);
			float fTemp521 = (0.00357066561f * fTemp441);
			float fTemp522 = fVec0[((IOTA - 168) & 511)];
			float fTemp523 = (fTemp298 + fTemp357);
			float fTemp524 = (fTemp106 - fTemp92);
			float fTemp525 = (fTemp413 + fTemp142);
			float fTemp526 = (0.00286873989f * fTemp353);
			float fTemp527 = (0.00210577715f * fTemp80);
			float fTemp528 = (0.000762962736f * fTemp173);
			float fTemp529 = (0.00668355357f * fTemp390);
			float fTemp530 = fVec0[((IOTA - 201) & 511)];
			float fTemp531 = (0.0135502182f * fTemp385);
			float fTemp532 = (0.10724204f * fTemp477);
			float fTemp533 = (fTemp232 + fTemp511);
			float fTemp534 = (fTemp262 + fTemp11);
			float fTemp535 = (fTemp230 + fTemp231);
			float fTemp536 = (fTemp233 + fTemp535);
			float fTemp537 = (fTemp52 + fTemp172);
			float fTemp538 = (fTemp241 + fTemp228);
			float fTemp539 = (0.00997955259f * fTemp360);
			float fTemp540 = (0.0252998453f * fTemp249);
			float fTemp541 = (0.156346321f * fTemp58);
			float fTemp542 = (fTemp506 + fTemp235);
			float fTemp543 = (fTemp236 + fTemp542);
			float fTemp544 = (fTemp222 + fTemp218);
			float fTemp545 = (fTemp510 + fTemp229);
			float fTemp546 = (0.00167851802f * fTemp26);
			float fTemp547 = (0.0104068117f * fTemp138);
			float fTemp548 = (fTemp377 + fTemp106);
			float fTemp549 = (fTemp392 + fTemp427);
			float fTemp550 = (fTemp489 + fTemp436);
			float fTemp551 = (0.00448622089f * fTemp205);
			float fTemp552 = (fTemp64 + fTemp374);
			float fTemp553 = (fTemp383 - fTemp171);
			float fTemp554 = (fTemp0 + fTemp506);
			float fTemp555 = (fTemp327 + fTemp92);
			float fTemp556 = (fTemp314 + fTemp144);
			float fTemp557 = (fTemp155 + fTemp67);
			float fTemp558 = (fTemp369 - fTemp172);
			float fTemp559 = (fTemp433 + fTemp530);
			float fTemp560 = (0.00378429517f * fTemp377);
			float fTemp561 = (fTemp508 + fTemp510);
			float fTemp562 = (fTemp453 - fTemp295);
			float fTemp563 = (fTemp246 + fTemp345);
			float fTemp564 = (fTemp0 + fTemp507);
			float fTemp565 = (fTemp220 + fTemp499);
			float fTemp566 = (0.00814844202f * fTemp43);
			float fTemp567 = (0.00772118289f * fTemp399);
			float fTemp568 = (0.0042115543f * fTemp370);
			float fTemp569 = (0.000976592302f * fTemp131);
			float fTemp570 = (fTemp391 + fTemp16);
			float fTemp571 = (fTemp241 + fTemp570);
			float fTemp572 = (fTemp215 + (fTemp217 + fTemp216));
			float fTemp573 = (0.00512710959f * fTemp340);
			float fTemp574 = (0.00671407208f * fTemp112);
			float fTemp575 = (0.00643940549f * fTemp36);
			float fTemp576 = (fTemp371 - fTemp45);
			float fTemp577 = (fTemp417 + fTemp372);
			float fTemp578 = (0.00592059083f * fTemp266);
			float fTemp579 = (0.0019531846f * fTemp53);
			float fTemp580 = (0.00219733268f * fTemp6);
			float fTemp581 = (fTemp510 + (fTemp506 + fTemp508));
			float fTemp582 = (fTemp504 + fTemp501);
			float fTemp583 = (fTemp222 + fTemp219);
			float fTemp584 = (0.00396740623f * fTemp105);
			float fTemp585 = (0.00915555283f * fTemp388);
			float fTemp586 = (0.00573747978f * fTemp426);
			float fTemp587 = (0.00860621966f * fTemp434);
			float fTemp588 = (fTemp469 + fTemp439);
			float fTemp589 = (fTemp403 + fTemp82);
			float fTemp590 = (fTemp384 + fTemp355);
			float fTemp591 = (fTemp416 + fTemp414);
			float fTemp592 = (fTemp461 + fTemp433);
			float fTemp593 = (0.00057985168f * fTemp140);
			float fTemp594 = (0.0300912503f * fTemp22);
			float fTemp595 = (fTemp411 + fTemp388);
			float fTemp596 = (fTemp106 - fTemp163);
			float fTemp597 = (0.00473036896f * fTemp360);
			float fTemp598 = (0.00296029542f * fTemp377);
			float fTemp599 = (0.0309457686f * fTemp201);
			float fTemp600 = (0.0383617654f * fTemp208);
			float fTemp601 = (1.00003052f * fTemp231);
			float fTemp602 = (fTemp360 - fTemp378);
			float fTemp603 = (fTemp17 + fTemp89);
			float fTemp604 = (0.0573747978f * fTemp176);
			float fTemp605 = (fTemp503 + fTemp221);
			float fTemp606 = (fTemp382 + fTemp263);
			float fTemp607 = (fTemp502 + fTemp212);
			float fTemp608 = (fTemp66 + fTemp519);
			float fTemp609 = (fTemp410 - fTemp125);
			float fTemp610 = (fTemp478 + fTemp381);
			float fTemp611 = (0.00537125766f * fTemp420);
			float fTemp612 = (0.0125736259f * fTemp447);
			float fTemp613 = (0.0248725861f * fTemp205);
			float fTemp614 = (0.00616473891f * fTemp8);
			float fTemp615 = (0.00241096225f * fTemp358);
			float fTemp616 = (0.00509659108f * fTemp150);
			float fTemp617 = (1.00003052f * fTemp483);
			float fTemp618 = (fTemp391 + fTemp503);
			float fTemp619 = (fTemp214 + fTemp213);
			float fTemp620 = (fTemp148 + fTemp306);
			float fTemp621 = (fTemp15 + fTemp355);
			float fTemp622 = (0.0155644398f * fTemp120);
			float fTemp623 = (0.0114749596f * fTemp444);
			float fTemp624 = (0.0294808801f * fTemp451);
			float fTemp625 = (fTemp231 + fTemp16);
			float fTemp626 = (fTemp0 + fTemp224);
			float fTemp627 = (0.00616473891f * fTemp449);
			float fTemp628 = (fTemp34 + fTemp262);
			float fTemp629 = (0.00408948027f * fTemp371);
			float fTemp630 = (0.00720236823f * fTemp377);
			float fTemp631 = (0.00125125889f * fTemp109);
			float fTemp632 = (fTemp510 + fTemp230);
			float fTemp633 = (0.00155644398f * fTemp375);
			float fTemp634 = (fTemp117 + fTemp60);
			float fTemp635 = (fTemp334 + fTemp131);
			float fTemp636 = (fTemp299 + fTemp108);
			float fTemp637 = (fTemp407 + fTemp313);
			float fTemp638 = (fTemp380 + fTemp404);
			float fTemp639 = (fTemp428 + fTemp425);
			float fTemp640 = (0.00360118411f * fTemp351);
			float fTemp641 = (0.00390636921f * fTemp417);
			float fTemp642 = (0.0252693258f * fTemp192);
			float fTemp643 = (0.0481276885f * fTemp196);
			float fTemp644 = (0.00845362712f * fTemp416);
			float fTemp645 = (fTemp87 - fTemp147);
			float fTemp646 = (fTemp112 + fTemp63);
			float fTemp647 = (0.00103762932f * fTemp321);
			float fTemp648 = (fTemp316 + fTemp12);
			float fTemp649 = (fTemp178 + fTemp415);
			float fTemp650 = (fTemp70 + fTemp127);
			float fTemp651 = (fTemp171 + fTemp295);
			float fTemp652 = (fTemp336 + fTemp259);
			float fTemp653 = (0.00314340647f * fTemp421);
			float fTemp654 = (0.00830103457f * fTemp452);
			float fTemp655 = (0.0012817774f * fTemp248);
			float fTemp656 = (1.00003052f * fTemp230);
			float fTemp657 = (fTemp148 + fTemp359);
			float fTemp658 = (fTemp255 + fTemp265);
			float fTemp659 = (fTemp93 + fTemp102);
			float fTemp660 = (0.00180059206f * fTemp142);
			float fTemp661 = (0.0133060701f * fTemp301);
			float fTemp662 = (fTemp425 + fTemp113);
			float fTemp663 = (0.00283822138f * fTemp270);
			float fTemp664 = (0.00173955504f * fTemp137);
			float fTemp665 = (0.00360118411f * fTemp15);
			float fTemp666 = (0.0112308115f * fTemp424);
			float fTemp667 = (0.0213934761f * fTemp184);
			float fTemp668 = (fTemp29 - fTemp318);
			float fTemp669 = (0.0218512528f * fTemp249);
			float fTemp670 = (0.0676595345f * fTemp389);
			float fTemp671 = (0.0487990975f * fTemp475);
			float fTemp672 = (0.0192571804f * fTemp208);
			float fTemp673 = (fTemp2 + fTemp310);
			float fTemp674 = (fTemp231 + fTemp232);
			float fTemp675 = (fTemp230 + (fTemp229 + fTemp581));
			float fTemp676 = (fTemp145 - fTemp109);
			float fTemp677 = (fTemp335 + fTemp166);
			float fTemp678 = (fTemp114 + fTemp263);
			float fTemp679 = (fTemp356 + fTemp299);
			float fTemp680 = (0.000762962736f * fTemp108);
			float fTemp681 = (0.000671407208f * fTemp144);
			float fTemp682 = (0.144016847f * fTemp196);
			float fTemp683 = (fTemp315 + fTemp401);
			float fTemp684 = (fTemp222 + fTemp220);
			float fTemp685 = (0.000518814661f * fTemp213);
			float fTemp686 = (fTemp240 + fTemp228);
			float fTemp687 = (fTemp508 + (fTemp506 + fTemp507));
			float fTemp688 = (fTemp504 + fTemp372);
			float fTemp689 = (fTemp146 + fTemp145);
			float fTemp690 = (fTemp248 + fTemp258);
			float fTemp691 = (0.0035401471f * fTemp335);
			float fTemp692 = (fTemp238 + fTemp16);
			float fTemp693 = (fTemp508 + fTemp231);
			float fTemp694 = (fTemp93 + fTemp139);
			float fTemp695 = (0.0236518458f * fTemp453);
			float fTemp696 = (fTemp335 - fTemp74);
			float fTemp697 = (0.00338755455f * fTemp18);
			float fTemp698 = (0.00546281319f * fTemp320);
			float fTemp699 = (0.000823999755f * fTemp307);
			float fTemp700 = (0.00851466414f * fTemp27);
			float fTemp701 = (0.00299081393f * fTemp306);
			float fTemp702 = (fTemp239 + fTemp240);
			float fTemp703 = (fTemp112 + fTemp316);
			float fTemp704 = (0.00747703481f * fTemp515);
			float fTemp705 = (fTemp66 + fTemp254);
			float fTemp706 = (fTemp5 - fTemp55);
			float fTemp707 = (fTemp380 + fTemp26);
			float fTemp708 = (0.00384533219f * fTemp76);
			float fTemp709 = (0.00375377666f * fTemp120);
			float fTemp710 = (0.00735496078f * fTemp290);
			float fTemp711 = (0.00524918362f * fTemp139);
			float fTemp712 = (0.00744651631f * fTemp344);
			float fTemp713 = (0.0505691692f * fTemp200);
			float fTemp714 = (0.00363170262f * fTemp408);
			float fTemp715 = (0.00546281319f * fTemp107);
			float fTemp716 = (0.116458632f * fTemp214);
			float fTemp717 = (fTemp427 + fTemp172);
			float fTemp718 = (0.00180059206f * fTemp519);
			float fTemp719 = (fTemp150 + fTemp288);
			float fTemp720 = (fTemp424 - fTemp40);
			float fTemp721 = (0.00411999878f * fTemp331);
			float fTemp722 = (0.00598162785f * fTemp286);
			float fTemp723 = (0.00207525864f * fTemp307);
			float fTemp724 = (fTemp263 + fTemp257);
			float fTemp725 = (0.00106814783f * fTemp244);
			float fTemp726 = (0.00836207159f * fTemp19);
			float fTemp727 = (0.00466933195f * fTemp28);
			float fTemp728 = (0.000732444227f * fTemp135);
			float fTemp729 = (0.00726340525f * fTemp74);
			float fTemp730 = (0.00299081393f * fTemp103);
			float fTemp731 = (0.00436414685f * fTemp371);
			float fTemp732 = (0.00885036774f * fTemp379);
			float fTemp733 = (0.00842310861f * fTemp412);
			float fTemp734 = (fTemp230 + fTemp545);
			float fTemp735 = (fTemp342 - fTemp75);
			float fTemp736 = (fTemp24 + fTemp19);
			float fTemp737 = (0.00250251777f * fTemp347);
			float fTemp738 = (fTemp76 + fTemp265);
			float fTemp739 = (fTemp530 - fTemp148);
			float fTemp740 = (fTemp238 + fTemp241);
			float fTemp741 = (0.0140995514f * fTemp453);
			float fTemp742 = (fTemp258 - fTemp253);
			float fTemp743 = (fTemp516 + fTemp281);
			float fTemp744 = (0.00247199927f * fTemp72);
			float fTemp745 = (0.0087282937f * fTemp290);
			float fTemp746 = (0.00375377666f * fTemp93);
			float fTemp747 = (0.00445570238f * fTemp320);
			float fTemp748 = (0.0147404401f * fTemp463);
			float fTemp749 = (0.0744956806f * fTemp391);
			float fTemp750 = (fTemp173 + fTemp38);
			float fTemp751 = (fTemp81 + fTemp98);
			float fTemp752 = (fTemp4 - fTemp516);
			float fTemp753 = (0.0102237007f * fTemp452);
			float fTemp754 = (0.000701925717f * fTemp113);
			float fTemp755 = (0.00314340647f * fTemp350);
			float fTemp756 = (0.00262459181f * fTemp371);
			float fTemp757 = (0.0139164403f * fTemp184);
			float fTemp758 = (0.0132450331f * fTemp186);
			float fTemp759 = (0.025879696f * fTemp202);
			float fTemp760 = (fTemp62 + fTemp8);
			float fTemp761 = (0.0489822067f * fTemp183);
			float fTemp762 = (0.00750755332f * fTemp71);
			float fTemp763 = (0.00198370311f * fTemp103);
			float fTemp764 = (0.0042115543f * fTemp49);
			float fTemp765 = (0.00909451582f * fTemp299);
			float fTemp766 = (fTemp349 - fTemp68);
			float fTemp767 = (fTemp100 + fTemp74);
			float fTemp768 = (0.00729392376f * fTemp146);
			float fTemp769 = (0.00311288796f * fTemp306);
			float fTemp770 = (0.00668355357f * fTemp299);
			float fTemp771 = (fTemp28 + fTemp8);
			float fTemp772 = (0.00659199804f * fTemp518);
			float fTemp773 = (0.00576799829f * fTemp2);
			float fTemp774 = (fTemp243 + fTemp253);
			float fTemp775 = (fTemp137 + fTemp247);
			float fTemp776 = (fTemp393 + fTemp176);
			float fTemp777 = (0.00427259132f * fTemp63);
			float fTemp778 = (0.0179448836f * fTemp300);
			float fTemp779 = (fTemp252 + fTemp269);
			float fTemp780 = (fTemp355 - fTemp130);
			float fTemp781 = (0.00570696127f * fTemp163);
			float fTemp782 = (0.0171208847f * fTemp141);
			float fTemp783 = (fTemp372 + fTemp140);
			float fTemp784 = (0.0138554033f * fTemp193);
			float fTemp785 = (0.0307626575f * fTemp487);
			float fTemp786 = (fTemp324 + fTemp284);
			float fTemp787 = (fTemp115 - fTemp166);
			float fTemp788 = (fTemp457 + fTemp381);
			float fTemp789 = (fTemp440 - fTemp93);
			float fTemp790 = (0.0110477004f * fTemp149);
			float fTemp791 = (fTemp97 + fTemp147);
			float fTemp792 = (fTemp32 + fTemp6);
			float fTemp793 = (fTemp513 + fTemp1);
			float fTemp794 = (0.027680289f * fTemp424);
			float fTemp795 = (fTemp235 + fTemp236);
			float fTemp796 = (0.00122074038f * fTemp284);
			float fTemp797 = (fTemp508 + fTemp564);
			float fTemp798 = (0.00369273964f * fTemp297);
			float fTemp799 = (0.00601214636f * fTemp29);
			float fTemp800 = (0.00726340525f * fTemp127);
			float fTemp801 = (0.00057985168f * fTemp39);
			float fTemp802 = (0.0104678487f * fTemp89);
			float fTemp803 = (fTemp258 + fTemp131);
			float fTemp804 = (fTemp515 + fTemp267);
			float fTemp805 = (0.00518814661f * fTemp278);
			float fTemp806 = (0.00424207281f * fTemp356);
			float fTemp807 = (fTemp493 + fTemp490);
			float fTemp808 = (0.00988799706f * fTemp38);
			float fTemp809 = (fTemp104 - fTemp262);
			float fTemp810 = (fTemp282 + fTemp85);
			float fTemp811 = (0.00589007232f * fTemp366);
			float fTemp812 = (0.00271614734f * fTemp244);
			float fTemp813 = (fTemp98 - fTemp32);
			float fTemp814 = (fTemp230 + fTemp493);
			float fTemp815 = (0.0122074038f * fTemp256);
			float fTemp816 = (0.0159001444f * fTemp418);
			float fTemp817 = (fTemp380 + fTemp341);
			float fTemp818 = (fTemp103 + fTemp354);
			float fTemp819 = (0.00848414563f * fTemp81);
			float fTemp820 = (fTemp412 + fTemp49);
			float fTemp821 = (0.00573747978f * fTemp341);
			float fTemp822 = (0.00900296029f * fTemp453);
			float fTemp823 = (0.00296029542f * fTemp166);
			float fTemp824 = (fTemp222 + fTemp221);
			float fTemp825 = (0.00405896176f * fTemp69);
			float fTemp826 = (0.0285348073f * fTemp466);
			float fTemp827 = (0.0124210333f * fTemp346);
			float fTemp828 = (fTemp93 - fTemp304);
			float fTemp829 = (fTemp139 - fTemp55);
			float fTemp830 = (fTemp445 + fTemp97);
			float fTemp831 = (fTemp5 + fTemp361);
			float fTemp832 = (0.00991851557f * fTemp322);
			float fTemp833 = (0.0051576281f * fTemp313);
			float fTemp834 = (0.00411999878f * fTemp92);
			float fTemp835 = (fTemp27 + fTemp129);
			float fTemp836 = (fTemp403 + fTemp171);
			float fTemp837 = (fTemp66 + fTemp290);
			float fTemp838 = (fTemp87 - fTemp26);
			float fTemp839 = (0.0409253202f * fTemp467);
			float fTemp840 = (fTemp65 - fTemp51);
			float fTemp841 = (0.00454725791f * fTemp405);
			float fTemp842 = (fTemp422 + fTemp378);
			float fTemp843 = (0.00244148076f * fTemp253);
			float fTemp844 = (fTemp65 + fTemp39);
			float fTemp845 = (fTemp110 + fTemp19);
			float fTemp846 = (fTemp416 + fTemp415);
			float fTemp847 = (0.00830103457f * fTemp88);
			float fTemp848 = (fTemp186 - fTemp8);
			float fTemp849 = (0.00762962736f * fTemp129);
			float fTemp850 = (0.0224921424f * fTemp522);
			float fTemp851 = (0.0252998453f * fTemp458);
			float fTemp852 = (fTemp332 + fTemp518);
			float fTemp853 = (fTemp442 + fTemp433);
			float fTemp854 = (fTemp299 + fTemp97);
			float fTemp855 = (0.0102847377f * fTemp44);
			float fTemp856 = (0.000976592302f * fTemp257);
			float fTemp857 = (0.000488296151f * fTemp351);
			float fTemp858 = (fTemp99 - fTemp134);
			float fTemp859 = (fTemp53 + fTemp275);
			float fTemp860 = (0.00152592547f * fTemp292);
			float fTemp861 = (0.00811792351f * fTemp73);
			float fTemp862 = (0.0153508103f * fTemp430);
			float fTemp863 = (fTemp336 + fTemp264);
			float fTemp864 = (fTemp516 - fTemp2);
			float fTemp865 = (fTemp55 - fTemp286);
			float fTemp866 = (fTemp57 + fTemp341);
			float fTemp867 = (fTemp385 + fTemp427);
			float fTemp868 = (fTemp451 + fTemp420);
			float fTemp869 = (0.000793481246f * fTemp317);
			float fTemp870 = (0.00537125766f * fTemp130);
			float fTemp871 = (0.0130314035f * fTemp77);
			float fTemp872 = (fTemp288 + fTemp6);
			float fTemp873 = (fTemp235 + fTemp512);
			float fTemp874 = (fTemp223 + fTemp318);
			output0[i] = FAUSTFLOAT((iSlow1 ? (iSlow35 ? (iSlow51 ? (iSlow59 ? (iSlow63 ? (iSlow65 ? (((9.15555283e-05f * (fTemp423 + fTemp265)) + ((0.00119022187f * (fTemp261 - (fTemp320 - (fTemp430 + (fTemp496 + fTemp213))))) + ((0.00140385143f * (fTemp269 + (fTemp319 + (fTemp501 + (fTemp238 - fTemp220))))) + ((0.00341807306f * (fTemp96 - fTemp277)) + ((0.000335703604f * (fTemp285 - fTemp292)) + ((0.000183111057f * (fTemp330 - (fTemp134 + fTemp518))) + ((0.000366222113f * (fTemp299 + fTemp331)) + ((0.000305185094f * (fTemp278 - (fTemp8 - (fTemp156 + fTemp321)))) + ((0.000244148076f * (fTemp310 - (fTemp72 + (fTemp79 - (fTemp239 - fTemp316))))) + ((0.00308236945f * (fTemp359 - fTemp339)) + ((0.00292977691f * (fTemp47 - fTemp31)) + ((0.00601214636f * (fTemp401 - fTemp280)) + ((0.00274666585f * (fTemp266 + (fTemp209 + fTemp12))) + ((0.00238044374f * (fTemp497 - fTemp54)) + ((0.003234962f * (fTemp155 - fTemp60)) + ((0.00357066561f * (fTemp326 - fTemp307)) + ((0.00363170262f * (fTemp246 + (fTemp177 - fTemp275))) + ((0.00152592547f * (fTemp347 - (fTemp287 - fTemp160))) + ((0.00473036896f * (fTemp412 + fTemp88)) + ((0.00262459181f * (fTemp101 + (fTemp146 - (fTemp16 - fTemp504)))) + ((0.00131229591f * (fTemp105 - (fTemp387 + fTemp274))) + ((0.000671407208f * (fTemp117 + fTemp113)) + ((0.000518814661f * (fTemp161 + (fTemp233 - fTemp338))) + ((0.000396740623f * (fTemp370 + fTemp119)) + ((0.00146488845f * (fTemp164 + (fTemp225 - fTemp5))) + ((0.00305185094f * (fTemp44 - (fTemp217 + fTemp92))) + ((0.00427259132f * (fTemp263 + fTemp322)) + ((0.00180059206f * (fTemp170 - (fTemp441 + fTemp82))) + ((0.00509659108f * (fTemp378 + fTemp129)) + ((0.00311288796f * (fTemp13 + (fTemp498 - fTemp207))) + ((0.00234992523f * (fTemp314 - (fTemp427 - fTemp873))) + ((0.00213629566f * (fTemp59 - (fTemp403 - fTemp348))) + ((0.00219733268f * (fTemp0 - fTemp404)) + ((0.00222785119f * (fTemp237 + fTemp356)) + ((0.00177007355f * (fTemp503 + fTemp289)) + ((0.013061922f * (fTemp188 + fTemp94)) + ((0.00585955381f * (fTemp431 - fTemp49)) + ((0.0143436994f * (fTemp367 + fTemp451)) + ((0.00280770287f * (fTemp505 - fTemp208)) + ((0.00332651753f * fTemp829) + ((0.00125125889f * fTemp276) + ((0.000854518265f * fTemp345) + ((0.00558488723f * fTemp2) + ((0.006469924f * fTemp62) + ((0.00616473891f * fTemp303) + ((0.00500503555f * fTemp67) + ((0.00347911008f * fTemp43) + ((0.004852443f * fTemp350) + ((0.00665303506f * fTemp399) + ((0.00863673817f * fTemp353) + ((0.0101931822f * fTemp357) + ((0.0103457747f * fTemp268) + ((0.00820947904f * fTemp272) + (fTemp808 + ((0.0109561449f * fTemp168) + ((0.00955229346f * fTemp169) + ((0.00521866512f * fTemp27) + ((0.00442518387f * fTemp50) + ((0.00228888821f * fTemp145) + ((0.00369273964f * fTemp354) + ((0.0035401471f * fTemp142) + ((0.00543229468f * fTemp295) + ((0.00335703604f * fTemp173) + ((0.00186162908f * fTemp103) + ((0.00134281442f * fTemp150) + ((0.00408948027f * fTemp114) + ((0.00479140598f * fTemp130) + ((0.0045167394f * fTemp98) + ((0.000488296151f * fTemp410) + ((0.00350962859f * fTemp388) + ((0.00396740623f * fTemp411) + ((0.0119022187f * fTemp414) + ((0.0154423658f * fTemp390) + ((0.0169377737f * fTemp415) + ((0.0175786614f * fTemp416) + ((0.0182805881f * fTemp417) + ((0.0202337727f * fTemp342) + ((0.021149328f * fTemp36) + ((0.0151676992f * fTemp122) + ((0.0123599963f * fTemp420) + ((0.0154118473f * fTemp421) + ((0.0176091809f * fTemp369) + ((0.0182500686f * fTemp515) + ((0.0186162908f * fTemp149) + ((0.0199285876f * fTemp329) + ((0.0223395489f * fTemp65) + ((0.0225531794f * fTemp360) + ((0.0214239936f * fTemp106) + ((0.0202642903f * fTemp377) + ((0.0187383648f * fTemp530) + ((0.0168156996f * fTemp95) + ((0.00933866389f * fTemp89) + ((0.00137333293f * fTemp17) + ((0.00976592302f * fTemp432) + ((0.00689718314f * fTemp433) + ((0.00927762687f * fTemp443) + (fTemp850 + ((0.0312814713f * fTemp175) + ((0.030976288f * fTemp176) + ((0.0305490289f * fTemp328) + ((0.033600878f * fTemp444) + ((0.0435804315f * fTemp445) + ((0.0505691692f * fTemp300) + ((0.0464186519f * fTemp116) + ((0.0244148076f * fTemp118) + ((0.00418103579f * fTemp446) + ((0.00817896053f * fTemp449) + ((0.0139164403f * fTemp450) + ((0.016235847f * fTemp452) + ((0.0210577715f * fTemp385) + ((0.0324106589f * fTemp373) + ((0.0431226529f * fTemp121) + ((0.054811243f * fTemp453) + ((0.058534503f * fTemp454) + ((0.0583208725f * fTemp455) + ((0.048890654f * fTemp152) + ((0.0261543635f * fTemp362) + ((0.0411084332f * fTemp461) + ((0.0638142005f * fTemp462) + ((0.0558488742f * fTemp463) + ((0.0170903653f * fTemp464) + ((0.0239875484f * fTemp141) + ((0.0515152439f * fTemp182) + ((0.0527054667f * fTemp183) + ((0.0675984994f * fTemp184) + ((0.0660725757f * fTemp185) + ((0.0842921212f * fTemp186) + ((0.0523392446f * fTemp187) + ((0.0138554033f * fTemp194) + ((0.0820032358f * fTemp195) + ((0.0586260557f * fTemp196) + ((0.0165715516f * fTemp469) + ((0.549546778f * fTemp204) + (fTemp35 + ((0.962096035f * fTemp482) + ((0.507217646f * fTemp397) + ((0.151188701f * fTemp483) + ((0.029053621f * fTemp484) + ((0.00512710959f * fTemp396) + ((0.00317392498f * fTemp211) + ((0.00241096225f * fTemp212) + ((0.00314340647f * fTemp499) + ((0.00183111057f * fTemp506) + (0.00256355479f * fTemp500)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((((0.000732444227f * (fTemp242 - (fTemp255 - (fTemp332 - fTemp283)))) + ((0.00054933317f * (fTemp244 + (fTemp298 - (fTemp502 - fTemp128)))) + ((0.00057985168f * (fTemp398 - (fTemp402 + fTemp34))) + ((0.000885036774f * (fTemp245 - (fTemp108 - fTemp279))) + ((0.00109866634f * (fTemp251 + (fTemp254 + (fTemp424 - (fTemp507 - fTemp490))))) + ((0.000610370189f * (fTemp260 - (fTemp163 - (fTemp366 - fTemp400)))) + ((3.05185094e-05f * (fTemp291 - (fTemp11 + (fTemp361 + (fTemp90 + (fTemp508 - fTemp219)))))) + ((0.000976592302f * (fTemp240 + fTemp296)) + ((0.00253303628f * (fTemp302 - (fTemp282 - (fTemp9 + fTemp127)))) + ((0.00411999878f * (fTemp309 + fTemp305)) + ((0.00360118411f * (fTemp270 - (fTemp148 + (fTemp422 + fTemp259)))) + ((0.00201422162f * (fTemp284 - (fTemp386 + fTemp30))) + ((0.00115970336f * (fTemp324 - (fTemp267 + fTemp262))) + ((0.000762962736f * (fTemp7 - (fTemp372 + (fTemp426 + fTemp29)))) + ((0.000640888698f * (fTemp511 + fTemp337)) + ((0.000823999755f * (fTemp22 + fTemp18)) + ((0.00204474013f * (fTemp19 + (fTemp514 + (fTemp224 + (fTemp391 + fTemp228))))) + ((0.0042115543f * (fTemp24 - (fTemp91 + (fTemp97 - fTemp102)))) + ((0.00415051728f * (fTemp25 + (fTemp15 + fTemp115))) + ((0.00378429517f * (fTemp40 + fTemp28)) + ((0.00155644398f * (fTemp327 + fTemp333)) + ((6.10370189e-05f * (fTemp306 - fTemp256)) + ((0.00329599902f * (fTemp264 - (fTemp57 + (fTemp210 - fTemp335)))) + ((0.00338755455f * (fTemp286 + (fTemp325 + (fTemp133 + fTemp519)))) + ((0.00653096102f * (fTemp408 + fTemp340)) + ((0.00424207281f * (fTemp382 - fTemp252)) + ((0.0019531846f * (fTemp48 - (fTemp76 + (fTemp315 - fTemp273)))) + ((0.0025940733f * (fTemp51 - (fTemp236 - fTemp312))) + ((0.00375377666f * (fTemp205 + fTemp33)) + ((0.00399792474f * (fTemp68 - (fTemp374 - (fTemp448 - fTemp313)))) + ((0.001617481f * (fTemp61 - (fTemp159 + (fTemp234 + fTemp290)))) + ((0.000274666585f * (fTemp157 - (fTemp109 - (fTemp425 + (fTemp214 - (fTemp226 - fTemp495)))))) + ((0.000213629566f * (fTemp75 + (fTemp3 - (fTemp491 + fTemp341)))) + ((0.000152592547f * (fTemp71 - fTemp293)) + ((0.00167851802f * (fTemp215 - fTemp83)) + ((0.00457777642f * (fTemp80 - fTemp271)) + ((0.00277718436f * (fTemp428 + fTemp46)) + ((0.00268562883f * (fTemp216 + fTemp110)) + ((0.00631733146f * (fTemp363 + (fTemp100 - fTemp73))) + ((0.00659199804f * (fTemp99 + fTemp167)) + ((0.00625629444f * (fTemp63 - (fTemp447 - fTemp243))) + ((0.00390636921f * (fTemp74 + (fTemp10 + (fTemp4 + fTemp406)))) + ((0.00170903653f * (fTemp493 - fTemp120)) + ((0.00402844325f * (fTemp84 - fTemp78)) + ((0.00265511032f * (fTemp241 - fTemp132)) + ((0.00393688772f * (fTemp137 + (fTemp250 + fTemp355))) + ((0.00466933195f * (fTemp32 + fTemp140)) + ((0.00445570238f * (fTemp56 - (fTemp131 + (fTemp460 + fTemp147)))) + ((0.00247199927f * (fTemp221 - fTemp144)) + ((0.00592059083f * (fTemp375 - fTemp171)) + ((0.00503555406f * (fTemp440 - fTemp172)) + ((0.00189214759f * (fTemp229 - fTemp85)) + ((0.000915555283f * (fTemp442 + fTemp126)) + ((0.00158696249f * (fTemp351 - (fTemp492 - fTemp429))) + ((0.00231940672f * (fTemp230 + fTemp107)) + ((0.00433362834f * (fTemp371 + fTemp343)) + ((0.00210577715f * (fTemp135 + fTemp136)) + ((0.00372325815f * (fTemp392 - fTemp405)) + ((0.00680562761f * (fTemp138 + fTemp281)) + ((0.00296029542f * (fTemp222 + fTemp383)) + ((0.00714133121f * (fTemp436 - fTemp413)) + ((0.0197759941f * (fTemp439 - fTemp39)) + ((0.0121158483f * (fTemp438 - fTemp418)) + ((0.00164799951f * (fTemp232 - fTemp434)) + ((0.00909451582f * (fTemp153 + fTemp111)) + ((0.00283822138f * fTemp874) + ((0.000457777642f * fTemp828) + ((0.00173955504f * fTemp297) + ((0.00384533219f * fTemp23) + (fTemp843 + ((0.00430310983f * fTemp311) + ((0.00912503432f * fTemp37) + ((0.0106204413f * fTemp41) + ((0.00958281197f * fTemp45) + ((0.00286873989f * fTemp21) + (fTemp825 + ((0.000427259132f * fTemp349) + ((0.00149540696f * fTemp323) + ((0.00494399853f * fTemp352) + ((0.00561540574f * fTemp165) + ((0.00595110934f * fTemp166) + ((0.0100100711f * fTemp20) + ((0.0132145146f * fTemp124) + ((0.0120242927f * fTemp125) + ((0.00738547929f * fTemp123) + ((0.00216681417f * fTemp365) + ((0.0038758507f * fTemp247) + ((0.00299081393f * fTemp53) + ((0.0019226661f * fTemp104) + ((0.000122074038f * fTemp257) + ((0.0012817774f * fTemp317) + ((0.000793481246f * fTemp258) + ((0.00326548051f * fTemp248) + ((0.00552385021f * fTemp64) + ((0.00555436872f * fTemp70) + ((0.00302133244f * fTemp42) + ((0.00488296151f * fTemp112) + ((0.00662251655f * fTemp334) + ((0.00448622089f * fTemp384) + ((0.00506607257f * fTemp26) + ((0.00576799829f * fTemp380) + ((0.00640888698f * fTemp336) + ((0.00656147953f * fTemp379) + ((0.00674459059f * fTemp301) + ((0.0077517014f * fTemp516) + (fTemp819 + ((0.008087405f * fTemp407) + ((0.00534073915f * fTemp52) + ((0.00454725791f * fTemp66) + ((0.00366222113f * fTemp87) + ((0.00143436994f * fTemp409) + ((0.00482192449f * fTemp435) + ((0.00772118289f * fTemp437) + ((0.0236823633f * fTemp381) + ((0.0191961434f * fTemp344) + ((0.00698873866f * fTemp294) + ((0.00790429395f * fTemp178) + ((0.00997955259f * fTemp249) + (fTemp871 + ((0.01617481f * fTemp179) + ((0.0117496261f * fTemp180) + ((0.00250251777f * fTemp376) + ((0.00769066438f * fTemp456) + ((0.0394604318f * fTemp457) + ((0.0570696145f * fTemp364) + ((0.0690633878f * fTemp394) + ((0.0635395348f * fTemp458) + ((0.0383312479f * fTemp459) + ((0.0408642851f * fTemp389) + ((0.0889614522f * fTemp393) + ((0.110446483f * fTemp465) + ((0.113773003f * fTemp466) + ((0.105136268f * fTemp467) + ((0.0979033783f * fTemp468) + ((0.088656269f * fTemp368) + ((0.0608539097f * fTemp181) + ((0.025879696f * fTemp86) + ((0.0316171758f * fTemp189) + ((0.0800500512f * fTemp151) + ((0.0888698995f * fTemp190) + ((0.07849361f * fTemp191) + ((0.0651570186f * fTemp192) + ((0.0461745039f * fTemp193) + ((0.0758995339f * fTemp154) + ((0.122653887f * fTemp470) + ((0.167119354f * fTemp346) + ((0.123905152f * fTemp471) + ((0.0782189369f * fTemp472) + ((0.0802331641f * fTemp473) + ((0.11447493f * fTemp474) + ((0.154637292f * fTemp475) + ((0.152348399f * fTemp476) + ((0.191015348f * fTemp197) + ((0.134128854f * fTemp198) + ((0.129154339f * fTemp199) + ((0.034150213f * fTemp200) + ((0.032898955f * fTemp58) + ((0.0209051799f * fTemp477) + ((0.0866725668f * fTemp478) + ((0.112704858f * fTemp479) + ((0.212836087f * fTemp480) + ((0.383037806f * fTemp481) + ((0.444044322f * fTemp201) + ((0.416180909f * fTemp202) + ((0.0261238441f * fTemp203) + ((0.0131534776f * fTemp485) + ((0.0298776217f * fTemp486) + ((0.0335703604f * fTemp487) + ((0.0294198431f * fTemp488) + ((0.019470809f * fTemp489) + ((0.0028992584f * fTemp206) + ((0.00271614734f * fTemp218) + ((0.0022583697f * fTemp231) + (0.00100711081f * fTemp227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00103762932f * (fTemp510 + fTemp513))) + (0.00106814783f * (fTemp1 - fTemp872)))) : (((0.000457777642f * (fTemp46 - fTemp278)) + ((0.000213629566f * (fTemp495 + fTemp304)) + ((6.10370189e-05f * (fTemp310 + (fTemp14 + (fTemp333 + (fTemp40 - fTemp361))))) + ((0.000427259132f * (fTemp53 - fTemp518)) + ((0.000152592547f * (fTemp8 + (fTemp90 - fTemp519))) + ((0.00140385143f * (fTemp34 - fTemp31)) + ((0.00683614612f * (fTemp405 - fTemp41)) + ((0.00665303506f * (fTemp252 + (fTemp98 + fTemp172))) + ((0.000823999755f * (fTemp21 - (fTemp219 - fTemp307))) + ((0.00134281442f * (fTemp51 + (fTemp225 - fTemp351))) + ((0.00146488845f * (fTemp323 + fTemp312)) + ((0.000640888698f * (fTemp33 - (fTemp137 + (fTemp240 + fTemp84)))) + ((0.000396740623f * (fTemp514 + fTemp68)) + ((0.00531022064f * (fTemp76 + fTemp345)) + ((0.00738547929f * (fTemp130 + fTemp155)) + ((0.00570696127f * (fTemp263 + fTemp347)) + ((0.00433362834f * (fTemp105 + fTemp156)) + ((0.00344859157f * (fTemp72 - (fTemp241 - fTemp75))) + ((0.00326548051f * (fTemp79 + (fTemp236 - fTemp243))) + ((0.00369273964f * (fTemp293 + (fTemp358 + fTemp113))) + ((0.00518814661f * (fTemp145 + fTemp83)) + ((0.00695822015f * (fTemp50 + fTemp43)) + ((0.00784325693f * (fTemp420 + fTemp91)) + ((0.00704977568f * (fTemp350 + fTemp96)) + ((0.00494399853f * (fTemp131 + fTemp159)) + ((0.00314340647f * (fTemp109 - (fTemp407 - (fTemp237 - fTemp16)))) + ((0.0038758507f * (fTemp410 + fTemp117)) + ((0.00384533219f * (fTemp163 + fTemp161)) + ((0.00552385021f * (fTemp326 + fTemp44)) + ((0.00299081393f * (fTemp400 - (fTemp334 + (fTemp228 + fTemp516)))) + ((0.00781273842f * (fTemp418 + fTemp401)) + ((0.00469985045f * (fTemp120 + (fTemp97 + fTemp114))) + ((0.00674459059f * (fTemp295 + fTemp78)) + ((0.000518814661f * (fTemp383 - fTemp10)) + ((0.000122074038f * (fTemp233 - fTemp275)) + ((0.00363170262f * (fTemp370 + fTemp688)) + ((0.00402844325f * (fTemp402 - (fTemp222 - fTemp289))) + ((0.00320444349f * (fTemp108 + fTemp257)) + ((0.00411999878f * (fTemp209 + fTemp6)) + ((0.00732444227f * (fTemp378 + fTemp171)) + ((0.00228888821f * (fTemp150 + (fTemp238 - fTemp336))) + ((0.00277718436f * (fTemp85 + (fTemp503 - fTemp460))) + ((0.00332651753f * (fTemp282 - (fTemp218 + fTemp64))) + ((0.00372325815f * (fTemp259 - (fTemp221 + fTemp208))) + ((0.00210577715f * (fTemp496 + fTemp12)) + ((0.00173955504f * (fTemp59 + (fTemp507 - fTemp281))) + ((0.00643940549f * (fTemp412 + fTemp374)) + ((0.00155644398f * (fTemp94 + (fTemp234 - fTemp432))) + ((0.00405896176f * (fTemp211 + fTemp58)) + ((0.0035401471f * (fTemp505 + fTemp497)) + ((0.00274666585f * (fTemp0 - fTemp230)) + ((0.00115970336f * fTemp865) + ((0.00317392498f * fTemp866) + ((0.00762962736f * fTemp835) + ((0.00152592547f * fTemp256) + ((0.00335703604f * fTemp320) + ((0.00622577593f * fTemp266) + ((0.00488296151f * fTemp47) + ((0.001617481f * fTemp54) + ((0.0028992584f * fTemp61) + ((0.00778221991f * fTemp246) + ((0.0101321451f * fTemp62) + ((0.00988799706f * fTemp303) + ((0.00894192327f * fTemp67) + (fTemp158 + ((0.008087405f * fTemp271) + (fTemp847 + ((0.00479140598f * fTemp160) + ((0.00283822138f * fTemp71) + ((0.00378429517f * fTemp119) + ((0.00442518387f * fTemp164) + ((0.00854518265f * fTemp399) + ((0.0103457747f * fTemp353) + ((0.0118717002f * fTemp357) + ((0.0122379223f * fTemp268) + ((0.0105594043f * fTemp272) + ((0.0121768853f * fTemp168) + ((0.0110782189f * fTemp169) + ((0.00848414563f * fTemp73) + ((0.00460829493f * fTemp170) + ((0.00537125766f * fTemp132) + ((0.00125125889f * fTemp104) + ((0.00308236945f * fTemp298) + ((0.00546281319f * fTemp146) + ((0.004852443f * fTemp30) + ((0.00454725791f * fTemp144) + ((0.00585955381f * fTemp354) + ((0.00592059083f * fTemp142) + ((0.00482192449f * fTemp173) + ((0.00430310983f * fTemp313) + ((0.00183111057f * fTemp314) + ((0.00250251777f * fTemp327) + ((0.00436414685f * fTemp299) + ((0.00589007232f * fTemp356) + ((0.0054933317f * fTemp139) + ((0.0022583697f * fTemp93) + ((0.000335703604f * fTemp66) + ((0.00512710959f * fTemp386) + ((0.00610370189f * fTemp388) + ((0.00576799829f * fTemp411) + ((0.0155034028f * fTemp390) + ((0.0165410321f * fTemp415) + ((0.0160832554f * fTemp416) + ((0.0163579211f * fTemp417) + ((0.0175786614f * fTemp342) + ((0.0148014771f * fTemp39) + ((0.0102542192f * fTemp122) + ((0.00979644153f * fTemp421) + ((0.0110171819f * fTemp369) + ((0.0115054781f * fTemp515) + ((0.0117496261f * fTemp149) + ((0.0127262184f * fTemp329) + ((0.0144047365f * fTemp65) + ((0.0131839961f * fTemp360) + ((0.0117191076f * fTemp106) + ((0.00939970091f * fTemp377) + ((0.0074159978f * fTemp530) + ((0.0113528855f * fTemp522) + ((0.0173039958f * fTemp175) + ((0.0176396985f * fTemp176) + ((0.017914366f * fTemp328) + ((0.0205084383f * fTemp444) + ((0.0268868078f * fTemp445) + ((0.0303048808f * fTemp300) + ((0.022583697f * fTemp116) + ((0.00457777642f * fTemp385) + ((0.0143742179f * fTemp373) + ((0.0229499191f * fTemp121) + ((0.0318918414f * fTemp453) + ((0.0326242857f * fTemp454) + ((0.0307016205f * fTemp455) + ((0.0177922919f * fTemp152) + ((0.027558215f * fTemp461) + ((0.0417493209f * fTemp462) + ((0.0263069551f * fTemp463) + ((0.0148930326f * fTemp367) + ((0.0471816175f * fTemp182) + ((0.0470290221f * fTemp183) + ((0.0591143519f * fTemp184) + ((0.0578020588f * fTemp185) + ((0.0716574639f * fTemp186) + ((0.0310983621f * fTemp187) + ((0.0318002887f * fTemp194) + ((0.0800805688f * fTemp195) + ((0.0455641337f * fTemp196) + ((0.013000885f * fTemp200) + ((0.0102847377f * fTemp477) + ((0.154576257f * fTemp203) + ((0.67534411f * fTemp204) + (fTemp35 + ((0.827478886f * fTemp482) + ((0.379345059f * fTemp397) + ((0.0963469371f * fTemp483) + ((0.0148625141f * fTemp484) + ((0.0045167394f * fTemp210) + ((0.00418103579f * fTemp498) + ((0.000915555283f * fTemp239) + (0.00390636921f * fTemp499)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00247199927f * (fTemp513 - (fTemp366 - fTemp296))) + ((0.00213629566f * (fTemp242 + (fTemp391 - fTemp267))) + ((0.00253303628f * (fTemp245 - (fTemp306 + (fTemp506 - fTemp220)))) + ((0.00271614734f * (fTemp251 + (fTemp339 - (fTemp13 + (fTemp469 + (fTemp212 + fTemp873)))))) + ((0.00131229591f * (fTemp265 + (fTemp264 - (fTemp290 - (fTemp511 - fTemp502))))) + ((0.000701925717f * (fTemp255 + (fTemp332 + (fTemp126 + fTemp115)))) + ((0.000366222113f * (fTemp261 - (fTemp9 + fTemp69))) + ((0.000305185094f * (fTemp269 - (fTemp11 - (fTemp226 - fTemp188)))) + ((0.000610370189f * (fTemp247 + fTemp276)) + ((0.00109866634f * (fTemp283 - (fTemp273 - (fTemp80 + (fTemp56 - (fTemp501 + fTemp443)))))) + ((0.00177007355f * (fTemp291 + (fTemp324 + (fTemp352 + (fTemp493 - fTemp315))))) + ((0.00375377666f * (fTemp81 + fTemp302)) + ((0.00491348002f * (fTemp305 - (fTemp95 + fTemp147))) + ((0.00415051728f * (fTemp217 + fTemp270)) + ((0.00347911008f * fTemp874) + ((0.00262459181f * (fTemp284 - (fTemp321 - fTemp858))) + ((0.00103762932f * (fTemp292 - (fTemp60 + (fTemp92 - fTemp74)))) + ((0.000671407208f * (fTemp330 - (fTemp110 - (fTemp355 - fTemp29)))) + ((0.00054933317f * (fTemp331 + (fTemp258 + (fTemp32 + (fTemp52 - (fTemp508 + fTemp250)))))) + ((9.15555283e-05f * (fTemp316 + fTemp285)) + ((0.00057985168f * (fTemp7 - (fTemp365 - fTemp102))) + ((0.000274666585f * (fTemp128 + fTemp337)) + ((0.000946073793f * (fTemp18 + (fTemp253 + (fTemp490 + fTemp382)))) + ((0.00305185094f * (fTemp24 - (fTemp349 + (fTemp3 - (fTemp70 - fTemp103))))) + ((0.00280770287f * (fTemp25 - (fTemp500 + fTemp492))) + ((0.00234992523f * (fTemp28 - (fTemp262 + (fTemp319 - (fTemp112 - (fTemp409 - fTemp380)))))) + ((0.000183111057f * (fTemp133 - fTemp279)) + ((0.0012817774f * (fTemp140 + fTemp325)) + ((0.00100711081f * (fTemp274 + fTemp280)) + ((0.00106814783f * (fTemp5 - fTemp48)) + ((0.00946073793f * (fTemp17 - fTemp2)) + ((0.00607318338f * (fTemp20 - fTemp101)) + ((0.00170903653f * (fTemp371 - fTemp287)) + ((0.00201422162f * (fTemp19 + fTemp244)) + ((0.00708029419f * (fTemp153 - fTemp322)) + ((0.00366222113f * (fTemp375 + fTemp167)) + ((0.0112308115f * (fTemp423 - fTemp38)) + ((0.00466933195f * (fTemp449 + fTemp123)) + ((0.00204474013f * (fTemp450 - fTemp288)) + ((0.00381481368f * (fTemp205 - fTemp359)) + ((0.00427259132f * (fTemp207 - fTemp148)) + ((0.00189214759f * (fTemp49 - fTemp348)) + ((0.00143436994f * (fTemp248 + fTemp403)) + ((0.00122074038f * (fTemp384 + fTemp404)) + ((0.000976592302f * (fTemp107 - (fTemp491 - fTemp127))) + ((0.00241096225f * (fTemp343 + (fTemp232 + fTemp379))) + ((3.05185094e-05f * (fTemp87 - fTemp136)) + ((0.000885036774f * (fTemp452 + fTemp406)) + ((0.000854518265f * (fTemp15 - (fTemp213 - fTemp396))) + ((0.00219733268f * (fTemp224 + fTemp301)) + ((0.00866725668f * (fTemp422 - fTemp413)) + ((0.0130314035f * (fTemp424 - fTemp414)) + ((0.0175481439f * (fTemp111 - fTemp36)) + ((0.0123294778f * (fTemp429 + (fTemp441 + fTemp440))) + ((0.00256355479f * (fTemp135 - fTemp118)) + ((0.0672933161f * (fTemp191 + fTemp389)) + ((0.0252082888f * (fTemp488 - fTemp141)) + ((0.00292977691f * (fTemp231 + fTemp215)) + ((0.00222785119f * fTemp398) + ((0.0025940733f * fTemp254) + ((0.0019531846f * fTemp260) + ((0.00311288796f * fTemp297) + ((0.00448622089f * fTemp277) + ((0.00473036896f * fTemp309) + ((0.00302133244f * fTemp23) + ((0.00238044374f * fTemp311) + ((0.00445570238f * fTemp340) + ((0.00637836847f * fTemp37) + ((0.00497451704f * fTemp45) + ((0.00244148076f * fTemp165) + (fTemp823 + ((0.00341807306f * fTemp363) + ((0.003234962f * fTemp63) + ((0.00952177495f * fTemp124) + ((0.00891140476f * fTemp125) + (fTemp869 + ((0.00149540696f * fTemp82) + ((0.000244148076f * fTemp42) + ((0.00112918485f * fTemp335) + (fTemp546 + ((0.00265511032f * fTemp100) + ((0.0019226661f * fTemp138) + ((0.00158696249f * fTemp408) + ((0.00216681417f * fTemp89) + ((0.0119937742f * fTemp425) + ((0.0106204413f * fTemp426) + ((0.01126133f * fTemp338) + ((0.0124515519f * fTemp427) + ((0.012878811f * fTemp428) + ((0.00964384899f * fTemp430) + ((0.00350962859f * fTemp431) + ((0.00558488723f * fTemp433) + ((0.0131534776f * fTemp434) + ((0.0182805881f * fTemp435) + ((0.0198675506f * fTemp436) + ((0.0191961434f * fTemp437) + ((0.0232551042f * fTemp438) + ((0.0285958443f * fTemp439) + ((0.0316476934f * fTemp381) + ((0.0247505121f * fTemp344) + ((0.0149540696f * fTemp294) + ((0.0127567369f * fTemp392) + ((0.0106509598f * fTemp442) + ((0.0158085879f * fTemp177) + ((0.0303659178f * fTemp178) + ((0.0294503625f * fTemp249) + ((0.0199285876f * fTemp387) + ((0.0104678487f * fTemp446) + (fTemp612 + ((0.0248725861f * fTemp448) + ((0.0332346559f * fTemp77) + ((0.0349131748f * fTemp179) + ((0.0259712525f * fTemp180) + ((0.0151676992f * fTemp376) + ((0.00500503555f * fTemp362) + ((0.0375072472f * fTemp456) + ((0.0620441288f * fTemp457) + ((0.0755027905f * fTemp364) + ((0.0811487138f * fTemp394) + ((0.0708944947f * fTemp458) + ((0.0421460606f * fTemp459) + ((0.0144657735f * fTemp464) + ((0.104739524f * fTemp393) + ((0.116214484f * fTemp465) + ((0.113193154f * fTemp466) + ((0.100222789f * fTemp467) + ((0.0942106396f * fTemp468) + ((0.0795007199f * fTemp368) + ((0.0520950966f * fTemp181) + ((0.014496292f * fTemp86) + ((0.0468153954f * fTemp189) + ((0.0806299001f * fTemp151) + ((0.0819727182f * fTemp190) + ((0.0552995391f * fTemp192) + ((0.0317392498f * fTemp193) + ((0.0838953853f * fTemp154) + ((0.114108704f * fTemp470) + ((0.14755699f * fTemp346) + ((0.080813013f * fTemp471) + ((0.0587176122f * fTemp472) + ((0.0561540574f * fTemp473) + ((0.102328561f * fTemp474) + ((0.116763815f * fTemp475) + ((0.132786036f * fTemp476) + ((0.141026035f * fTemp197) + ((0.0921353772f * fTemp198) + ((0.0690939054f * fTemp199) + ((0.0600604266f * fTemp478) + ((0.0748619065f * fTemp479) + ((0.199468985f * fTemp480) + ((0.318277538f * fTemp481) + ((0.358867139f * fTemp201) + ((0.268013537f * fTemp202) + ((0.0182195511f * fTemp485) + ((0.0299691763f * fTemp486) + ((0.0308236945f * fTemp487) + ((0.0154728843f * fTemp489) + ((0.00393688772f * fTemp206) + ((0.00119022187f * fTemp214) + ((0.00399792474f * fTemp216) + ((0.000488296151f * fTemp22) + (((0.000762962736f * fTemp510) + (0.00198370311f * fTemp229)) + (0.00186162908f * fTemp227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00268562883f * (fTemp451 + fTemp1))))) : (iSlow64 ? (((3.05185094e-05f * (fTemp305 + (fTemp324 + (fTemp72 + (fTemp160 - (fTemp44 - (fTemp30 - (fTemp420 + (fTemp369 + (fTemp515 + (fTemp507 - fTemp424))))))))))) + ((0.000213629566f * (fTemp309 + (fTemp284 - (fTemp321 - (fTemp271 + (fTemp165 - (fTemp73 + (fTemp78 + (fTemp358 - (fTemp9 + (fTemp442 + fTemp66))))))))))) + ((9.15555283e-05f * (fTemp330 - (fTemp280 - (fTemp293 - (fTemp101 - (fTemp166 + (fTemp123 - (fTemp365 + (fTemp366 - (fTemp146 + (fTemp57 + (fTemp13 - (fTemp238 - fTemp343))))))))))))) + ((0.000518814661f * (fTemp310 - (fTemp279 + (fTemp76 - (fTemp161 - (fTemp401 - (fTemp354 + (fTemp90 + (fTemp405 - (fTemp81 - fTemp406)))))))))) + ((0.000823999755f * (fTemp107 + fTemp518)) + ((0.000976592302f * (fTemp332 - (fTemp301 - fTemp147))) + ((0.000854518265f * (fTemp7 + (fTemp149 + fTemp130))) + ((0.000640888698f * (fTemp256 + (fTemp117 + (fTemp215 + fTemp17)))) + ((0.000396740623f * (fTemp262 - (fTemp62 + (fTemp353 + (fTemp470 + fTemp27))))) + ((0.000183111057f * (fTemp319 - (fTemp402 + (fTemp298 - (fTemp108 - (fTemp139 - fTemp375)))))) + ((0.00103762932f * (fTemp59 + fTemp41)) + ((0.0012817774f * (fTemp133 + (fTemp115 + (fTemp409 - (fTemp122 + (fTemp500 - fTemp498)))))) + ((0.00122074038f * (fTemp247 - (fTemp488 - fTemp179))) + ((0.00112918485f * (fTemp10 + (fTemp371 + (fTemp334 + (fTemp410 + (fTemp480 + (fTemp508 - fTemp511))))))) + ((0.00149540696f * (fTemp80 + (fTemp171 + (fTemp172 + (fTemp82 + fTemp126))))) + ((0.00146488845f * (fTemp140 + (fTemp150 + (fTemp282 + (fTemp42 - (fTemp441 - fTemp243)))))) + ((0.00119022187f * (fTemp56 + fTemp803)) + ((0.00131229591f * (fTemp361 + fTemp142)) + ((0.00158696249f * (fTemp326 + (fTemp351 - (fTemp437 - fTemp136)))) + ((0.00155644398f * (fTemp173 + fTemp295)) + ((0.00170903653f * (fTemp103 + (fTemp335 - (fTemp205 - fTemp112)))) + ((0.00167851802f * (fTemp359 + fTemp288)) + ((0.00137333293f * (fTemp5 - (fTemp392 - fTemp342))) + ((0.00152592547f * (fTemp274 + (fTemp223 + fTemp514))) + ((0.00125125889f * (fTemp228 + fTemp403)) + ((0.00143436994f * (fTemp114 - (fTemp99 - (fTemp394 + fTemp444)))) + ((0.00140385143f * (fTemp186 - fTemp379)) + ((0.00100711081f * (fTemp386 + fTemp383)) + ((0.00183111057f * (fTemp411 + (fTemp376 + fTemp425))) + ((0.0025940733f * (fTemp390 + (fTemp415 + (fTemp94 + fTemp329)))) + ((0.00262459181f * (fTemp426 + fTemp416)) + ((0.00402844325f * (fTemp218 + fTemp65)) + ((0.00253303628f * (fTemp180 - fTemp338)) + ((0.00241096225f * (fTemp495 - fTemp436)) + ((0.00708029419f * (fTemp483 + fTemp175)) + ((0.00177007355f * (fTemp497 + fTemp449)) + ((0.00964384899f * (fTemp502 - fTemp462)) + ((0.00280770287f * (fTemp230 + fTemp469)) + ((0.00201422162f * (fTemp496 + fTemp153)) + ((0.0019226661f * (fTemp231 - fTemp237)) + ((0.00180059206f * fTemp267) + ((0.00134281442f * fTemp85) + ((0.00299081393f * fTemp413) + ((0.00277718436f * fTemp414) + ((0.0022583697f * fTemp417) + ((0.00375377666f * fTemp360) + ((0.00189214759f * fTemp106) + ((0.00265511032f * fTemp422) + ((0.00238044374f * fTemp430) + ((0.00234992523f * fTemp443) + ((0.00531022064f * fTemp522) + ((0.00643940549f * fTemp176) + ((0.00363170262f * fTemp328) + ((0.00274666585f * fTemp450) + ((0.00589007232f * fTemp451) + ((0.0077517014f * fTemp452) + ((0.0101626636f * fTemp385) + ((0.011200293f * fTemp373) + ((0.0109866634f * fTemp121) + ((0.0074159978f * fTemp453) + ((0.0148014771f * fTemp458) + ((0.0144657735f * fTemp459) + ((0.00482192449f * fTemp460) + ((0.00207525864f * fTemp368) + ((0.00805688649f * fTemp181) + ((0.0108035523f * fTemp86) + ((0.0150761437f * fTemp367) + ((0.0245979186f * fTemp141) + ((0.0250556972f * fTemp182) + ((0.0185552537f * fTemp183) + ((0.0119022187f * fTemp184) + ((0.00692770164f * fTemp190) + ((0.0233161412f * fTemp191) + (fTemp642 + ((0.00930814538f * fTemp193) + ((0.0116275521f * fTemp154) + ((0.0237128828f * fTemp198) + ((0.0511490218f * fTemp199) + ((0.0541703552f * fTemp200) + ((0.225592822f * fTemp481) + ((0.28720969f * fTemp201) + ((0.172521129f * fTemp202) + ((0.0494399853f * fTemp203) + ((0.012817774f * fTemp204) + ((0.0230719931f * fTemp35) + ((0.0274361409f * fTemp482) + ((0.0195623655f * fTemp397) + ((0.00231940672f * fTemp489) + ((0.00314340647f * fTemp135) + ((0.0102237007f * fTemp490) + ((0.0134891812f * fTemp491) + ((0.0110782189f * fTemp492) + ((0.00408948027f * fTemp209) + ((0.0035401471f * fTemp216) + ((0.00445570238f * fTemp217) + ((0.00311288796f * fTemp493) + ((0.006469924f * fTemp224) + ((0.009704886f * fTemp22) + ((0.0061342204f * fTemp503) + ((0.00418103579f * fTemp241) + ((0.00564592425f * fTemp16) + ((0.00555436872f * fTemp391) + ((0.0042115543f * fTemp240) + (((0.00222785119f * fTemp510) + (0.00286873989f * fTemp229)) + (0.00210577715f * fTemp239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.000701925717f * (fTemp513 + (fTemp244 + (fTemp15 - fTemp91)))) + ((0.000762962736f * (fTemp242 + (fTemp19 + (fTemp23 + (fTemp25 - (fTemp340 + (fTemp322 + (fTemp314 + (fTemp290 + (fTemp316 - (fTemp448 + fTemp380))))))))))) + ((0.00057985168f * (fTemp398 + (fTemp21 + (fTemp418 + fTemp69)))) + ((0.000488296151f * (fTemp245 - (fTemp337 + (fTemp45 - (fTemp312 - (fTemp79 - fTemp156)))))) + ((0.000427259132f * (fTemp251 + (fTemp255 + (fTemp276 + (fTemp2 + (fTemp347 - (fTemp349 + (fTemp96 - (fTemp92 - fTemp71))))))))) + ((0.000335703604f * (fTemp254 + (fTemp265 - (fTemp318 + (fTemp285 - (fTemp48 + (fTemp68 + (fTemp345 - (fTemp75 + (fTemp163 + (fTemp352 - (fTemp129 - (fTemp259 + (fTemp12 - (fTemp40 + (fTemp289 - (fTemp249 - fTemp530))))))))))))))))) + ((0.000305185094f * (fTemp260 - (fTemp331 + (fTemp304 - (fTemp303 + (fTemp155 + (fTemp350 - (fTemp125 + (fTemp132 - (fTemp294 + fTemp408)))))))))) + ((0.000457777642f * (fTemp261 + (fTemp269 + (fTemp320 + (fTemp252 + (fTemp61 + (fTemp159 - (fTemp323 - (fTemp399 + (fTemp138 + (fTemp407 - (fTemp250 + (fTemp232 + fTemp504))))))))))))) + ((0.000366222113f * (fTemp283 - (fTemp270 + (fTemp278 + (fTemp31 - (fTemp246 - (fTemp119 + (fTemp248 + (fTemp423 + (fTemp447 + fTemp432)))))))))) + ((0.000244148076f * (fTemp291 + (fTemp28 + (fTemp67 - (fTemp164 + (fTemp268 - (fTemp120 - (fTemp134 + (fTemp306 + (fTemp144 - (fTemp327 - (fTemp377 - fTemp355)))))))))))) + ((0.000152592547f * (fTemp296 + (fTemp302 + (fTemp277 + (fTemp311 + (fTemp83 + (fTemp363 + (fTemp102 - (fTemp275 - (fTemp104 - fTemp789)))))))))) + ((0.000122074038f * (fTemp297 + (fTemp60 + (fTemp43 - (fTemp46 - (fTemp357 + (fTemp38 + (fTemp170 + (fTemp50 + (fTemp53 - (fTemp145 + (fTemp372 + (fTemp32 + (fTemp356 + (fTemp77 - fTemp52))))))))))))))) + ((6.10370189e-05f * (fTemp8 + (fTemp34 - (fTemp307 - (fTemp33 + (fTemp110 - (fTemp287 + (fTemp168 - (fTemp169 - (fTemp20 - (fTemp370 + (fTemp257 - (fTemp6 + (fTemp36 - fTemp299)))))))))))))) + ((0.000610370189f * (fTemp11 + (fTemp55 - (fTemp88 + (fTemp113 + (fTemp272 + (fTemp313 + fTemp650))))))) + ((0.000915555283f * (fTemp429 + fTemp14)) + ((0.000946073793f * (fTemp18 + (fTemp400 - (fTemp348 + (fTemp29 + (fTemp404 + fTemp317)))))) + ((0.000671407208f * (fTemp339 - (fTemp333 + (fTemp84 + (fTemp49 + fTemp838))))) + ((0.000885036774f * (fTemp24 - (fTemp374 - fTemp63))) + ((0.00115970336f * (fTemp253 - (fTemp37 + (fTemp273 - (fTemp506 - fTemp388))))) + ((0.00164799951f * (fTemp286 - (fTemp148 + fTemp263))) + ((0.00106814783f * (fTemp325 + fTemp767)) + ((0.000274666585f * (fTemp47 + (fTemp157 - (fTemp124 + (fTemp98 + (fTemp382 + (fTemp499 + fTemp421))))))) + ((0.000732444227f * (fTemp54 - (fTemp109 + (fTemp95 + fTemp3)))) + ((0.000793481246f * (fTemp51 - (fTemp341 + (fTemp97 + (fTemp315 - (fTemp384 - fTemp378)))))) + ((0.00109866634f * (fTemp39 - fTemp137)) + ((0.00268562883f * (fTemp227 - fTemp412)) + ((0.00384533219f * (fTemp438 - fTemp89)) + ((0.00411999878f * (fTemp210 + fTemp428)) + ((0.003234962f * (fTemp501 - fTemp431)) + ((0.00347911008f * (fTemp433 + (fTemp235 + fTemp197))) + ((0.00216681417f * (fTemp300 + (fTemp455 - fTemp446))) + ((0.00329599902f * (fTemp116 - (fTemp454 - fTemp118))) + ((0.0019531846f * (fTemp0 + fTemp178)) + ((0.00247199927f * (fTemp233 - fTemp387)) + ((0.0057985168f * (fTemp221 + fTemp461)) + ((0.00427259132f * (fTemp476 - fTemp185)) + ((0.00305185094f * (fTemp236 + fTemp222)) + ((0.001617481f * fTemp863) + ((0.00436414685f * fTemp427) + ((0.00527970213f * fTemp434) + ((0.00424207281f * fTemp435) + ((0.0090334788f * fTemp439) + ((0.0129093295f * fTemp381) + ((0.0113528855f * fTemp344) + ((0.00524918362f * fTemp111) + ((0.00332651753f * fTemp177) + ((0.0102542192f * fTemp152) + ((0.0191351064f * fTemp362) + ((0.0246894751f * fTemp456) + ((0.0247199927f * fTemp457) + ((0.0149235511f * fTemp364) + ((0.00875881221f * fTemp463) + ((0.00698873866f * fTemp464) + ((0.0126346629f * fTemp389) + ((0.021271402f * fTemp393) + ((0.0250251777f * fTemp465) + ((0.0213934761f * fTemp466) + ((0.0147709586f * fTemp467) + ((0.00723288674f * fTemp468) + ((0.0045167394f * fTemp187) + ((0.0169072542f * fTemp188) + ((0.0301217698f * fTemp189) + ((0.0200201422f * fTemp151) + ((0.019287698f * fTemp194) + ((0.0358592495f * fTemp195) + ((0.0268562883f * fTemp196) + ((0.0398876928f * fTemp346) + ((0.0617389455f * fTemp471) + ((0.0697042793f * fTemp472) + ((0.0415356904f * fTemp473) + ((0.021210365f * fTemp474) + ((0.00296029542f * fTemp475) + ((0.0235908087f * fTemp58) + ((0.145451218f * fTemp477) + ((0.252784818f * fTemp478) + ((0.210333571f * fTemp479) + ((0.00479140598f * fTemp484) + ((0.0120548112f * fTemp396) + ((0.0138859218f * fTemp485) + ((0.0114139225f * fTemp486) + ((0.00662251655f * fTemp487) + ((0.00592059083f * fTemp206) + ((0.00726340525f * fTemp207) + ((0.00381481368f * fTemp208) + ((0.00991851557f * fTemp211) + ((0.011322367f * fTemp212) + ((0.00869777519f * fTemp213) + ((0.00393688772f * fTemp214) + ((0.00518814661f * fTemp219) + ((0.00631733146f * fTemp220) + ((0.00512710959f * fTemp505) + ((0.00857570115f * fTemp512) + ((0.00891140476f * fTemp225) + ((0.00326548051f * fTemp234) + (0.00653096102f * fTemp226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00054933317f * (fTemp1 + (fTemp266 - (fTemp105 + (fTemp519 - (fTemp167 - (fTemp128 - (fTemp281 + (fTemp516 + (fTemp445 - fTemp4)))))))))))) : (((0.00222785119f * (fTemp99 - fTemp244)) + ((0.00109866634f * (fTemp73 - fTemp245)) + ((0.00146488845f * (fTemp265 - (fTemp248 - fTemp307))) + ((0.000762962736f * (fTemp255 - (fTemp297 - (fTemp105 + (fTemp140 - (fTemp259 + fTemp313)))))) + ((0.00134281442f * (fTemp75 - fTemp291)) + ((0.000671407208f * (fTemp277 - (fTemp44 - fTemp160))) + ((0.00317392498f * (fTemp270 + (fTemp306 + (fTemp173 - (fTemp233 - fTemp85))))) + ((0.00357066561f * (fTemp284 - (fTemp9 + (fTemp488 - fTemp100)))) + ((0.00332651753f * (fTemp3 + fTemp324)) + ((0.00167851802f * (fTemp305 - (fTemp353 + (fTemp489 - fTemp64)))) + ((0.000244148076f * (fTemp246 - fTemp331)) + ((0.000335703604f * (fTemp518 + (fTemp159 + fTemp831))) + ((0.00131229591f * (fTemp332 + (fTemp370 + fTemp363))) + ((0.0019531846f * (fTemp7 - (fTemp253 - (fTemp402 - fTemp321)))) + ((3.05185094e-05f * (fTemp25 + (fTemp88 - (fTemp365 + (fTemp258 + fTemp104))))) + ((0.00152592547f * (fTemp31 - (fTemp48 - (fTemp450 - fTemp334)))) + ((0.00201422162f * (fTemp333 + (fTemp320 + (fTemp354 - fTemp252)))) + ((0.00262459181f * (fTemp256 + (fTemp113 - (fTemp138 - fTemp123)))) + ((0.00344859157f * (fTemp150 + fTemp262)) + ((0.0028992584f * (fTemp34 + (fTemp238 + fTemp171))) + ((0.000854518265f * (fTemp279 + (fTemp37 + (fTemp84 + fTemp341)))) + ((0.00454725791f * (fTemp280 - fTemp264)) + ((0.00054933317f * (fTemp54 + (fTemp109 - (fTemp243 + fTemp57)))) + ((0.00100711081f * (fTemp241 + fTemp312)) + ((0.00125125889f * (fTemp60 - (fTemp382 + fTemp27))) + ((0.001617481f * (fTemp33 - (fTemp268 - (fTemp447 + fTemp114)))) + ((0.000427259132f * (fTemp91 + fTemp345)) + ((0.000305185094f * (fTemp2 + (fTemp101 - (fTemp514 - fTemp126)))) + ((0.00057985168f * (fTemp62 + (fTemp42 - fTemp271))) + ((0.00186162908f * (fTemp322 + fTemp67)) + ((0.00247199927f * (fTemp155 - (fTemp516 - fTemp358))) + ((0.00265511032f * (fTemp314 + fTemp157)) + ((0.000793481246f * (fTemp115 + fTemp79)) + ((0.000396740623f * (fTemp323 - (fTemp424 - fTemp131))) + ((0.00122074038f * (fTemp355 + fTemp110)) + ((0.00268562883f * (fTemp421 + fTemp161)) + ((0.00204474013f * (fTemp247 - fTemp357)) + ((0.0038758507f * (fTemp519 - (fTemp223 - fTemp103))) + ((0.00177007355f * (fTemp69 + (fTemp20 - (fTemp237 + fTemp153)))) + ((0.00311288796f * (fTemp378 + fTemp165)) + ((0.000366222113f * (fTemp63 + (fTemp29 - fTemp147))) + ((0.00140385143f * (fTemp224 - fTemp168)) + ((0.000183111057f * (fTemp335 + fTemp169)) + ((0.000976592302f * (fTemp120 - (fTemp379 - fTemp40))) + ((0.00341807306f * (fTemp0 + fTemp124)) + ((0.00277718436f * (fTemp172 - fTemp78)) + ((0.00219733268f * (fTemp371 - fTemp129)) + ((0.0035401471f * (fTemp326 + fTemp257)) + ((0.00396740623f * fTemp872) + ((0.00384533219f * (fTemp39 + fTemp145)) + ((0.00338755455f * (fTemp295 + fTemp146)) + ((0.00299081393f * (fTemp30 - (fTemp407 - fTemp372))) + ((0.00320444349f * (fTemp134 + (fTemp70 + (fTemp15 - fTemp289)))) + ((0.00274666585f * (fTemp148 + fTemp108)) + ((0.00326548051f * (fTemp369 + fTemp282)) + ((0.000701925717f * (fTemp290 - fTemp97)) + ((0.000274666585f * (fTemp13 - (fTemp136 - fTemp317))) + ((0.00439466536f * (fTemp149 + fTemp26)) + ((0.00347911008f * (fTemp368 - fTemp408)) + ((0.0077517014f * (fTemp217 - fTemp383)) + ((0.0100711081f * (fTemp504 - fTemp429)) + ((0.00799584948f * (fTemp239 - fTemp432)) + ((0.0271919928f * (fTemp482 - fTemp344)) + ((0.0170903653f * (fTemp397 + fTemp249)) + ((0.003234962f * (fTemp505 + fTemp394)) + ((0.00885036774f * fTemp846) + ((0.00106814783f * fTemp771) + ((0.00164799951f * fTemp260) + ((0.0025940733f * fTemp309) + ((0.00350962859f * fTemp318) + ((0.0012817774f * fTemp330) + ((0.00378429517f * fTemp319) + ((0.00402844325f * fTemp41) + ((0.00546281319f * fTemp45) + ((0.00180059206f * fTemp68) + ((0.00207525864f * fTemp72) + ((0.00183111057f * fTemp287) + ((0.00286873989f * fTemp117) + ((0.00375377666f * fTemp352) + ((0.000732444227f * fTemp102) + ((0.000152592547f * fTemp132) + (fTemp664 + ((0.00302133244f * fTemp298) + ((0.00231940672f * fTemp374) + ((0.00305185094f * fTemp142) + ((0.00418103579f * fTemp267) + ((0.00329599902f * fTemp359) + ((0.000823999755f * fTemp274) + ((0.00238044374f * fTemp82) + ((9.15555283e-05f * fTemp112) + ((0.00241096225f * fTemp92) + ((0.00369273964f * fTemp327) + ((0.00659199804f * fTemp356) + ((0.0067751091f * fTemp405) + (fTemp870 + ((0.00436414685f * fTemp384) + ((0.00552385021f * fTemp388) + ((0.00817896053f * fTemp411) + ((0.00921658985f * fTemp412) + ((0.00933866389f * fTemp413) + ((0.00894192327f * fTemp414) + ((0.00881984923f * fTemp390) + ((0.006469924f * fTemp417) + ((0.00640888698f * fTemp122) + ((0.00750755332f * fTemp418) + ((0.00561540574f * fTemp420) + ((0.00500503555f * fTemp515) + ((0.0134891812f * fTemp392) + ((0.030976288f * fTemp441) + ((0.0380260646f * fTemp442) + ((0.03234962f * fTemp443) + ((0.0216986611f * fTemp522) + ((0.0158696249f * fTemp175) + ((0.0127567369f * fTemp176) + ((0.00869777519f * fTemp177) + ((0.0183416251f * fTemp178) + ((0.0136112552f * fTemp387) + ((0.00961333048f * fTemp446) + ((0.0173039958f * fTemp451) + ((0.0369579159f * fTemp452) + ((0.0508438386f * fTemp385) + ((0.0545976125f * fTemp373) + ((0.0444959886f * fTemp121) + ((0.0306405835f * fTemp453) + ((0.0416272469f * fTemp458) + ((0.0550859086f * fTemp459) + ((0.032654807f * fTemp460) + ((0.0278634001f * fTemp181) + ((0.0318002887f * fTemp86) + ((0.0394299142f * fTemp367) + ((0.0592059083f * fTemp141) + ((0.0943632349f * fTemp182) + ((0.105044708f * fTemp183) + ((0.0621356852f * fTemp184) + ((0.0221869573f * fTemp185) + ((0.122440264f * fTemp191) + ((0.150547802f * fTemp192) + ((0.0998260453f * fTemp193) + ((0.0256050304f * fTemp197) + ((0.10055849f * fTemp198) + ((0.171300396f * fTemp199) + ((0.131565288f * fTemp200) + ((0.052064579f * fTemp58) + ((0.138401434f * fTemp481) + ((0.774681866f * fTemp201) + (fTemp202 + ((0.680227041f * fTemp203) + ((0.248664811f * fTemp204) + ((0.0538041331f * fTemp35) + ((0.00686666463f * fTemp490) + ((0.0152897732f * fTemp491) + ((0.019226661f * fTemp492) + ((0.0171514023f * fTemp209) + ((0.00930814538f * fTemp210) + ((0.0138248848f * fTemp218) + ((0.014679403f * fTemp493) + ((0.0111697745f * fTemp495) + ((0.00747703481f * fTemp22) + ((0.0120548112f * fTemp502) + ((0.0131534776f * fTemp503) + ((0.00790429395f * fTemp16) + ((0.0115665151f * fTemp391) + ((0.00103762932f * fTemp229) + ((0.00411999878f * fTemp510) + ((0.00695822015f * fTemp508) + ((0.00701925717f * fTemp506) + (0.00820947904f * fTemp507))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((((0.0022583697f * (fTemp242 - (fTemp166 + fTemp71))) + ((0.0019226661f * (fTemp398 + (fTemp425 - fTemp337))) + ((6.10370189e-05f * (fTemp272 - fTemp251)) + ((0.00115970336f * (fTemp230 - fTemp254)) + ((0.000213629566f * (fTemp261 + (fTemp302 - (fTemp349 - (fTemp329 + fTemp316))))) + ((0.00112918485f * (fTemp269 + (fTemp296 - (fTemp303 - (fTemp43 + fTemp83))))) + ((0.00149540696f * (fTemp283 + (fTemp278 - (fTemp12 + fTemp273)))) + ((0.00253303628f * (fTemp501 - fTemp292)) + ((0.00158696249f * (fTemp304 + (fTemp49 + fTemp107))) + ((0.000640888698f * (fTemp310 - (fTemp167 - (fTemp400 - (fTemp336 + fTemp80))))) + ((0.000122074038f * (fTemp11 + (fTemp51 - (fTemp76 - (fTemp164 - (fTemp74 + (fTemp128 - (fTemp90 - (fTemp423 - fTemp404))))))))) + ((0.00143436994f * (fTemp14 - (fTemp55 - fTemp24))) + ((0.00283822138f * (fTemp18 + (fTemp340 - (fTemp347 - (fTemp422 - fTemp59))))) + ((0.00381481368f * (fTemp19 + (fTemp52 + (fTemp220 - fTemp328)))) + ((0.00390636921f * (fTemp250 + fTemp339)) + ((0.00296029542f * (fTemp23 - (fTemp375 + fTemp156))) + ((0.000610370189f * (fTemp266 - (fTemp386 + fTemp46))) + ((0.00228888821f * (fTemp216 + fTemp47)) + ((0.000915555283f * (fTemp21 - (fTemp56 + fTemp61))) + ((0.000488296151f * (fTemp293 - (fTemp275 + (fTemp366 + fTemp813)))) + ((0.000518814661f * (fTemp50 - fTemp96)) + ((0.000885036774f * (fTemp350 - fTemp163)) + ((0.00119022187f * (fTemp399 - (fTemp315 + fTemp10))) + ((0.00216681417f * (fTemp38 - (fTemp348 - (fTemp231 + fTemp127)))) + ((0.00213629566f * (fTemp170 + (fTemp301 - fTemp144))) + ((0.00372325815f * (fTemp426 - fTemp263)) + ((0.00534073915f * (fTemp338 - fTemp299)) + ((0.00363170262f * (fTemp93 + (fTemp498 - fTemp342))) + ((0.00280770287f * (fTemp281 + fTemp406)) + ((0.0042115543f * (fTemp433 - fTemp380)) + ((0.00271614734f * (fTemp135 + fTemp81)) + ((0.0142216254f * (fTemp180 + fTemp430)) + ((0.011383404f * (fTemp376 - (fTemp240 - fTemp461))) + ((0.0054933317f * (fTemp512 - fTemp496)) + ((0.00234992523f * (fTemp232 + fTemp219)) + ((0.00405896176f * fTemp609) + ((0.00601214636f * fTemp548) + ((0.00656147953f * fTemp286) + ((0.00714133121f * fTemp325) + ((0.00589007232f * fTemp311) + ((0.00170903653f * fTemp401) + ((0.00189214759f * fTemp139) + ((0.00415051728f * fTemp66) + ((0.00442518387f * fTemp4) + ((0.00619525742f * fTemp87) + ((0.0074159978f * fTemp409) + ((0.00491348002f * fTemp65) + ((0.00653096102f * fTemp360) + ((0.00988799706f * fTemp530) + ((0.0126041444f * fTemp95) + ((0.0122989593f * fTemp94) + ((0.00787377544f * fTemp89) + ((0.00427259132f * fTemp17) + ((0.00573747978f * fTemp427) + ((0.00637836847f * fTemp428) + ((0.0137638478f * fTemp431) + ((0.00509659108f * fTemp434) + ((0.0108340709f * fTemp435) + ((0.0149540696f * fTemp436) + ((0.012878811f * fTemp437) + ((0.00805688649f * fTemp438) + ((0.00854518265f * fTemp439) + ((0.0163579211f * fTemp381) + ((0.0312814713f * fTemp111) + ((0.0242316965f * fTemp294) + ((0.00692770164f * fTemp440) + ((0.0214850307f * fTemp444) + ((0.0475173183f * fTemp445) + ((0.0572832413f * fTemp300) + ((0.042115543f * fTemp116) + ((0.0142521439f * fTemp118) + ((0.00866725668f * fTemp448) + ((0.0159001444f * fTemp77) + ((0.0150761437f * fTemp179) + ((0.00836207159f * fTemp449) + ((0.028931547f * fTemp455) + ((0.0580156855f * fTemp152) + ((0.0778527185f * fTemp362) + ((0.0830713809f * fTemp456) + ((0.0695822015f * fTemp457) + ((0.0359202847f * fTemp364) + ((0.0531022064f * fTemp462) + ((0.0663472414f * fTemp463) + ((0.0730918273f * fTemp464) + ((0.0719931647f * fTemp389) + ((0.0842005685f * fTemp393) + ((0.0954008624f * fTemp465) + ((0.0858180523f * fTemp466) + ((0.0592669472f * fTemp467) + ((0.0177922919f * fTemp468) + ((0.0446790978f * fTemp186) + ((0.086733602f * fTemp187) + ((0.108829007f * fTemp188) + ((0.106173895f * fTemp189) + ((0.0708944947f * fTemp151) + ((0.00482192449f * fTemp190) + ((0.00473036896f * fTemp194) + ((0.109164707f * fTemp195) + ((0.153721735f * fTemp196) + ((0.124393448f * fTemp469) + ((0.00735496078f * fTemp154) + ((0.0141911069f * fTemp470) + ((0.0253608823f * fTemp346) + ((0.110080265f * fTemp471) + ((0.0952177495f * fTemp472) + ((0.145786926f * fTemp473) + ((0.0972930118f * fTemp474) + ((0.104251228f * fTemp475) + ((0.0585955381f * fTemp476) + ((0.261696219f * fTemp477) + ((0.555497885f * fTemp478) + ((0.72850734f * fTemp479) + ((0.50376904f * fTemp480) + ((0.00503555406f * fTemp483) + ((0.0214545131f * fTemp484) + ((0.0280770287f * fTemp396) + ((0.0249336231f * fTemp485) + ((0.0164189581f * fTemp486) + ((0.00802636798f * fTemp487) + (fTemp551 + ((0.00875881221f * fTemp206) + ((0.0115054781f * fTemp207) + ((0.00964384899f * fTemp208) + ((0.0129703665f * fTemp212) + ((0.0197454765f * fTemp213) + ((0.0195928831f * fTemp214) + ((0.012817774f * fTemp215) + ((0.00479140598f * fTemp499) + ((0.00393688772f * fTemp500) + ((0.00595110934f * fTemp221) + ((0.00643940549f * fTemp222) + ((0.012939848f * fTemp225) + ((0.01617481f * fTemp226) + ((0.0138554033f * fTemp227) + ((0.00720236823f * fTemp228) + ((0.00457777642f * fTemp236) + ((0.00518814661f * fTemp235) + ((0.00250251777f * fTemp511) + (0.00430310983f * fTemp234))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00198370311f * (fTemp513 + (fTemp285 - (fTemp119 + (fTemp133 + (fTemp351 + (fTemp36 - (fTemp211 - fTemp454))))))))) + (0.00155644398f * (fTemp1 - (fTemp403 - fTemp276))))))) : (iSlow60 ? (iSlow62 ? (((0.00241096225f * (fTemp244 + (fTemp76 + fTemp14))) + ((0.00201422162f * (fTemp398 + (fTemp265 - (fTemp90 + (fTemp4 - fTemp406))))) + ((0.001617481f * (fTemp254 - (fTemp404 - (fTemp429 - fTemp127)))) + ((0.00177007355f * (fTemp261 + fTemp260)) + ((0.00198370311f * (fTemp74 + fTemp255)) + ((0.00155644398f * (fTemp276 - (fTemp353 - (fTemp132 - (fTemp378 - fTemp172))))) + ((0.00186162908f * (fTemp283 + (fTemp101 + (fTemp80 - (fTemp77 + fTemp415))))) + ((0.00280770287f * (fTemp159 + fTemp297)) + ((0.00329599902f * (fTemp302 - (fTemp235 - fTemp7))) + ((0.00363170262f * (fTemp277 + (fTemp134 + fTemp170))) + ((0.00369273964f * (fTemp305 + (fTemp104 + (fTemp372 - (fTemp70 + (fTemp231 - fTemp336)))))) + ((0.003234962f * (fTemp279 + fTemp270)) + ((0.00302133244f * (fTemp318 - (fTemp375 - fTemp160))) + ((0.00436414685f * (fTemp292 - (fTemp168 - fTemp518))) + ((0.00500503555f * (fTemp330 + (fTemp278 + (fTemp493 + fTemp320)))) + ((0.00463881344f * (fTemp304 - (fTemp187 - fTemp376))) + ((0.00399792474f * (fTemp332 + (fTemp319 - (fTemp357 - (fTemp363 - fTemp322))))) + ((0.00265511032f * (fTemp337 + (fTemp155 - (fTemp228 + fTemp9)))) + ((0.00253303628f * (fTemp56 + fTemp8)) + ((0.0025940733f * (fTemp271 + fTemp11)) + ((0.0019226661f * (fTemp122 + fTemp18)) + ((0.00158696249f * (fTemp115 + fTemp19)) + ((0.00244148076f * (fTemp30 + fTemp339)) + ((0.00411999878f * (fTemp23 - (fTemp185 - fTemp303))) + ((0.00576799829f * (fTemp25 - (fTemp351 - fTemp2))) + ((0.00518814661f * (fTemp28 - (fTemp329 + fTemp315))) + ((0.00448622089f * (fTemp31 + (fTemp312 + fTemp47))) + ((0.00466933195f * (fTemp48 + fTemp256)) + ((0.00457777642f * (fTemp262 - (fTemp82 - fTemp53))) + ((0.00344859157f * (fTemp43 + fTemp34)) + ((0.00125125889f * (fTemp91 + fTemp264)) + ((0.00659199804f * (fTemp37 + (fTemp161 + (fTemp196 - fTemp274)))) + ((0.00634784997f * (fTemp36 + fTemp280)) + ((0.00415051728f * (fTemp54 + fTemp252)) + ((0.00427259132f * (fTemp21 + (fTemp166 - (fTemp348 + (fTemp377 + fTemp138))))) + ((0.00396740623f * (fTemp51 - (fTemp29 - fTemp350))) + ((0.00622577593f * (fTemp457 + fTemp345)) + ((0.00503555406f * (fTemp117 + fTemp62)) + ((0.00350962859f * (fTemp84 + fTemp157)) + ((0.00140385143f * (fTemp15 + fTemp96)) + ((0.00262459181f * (fTemp109 - (fTemp383 + fTemp59))) + ((0.000762962736f * (fTemp287 + (fTemp120 - (fTemp220 - fTemp10)))) + ((0.00173955504f * (fTemp519 + fTemp71)) + ((0.00332651753f * (fTemp113 + (fTemp63 - (fTemp316 - fTemp78)))) + ((0.00381481368f * (fTemp352 - (fTemp95 - fTemp167))) + ((0.00445570238f * (fTemp165 - (fTemp409 - fTemp275))) + ((0.0042115543f * (fTemp334 - fTemp38)) + ((0.0038758507f * (fTemp123 - (fTemp66 - fTemp365))) + ((0.00228888821f * (fTemp209 + fTemp27)) + ((0.00180059206f * (fTemp50 - (fTemp184 + fTemp359))) + ((0.000305185094f * (fTemp273 - (fTemp150 + (fTemp327 - fTemp147)))) + ((0.000213629566f * (fTemp131 - fTemp133)) + ((0.000396740623f * (fTemp298 - fTemp247)) + ((3.05185094e-05f * (fTemp137 - (fTemp108 - fTemp402))) + ((0.00207525864f * (fTemp140 + (fTemp306 + (fTemp342 + fTemp103)))) + ((0.000732444227f * (fTemp370 - (fTemp259 - fTemp146))) + ((0.000152592547f * (fTemp358 + (fTemp257 - (fTemp295 - fTemp142)))) + ((0.00164799951f * (fTemp100 + fTemp267)) + ((0.000885036774f * (fTemp288 - (fTemp112 + fTemp107))) + ((9.15555283e-05f * (fTemp97 + (fTemp32 - fTemp317))) + ((0.00054933317f * (fTemp5 + (fTemp508 - fTemp428))) + ((0.000122074038f * (fTemp495 - fTemp139)) + ((0.00735496078f * (fTemp505 + fTemp355)) + ((0.00772118289f * (fTemp99 - fTemp384)) + ((0.0120242927f * (fTemp179 + fTemp344)) + ((0.0132755516f * (fTemp180 + fTemp387)) + ((0.000488296151f * (fTemp217 - fTemp188)) + ((0.0125125889f * (fTemp233 - fTemp236)) + ((0.00256355479f * fTemp774) + ((0.00274666585f * fTemp242) + ((0.00210577715f * fTemp291) + ((0.00234992523f * fTemp296) + ((0.00357066561f * fTemp309) + ((0.00305185094f * fTemp284) + ((0.00360118411f * fTemp324) + ((0.00482192449f * fTemp285) + ((0.00454725791f * fTemp310) + ((0.00552385021f * fTemp24) + ((0.00442518387f * fTemp333) + ((0.00115970336f * fTemp311) + ((0.00390636921f * fTemp340) + ((0.00787377544f * fTemp41) + ((0.00762962736f * fTemp45) + ((0.00424207281f * fTemp266) + ((0.00479140598f * fTemp321) + ((0.00497451704f * fTemp60) + ((0.00546281319f * fTemp307) + ((0.00601214636f * fTemp33) + ((0.00650044251f * fTemp68) + ((0.00674459059f * fTemp69) + ((0.00665303506f * fTemp55) + ((0.00637836847f * fTemp61) + ((0.00607318338f * fTemp246) + ((0.00326548051f * fTemp67) + (fTemp737 + ((0.00433362834f * fTemp72) + ((0.00506607257f * fTemp75) + ((0.00534073915f * fTemp79) + ((0.00509659108f * fTemp349) + ((0.00460829493f * fTemp293) + ((0.00405896176f * fTemp83) + ((0.00170903653f * fTemp88) + ((0.000610370189f * fTemp110) + ((0.00759910885f * fTemp119) + ((0.00781273842f * fTemp163) + ((0.00726340525f * fTemp164) + ((0.00598162785f * fTemp44) + ((0.00311288796f * fTemp20) + ((0.00378429517f * fTemp125) + ((0.00103762932f * fTemp341) + ((0.00213629566f * fTemp366) + ((0.000671407208f * fTemp171) + ((0.00216681417f * fTemp173) + ((0.00292977691f * fTemp49) + ((0.00668355357f * fTemp382) + ((0.00680562761f * fTemp39) + ((0.0057985168f * fTemp328) + ((0.0536210202f * fTemp444) + ((0.0931424946f * fTemp445) + ((0.0767845735f * fTemp300) + ((0.0128482925f * fTemp116) + ((0.0117496261f * fTemp385) + ((0.0279854741f * fTemp373) + ((0.0366832502f * fTemp121) + ((0.0378124341f * fTemp453) + ((0.0329294726f * fTemp454) + ((0.0238654744f * fTemp455) + ((0.0204168838f * fTemp152) + ((0.0168156996f * fTemp362) + ((0.0136417737f * fTemp456) + ((0.0361644328f * fTemp463) + ((0.0593279824f * fTemp464) + ((0.040070802f * fTemp389) + ((0.0103762932f * fTemp141) + ((0.0435499139f * fTemp182) + ((0.0268257707f * fTemp183) + ((0.0126041444f * fTemp189) + ((0.0292062145f * fTemp193) + ((0.0890224949f * fTemp194) + ((0.0748008639f * fTemp195) + ((0.021332439f * fTemp471) + ((0.106265448f * fTemp472) + ((0.0471205786f * fTemp473) + ((0.0319528803f * fTemp200) + ((0.197668388f * fTemp58) + ((0.283669531f * fTemp477) + ((0.231604964f * fTemp478) + ((0.550889611f * fTemp203) + (fTemp204 + ((0.872127473f * fTemp35) + ((0.41590625f * fTemp482) + ((0.121280558f * fTemp397) + ((0.071901612f * fTemp483) + ((0.0800195336f * fTemp484) + ((0.050263986f * fTemp396) + ((0.000823999755f * fTemp485) + ((0.0203863643f * fTemp205) + ((0.0365306549f * fTemp206) + ((0.0332651772f * fTemp207) + ((0.0148930326f * fTemp208) + ((0.0147709586f * fTemp210) + ((0.017853329f * fTemp211) + ((0.0115054781f * fTemp212) + (fTemp685 + ((0.00439466536f * fTemp499) + ((0.0122074038f * fTemp500) + ((0.0151982177f * fTemp501) + ((0.0103457747f * fTemp219) + ((0.0061342204f * fTemp22) + ((0.0205084383f * fTemp502) + ((0.0265511032f * fTemp503) + ((0.0212408826f * fTemp504) + ((0.0121768853f * fTemp241) + ((0.0208441429f * fTemp16) + ((0.0200506616f * fTemp391) + ((0.0109561449f * fTemp240) + ((0.00662251655f * fTemp234) + ((0.0118717002f * fTemp511) + ((((0.0119022187f * fTemp0) + (0.0134586627f * fTemp506)) + (0.00894192327f * fTemp507)) + (0.00531022064f * fTemp232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00271614734f * (fTemp250 - fTemp513)) + ((0.00167851802f * (fTemp87 - fTemp245)) + ((0.00152592547f * (fTemp390 - fTemp251)) + ((0.00149540696f * (fTemp289 - fTemp269)) + ((0.0051576281f * (fTemp52 - fTemp331)) + ((0.000183111057f * (fTemp145 + fTemp286)) + ((0.00277718436f * (fTemp403 - fTemp156)) + ((0.00296029542f * (fTemp452 - fTemp105)) + ((0.00189214759f * (fTemp282 - fTemp323)) + ((0.00112918485f * (fTemp354 - fTemp46)) + ((0.0012817774f * (fTemp148 - fTemp399)) + ((0.00543229468f * (fTemp268 - (fTemp218 - fTemp258))) + ((0.00555436872f * (fTemp496 + fTemp272)) + ((0.000244148076f * (fTemp6 + fTemp400)) + ((0.00308236945f * (fTemp64 + fTemp169)) + ((0.00119022187f * (fTemp73 + fTemp556)) + ((0.0022583697f * (fTemp416 - fTemp102)) + ((0.0035401471f * (fTemp530 - fTemp124)) + ((0.00283822138f * (fTemp248 - fTemp129)) + ((0.00057985168f * (fTemp126 + fTemp313)) + ((0.000976592302f * (fTemp128 + fTemp57)) + ((0.00738547929f * (fTemp413 + fTemp42)) + ((0.00183111057f * (fTemp239 + fTemp40)) + ((0.00366222113f * (fTemp414 + fTemp130)) + ((0.0083925901f * (fTemp380 + (fTemp214 + fTemp423))) + ((0.00997955259f * (fTemp512 + fTemp386)) + ((0.00943021942f * (fTemp364 - fTemp111)) + ((0.0104373302f * (fTemp153 + fTemp294)) + ((0.000366222113f * fTemp678) + ((0.000427259132f * fTemp325) + ((0.00122074038f * fTemp3) + ((0.00268562883f * fTemp401) + ((0.000274666585f * fTemp374) + ((0.00131229591f * fTemp85) + ((0.000793481246f * fTemp13) + ((0.000640888698f * fTemp12) + ((0.00537125766f * fTemp290) + ((0.00204474013f * fTemp361) + ((0.00347911008f * fTemp343) + ((0.0054933317f * fTemp371) + ((0.00912503432f * fTemp514) + ((0.00866725668f * fTemp136) + ((0.00567644276f * fTemp335) + ((0.00100711081f * fTemp92) + ((0.0019531846f * fTemp299) + ((0.00488296151f * fTemp356) + ((0.00619525742f * fTemp405) + (fTemp746 + ((0.0127262184f * fTemp26) + ((0.00469985045f * fTemp379) + ((0.00982696004f * fTemp301) + ((0.00817896053f * fTemp281) + ((0.00222785119f * fTemp516) + ((0.00320444349f * fTemp81) + ((0.00521866512f * fTemp407) + ((0.00585955381f * fTemp408) + ((0.00714133121f * fTemp410) + ((0.0125736259f * fTemp388) + ((0.0129093295f * fTemp411) + ((0.0112918485f * fTemp412) + (fTemp419 + ((0.0110477004f * fTemp420) + ((0.0127872555f * fTemp421) + ((0.00729392376f * fTemp369) + ((0.00335703604f * fTemp515) + ((0.00143436994f * fTemp149) + ((0.0115970336f * fTemp65) + ((0.0135807367f * fTemp360) + ((0.0100100711f * fTemp106) + ((0.00930814538f * fTemp94) + ((0.01126133f * fTemp89) + ((0.00955229346f * fTemp422) + ((0.0058290353f * fTemp424) + ((0.00949125644f * fTemp425) + ((0.0140385143f * fTemp426) + ((0.0168462172f * fTemp17) + ((0.0137943663f * fTemp338) + ((0.00717184972f * fTemp427) + ((0.00915555283f * fTemp430) + ((0.0244148076f * fTemp431) + ((0.0397961363f * fTemp432) + ((0.0433057658f * fTemp433) + ((0.0409558415f * fTemp434) + ((0.0294503625f * fTemp435) + ((0.0154118473f * fTemp436) + ((0.0157170333f * fTemp437) + ((0.0152592547f * fTemp438) + ((0.0180059206f * fTemp439) + ((0.000457777642f * fTemp381) + ((0.0300607327f * fTemp440) + ((0.0334788039f * fTemp392) + ((0.0379039906f * fTemp441) + ((0.0231330302f * fTemp442) + ((0.022461623f * fTemp443) + ((0.0262154005f * fTemp522) + ((0.0375072472f * fTemp175) + ((0.0273140669f * fTemp176) + ((0.0684530139f * fTemp118) + ((0.0993377492f * fTemp177) + ((0.0610980578f * fTemp178) + ((0.00616473891f * fTemp249) + ((0.00299081393f * fTemp446) + ((0.0196539201f * fTemp447) + ((0.0175786614f * fTemp448) + ((0.004852443f * fTemp449) + ((0.0118106632f * fTemp450) + ((0.0109256264f * fTemp451) + ((0.0395214707f * fTemp394) + ((0.0743430927f * fTemp458) + ((0.100527972f * fTemp459) + ((0.104495376f * fTemp460) + ((0.0761131644f * fTemp461) + ((0.0209662169f * fTemp462) + ((0.00695822015f * fTemp393) + ((0.0538041331f * fTemp465) + ((0.0791039765f * fTemp466) + ((0.0763878301f * fTemp467) + ((0.0650349408f * fTemp468) + ((0.0657673851f * fTemp368) + ((0.0641193911f * fTemp181) + ((0.0533158369f * fTemp86) + ((0.022766808f * fTemp367) + (fTemp758 + ((0.0077517014f * fTemp151) + ((0.0258491784f * fTemp190) + ((0.053132724f * fTemp191) + ((0.0394909531f * fTemp192) + ((0.0817896053f * fTemp469) + ((0.143620104f * fTemp154) + ((0.157872245f * fTemp470) + ((0.0625629425f * fTemp346) + ((0.0535905026f * fTemp474) + ((0.149906918f * fTemp475) + ((0.207098603f * fTemp476) + ((0.161412403f * fTemp197) + ((0.16101566f * fTemp198) + ((0.0489516892f * fTemp199) + ((0.0202337727f * fTemp479) + ((0.367992193f * fTemp480) + ((0.662739933f * fTemp481) + ((0.669759214f * fTemp201) + ((0.153294474f * fTemp202) + ((0.047090061f * fTemp486) + ((0.0741294622f * fTemp487) + ((0.0725730136f * fTemp488) + ((0.0463881344f * fTemp489) + ((0.00778221991f * fTemp135) + ((0.0230719931f * fTemp490) + ((0.0246284381f * fTemp491) + ((0.0137333293f * fTemp492) + ((0.0108035523f * fTemp215) + ((0.00653096102f * fTemp216) + ((0.00750755332f * fTemp497) + ((0.00372325815f * fTemp498) + ((0.0136112552f * fTemp221) + ((0.0216376241f * fTemp222) + ((0.0205999948f * fTemp223) + ((0.00988799706f * fTemp224) + ((0.0226142164f * fTemp225) + ((0.0252998453f * fTemp226) + ((0.0173650328f * fTemp227) + ((0.0124515519f * fTemp238) + ((((0.00790429395f * fTemp510) + (0.0123294778f * fTemp229)) + (0.0107119968f * fTemp230)) + (0.0163884405f * fTemp237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00231940672f * (fTemp417 - fTemp1)))) : (((0.00610370189f * (fTemp44 + fTemp242)) + ((0.00625629444f * (fTemp341 + fTemp244)) + ((0.00698873866f * (fTemp365 + fTemp251)) + ((0.00781273842f * (fTemp260 + (fTemp518 + (fTemp124 + fTemp14)))) + ((0.00833155308f * (fTemp67 + fTemp265)) + ((0.00881984923f * (fTemp303 + fTemp255)) + ((0.00924710836f * (fTemp262 + fTemp261)) + ((0.00991851557f * (fTemp283 + (fTemp402 - (fTemp173 - fTemp374)))) + ((0.0101321451f * (fTemp291 + (fTemp320 + (fTemp48 - (fTemp476 + fTemp408))))) + ((0.0104068117f * (fTemp266 + fTemp296)) + ((0.0105899228f * (fTemp277 - (fTemp106 - fTemp96))) + ((0.0104373302f * (fTemp79 + fTemp305)) + ((0.0100711081f * (fTemp309 + (fTemp71 + fTemp246))) + ((0.00967436749f * (fTemp307 + fTemp270)) + ((0.00823999755f * (fTemp18 + fTemp331)) + ((0.00769066438f * (fTemp310 + fTemp304)) + ((0.00772118289f * (fTemp7 + fTemp332)) + ((0.0087282937f * (fTemp23 + fTemp339)) + ((0.00866725668f * (fTemp157 + fTemp31)) + ((0.00912503432f * (fTemp159 + fTemp256)) + ((0.00943021942f * (fTemp34 + (fTemp68 - fTemp743))) + ((0.00961333048f * (fTemp279 - (fTemp65 - fTemp45))) + ((0.00979644153f * (fTemp253 + (fTemp312 + (fTemp60 + (fTemp61 - (fTemp15 - fTemp2)))))) + ((0.00994903408f * (fTemp101 + fTemp286)) + ((0.00985747855f * (fTemp325 + (fTemp75 + fTemp21))) + ((0.0093691824f * (fTemp62 + fTemp37)) + ((0.00988799706f * (fTemp165 + fTemp280)) + ((0.0105288858f * (fTemp47 + fTemp252)) + ((0.0103762932f * (fTemp321 + (fTemp263 + fTemp169))) + ((0.00976592302f * (fTemp51 + (fTemp54 - (fTemp301 - fTemp74)))) + ((0.00952177495f * (fTemp76 + fTemp33)) + ((0.00753807183f * (fTemp350 + fTemp8)) + ((0.00796533097f * (fTemp155 - (fTemp9 - fTemp113))) + ((0.00799584948f * (fTemp53 + fTemp347)) + ((0.0114139225f * (fTemp91 - (fTemp377 - fTemp352))) + ((0.0116580706f * (fTemp46 + (fTemp366 - (fTemp178 + fTemp515)))) + ((0.0045167394f * (fTemp161 + (fTemp363 - (fTemp356 + fTemp13)))) + ((0.00396740623f * (fTemp119 - (fTemp315 + (fTemp92 + fTemp243)))) + ((0.0125431074f * (fTemp357 - fTemp143)) + ((0.0126651814f * (fTemp268 + (fTemp199 - fTemp338))) + ((0.00708029419f * (fTemp166 - (fTemp139 - fTemp120))) + ((0.00384533219f * (fTemp167 - (fTemp112 - fTemp140))) + ((0.00939970091f * (fTemp318 + (fTemp340 + (fTemp41 + (fTemp69 + (fTemp16 - fTemp355)))))) + ((0.00628681295f * (fTemp50 + fTemp170)) + ((0.00570696127f * (fTemp490 + fTemp133)) + ((0.00427259132f * (fTemp85 + fTemp144)) + ((0.0273445845f * (fTemp206 - fTemp477)) + ((0.0484939106f * (fTemp135 - fTemp201)) + (((0.00573747978f * fTemp775) + ((0.00854518265f * fTemp736) + ((0.006469924f * fTemp398) + ((0.00671407208f * fTemp245) + ((0.0074159978f * fTemp254) + ((0.00955229346f * fTemp269) + ((0.00973540451f * fTemp276) + ((0.0106814783f * fTemp297) + ((0.0107119968f * fTemp302) + ((0.00897244178f * fTemp324) + ((0.00875881221f * fTemp292) + ((0.00851466414f * fTemp330) + ((0.00790429395f * fTemp278) + ((0.0077517014f * fTemp285) + ((0.00759910885f * fTemp337) + ((0.00842310861f * fTemp25) + ((0.00894192327f * fTemp333) + ((0.00930814538f * fTemp319) + ((0.00982696004f * fTemp264) + ((0.00964384899f * fTemp311) + ((0.00949125644f * fTemp55) + ((0.0100100711f * fTemp345) + ((0.00827051606f * fTemp156) + ((0.00921658985f * fTemp72) + ((0.0108645894f * fTemp349) + ((0.0122379223f * fTemp43) + ((0.0121158483f * fTemp88) + ((0.00933866389f * fTemp105) + ((0.0108340709f * fTemp323) + ((0.0115665151f * fTemp287) + ((0.00595110934f * fTemp117) + ((0.00439466536f * fTemp163) + ((0.00512710959f * fTemp164) + ((0.00946073793f * fTemp399) + ((0.011444441f * fTemp353) + ((0.0112918485f * fTemp322) + ((0.0111697745f * fTemp3) + ((0.0115359966f * fTemp519) + ((0.00585955381f * fTemp63) + ((0.0137028107f * fTemp400) + ((0.0157780703f * fTemp401) + ((0.0154118473f * fTemp38) + ((0.0131534776f * fTemp168) + (fTemp861 + ((0.00695822015f * fTemp102) + ((0.00802636798f * fTemp125) + ((0.00778221991f * fTemp123) + ((0.0058290353f * fTemp78) + ((0.00598162785f * fTemp129) + ((0.00616473891f * fTemp27) + ((0.00643940549f * fTemp132) + ((0.00589007232f * fTemp273) + ((0.00561540574f * fTemp10) + ((0.00534073915f * fTemp115) + ((0.00463881344f * fTemp80) + ((0.00347911008f * fTemp56) + ((0.00399792474f * fTemp84) + ((0.00567644276f * fTemp275) + ((0.0102847377f * fTemp104) + ((0.0115970336f * fTemp370) + ((0.00686666463f * fTemp358) + ((0.00299081393f * fTemp298) + ((0.00131229591f * fTemp306) + ((0.00256355479f * fTemp108) + ((0.00683614612f * fTemp354) + ((0.013000885f * fTemp326) + ((0.00460829493f * fTemp282) + ((0.00408948027f * fTemp359) + ((0.0028992584f * fTemp148) + ((0.00115970336f * fTemp114) + ((0.00302133244f * fTemp197) + ((0.0111392559f * fTemp198) + ((0.00308236945f * fTemp200) + ((0.0102237007f * fTemp35) + ((0.0302743614f * fTemp482) + ((0.0419324338f * fTemp397) + ((0.0412305072f * fTemp483) + ((0.0315256193f * fTemp484) + ((0.00445570238f * fTemp396) + ((0.0589617603f * fTemp207) + ((0.0704977587f * fTemp208) + ((0.0178228095f * fTemp216) + ((0.0505996905f * fTemp217) + ((0.0672017559f * fTemp218) + ((0.0734580532f * fTemp493) + ((0.0815149397f * fTemp495) + ((0.0725730136f * fTemp496) + ((0.0673543513f * fTemp497) + ((0.0445875414f * fTemp498) + ((0.0218512528f * fTemp499) + ((0.00390636921f * fTemp221) + ((0.0434583575f * fTemp222) + ((0.0864894539f * fTemp223) + ((0.104831077f * fTemp224) + ((0.0931119695f * fTemp22) + ((((((((((fTemp508 + (((0.0686056092f * fTemp0) + (0.282601386f * fTemp506)) + (0.683675647f * fTemp507))) + (0.993102789f * fTemp510)) + (0.659840703f * fTemp229)) + (0.143040255f * fTemp230)) + (0.0732139051f * fTemp237)) + (0.0853907913f * fTemp238)) + (0.127048552f * fTemp239)) + (0.109714039f * fTemp240)) + (0.076967679f * fTemp391)) + (0.0352793969f * fTemp502))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00592059083f * fTemp793)))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00915555283f * (fTemp138 - fTemp284)) + ((0.00756859034f * (fTemp93 - fTemp11)) + ((0.0113528855f * (fTemp250 - fTemp293)) + ((0.0117801446f * (fTemp423 - fTemp83)) + ((0.0123599963f * (fTemp530 - fTemp271)) + ((0.0090334788f * (fTemp103 - fTemp160)) + ((0.0120853297f * (fTemp369 - fTemp110)) + ((0.0100405896f * (fTemp329 - fTemp109)) + ((0.0119937742f * (fTemp4 - fTemp272)) + ((0.00848414563f * (fTemp470 - fTemp28)) + ((0.00735496078f * (fTemp172 - fTemp20)) + ((0.00378429517f * (fTemp314 + fTemp30)) + ((0.00201422162f * (fTemp126 + fTemp372)) + ((0.000213629566f * (fTemp274 + fTemp134)) + ((0.00479140598f * (fTemp405 - fTemp295)) + ((0.00183111057f * (fTemp514 + fTemp171)) + ((0.00262459181f * (fTemp90 - fTemp150)) + ((0.00296029542f * (fTemp361 + fTemp147)) + ((0.0042115543f * (fTemp290 + fTemp12)) + ((0.00149540696f * (fTemp42 + fTemp371)) + ((0.0103152562f * (fTemp407 + fTemp384)) + ((0.0108035523f * (fTemp66 + fTemp336)) + ((0.0101931822f * (fTemp182 + fTemp379)) + ((0.0140079958f * (fTemp373 + fTemp409)) + ((0.0136112552f * (fTemp180 + fTemp386)) + ((0.0151676992f * (fTemp450 + fTemp414)) + ((0.0109866634f * (fTemp387 + fTemp425)) + ((0.0158696249f * (fTemp455 + fTemp428)) + ((0.0220343638f * (fTemp435 + fTemp434)) + ((0.0197149571f * (fTemp445 + fTemp111)) + ((0.0208746605f * (fTemp444 + fTemp294)) + ((0.0123294778f * (fTemp183 + fTemp447)) + ((0.0126956999f * (fTemp194 + fTemp448)) + ((0.0145878475f * (fTemp453 + fTemp376)) + ((0.0166936256f * (fTemp457 + fTemp456)) + ((0.0141911069f * fTemp868) + ((0.0138554033f * fTemp867) + ((0.00448622089f * fTemp854) + ((0.00372325815f * fTemp792) + ((0.0107730338f * fTemp707) + ((0.0120242927f * fTemp603) + ((0.000885036774f * fTemp257) + ((0.00506607257f * fTemp145) + ((0.00494399853f * fTemp146) + ((0.00527970213f * fTemp267) + ((0.000854518265f * fTemp288) + (fTemp569 + (fTemp833 + ((0.00524918362f * fTemp259) + ((0.004852443f * fTemp57) + ((0.00350962859f * fTemp59) + ((0.00360118411f * fTemp348) + ((0.0038758507f * fTemp29) + ((0.00155644398f * fTemp5) + ((0.00186162908f * fTemp317) + ((0.00241096225f * fTemp128) + ((0.00204474013f * fTemp316) + ((0.00106814783f * fTemp258) + ((0.000366222113f * fTemp351) + ((0.00146488845f * fTemp82) + ((0.00274666585f * fTemp403) + ((0.00341807306f * fTemp404) + ((0.00314340647f * fTemp107) + ((0.00234992523f * fTemp127) + (fTemp655 + ((0.000823999755f * fTemp343) + ((0.000946073793f * fTemp64) + ((0.00152592547f * fTemp375) + ((0.001617481f * fTemp70) + ((0.00244148076f * fTemp136) + ((0.00317392498f * fTemp335) + ((0.00369273964f * fTemp334) + ((0.00357066561f * fTemp49) + ((0.00381481368f * fTemp40) + ((0.00424207281f * fTemp327) + (fTemp870 + ((0.00607318338f * fTemp378) + ((0.00665303506f * fTemp98) + ((0.00738547929f * fTemp289) + ((0.00863673817f * fTemp406) + ((0.00909451582f * fTemp382) + ((0.0109256264f * fTemp100) + ((0.0111087374f * fTemp99) + ((0.0101626636f * fTemp81) + ((0.0102542192f * fTemp52) + ((0.012878811f * fTemp87) + ((0.0136417737f * fTemp383) + ((0.0138859218f * fTemp410) + ((0.0133671071f * fTemp388) + ((0.0133365886f * fTemp411) + ((0.0139164403f * fTemp412) + ((0.014679403f * fTemp413) + ((0.0148014771f * fTemp390) + ((0.0143742179f * fTemp415) + ((0.0141300699f * fTemp416) + ((0.0142826624f * fTemp417) + ((0.0149540696f * fTemp342) + ((0.0157475509f * fTemp36) + ((0.0159001444f * fTemp39) + ((0.0154728843f * fTemp122) + ((0.0149845881f * fTemp418) + ((0.013061922f * fTemp421) + (fTemp790 + (fTemp539 + ((0.0129093295f * fTemp95) + ((0.0125125889f * fTemp94) + ((0.0119327372f * fTemp422) + (fTemp666 + ((0.011383404f * fTemp426) + ((0.0181279946f * fTemp429) + ((0.0198980682f * fTemp430) + ((0.0214545131f * fTemp431) + ((0.0222479943f * fTemp432) + ((0.0224005859f * fTemp433) + ((0.0220648833f * fTemp436) + ((0.0217291787f * fTemp437) + ((0.021271402f * fTemp438) + ((0.0205389578f * fTemp439) + ((0.0195928831f * fTemp381) + ((0.0191351064f * fTemp344) + ((0.0216071047f * fTemp440) + ((0.0217596982f * fTemp392) + ((0.0211188085f * fTemp441) + ((0.0196234025f * fTemp442) + ((0.018097477f * fTemp443) + ((0.0178838465f * fTemp522) + ((0.0189519953f * fTemp175) + ((0.0200506616f * fTemp176) + ((0.0208441429f * fTemp328) + ((0.017853329f * fTemp300) + ((0.0159611814f * fTemp116) + ((0.0148930326f * fTemp118) + ((0.0135196997f * fTemp177) + ((0.0106509598f * fTemp249) + ((0.0118717002f * fTemp446) + (fTemp871 + ((0.0134281442f * fTemp179) + ((0.0155644398f * fTemp449) + ((0.0138248848f * fTemp452) + ((0.0145268105f * fTemp121) + ((0.0154423658f * fTemp454) + ((0.0169988107f * fTemp152) + ((0.0173650328f * fTemp362) + ((0.0187383648f * fTemp364) + ((0.0222174749f * fTemp394) + (fTemp851 + ((0.0262154005f * fTemp459) + ((0.0255439933f * fTemp460) + ((0.0242316965f * fTemp461) + ((0.0234382153f * fTemp462) + ((0.0245368816f * fTemp463) + ((0.0270393994f * fTemp464) + ((0.0281380657f * fTemp389) + ((0.0283822138f * fTemp393) + ((0.0291451775f * fTemp465) + (fTemp826 + ((0.0275887325f * fTemp467) + ((0.0264595486f * fTemp468) + ((0.025818659f * fTemp368) + ((0.0239265114f * fTemp181) + ((0.0205999948f * fTemp86) + ((0.01617481f * fTemp367) + ((0.0184331797f * fTemp184) + ((0.0257271044f * fTemp185) + ((0.0324716941f * fTemp186) + ((0.0362865068f * fTemp187) + ((0.0383617654f * fTemp188) + ((0.0385143608f * fTemp189) + ((0.0376598425f * fTemp151) + ((0.0361033976f * fTemp190) + ((0.0350047313f * fTemp191) + ((0.0308847316f * fTemp192) + ((0.0218817722f * fTemp193) + ((0.00521866512f * fTemp195) + ((0.00057985168f * fTemp196) + ((0.000732444227f * fTemp469) + ((0.00433362834f * fTemp154) + (fTemp827 + ((0.0167546626f * fTemp471) + ((0.0217902157f * fTemp472) + ((0.02438429f * fTemp473) + ((0.0246589556f * fTemp474) + (((((((((((((((((((((((((((((((((((((((((((((0.281380653f * fTemp231) + (0.516373158f * fTemp232)) + (0.489028603f * fTemp511)) + (0.342051446f * fTemp233)) + (0.210425124f * fTemp234)) + (0.0889919773f * fTemp235)) + (0.0121463668f * fTemp236)) + (0.0359202847f * fTemp241)) + (0.0252082888f * fTemp228)) + (0.014435255f * fTemp227)) + (0.00692770164f * fTemp226)) + (0.0542313904f * fTemp225)) + (0.0878322721f * fTemp512)) + (0.141300693f * fTemp505)) + (0.121738337f * fTemp504)) + (0.0633869469f * fTemp503)) + (0.0345469527f * fTemp220)) + (0.0414746553f * fTemp219)) + (0.0368663594f * fTemp501)) + (0.0150151066f * fTemp500)) + (0.021210365f * fTemp215)) + (0.0606707968f * fTemp214)) + (0.0881069377f * fTemp213)) + (0.11246071f * fTemp212)) + (0.119693592f * fTemp211)) + (0.11447493f * fTemp210)) + (0.0991851538f * fTemp209)) + (0.0759910867f * fTemp492)) + (0.0400097668f * fTemp491)) + (0.0203558467f * fTemp205)) + (0.0661946461f * fTemp153)) + (0.103091523f * fTemp489)) + (0.11770989f * fTemp488)) + (0.108981594f * fTemp487)) + (0.0780358315f * fTemp486)) + (0.0339671001f * fTemp485)) + (0.016052736f * fTemp204)) + (0.0383007303f * fTemp203)) + (0.0487380587f * fTemp202)) + (0.0410779156f * fTemp481)) + (0.0378124341f * fTemp480)) + (0.0374767296f * fTemp479)) + (0.035950806f * fTemp478)) + (0.0121768853f * fTemp58)) + (0.0202032533f * fTemp475)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow61 ? (((0.000518814661f * (fTemp438 - fTemp245)) + ((3.05185094e-05f * (fTemp265 - (fTemp279 + (fTemp54 - (fTemp248 + (fTemp466 + fTemp343)))))) + ((0.000671407208f * (fTemp261 - (fTemp14 - (fTemp51 + (fTemp103 + (fTemp317 - (fTemp300 + fTemp258))))))) + ((0.00100711081f * (fTemp276 + (fTemp283 + (fTemp297 + (fTemp253 + (fTemp329 + (fTemp476 - fTemp467))))))) + ((0.000946073793f * (fTemp291 + (fTemp296 - (fTemp312 - (fTemp148 - fTemp120))))) + ((0.00112918485f * (fTemp302 + (fTemp21 + fTemp305))) + ((0.00122074038f * (fTemp277 + (fTemp411 + fTemp112))) + ((0.00103762932f * (fTemp309 - (fTemp34 + (fTemp246 - (fTemp272 - (fTemp20 + (fTemp434 + (fTemp176 - fTemp111)))))))) + ((0.00057985168f * (fTemp318 - (fTemp7 - (fTemp266 + (fTemp273 - (fTemp351 + (fTemp389 + fTemp436))))))) + ((0.000427259132f * (fTemp278 + (fTemp73 - (fTemp90 + (fTemp116 + fTemp445))))) + ((0.000854518265f * (fTemp409 - fTemp18)) + ((0.00109866634f * (fTemp5 - fTemp19)) + ((0.0012817774f * (fTemp70 - fTemp339)) + ((0.0022583697f * (fTemp286 - (fTemp80 - (fTemp52 + (fTemp486 - fTemp175))))) + ((0.00231940672f * (fTemp325 - (fTemp349 - (fTemp32 + (fTemp92 + (fTemp100 + fTemp289)))))) + ((0.00155644398f * (fTemp340 + (fTemp366 - fTemp345))) + ((0.00106814783f * (fTemp37 + fTemp649)) + ((0.000610370189f * (fTemp41 + (fTemp375 - fTemp101))) + ((0.000274666585f * (fTemp45 + (fTemp320 - (fTemp390 - fTemp91)))) + ((0.00119022187f * (fTemp47 - (fTemp67 + (fTemp435 - fTemp3)))) + ((0.00131229591f * (fTemp48 + (fTemp126 + (fTemp432 + fTemp243)))) + ((0.000152592547f * (fTemp280 - (fTemp404 - fTemp357))) + ((0.00268562883f * (fTemp39 - fTemp33)) + ((0.00201422162f * (fTemp315 - fTemp61)) + ((0.0019226661f * (fTemp136 - fTemp155)) + ((0.00280770287f * (fTemp425 - fTemp347)) + ((0.0042115543f * (fTemp17 - fTemp72)) + ((6.10370189e-05f * (fTemp105 - (fTemp133 + (fTemp118 + fTemp328)))) + ((0.00366222113f * (fTemp129 + fTemp323)) + ((0.00286873989f * (fTemp130 + fTemp113)) + ((0.00238044374f * (fTemp379 - fTemp307)) + ((0.00125125889f * (fTemp268 + (fTemp352 - (fTemp104 - (fTemp87 + (fTemp65 + fTemp410)))))) + ((0.000762962736f * (fTemp322 - (fTemp294 - (fTemp458 + fTemp449)))) + ((0.00210577715f * (fTemp400 + (fTemp114 + (fTemp407 + fTemp59)))) + ((0.00405896176f * (fTemp401 + (fTemp370 - (fTemp482 - fTemp423)))) + ((0.00152592547f * (fTemp381 - fTemp102)) + ((0.00344859157f * (fTemp57 + fTemp168)) + ((9.15555283e-05f * (fTemp124 - (fTemp433 - fTemp128))) + ((0.0019531846f * (fTemp123 - (fTemp282 - fTemp395))) + ((0.0025940733f * (fTemp365 + (fTemp132 - (fTemp480 + fTemp108)))) + ((0.003234962f * (fTemp36 + fTemp50)) + ((0.001617481f * (fTemp446 + fTemp341)) + ((0.00140385143f * (fTemp361 + fTemp109)) + ((0.00436414685f * (fTemp180 + fTemp145)) + ((0.00234992523f * (fTemp372 + (fTemp13 + (fTemp514 + (fTemp98 + fTemp40))))) + ((0.00396740623f * (fTemp456 - fTemp144)) + ((0.00650044251f * (fTemp479 + fTemp263)) + ((0.00390636921f * (fTemp106 + fTemp173)) + ((0.00308236945f * (fTemp356 - fTemp85)) + ((0.00305185094f * (fTemp373 + fTemp131)) + ((0.00381481368f * (fTemp417 + fTemp147)) + ((0.00439466536f * (fTemp457 + fTemp259)) + ((0.000335703604f * (fTemp177 - fTemp403)) + ((0.00207525864f * (fTemp371 + (fTemp49 + (fTemp447 + fTemp81)))) + ((0.00247199927f * (fTemp42 + (fTemp93 + (fTemp121 - fTemp392)))) + ((0.00250251777f * (fTemp327 - (fTemp184 - fTemp450))) + ((0.00228888821f * (fTemp139 - (fTemp440 - fTemp360))) + ((0.00265511032f * (fTemp380 + fTemp9)) + ((0.00296029542f * (fTemp223 + fTemp406)) + ((0.00372325815f * (fTemp448 + fTemp15)) + ((0.00570696127f * (fTemp377 + (fTemp152 + fTemp89))) + ((0.00665303506f * (fTemp452 + fTemp94)) + ((0.00479140598f * (fTemp453 + fTemp422)) + ((0.00299081393f * (fTemp431 + fTemp426)) + ((0.000885036774f * fTemp779) + ((0.0038758507f * fTemp735) + ((0.00708029419f * fTemp717) + ((0.000793481246f * fTemp270) + ((0.00204474013f * fTemp311) + ((0.00134281442f * fTemp321) + ((0.0061342204f * fTemp46) + ((0.00753807183f * fTemp110) + ((0.00735496078f * fTemp287) + ((0.00558488723f * fTemp71) + (fTemp718 + ((0.00115970336f * fTemp125) + ((0.00326548051f * fTemp170) + ((0.0035401471f * fTemp27) + ((0.00622577593f * fTemp358) + ((0.00494399853f * fTemp6) + ((0.00399792474f * fTemp146) + ((0.00341807306f * fTemp30) + ((0.000732444227f * fTemp134) + ((0.00900296029f * fTemp295) + ((0.00912503432f * fTemp171) + ((0.00476088747f * fTemp313) + ((0.00186162908f * fTemp314) + ((0.00164799951f * fTemp334) + ((0.00283822138f * fTemp299) + ((0.00311288796f * fTemp405) + ((0.00256355479f * fTemp378) + ((0.00329599902f * fTemp382) + ((0.00320444349f * fTemp26) + ((0.00222785119f * fTemp66) + ((0.00277718436f * fTemp416) + ((0.0028992584f * fTemp122) + ((0.00375377666f * fTemp418) + ((0.00463881344f * fTemp420) + ((0.00500503555f * fTemp421) + ((0.00445570238f * fTemp369) + ((0.00314340647f * fTemp515) + ((0.00695822015f * fTemp530) + ((0.00726340525f * fTemp95) + ((0.00335703604f * fTemp424) + ((0.0057985168f * fTemp338) + ((0.00732444227f * fTemp428) + ((0.00653096102f * fTemp429) + ((0.004852443f * fTemp430) + ((0.000122074038f * fTemp437) + ((0.000915555283f * fTemp439) + ((0.0054933317f * fTemp77) + ((0.00598162785f * fTemp179) + ((0.00537125766f * fTemp451) + ((0.00772118289f * fTemp454) + ((0.00793481246f * fTemp455) + ((0.00384533219f * fTemp362) + ((0.00357066561f * fTemp364) + ((0.00491348002f * fTemp182) + ((0.00527970213f * fTemp194) + ((0.0148319956f * fTemp195) + ((0.0213934761f * fTemp196) + ((0.0236213263f * fTemp469) + ((0.0245979186f * fTemp154) + ((0.0270393994f * fTemp470) + ((0.0278328806f * fTemp346) + ((0.0215460677f * fTemp471) + ((0.008087405f * fTemp472) + ((0.0175481439f * fTemp197) + ((0.0256050304f * fTemp198) + ((0.0227973275f * fTemp199) + ((0.0207220688f * fTemp200) + ((0.0205084383f * fTemp58) + ((0.0201116987f * fTemp477) + ((0.0148930326f * fTemp478) + ((0.0193182174f * fTemp397) + ((0.0490737632f * fTemp483) + ((0.0780968666f * fTemp484) + ((0.0863063484f * fTemp396) + ((0.0609149449f * fTemp485) + ((0.0435193963f * fTemp207) + ((0.0667439774f * fTemp208) + ((0.0669576079f * fTemp135) + ((0.0433973223f * fTemp490) + ((0.00604266487f * fTemp491) + ((0.0419019125f * fTemp218) + ((0.0767845735f * fTemp493) + ((0.103091523f * fTemp495) + ((0.108096562f * fTemp496) + ((0.0837427899f * fTemp497) + ((0.0356151015f * fTemp498) + ((0.0796533078f * fTemp224) + ((0.150791958f * fTemp22) + ((0.149540693f * fTemp502) + ((0.0516678356f * fTemp503) + ((0.0384228043f * fTemp226) + ((0.0458082817f * fTemp227) + ((0.0174260698f * fTemp239) + ((0.0242316965f * fTemp238) + ((((((fTemp508 + (((0.196874902f * fTemp0) + (0.476149797f * fTemp506)) + (0.845942557f * fTemp507))) + (0.686269701f * fTemp510)) + (0.0234992523f * fTemp229)) + (0.0611896105f * fTemp234)) + (0.030854214f * fTemp235)) + (0.00680562761f * fTemp237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((((0.000457777642f * (fTemp244 - (fTemp284 + (fTemp324 + (fTemp330 + (fTemp331 + (fTemp88 - (fTemp413 + fTemp82)))))))) + (((0.000213629566f * (fTemp260 + (fTemp117 + fTemp96))) + ((0.000305185094f * (fTemp43 - fTemp255)) + ((0.000183111057f * (fTemp518 - (fTemp271 + (fTemp459 + fTemp64)))) + ((0.000640888698f * (fTemp337 + (fTemp10 + (fTemp460 + fTemp274)))) + ((0.00146488845f * (fTemp165 + fTemp23)) + ((0.00170903653f * (fTemp25 - (fTemp386 + fTemp290))) + ((0.00173955504f * (fTemp28 - (fTemp4 + (fTemp376 + fTemp149)))) + ((0.00183111057f * (fTemp31 - (fTemp12 + fTemp264))) + ((0.00216681417f * (fTemp256 - (fTemp348 + (fTemp99 + (fTemp516 + fTemp336))))) + ((0.00213629566f * (fTemp262 - (fTemp169 - (fTemp468 - fTemp250)))) + ((0.00177007355f * (fTemp319 + (fTemp60 + (fTemp441 - (fTemp465 + fTemp249))))) + ((0.00262459181f * (fTemp69 + (fTemp353 - (fTemp301 + (fTemp141 + fTemp281))))) + ((0.00241096225f * (fTemp55 - (fTemp138 + fTemp326))) + ((0.00363170262f * (fTemp156 + (fTemp150 - fTemp78))) + ((0.00143436994f * (fTemp293 - (fTemp335 - fTemp115))) + ((0.000823999755f * (fTemp83 + (fTemp414 - fTemp383))) + ((0.000701925717f * (fTemp8 + (fTemp11 + (fTemp2 + (fTemp303 + (fTemp316 + fTemp76)))))) + ((0.00292977691f * (fTemp140 + fTemp161)) + ((0.00561540574f * (fTemp63 - (fTemp402 + (fTemp236 + fTemp257)))) + ((0.00149540696f * (fTemp74 + (fTemp442 - fTemp29))) + ((0.00430310983f * (fTemp84 - fTemp38)) + ((0.00360118411f * (fTemp56 - fTemp590)) + ((0.00616473891f * (fTemp463 - fTemp298)) + ((0.00167851802f * (fTemp142 - (fTemp183 + fTemp388))) + ((0.00189214759f * (fTemp267 - (fTemp387 + fTemp344))) + ((0.00448622089f * (fTemp367 - fTemp97)) + ((0.00219733268f * (fTemp443 - fTemp408)) + ((0.00543229468f * (fTemp368 - fTemp385)) + ((0.00503555406f * (fTemp217 + fTemp462)) + ((0.00158696249f * fTemp24) + ((0.00198370311f * fTemp333) + ((0.00271614734f * fTemp68) + ((0.00054933317f * fTemp62) + ((0.00408948027f * fTemp157) + ((0.00317392498f * fTemp79) + ((0.00512710959f * fTemp119) + ((0.00689718314f * fTemp163) + ((0.00833155308f * fTemp164) + ((0.00930814538f * fTemp44) + ((0.00869777519f * fTemp350) + ((0.00610370189f * fTemp399) + ((0.00531022064f * fTemp166) + ((0.00817896053f * fTemp363) + ((0.0083925901f * fTemp167) + ((0.0045167394f * fTemp275) + ((0.00350962859f * fTemp53) + ((0.000976592302f * fTemp306) + ((0.00473036896f * fTemp354) + ((0.00415051728f * fTemp374) + ((0.00332651753f * fTemp288) + ((0.00274666585f * fTemp522) + ((0.00253303628f * fTemp461) + ((0.00427259132f * fTemp464) + ((0.00976592302f * fTemp181) + ((0.0101321451f * fTemp86) + ((0.00482192449f * fTemp185) + ((0.00668355357f * fTemp186) + ((0.0111392559f * fTemp187) + ((0.0176396985f * fTemp188) + ((0.0238654744f * fTemp189) + ((0.0280465111f * fTemp151) + ((0.0281380657f * fTemp190) + ((0.0235908087f * fTemp191) + ((0.0149845881f * fTemp192) + ((0.00524918362f * fTemp193) + ((0.00698873866f * fTemp473) + ((0.016113773f * fTemp474) + ((0.0141300699f * fTemp475) + ((0.0129093295f * fTemp481) + ((0.0238044374f * fTemp201) + ((0.0355540626f * fTemp202) + ((0.0401623584f * fTemp203) + ((0.0352793969f * fTemp204) + ((0.0209051799f * fTemp35) + ((0.0607318357f * fTemp487) + ((0.0997039676f * fTemp488) + ((0.102633744f * fTemp489) + ((0.0822473839f * fTemp153) + ((0.0443433933f * fTemp205) + ((0.0372020639f * fTemp492) + ((0.0731528699f * fTemp209) + ((0.095858641f * fTemp210) + ((0.10623493f * fTemp211) + ((0.113406785f * fTemp212) + ((0.125614181f * fTemp213) + ((0.13153477f * fTemp214) + ((0.110934779f * fTemp215) + ((((((((((((((((((((((0.583269775f * fTemp230) + (0.826960027f * fTemp231)) + (0.67006439f * fTemp232)) + (0.305337697f * fTemp511)) + (0.0277718436f * fTemp233)) + (0.0546586514f * fTemp240)) + (0.145970032f * fTemp391)) + (0.197271645f * fTemp16)) + (0.152806178f * fTemp241)) + (0.0504165776f * fTemp228)) + (0.0551164299f * fTemp225)) + (0.157170326f * fTemp512)) + (0.169194624f * fTemp505)) + (0.0824610144f * fTemp504)) + (0.0316476934f * fTemp222)) + (0.0396435447f * fTemp221)) + (0.0449842848f * fTemp220)) + (0.0592669472f * fTemp219)) + (0.0683309436f * fTemp501)) + (0.0550859086f * fTemp500)) + (0.0165410321f * fTemp499)) + (0.0611285754f * fTemp216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000488296151f * (fTemp398 + (fTemp251 + (fTemp359 + fTemp159)))))) + (0.000396740623f * (fTemp242 + (fTemp254 - (fTemp292 + (fTemp206 - fTemp332)))))) + (0.000366222113f * (fTemp513 - (fTemp285 + (fTemp412 - fTemp160))))) + (0.000244148076f * (fTemp1 - (fTemp304 - fTemp775))))) : ((((0.00274666585f * (fTemp513 + (fTemp339 - (fTemp338 - fTemp146)))) + ((0.00283822138f * (fTemp242 - (fTemp380 - fTemp19))) + ((0.00292977691f * (fTemp244 + (fTemp337 - (fTemp138 - fTemp18)))) + ((0.00299081393f * (fTemp398 - (fTemp418 - fTemp11))) + ((0.00308236945f * (fTemp74 + fTemp245)) + ((0.003234962f * (fTemp251 + (fTemp518 - fTemp864))) + ((0.00344859157f * (fTemp254 - (fTemp453 + fTemp360))) + ((0.00375377666f * (fTemp260 + (fTemp285 - (fTemp149 - fTemp257)))) + ((0.00411999878f * (fTemp265 + (fTemp54 - (fTemp249 - fTemp172)))) + ((0.00448622089f * (fTemp91 + fTemp255)) + ((0.00512710959f * (fTemp269 - (fTemp362 + fTemp386))) + ((0.00524918362f * (fTemp276 + (fTemp291 + (fTemp296 + (fTemp48 - (fTemp456 - fTemp263)))))) + ((0.00531022064f * (fTemp283 + (fTemp297 + (fTemp519 + fTemp277)))) + ((0.00491348002f * (fTemp309 + (fTemp27 + fTemp253))) + ((0.00466933195f * (fTemp41 + fTemp270)) + ((0.00390636921f * (fTemp331 + (fTemp83 - (fTemp122 + fTemp44)))) + ((0.00296029542f * (fTemp7 + (fTemp246 + fTemp8))) + ((0.00302133244f * (fTemp14 + (fTemp366 - (fTemp150 - fTemp6)))) + ((0.00262459181f * (fTemp23 + (fTemp24 + (fTemp319 + (fTemp60 + (fTemp345 - (fTemp163 + (fTemp515 - fTemp326)))))))) + ((0.00256355479f * (fTemp25 - (fTemp423 - fTemp28))) + ((0.0022583697f * (fTemp256 + (fTemp165 + fTemp155))) + ((0.00405896176f * (fTemp279 - (fTemp387 - fTemp105))) + ((0.00436414685f * (fTemp280 - (fTemp450 + fTemp329))) + ((0.00469985045f * (fTemp50 + fTemp266)) + ((0.0051576281f * (fTemp477 + fTemp47)) + ((0.00527970213f * (fTemp321 - (fTemp430 - fTemp402))) + ((0.00506607257f * (fTemp21 + (fTemp113 + (fTemp169 - (fTemp482 + fTemp121))))) + ((0.00473036896f * (fTemp51 + (fTemp239 + fTemp88))) + ((0.00338755455f * (fTemp312 + (fTemp341 + fTemp76))) + ((0.00173955504f * (fTemp33 - (fTemp369 + fTemp82))) + ((0.00167851802f * (fTemp68 - (fTemp90 + (fTemp404 + fTemp351)))) + ((0.00170903653f * (fTemp69 + (fTemp20 - (fTemp274 + fTemp282)))) + ((0.00186162908f * (fTemp137 + fTemp55)) + ((0.00219733268f * (fTemp61 + (fTemp353 - (fTemp106 + fTemp867)))) + ((0.00317392498f * (fTemp303 - (fTemp336 + fTemp100))) + ((0.00164799951f * (fTemp347 - (fTemp455 + fTemp378))) + ((0.00119022187f * (fTemp156 - (fTemp130 - fTemp97))) + ((0.000915555283f * (fTemp157 - (fTemp335 - fTemp147))) + ((0.00134281442f * (fTemp75 - (fTemp275 + (fTemp248 - fTemp313)))) + ((0.0035401471f * (fTemp101 - (fTemp342 + fTemp164))) + ((0.00357066561f * (fTemp159 + (fTemp125 - (fTemp152 + fTemp429)))) + ((0.00503555406f * (fTemp109 + (fTemp129 + fTemp78))) + ((0.00250251777f * (fTemp273 + fTemp117)) + ((0.00457777642f * (fTemp357 + (fTemp370 + fTemp352))) + ((0.00546281319f * (fTemp268 - (fTemp177 + fTemp410))) + ((0.00521866512f * (fTemp272 - (fTemp388 - fTemp358))) + ((0.00183111057f * (fTemp120 - (fTemp422 + fTemp316))) + ((0.00125125889f * (fTemp102 - (fTemp84 + (fTemp144 + (fTemp343 + fTemp128))))) + ((0.00268562883f * (fTemp145 + fTemp124)) + ((0.001617481f * (fTemp10 - (fTemp235 + fTemp374))) + ((0.00238044374f * (fTemp372 - (fTemp428 + fTemp93))) + ((0.00155644398f * (fTemp238 + fTemp134)) + ((0.000366222113f * (fTemp95 + fTemp114)) + ((0.00112918485f * (fTemp259 - (fTemp112 + fTemp64))) + ((0.000183111057f * (fTemp472 - fTemp94)) + ((0.0377819166f * (fTemp498 - fTemp203)) + ((0.0180669576f * (fTemp346 + fTemp470)) + ((0.00100711081f * fTemp787) + ((0.004852443f * fTemp261) + ((0.00518814661f * fTemp305) + ((0.00418103579f * fTemp284) + ((0.00399792474f * fTemp292) + ((0.00381481368f * fTemp278) + ((0.00341807306f * fTemp310) + ((0.00558488723f * fTemp264) + (fTemp722 + ((0.00604266487f * fTemp325) + ((0.00543229468f * fTemp340) + ((0.00500503555f * fTemp37) + ((0.00439466536f * fTemp45) + (fTemp747 + (fTemp723 + ((0.00280770287f * fTemp67) + ((0.00430310983f * fTemp43) + ((0.00463881344f * fTemp271) + ((0.00393688772f * fTemp96) + ((0.00683614612f * fTemp323) + ((0.00863673817f * fTemp46) + ((0.00958281197f * fTemp110) + (fTemp762 + ((0.00497451704f * fTemp3) + ((0.00628681295f * fTemp400) + ((0.00784325693f * fTemp401) + ((0.00778221991f * fTemp38) + ((0.00668355357f * fTemp168) + ((0.0045167394f * fTemp365) + ((0.00488296151f * fTemp170) + ((0.0019531846f * fTemp133) + ((0.00180059206f * fTemp247) + ((0.000396740623f * fTemp80) + ((0.00103762932f * fTemp104) + ((0.00454725791f * fTemp298) + ((0.00277718436f * fTemp30) + ((0.00665303506f * fTemp295) + ((0.0061342204f * fTemp171) + ((0.00149540696f * fTemp173) + ((9.15555283e-05f * fTemp371) + ((0.000274666585f * fTemp42) + ((3.05185094e-05f * fTemp514) + ((0.00817896053f * fTemp195) + ((0.0141605884f * fTemp196) + ((0.0161442924f * fTemp469) + ((0.0166631062f * fTemp154) + ((0.0119937742f * fTemp471) + ((0.0105288858f * fTemp197) + ((0.01617481f * fTemp198) + ((0.0122684408f * fTemp199) + ((0.0090334788f * fTemp200) + ((0.00692770164f * fTemp58) + ((0.000213629566f * fTemp478) + ((0.0123905148f * fTemp397) + ((0.0350657664f * fTemp483) + ((0.0570390932f * fTemp484) + ((0.0607928708f * fTemp396) + ((0.0346995443f * fTemp485) + ((0.0345164351f * fTemp207) + ((0.0506912433f * fTemp208) + ((0.0450148024f * fTemp135) + ((0.0173955504f * fTemp490) + ((0.0174565874f * fTemp217) + ((0.0579241328f * fTemp218) + ((0.0853907913f * fTemp493) + ((0.103732415f * fTemp495) + ((0.104525894f * fTemp496) + ((0.0802331641f * fTemp497) + ((0.0111392559f * fTemp223) + ((0.0717490166f * fTemp224) + ((0.123172708f * fTemp22) + ((0.11224708f * fTemp502) + ((0.02252266f * fTemp503) + ((0.0305795465f * fTemp226) + (((((fTemp508 + (((0.178716391f * fTemp0) + (0.454542667f * fTemp506)) + (0.818811595f * fTemp507))) + (0.769524217f * fTemp510)) + (0.211066008f * fTemp229)) + (0.0321054719f * fTemp234)) + (0.0390026569f * fTemp227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00271614734f * (fTemp1 - (fTemp180 - fTemp349)))) - ((0.00537125766f * (fTemp457 - fTemp302)) + ((0.00433362834f * (fTemp373 - fTemp318)) + ((0.00402844325f * (fTemp425 - fTemp324)) + ((0.00396740623f * (fTemp36 - fTemp330)) + ((0.00360118411f * (fTemp407 - fTemp304)) + ((0.00311288796f * (fTemp288 - fTemp332)) + ((0.00247199927f * (fTemp85 - fTemp31)) + ((0.00241096225f * (fTemp9 - fTemp333)) + ((0.00231940672f * (fTemp406 - fTemp262)) + ((0.00320444349f * (fTemp167 - fTemp34)) + ((0.0058290353f * (fTemp409 - fTemp311)) + ((0.00494399853f * (fTemp376 - fTemp252)) + ((0.00329599902f * (fTemp363 - fTemp62)) + ((0.000976592302f * (fTemp89 - fTemp72)) + ((0.00198370311f * (fTemp98 - fTemp79)) + ((0.00335703604f * (fTemp424 - fTemp293)) + ((0.00366222113f * (fTemp17 - fTemp160)) + ((0.00915555283f * (fTemp437 - fTemp287)) + ((0.000244148076f * (fTemp348 - fTemp161)) + ((0.000854518265f * (fTemp399 + (fTemp103 + (fTemp405 + fTemp375)))) + ((0.00482192449f * (fTemp178 - fTemp322)) + ((0.000610370189f * (fTemp63 + (fTemp314 + fTemp53))) + ((0.00326548051f * (fTemp99 - fTemp73)) + ((0.00415051728f * (fTemp447 - fTemp123)) + ((0.0042115543f * (fTemp426 - fTemp132)) + ((0.000152592547f * (fTemp140 - fTemp739)) + ((0.000671407208f * (fTemp56 - (fTemp131 - (fTemp92 + fTemp12)))) + ((0.00054933317f * (fTemp29 - fTemp306)) + ((0.000427259132f * (fTemp108 - (fTemp57 - (fTemp126 + (fTemp136 + fTemp70))))) + ((0.000305185094f * (fTemp315 + fTemp13)) + ((0.000488296151f * (fTemp361 + (fTemp32 + fTemp5))) + ((0.00177007355f * (fTemp403 + fTemp258)) + ((0.00152592547f * (fTemp421 + fTemp107)) + ((0.00115970336f * (fTemp179 + fTemp243)) + ((0.000640888698f * (fTemp49 + fTemp679)) + ((0.000701925717f * (fTemp194 + fTemp327)) + ((0.00216681417f * (fTemp382 + fTemp139)) + ((0.00234992523f * (fTemp26 + fTemp289)) + ((0.00286873989f * (fTemp448 + fTemp379)) + ((0.00265511032f * (fTemp281 + fTemp301)) + ((0.00369273964f * (fTemp417 + fTemp52)) + ((0.00714133121f * (fTemp431 + fTemp390)) + ((0.00204474013f * fTemp868) + ((0.0104678487f * (fTemp458 + fTemp522)) + ((0.00802636798f * (fTemp499 + fTemp328)) + ((0.00146488845f * (fTemp454 + fTemp77)) + ((0.00988799706f * fTemp853) + ((0.00427259132f * fTemp844) + ((0.00897244178f * fTemp776) + ((0.00201422162f * fTemp590) + ((0.00143436994f * fTemp119) + (fTemp755 + ((0.00189214759f * fTemp354) + ((0.00244148076f * fTemp267) + ((0.000885036774f * fTemp359) + ((0.000335703604f * fTemp59) + ((0.000457777642f * fTemp290) + (fTemp869 + ((0.00140385143f * fTemp127) + ((0.000946073793f * fTemp334) + ((0.00057985168f * fTemp40) + ((0.0019226661f * fTemp15) + ((0.00347911008f * fTemp81) + (fTemp714 + ((0.0038758507f * fTemp66) + ((0.00424207281f * fTemp250) + ((0.00476088747f * fTemp4) + ((0.00534073915f * fTemp87) + ((0.0057985168f * fTemp383) + ((0.00567644276f * fTemp411) + ((0.00643940549f * fTemp412) + ((0.00717184972f * fTemp413) + ((0.00753807183f * fTemp414) + ((0.00601214636f * fTemp415) + ((0.00460829493f * fTemp416) + ((0.000823999755f * fTemp377) + ((0.00866725668f * fTemp432) + ((0.0104983672f * fTemp434) + ((0.0104373302f * fTemp435) + ((0.00979644153f * fTemp436) + ((0.00875881221f * fTemp438) + ((0.00833155308f * fTemp439) + ((0.00772118289f * fTemp381) + (fTemp712 + ((0.00814844202f * fTemp111) + ((0.00967436749f * fTemp294) + ((0.0109866634f * fTemp440) + ((0.0110171819f * fTemp392) + ((0.0102542192f * fTemp441) + ((0.0101931822f * fTemp443) + ((0.00997955259f * fTemp175) + ((0.00766014587f * fTemp444) + ((0.00756859034f * fTemp445) + ((0.00720236823f * fTemp300) + ((0.00653096102f * fTemp116) + ((0.00595110934f * fTemp118) + ((0.00442518387f * fTemp446) + ((0.00576799829f * fTemp449) + ((0.00106814783f * fTemp452) + ((0.00671407208f * fTemp364) + ((0.00888088625f * fTemp394) + ((0.0113528855f * fTemp459) + ((0.0121768853f * fTemp460) + ((0.0137028107f * fTemp461) + ((0.0155034028f * fTemp462) + ((0.0160832554f * fTemp463) + ((0.0142521439f * fTemp464) + ((0.0111087374f * fTemp389) + ((0.00906399731f * fTemp465) + ((0.0102237007f * fTemp466) + ((0.0106509598f * fTemp467) + ((0.011322367f * fTemp468) + ((0.0138859218f * fTemp368) + ((0.0173039958f * fTemp181) + ((0.0172124393f * fTemp86) + ((0.0124820704f * fTemp367) + ((0.0071108127f * fTemp141) + ((0.00610370189f * fTemp182) + ((0.00952177495f * fTemp183) + ((0.0136417737f * fTemp184) + ((0.016235847f * fTemp185) + ((0.0186162908f * fTemp186) + ((0.0229194015f * fTemp187) + ((0.0282906592f * fTemp188) + ((0.0327463597f * fTemp189) + ((0.0349436924f * fTemp151) + ((0.0334788039f * fTemp190) + ((0.0281685852f * fTemp191) + ((0.0198370311f * fTemp192) + ((0.0107119968f * fTemp193) + ((0.0124515519f * fTemp473) + ((0.0193792544f * fTemp474) + ((0.0165105145f * fTemp475) + ((0.00305185094f * fTemp476) + ((0.00589007232f * fTemp479) + ((0.0117496261f * fTemp480) + ((0.0187078472f * fTemp481) + ((0.0268868078f * fTemp201) + ((0.035828732f * fTemp202) + ((0.0315561406f * fTemp204) + ((0.0184636991f * fTemp35) + ((0.019287698f * fTemp486) + ((0.0745872408f * fTemp487) + ((0.105227821f * fTemp488) + ((0.10199286f * fTemp489) + ((0.0782189369f * fTemp153) + ((0.0411694683f * fTemp205) + ((0.00131229591f * fTemp206) + ((0.0206915494f * fTemp491) + ((0.0604266487f * fTemp492) + ((0.0900906399f * fTemp209) + ((0.105197303f * fTemp210) + ((0.108005002f * fTemp211) + ((0.107058935f * fTemp212) + ((0.109683521f * fTemp213) + ((0.106173895f * fTemp214) + ((0.0814233869f * fTemp215) + ((0.0332956947f * fTemp216) + ((0.0415356904f * fTemp500) + ((0.0543229468f * fTemp501) + ((0.0469069481f * fTemp219) + ((0.0335703604f * fTemp220) + ((0.0273445845f * fTemp221) + ((0.01803644f * fTemp222) + ((0.0932645649f * fTemp504) + ((0.16101566f * fTemp505) + ((0.143620104f * fTemp512) + ((0.0503250211f * fTemp225) + ((0.0415051728f * fTemp228) + ((0.126499221f * fTemp241) + ((0.163945436f * fTemp16) + ((0.120975375f * fTemp391) + ((0.0470595434f * fTemp240) + ((0.0220343638f * fTemp237) + ((((((0.330393374f * fTemp230) + (0.58522296f * fTemp231)) + (0.501449645f * fTemp232)) + (0.234107479f * fTemp511)) + (0.0279244371f * fTemp233)) + (0.0239570308f * fTemp236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow52 ? (iSlow56 ? (iSlow58 ? (((0.000305185094f * (fTemp1 + (fTemp518 - fTemp305))) + ((0.000488296151f * (fTemp309 - fTemp242)) + ((0.000793481246f * (fTemp208 - fTemp244)) + ((0.000213629566f * (fTemp212 + fTemp251)) + ((0.00119022187f * (fTemp260 + (fTemp357 - fTemp283))) + ((0.00122074038f * (fTemp348 + fTemp255)) + ((0.000427259132f * (fTemp261 - (fTemp279 - (fTemp48 - (fTemp149 - fTemp399))))) + ((0.00115970336f * (fTemp270 + (fTemp59 + fTemp8))) + ((0.001617481f * (fTemp34 + fTemp318)) + ((0.00152592547f * (fTemp268 + fTemp284)) + ((0.00125125889f * (fTemp314 + fTemp324)) + ((0.000518814661f * (fTemp330 + (fTemp135 - fTemp321))) + ((0.000183111057f * (fTemp304 - (fTemp340 - (fTemp211 + fTemp619)))) + ((0.000122074038f * (fTemp310 + (fTemp350 - (fTemp514 - (fTemp492 + (fTemp217 + (fTemp218 + (fTemp495 + (fTemp225 + (fTemp227 + (fTemp241 + (fTemp239 + fTemp16)))))))))))) + ((0.000732444227f * (fTemp14 + (fTemp136 + fTemp6))) + ((0.000152592547f * (fTemp18 + (fTemp266 + (fTemp274 + (fTemp491 + (fTemp215 + (fTemp216 + (fTemp228 + fTemp226)))))))) + ((0.0025940733f * (fTemp25 + (fTemp359 + fTemp62))) + ((0.00302133244f * (fTemp28 + (fTemp37 + (fTemp404 + fTemp60)))) + ((0.00280770287f * (fTemp31 + (fTemp333 + (fTemp125 + fTemp109)))) + ((0.00317392498f * (fTemp256 + (fTemp124 + fTemp43))) + ((0.00305185094f * (fTemp130 + fTemp319)) + ((0.000823999755f * (fTemp254 + (fTemp332 - (fTemp339 - (fTemp351 + fTemp29))))) + ((0.0022583697f * (fTemp80 - fTemp253)) + ((0.00360118411f * (fTemp365 - fTemp264)) + ((0.00427259132f * fTemp865) + ((0.00216681417f * (fTemp51 + (fTemp144 + fTemp358))) + ((0.00274666585f * (fTemp91 + fTemp54)) + ((0.00296029542f * (fTemp312 + (fTemp148 + fTemp150))) + ((0.00299081393f * (fTemp95 + fTemp307)) + ((0.003234962f * (fTemp288 + fTemp33)) + ((0.00393688772f * (fTemp68 + fTemp646)) + ((0.00369273964f * (fTemp345 + (fTemp132 + fTemp78))) + ((0.00329599902f * (fTemp246 + (fTemp370 + fTemp56))) + ((0.00283822138f * (fTemp519 + fTemp2)) + ((0.00253303628f * (fTemp303 + (fTemp67 - (fTemp81 - fTemp155)))) + ((0.00292977691f * (fTemp108 + fTemp156)) + ((0.00277718436f * (fTemp157 + (fTemp88 + (fTemp402 + (fTemp127 + fTemp85))))) + ((0.00244148076f * (fTemp164 + fTemp72)) + ((0.00231940672f * (fTemp75 + (fTemp79 + (fTemp372 + fTemp401)))) + ((0.00241096225f * (fTemp438 + fTemp349)) + ((0.0028992584f * (fTemp452 + fTemp83)) + ((0.00262459181f * (fTemp3 + fTemp101)) + ((0.00198370311f * (fTemp10 + fTemp160)) + ((0.00210577715f * (fTemp105 + fTemp836)) + ((0.00366222113f * (fTemp352 + fTemp323)) + ((0.00436414685f * (fTemp104 + fTemp46)) + ((0.00454725791f * (fTemp110 + (fTemp439 + fTemp329))) + ((0.00396740623f * (fTemp71 + (fTemp27 + (fTemp267 + fTemp50)))) + ((0.00418103579f * (fTemp20 + fTemp163)) + ((0.000701925717f * (fTemp207 + fTemp44)) + ((0.00204474013f * (fTemp272 + (fTemp248 + fTemp137))) + ((0.00234992523f * (fTemp322 - (fTemp440 - fTemp90))) + ((0.0045167394f * (fTemp165 + (fTemp131 + (fTemp243 - (fTemp420 - fTemp378))))) + ((0.00521866512f * (fTemp102 + fTemp166)) + ((0.00534073915f * (fTemp415 + fTemp363)) + ((0.00479140598f * (fTemp167 + (fTemp139 + fTemp334))) + ((0.00350962859f * (fTemp379 + fTemp74)) + ((0.00177007355f * (fTemp169 + (fTemp64 + fTemp343))) + ((0.00555436872f * (fTemp97 + fTemp120)) + ((0.00308236945f * (fTemp123 + (fTemp126 + fTemp273))) + ((0.00341807306f * fTemp866) + ((0.00265511032f * (fTemp140 - (fTemp17 - fTemp335))) + ((0.00457777642f * (fTemp449 + fTemp275)) + ((0.00372325815f * (fTemp114 + fTemp366)) + ((0.00167851802f * (fTemp371 + fTemp298)) + ((0.00140385143f * (fTemp295 + fTemp374)) + ((0.00326548051f * (fTemp301 + fTemp172)) + ((0.00424207281f * (fTemp259 + fTemp173)) + ((0.00286873989f * (fTemp133 + (fTemp281 + fTemp134))) + ((0.00500503555f * (fTemp313 + (fTemp376 + fTemp336))) + ((0.0038758507f * (fTemp5 + (fTemp49 + fTemp317))) + ((0.00338755455f * (fTemp450 + fTemp128)) + ((0.00103762932f * (fTemp15 + fTemp316)) + ((0.000274666585f * (fTemp258 - (fTemp390 + fTemp405))) + ((0.00155644398f * (fTemp380 + fTemp82)) + ((0.00820947904f * (fTemp180 + fTemp9)) + ((0.00915555283f * (fTemp389 + fTemp406)) + ((0.00692770164f * (fTemp469 - fTemp409)) + ((0.000762962736f * (fTemp457 - fTemp89)) + ((0.000244148076f * (fTemp490 + fTemp206)) + ((0.000976592302f * fTemp724) + ((0.00137333293f * fTemp265) + ((0.00143436994f * fTemp7) + ((0.00100711081f * fTemp11) + ((0.00357066561f * fTemp262) + ((0.00595110934f * fTemp41) + ((0.00720236823f * fTemp45) + ((0.0057985168f * fTemp280) + ((0.00439466536f * fTemp69) + ((0.00402844325f * fTemp61) + ((0.00250251777f * fTemp293) + ((0.00247199927f * fTemp76) + ((0.00222785119f * fTemp159) + ((0.00415051728f * fTemp287) + ((0.00433362834f * fTemp113) + ((0.00491348002f * fTemp117) + ((0.00527970213f * fTemp161) + ((0.0051576281f * fTemp119) + ((0.00335703604f * fTemp400) + ((0.00057985168f * fTemp38) + ((0.0042115543f * fTemp73) + ((0.00381481368f * fTemp170) + ((0.00375377666f * fTemp129) + ((0.00238044374f * fTemp247) + ((0.00213629566f * fTemp115) + ((0.00405896176f * fTemp84) + ((0.000915555283f * fTemp145) + ((0.00186162908f * fTemp30) + (fTemp769 + ((0.00442518387f * fTemp103) + ((0.00256355479f * fTemp282) + ((0.00531022064f * fTemp147) + ((0.00180059206f * fTemp12) + ((0.00164799951f * fTemp361) + ((0.00347911008f * fTemp107) + ((0.00189214759f * fTemp375) + ((0.00201422162f * fTemp70) + ((0.00170903653f * fTemp32) + ((0.000610370189f * fTemp92) + ((0.004852443f * fTemp98) + ((0.00543229468f * fTemp289) + ((0.0067751091f * fTemp93) + ((0.00836207159f * fTemp382) + ((0.00524918362f * fTemp355) + ((0.00497451704f * fTemp100) + ((0.00601214636f * fTemp99) + (fTemp644 + ((0.0120242927f * fTemp417) + ((0.0145878475f * fTemp342) + ((0.0158696249f * fTemp36) + ((0.00851466414f * fTemp122) + ((0.00219733268f * fTemp418) + ((0.00933866389f * fTemp65) + ((0.00811792351f * fTemp360) + ((0.00894192327f * fTemp106) + ((0.0101016266f * fTemp377) + ((0.008087405f * fTemp530) + ((0.000366222113f * fTemp94) + ((0.0117496261f * fTemp175) + ((0.0238349568f * fTemp176) + ((0.0246894751f * fTemp328) + ((0.0157475509f * fTemp444) + ((0.0175481439f * fTemp445) + ((0.0229499191f * fTemp300) + ((0.030915251f * fTemp116) + ((0.0363780633f * fTemp118) + ((0.0122684408f * fTemp177) + ((0.00946073793f * fTemp447) + ((0.0282296222f * fTemp448) + ((0.0278939176f * fTemp77) + ((0.0176091809f * fTemp179) + ((0.0100100711f * fTemp385) + ((0.0151371807f * fTemp373) + ((0.0175176244f * fTemp121) + ((0.0224005859f * fTemp453) + ((0.0093691824f * fTemp454) + ((0.0108035523f * fTemp455) + ((0.0199285876f * fTemp152) + ((0.0234992523f * fTemp362) + ((0.0148625141f * fTemp456) + ((0.0230414756f * fTemp462) + ((0.0622577593f * fTemp463) + ((0.0462355427f * fTemp464) + ((0.0154423658f * fTemp141) + ((0.0396130271f * fTemp182) + ((0.0214545131f * fTemp183) + ((0.0382702127f * fTemp184) + ((0.054933317f * fTemp185) + ((0.0738853142f * fTemp186) + ((0.074648276f * fTemp187) + ((0.0494094677f * fTemp188) + ((0.0184331797f * fTemp189) + ((0.0879238248f * fTemp194) + ((0.11246071f * fTemp195) + ((0.0646076873f * fTemp196) + ((0.0526444279f * fTemp58) + ((0.155308694f * fTemp477) + ((0.213110745f * fTemp478) + ((0.014557329f * fTemp479) + ((0.422315121f * fTemp203) + (fTemp204 + ((0.941373944f * fTemp35) + ((0.46040222f * fTemp482) + ((0.111484118f * fTemp397) + ((0.0126956999f * fTemp484) + (0.02438429f * fTemp483)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00054933317f * (fTemp245 + (fTemp516 - fTemp42))) + ((0.00109866634f * (fTemp47 + fTemp276)) + ((0.00134281442f * (fTemp291 + (fTemp302 - (fTemp337 + (fTemp24 + (fTemp315 + fTemp21)))))) + ((0.00146488845f * (fTemp296 + (fTemp297 - (fTemp138 + fTemp146)))) + ((0.000946073793f * (fTemp277 - (fTemp353 + fTemp292))) + ((3.05185094e-05f * (fTemp331 + (fTemp23 - (fTemp498 + (fTemp500 + (fTemp221 + (fTemp512 + (fTemp232 + fTemp564)))))))) + ((9.15555283e-05f * (fTemp278 + (fTemp427 - (fTemp209 + (fTemp210 + (fTemp493 + (fTemp496 + (fTemp499 + (fTemp501 + (fTemp224 + (fTemp502 + (fTemp503 + (fTemp505 + (fTemp391 + (fTemp240 + (fTemp238 + (fTemp237 + fTemp795))))))))))))))))) + ((0.00271614734f * (fTemp311 - (fTemp320 + (fTemp13 + fTemp347)))) + ((0.00106814783f * (fTemp252 - (fTemp290 + fTemp326))) + ((0.00320444349f * (fTemp407 - fTemp271)) + ((0.00268562883f * (fTemp428 - fTemp96)) + ((0.00466933195f * (fTemp294 - fTemp53)) + ((0.00158696249f * (fTemp299 - fTemp354)) + ((0.0012817774f * (fTemp26 - fTemp142)) + ((0.000335703604f * (fTemp205 - fTemp40)) + ((0.00564592425f * (fTemp4 + fTemp52)) + ((0.0106814783f * (fTemp369 + fTemp412)) + ((0.0140385143f * (fTemp522 - fTemp39)) + (((0.000640888698f * fTemp269) + ((0.000671407208f * fTemp19) + (((0.00207525864f * fTemp356) + ((0.00131229591f * fTemp384) + ((0.00399792474f * fTemp408) + ((0.00589007232f * fTemp66) + ((0.00592059083f * fTemp250) + ((0.00503555406f * fTemp87) + ((0.00656147953f * fTemp383) + ((0.00698873866f * fTemp410) + ((0.00753807183f * fTemp386) + ((0.00866725668f * fTemp388) + ((0.0100711081f * fTemp411) + ((0.00949125644f * fTemp413) + ((0.00476088747f * fTemp414) + ((0.00918607134f * fTemp421) + (fTemp704 + ((0.0054933317f * fTemp422) + ((0.0106204413f * fTemp423) + ((0.0185247362f * fTemp424) + ((0.0222785119f * fTemp425) + ((0.0126651814f * fTemp426) + ((0.00183111057f * fTemp338) + ((0.0116885891f * fTemp429) + (fTemp862 + ((0.0177007355f * fTemp431) + ((0.0235908087f * fTemp432) + ((0.0299996957f * fTemp433) + ((0.032227546f * fTemp434) + ((0.0298471022f * fTemp435) + ((0.0207525864f * fTemp436) + ((0.00619525742f * fTemp437) + ((0.00848414563f * fTemp381) + ((0.0177617725f * fTemp344) + ((0.0147709586f * fTemp111) + ((0.012878811f * fTemp392) + ((0.0288705099f * fTemp441) + ((0.0397045799f * fTemp442) + ((0.0343943611f * fTemp443) + ((0.0560014658f * fTemp178) + ((0.111941896f * fTemp249) + ((0.0995513797f * fTemp387) + ((0.036774803f * fTemp446) + ((0.000457777642f * fTemp451) + ((0.0315866582f * fTemp364) + ((0.0766624957f * fTemp394) + ((0.112094484f * fTemp458) + ((0.118350782f * fTemp459) + ((0.0989410058f * fTemp460) + ((0.0462660603f * fTemp461) + ((0.0440076925f * fTemp393) + ((0.0787682757f * fTemp465) + ((0.0923795253f * fTemp466) + ((0.0784020498f * fTemp467) + ((0.0781273842f * fTemp468) + ((0.0773033872f * fTemp368) + ((0.061830502f * fTemp181) + ((0.0312204361f * fTemp86) + ((0.0123905148f * fTemp367) + ((0.064271979f * fTemp151) + ((0.093081452f * fTemp190) + ((0.113040559f * fTemp191) + ((0.128879666f * fTemp192) + ((0.0397351012f * fTemp193) + ((0.0960417464f * fTemp154) + ((0.187810913f * fTemp470) + ((0.142948702f * fTemp346) + ((0.0607928708f * fTemp471) + ((0.0255745109f * fTemp472) + ((0.0963469371f * fTemp473) + ((0.0692770183f * fTemp474) + ((0.147373885f * fTemp475) + ((0.101565599f * fTemp476) + ((0.108584858f * fTemp197) + ((0.134952843f * fTemp198) + ((0.135837883f * fTemp199) + ((0.0660725757f * fTemp200) + ((0.175115213f * fTemp480) + ((0.487746805f * fTemp481) + ((0.577318668f * fTemp201) + ((0.223792225f * fTemp202) + ((0.0109256264f * fTemp396) + ((0.027741326f * fTemp485) + ((0.0345469527f * fTemp486) + (fTemp785 + ((0.0202337727f * fTemp488) + ((0.0019226661f * fTemp153) + (0.00833155308f * fTemp489)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00411999878f * fTemp325)))) + (0.000854518265f * fTemp398)))))))))))))))))))) + (6.10370189e-05f * (fTemp513 - (fTemp168 - (fTemp327 - (fTemp497 + (fTemp219 + (fTemp220 + (fTemp222 + (fTemp223 + (fTemp22 + (fTemp504 + (fTemp234 + (fTemp233 + (fTemp511 + (fTemp231 + fTemp675))))))))))))))))) : (((0.000152592547f * (fTemp1 + (fTemp24 - (fTemp80 + fTemp365)))) + ((0.00234992523f * (fTemp242 + (fTemp424 + fTemp321))) + ((0.00433362834f * (fTemp245 + (fTemp221 + fTemp311))) + ((0.00436414685f * (fTemp260 - (fTemp72 - fTemp252))) + ((0.00405896176f * (fTemp481 + fTemp255)) + ((0.00555436872f * (fTemp283 - (fTemp384 - fTemp114))) + ((0.00726340525f * (fTemp362 + fTemp297)) + ((0.00750755332f * (fTemp277 - (fTemp382 - fTemp119))) + ((0.00595110934f * (fTemp309 - (fTemp112 - fTemp160))) + ((0.00173955504f * (fTemp330 + (fTemp351 + fTemp54))) + ((0.00262459181f * (fTemp278 - (fTemp335 + fTemp165))) + ((0.00317392498f * (fTemp285 - (fTemp127 + fTemp19))) + ((0.00350962859f * (fTemp161 + fTemp304)) + ((0.00170903653f * (fTemp411 + fTemp332)) + ((0.00357066561f * (fTemp344 + fTemp333)) + ((0.0035401471f * (fTemp256 - (fTemp88 + (fTemp412 + fTemp104)))) + ((0.00329599902f * (fTemp399 + fTemp262)) + ((0.00216681417f * (fTemp96 + fTemp279)) + ((0.00265511032f * fTemp863) + ((0.00564592425f * (fTemp41 - (fTemp248 - fTemp320))) + ((0.00100711081f * (fTemp21 - (fTemp100 - fTemp5))) + ((0.00103762932f * (fTemp51 + (fTemp416 - fTemp107))) + ((0.00430310983f * (fTemp60 + (fTemp326 - fTemp75))) + ((0.00546281319f * (fTemp307 + (fTemp360 - fTemp349))) + ((0.00622577593f * (fTemp68 + fTemp33)) + ((0.00143436994f * (fTemp61 - (fTemp65 + fTemp348))) + ((0.00592059083f * fTemp864) + ((0.00878933072f * (fTemp467 - fTemp303)) + ((0.00469985045f * (fTemp379 - fTemp79)) + ((0.00653096102f * (fTemp425 - fTemp83)) + ((0.000885036774f * (fTemp403 - fTemp91)) + ((0.00482192449f * (fTemp101 - (fTemp366 + fTemp46))) + ((0.00057985168f * (fTemp166 - fTemp117)) + ((0.00106814783f * (fTemp359 + fTemp167)) + ((0.0140995514f * (fTemp470 - fTemp120)) + ((0.000213629566f * (fTemp247 - fTemp78)) + ((0.001617481f * (fTemp147 - fTemp132)) + ((0.000274666585f * (fTemp170 - (fTemp140 + (fTemp422 - fTemp404)))) + ((0.000396740623f * (fTemp290 - fTemp56)) + ((0.00637836847f * (fTemp301 - fTemp402)) + ((0.00701925717f * (fTemp138 - fTemp358)) + ((0.00213629566f * (fTemp263 + (fTemp89 + fTemp128))) + ((0.000610370189f * (fTemp361 + fTemp29)) + ((0.00186162908f * (fTemp274 + fTemp258)) + ((0.00735496078f * (fTemp468 - fTemp343)) + ((0.000701925717f * (fTemp381 - fTemp42)) + ((0.000671407208f * (fTemp408 + fTemp99)) + ((0.00439466536f * (fTemp121 + fTemp81)) + ((0.0142826624f * (fTemp392 + fTemp410)) + ((0.00842310861f * (fTemp441 + fTemp111)) + (((((((0.00457777642f * fTemp269) + ((0.00503555406f * fTemp276) + ((0.00610370189f * fTemp291) + ((0.00668355357f * fTemp296) + ((0.00476088747f * fTemp270) + ((0.00347911008f * fTemp318) + ((0.00177007355f * fTemp324) + (fTemp860 + ((0.00274666585f * fTemp518) + ((0.00271614734f * fTemp28) + ((0.00332651753f * fTemp31) + ((0.00280770287f * fTemp319) + ((0.00238044374f * fTemp34) + ((0.00372325815f * fTemp325) + ((0.00537125766f * fTemp37) + ((0.00573747978f * fTemp45) + ((0.0058290353f * fTemp280) + ((0.00518814661f * fTemp266) + ((0.00335703604f * fTemp47) + ((0.00292977691f * fTemp312) + ((0.006469924f * fTemp76) + ((0.00680562761f * fTemp159) + (fTemp584 + (fTemp631 + (fTemp855 + ((0.000335703604f * fTemp137) + ((0.000244148076f * fTemp10) + ((0.00296029542f * fTemp354) + ((0.00531022064f * fTemp142) + ((0.00411999878f * fTemp148) + ((0.00460829493f * fTemp131) + ((0.00164799951f * fTemp317) + ((0.00219733268f * fTemp90) + ((0.00201422162f * fTemp316) + ((0.00720236823f * fTemp281) + ((0.00268562883f * fTemp407) + ((0.00793481246f * fTemp87) + ((0.013000885f * fTemp383) + ((0.0152287362f * fTemp409) + ((0.00463881344f * fTemp342) + ((0.00366222113f * fTemp36) + ((0.0116275521f * fTemp106) + ((0.0153508103f * fTemp377) + ((0.0155339213f * fTemp530) + ((0.0121158483f * fTemp95) + ((0.00686666463f * fTemp94) + ((0.0125125889f * fTemp426) + ((0.019409772f * fTemp17) + ((0.0255745109f * fTemp338) + ((0.0296334736f * fTemp427) + ((0.0316782147f * fTemp428) + ((0.0325327329f * fTemp429) + ((0.0321054719f * fTemp430) + ((0.0300912503f * fTemp431) + ((0.0263679922f * fTemp432) + ((0.0215460677f * fTemp433) + ((0.0158696249f * fTemp434) + ((0.009704886f * fTemp435) + ((0.00390636921f * fTemp436) + ((0.0163579211f * fTemp440) + ((0.0101931822f * fTemp300) + ((0.0190740693f * fTemp116) + ((0.0255134739f * fTemp118) + ((0.0291451775f * fTemp177) + ((0.0281685852f * fTemp178) + (fTemp669 + ((0.0123905148f * fTemp387) + ((0.00604266487f * fTemp180) + ((0.0196844395f * fTemp376) + ((0.0338145085f * fTemp449) + ((0.0429395437f * fTemp450) + ((0.0440992452f * fTemp451) + ((0.0386059135f * fTemp452) + ((0.0290841404f * fTemp385) + ((0.0172429588f * fTemp373) + ((0.019531846f * fTemp456) + ((0.0299691763f * fTemp457) + ((0.0372630991f * fTemp364) + ((0.0422681347f * fTemp394) + ((0.045594655f * fTemp458) + ((0.0458693206f * fTemp459) + ((0.0415662117f * fTemp460) + ((0.0342112482f * fTemp461) + ((0.0218817722f * fTemp463) + ((0.0175786614f * fTemp464) + ((0.0132450331f * fTemp389) + ((0.00946073793f * fTemp393) + ((0.00766014587f * fTemp465) + ((0.00805688649f * fTemp466) + ((0.0344553962f * fTemp346) + ((0.0576799847f * fTemp471) + ((0.0792870894f * fTemp472) + ((0.0928067863f * fTemp473) + ((0.0956144929f * fTemp474) + ((0.0903958231f * fTemp475) + ((0.0684224963f * fTemp197) + ((0.0509659126f * fTemp198) + ((0.0293282885f * fTemp199) + ((0.00900296029f * fTemp200) + ((0.019287698f * fTemp201) + ((0.0347605832f * fTemp202) + ((0.0513321348f * fTemp203) + ((0.0733359754f * fTemp204) + ((0.101138338f * fTemp35) + ((0.125675216f * fTemp482) + ((0.136814475f * fTemp397) + ((0.129459515f * fTemp483) + ((0.103976563f * fTemp484) + ((0.0622577593f * fTemp396) + ((0.00692770164f * fTemp485) + ((0.0554521307f * fTemp207) + ((0.105624564f * fTemp208) + ((0.11893063f * fTemp135) + ((0.0896633789f * fTemp490) + ((0.0257881414f * fTemp491) + ((0.0478835404f * fTemp216) + ((0.120975375f * fTemp217) + ((0.177556694f * fTemp218) + ((0.206030458f * fTemp493) + ((0.204657122f * fTemp495) + ((0.175695062f * fTemp496) + ((0.119541004f * fTemp497) + ((((((((((fTemp510 + ((((0.146397293f * fTemp0) + (0.388805807f * fTemp506)) + (0.680013418f * fTemp507)) + (0.906064034f * fTemp508))) + (0.948912024f * fTemp229)) + (0.746177554f * fTemp230)) + (0.401593059f * fTemp231)) + (0.00479140598f * fTemp391)) + (0.047090061f * fTemp22)) + (0.0942716748f * fTemp224)) + (0.102450639f * fTemp223)) + (0.0670186505f * fTemp222)) + (0.0463576168f * fTemp498)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00415051728f * fTemp265)) + (0.00454725791f * fTemp254)) + (0.00448622089f * fTemp251)) + (0.00393688772f * fTemp398)) + (0.00326548051f * fTemp244)))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.0042115543f * (fTemp130 - fTemp261)) + ((0.00759910885f * (fTemp62 - fTemp302)) + ((0.00241096225f * (fTemp339 - fTemp284)) + ((0.00210577715f * (fTemp250 - fTemp331)) + ((0.00338755455f * (fTemp447 - fTemp310)) + ((0.000457777642f * (fTemp273 - fTemp7)) + ((0.000793481246f * (fTemp337 - (fTemp39 - fTemp295))) + ((0.00204474013f * (fTemp8 + (fTemp50 + (fTemp154 - fTemp4)))) + ((0.00308236945f * (fTemp66 + fTemp11)) + ((0.00363170262f * (fTemp14 + (fTemp18 - (fTemp417 - fTemp125)))) + ((0.0012817774f * (fTemp23 - (fTemp442 - fTemp438))) + ((0.00158696249f * (fTemp52 - fTemp25)) + ((0.00231940672f * (fTemp53 - fTemp253)) + ((0.00314340647f * (fTemp179 - fTemp286)) + ((0.00488296151f * (fTemp74 - fTemp340)) + ((0.00149540696f * (fTemp123 - fTemp48)) + ((0.0054933317f * (fTemp289 - fTemp69)) + ((0.00381481368f * (fTemp246 - fTemp55)) + ((0.00625629444f * (fTemp156 + (fTemp375 + fTemp124))) + ((0.00540177617f * (fTemp443 + fTemp271)) + ((0.00695822015f * (fTemp448 - fTemp305)) + ((0.00183111057f * (fTemp323 + (fTemp27 - fTemp363))) + ((0.0074159978f * (fTemp355 + fTemp287)) + ((0.00402844325f * (fTemp171 + fTemp113)) + ((0.0103152562f * (fTemp257 - fTemp163)) + ((0.0112308115f * (fTemp522 - fTemp164)) + ((0.00762962736f * (fTemp329 - fTemp350)) + ((0.00228888821f * (fTemp371 + fTemp353)) + ((0.0133976256f * (fTemp469 + fTemp268)) + ((0.0119022187f * (fTemp102 + fTemp519)) + ((0.00717184972f * (fTemp77 + fTemp352)) + ((0.00134281442f * (fTemp63 - (fTemp82 - fTemp275))) + ((0.0163274035f * (fTemp30 + fTemp168)) + ((6.10370189e-05f * (fTemp133 - (fTemp115 + (fTemp514 - (fTemp437 + fTemp423))))) + ((0.00491348002f * (fTemp299 - fTemp374)) + ((0.00674459059f * (fTemp85 - (fTemp388 - fTemp15))) + ((0.00662251655f * (fTemp182 + fTemp313)) + ((0.000640888698f * (fTemp445 - fTemp126)) + ((0.0057985168f * (fTemp232 + fTemp93)) + ((0.00244148076f * (fTemp415 + fTemp380)) + ((0.0111087374f * (fTemp477 - fTemp386)) + ((0.003234962f * (fTemp122 - (fTemp368 + fTemp446))) + ((0.0137943663f * (fTemp206 - fTemp294)) + ((0.0271919928f * (fTemp185 - fTemp462)) + ((0.0811181962f * (fTemp205 - fTemp476)) + ((0.00827051606f * fTemp523) + ((0.00131229591f * fTemp345) + ((0.00921658985f * fTemp67) + ((0.00881984923f * fTemp155) + ((0.00769066438f * fTemp347) + ((0.00509659108f * fTemp157) + ((0.00619525742f * fTemp293) + ((0.00631733146f * fTemp43) + ((0.00683614612f * fTemp110) + ((0.00643940549f * fTemp71) + ((0.0165715516f * fTemp272) + ((0.0173650328f * fTemp322) + ((0.0156559963f * fTemp3) + ((0.00897244178f * fTemp400) + ((0.0126041444f * fTemp401) + ((0.0151371807f * fTemp38) + ((0.0164189581f * fTemp169) + ((0.0156254768f * fTemp73) + ((0.00912503432f * fTemp20) + ((0.00112918485f * fTemp129) + ((0.000976592302f * fTemp341) + ((0.000732444227f * fTemp84) + ((0.00576799829f * fTemp370) + ((0.0127567369f * fTemp6) + ((0.0147709586f * fTemp145) + ((0.0160222184f * fTemp146) + ((0.0155644398f * fTemp372) + ((0.0133671071f * fTemp134) + ((0.00967436749f * fTemp306) + ((0.00506607257f * fTemp108) + ((0.00054933317f * fTemp144) + ((0.00704977568f * fTemp172) + ((0.00949125644f * fTemp173) + ((0.011383404f * fTemp103) + ((0.0122684408f * fTemp267) + ((0.0118411817f * fTemp288) + ((0.00991851557f * fTemp150) + ((0.00286873989f * fTemp282) + ((0.00247199927f * fTemp97) + ((0.0101016266f * fTemp259) + ((0.0122074038f * fTemp57) + ((0.0122989593f * fTemp13) + ((0.0103457747f * fTemp12) + ((0.00708029419f * fTemp314) + ((0.00375377666f * fTemp59) + ((0.000122074038f * fTemp315) + ((0.00753807183f * fTemp64) + ((0.00427259132f * fTemp70) + ((0.000488296151f * fTemp136) + ((0.00894192327f * fTemp243) + ((0.0105288858f * fTemp334) + ((0.0106509598f * fTemp49) + ((0.0101321451f * fTemp32) + ((0.00918607134f * fTemp40) + ((0.00778221991f * fTemp92) + ((0.00616473891f * fTemp327) + (fTemp806 + ((0.00408948027f * fTemp405) + ((0.0045167394f * fTemp378) + ((0.00494399853f * fTemp98) + (fTemp711 + ((0.00634784997f * fTemp9) + ((0.0071108127f * fTemp406) + ((0.00399792474f * fTemp26) + ((0.00738547929f * fTemp413) + ((0.00823999755f * fTemp414) + ((0.00607318338f * fTemp390) + ((0.00729392376f * fTemp418) + ((0.0109561449f * fTemp420) + ((0.0140385143f * fTemp421) + ((0.0159306619f * fTemp369) + ((0.0155034028f * fTemp515) + ((0.0125431074f * fTemp149) + ((0.000762962736f * fTemp439) + ((0.0165410321f * fTemp175) + ((0.0198675506f * fTemp176) + ((0.0186162908f * fTemp328) + (fTemp623 + ((0.00628681295f * fTemp453) + ((0.0117496261f * fTemp454) + ((0.0108645894f * fTemp455) + ((0.0038758507f * fTemp152) + ((0.00302133244f * fTemp86) + ((0.00250251777f * fTemp367) + ((0.00299081393f * fTemp141) + ((0.0121768853f * fTemp183) + ((0.0186468102f * fTemp184) + ((0.0382091738f * fTemp186) + ((0.0475783572f * fTemp187) + ((0.0517288744f * fTemp188) + ((0.0504165776f * fTemp189) + ((0.0467238389f * fTemp151) + ((0.0420545079f * fTemp190) + ((0.0357982107f * fTemp191) + ((0.0284432508f * fTemp192) + ((0.022583697f * fTemp193) + ((0.0203558467f * fTemp194) + ((0.0204779208f * fTemp195) + ((0.019470809f * fTemp196) + ((0.00442518387f * fTemp58) + ((0.0141911069f * fTemp478) + ((0.0139469588f * fTemp479) + ((0.00799584948f * fTemp480) + ((0.0538651682f * fTemp486) + ((0.108798489f * fTemp487) + ((0.145847961f * fTemp488) + ((0.154271066f * fTemp489) + ((0.130985439f * fTemp153) + ((0.0547807254f * fTemp492) + ((0.136234626f * fTemp209) + ((0.203161716f * fTemp210) + ((0.238715783f * fTemp211) + ((0.23227638f * fTemp212) + ((0.187902465f * fTemp213) + (fTemp716 + ((0.033600878f * fTemp215) + ((0.0270393994f * fTemp499) + ((0.0810266435f * fTemp500) + ((0.103030488f * fTemp501) + ((0.0925321206f * fTemp219) + ((0.0550859086f * fTemp220) + ((0.0388500616f * fTemp502) + ((0.149723813f * fTemp503) + ((0.258095026f * fTemp504) + ((0.337260038f * fTemp505) + ((0.382641077f * fTemp512) + ((0.388958395f * fTemp225) + ((0.356730849f * fTemp226) + ((0.291787475f * fTemp227) + ((0.210882902f * fTemp228) + ((0.12405774f * fTemp241) + ((0.0427564308f * fTemp16) + ((0.00137333293f * fTemp240) + ((0.0723899081f * fTemp239) + ((0.19733268f * fTemp238) + ((0.378673673f * fTemp237) + ((0.573503852f * fTemp236) + ((0.713064969f * fTemp235) + ((0.732291639f * fTemp234) + ((0.370860934f * fTemp511) + (0.617511511f * fTemp233)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00122074038f * (fTemp181 - fTemp513))))) : (iSlow57 ? (((0.00140385143f * (fTemp150 - fTemp398)) + ((0.00317392498f * (fTemp7 - fTemp302)) + ((0.000640888698f * (fTemp230 - fTemp292)) + ((0.00103762932f * (fTemp168 + fTemp278)) + ((0.00210577715f * (fTemp285 + (fTemp61 - (fTemp226 + (fTemp511 - fTemp240))))) + ((0.00350962859f * (fTemp17 + fTemp337)) + ((0.00344859157f * (fTemp161 + fTemp8)) + ((0.000793481246f * (fTemp333 - (fTemp33 - (fTemp55 - (fTemp501 - fTemp267))))) + ((0.00253303628f * (fTemp498 + fTemp256)) + ((0.00314340647f * (fTemp319 - (fTemp427 - fTemp112))) + ((0.0038758507f * (fTemp299 - fTemp264)) + ((0.00573747978f * (fTemp378 - fTemp41)) + ((0.0042115543f * (fTemp303 + fTemp280)) + ((0.00204474013f * (fTemp252 - (fTemp51 - (fTemp43 + (fTemp71 - (fTemp228 + fTemp215)))))) + ((0.00198370311f * (fTemp117 - fTemp321)) + ((0.00115970336f * (fTemp136 - fTemp60)) + ((0.0035401471f * (fTemp345 + (fTemp383 + fTemp348))) + ((0.00491348002f * (fTemp246 + (fTemp485 + fTemp314))) + ((0.0019226661f * (fTemp67 - (fTemp108 + fTemp50))) + ((0.00332651753f * (fTemp281 - fTemp157)) + ((0.00173955504f * (fTemp113 + fTemp293)) + ((0.0022583697f * (fTemp271 + (fTemp502 - fTemp298))) + ((0.00256355479f * (fTemp91 - (fTemp125 + (fTemp146 + (fTemp216 - fTemp210))))) + ((0.00338755455f * (fTemp81 - fTemp109)) + ((0.00149540696f * (fTemp110 - (fTemp232 - fTemp390))) + ((0.0104678487f * (fTemp399 + fTemp164)) + ((0.00415051728f * (fTemp409 - fTemp268)) + ((0.00512710959f * (fTemp40 + fTemp38)) + ((0.00531022064f * (fTemp98 + fTemp365)) + ((0.00329599902f * (fTemp114 + fTemp129)) + ((0.000701925717f * (fTemp506 + fTemp27)) + ((0.00424207281f * (fTemp121 - fTemp132)) + ((0.00286873989f * (fTemp148 - fTemp372)) + ((0.000122074038f * (fTemp374 - (fTemp126 + (fTemp512 + fTemp274)))) + ((0.000183111057f * (fTemp142 + (fTemp213 - fTemp433))) + ((0.00189214759f * (fTemp504 - fTemp295)) + ((0.00143436994f * (fTemp237 + fTemp85)) + ((0.00408948027f * (fTemp57 + (fTemp356 + fTemp327))) + ((0.00546281319f * (fTemp130 + fTemp12)) + ((0.000976592302f * (fTemp505 + fTemp128)) + ((0.00506607257f * (fTemp450 + fTemp334)) + ((0.00973540451f * (fTemp392 + fTemp384)) + ((0.00982696004f * (fTemp195 + fTemp380)) + ((0.00558488723f * (fTemp417 - (fTemp373 - fTemp65))) + ((0.0102847377f * (fTemp440 + fTemp106)) + ((0.00268562883f * (fTemp432 + fTemp431)) + ((0.000457777642f * (fTemp224 - fTemp442)) + ((0.0135502182f * (fTemp180 - fTemp176)) + ((0.00119022187f * (fTemp391 - fTemp241)) + ((0.00216681417f * (fTemp510 + fTemp211)) + ((0.00158696249f * (fTemp22 - fTemp218)) + ((0.00296029542f * fTemp852) + ((0.00201422162f * fTemp830) + ((0.000610370189f * fTemp766) + ((0.00292977691f * fTemp310) + ((0.00109866634f * fTemp34) + (fTemp773 + ((0.00555436872f * fTemp62) + ((0.00842310861f * fTemp163) + ((0.0118106632f * fTemp44) + ((0.0119327372f * fTemp350) + ((0.00662251655f * fTemp353) + ((0.00814844202f * fTemp74) + ((0.0100100711f * fTemp400) + ((0.00854518265f * fTemp401) + ((0.00625629444f * fTemp170) + ((0.00534073915f * fTemp78) + ((0.00509659108f * fTemp13) + ((0.00399792474f * fTemp59) + ((0.000335703604f * fTemp361) + ((0.000427259132f * fTemp316) + ((0.000244148076f * fTemp258) + ((0.00402844325f * fTemp243) + ((0.00589007232f * fTemp49) + (fTemp841 + ((0.00418103579f * fTemp139) + ((0.00347911008f * fTemp289) + ((0.00390636921f * fTemp93) + ((0.00494399853f * fTemp9) + ((0.00622577593f * fTemp406) + ((0.00762962736f * fTemp382) + ((0.00863673817f * fTemp355) + ((0.00930814538f * fTemp15) + ((0.0101016266f * fTemp26) + ((0.00881984923f * fTemp100) + ((0.00726340525f * fTemp99) + ((0.00585955381f * fTemp336) + ((0.0045167394f * fTemp379) + ((0.00378429517f * fTemp301) + ((0.00912503432f * fTemp408) + ((0.0113528855f * fTemp52) + ((0.0115665151f * fTemp66) + ((0.009704886f * fTemp250) + ((0.00720236823f * fTemp4) + ((0.00628681295f * fTemp410) + ((0.00878933072f * fTemp386) + ((0.0108340709f * fTemp388) + ((0.0106814783f * fTemp411) + ((0.00894192327f * fTemp412) + ((0.00592059083f * fTemp413) + ((0.00991851557f * fTemp342) + ((0.0141605884f * fTemp36) + ((0.0188299213f * fTemp39) + ((0.0229499191f * fTemp122) + ((0.0250556972f * fTemp418) + ((0.0258491784f * fTemp420) + ((0.0242316965f * fTemp421) + ((0.0218207352f * fTemp369) + ((0.017975403f * fTemp515) + ((0.0134281442f * fTemp149) + ((0.00860621966f * fTemp329) + ((0.0162663665f * fTemp377) + ((0.0232856236f * fTemp530) + ((0.0288399924f * fTemp95) + ((0.0310678426f * fTemp94) + ((0.0293588061f * fTemp89) + ((0.0259712525f * fTemp422) + ((0.0205694754f * fTemp423) + ((0.0166936256f * fTemp424) + ((0.0119022187f * fTemp425) + ((0.00830103457f * fTemp426) + ((0.00527970213f * fTemp294) + ((0.0061342204f * fTemp441) + ((0.0125125889f * fTemp300) + ((0.0300607327f * fTemp116) + ((0.0508438386f * fTemp118) + ((0.0639973134f * fTemp177) + ((0.0600909442f * fTemp178) + ((0.0335398428f * fTemp249) + ((0.0215765871f * fTemp376) + ((0.0143436994f * fTemp449) + ((0.0166631062f * fTemp453) + ((0.0244758446f * fTemp454) + ((0.0283822138f * fTemp455) + ((0.0265205856f * fTemp152) + ((0.0235602893f * fTemp362) + ((0.02252266f * fTemp456) + ((0.0191656239f * fTemp457) + ((0.0215460677f * fTemp464) + (fTemp670 + ((0.0641499087f * fTemp393) + ((0.0202948097f * fTemp465) + ((0.0130314035f * fTemp183) + ((0.0379039906f * fTemp184) + ((0.0312204361f * fTemp185) + ((0.0383007303f * fTemp186) + ((0.0555436872f * fTemp187) + ((0.0557878353f * fTemp188) + ((0.0581682809f * fTemp189) + ((0.0384533219f * fTemp151) + ((0.0889614522f * fTemp196) + ((0.0938749388f * fTemp469) + ((0.040070802f * fTemp154) + ((0.0394604318f * fTemp478) + ((0.137821585f * fTemp479) + ((0.126895964f * fTemp480) + ((0.088656269f * fTemp204) + ((0.732688367f * fTemp35) + (fTemp482 + ((0.731376052f * fTemp397) + ((0.297677547f * fTemp483) + ((0.0683309436f * fTemp484) + ((0.0208746605f * fTemp396) + ((0.00274666585f * fTemp497) + ((0.00164799951f * fTemp507) + (0.000274666585f * fTemp236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00106814783f * (fTemp513 + (fTemp144 - (fTemp495 - fTemp214)))) + ((0.00122074038f * (fTemp242 - fTemp668)) + ((0.0012817774f * (fTemp244 + (fTemp18 - (fTemp357 + (fTemp288 - (fTemp225 + fTemp135)))))) + ((0.00180059206f * (fTemp245 + (fTemp222 + fTemp248))) + ((0.00247199927f * (fTemp251 + (fTemp172 + fTemp358))) + ((0.00299081393f * (fTemp254 + (fTemp260 + (fTemp296 - (fTemp131 + (fTemp138 + fTemp259)))))) + ((0.00241096225f * (fTemp265 - (fTemp11 + (fTemp147 - (fTemp220 - (fTemp503 - fTemp221)))))) + ((0.00155644398f * (fTemp255 + (fTemp312 + fTemp276))) + ((0.000946073793f * (fTemp261 + (fTemp269 + (fTemp107 + fTemp76)))) + ((0.00222785119f * (fTemp283 - (fTemp287 + (fTemp123 - (fTemp402 - (fTemp359 + (fTemp313 + (fTemp335 + (fTemp238 - fTemp208))))))))) + ((0.00277718436f * (fTemp291 - (fTemp304 - (fTemp207 + fTemp451)))) + ((0.00302133244f * (fTemp277 + (fTemp156 + fTemp253))) + ((0.00271614734f * (fTemp305 - (fTemp88 - (fTemp64 - (fTemp416 + fTemp516))))) + ((0.000671407208f * (fTemp284 - (fTemp14 + (fTemp491 + fTemp317)))) + ((0.000518814661f * (fTemp324 + (fTemp231 - fTemp500))) + ((0.00057985168f * (fTemp47 + fTemp330)) + ((0.00311288796f * (fTemp19 + (fTemp206 - fTemp315))) + ((0.00445570238f * (fTemp339 - (fTemp92 - fTemp24))) + ((0.00341807306f * (fTemp25 - (fTemp414 + fTemp63))) + ((0.00213629566f * (fTemp28 + (fTemp347 + (fTemp370 - fTemp83)))) + ((0.00134281442f * (fTemp279 - (fTemp212 + fTemp415))) + ((0.000305185094f * (fTemp45 + (fTemp354 + fTemp807))) + ((0.00595110934f * (fTemp115 - fTemp320)) + ((0.00479140598f * (fTemp363 - fTemp266)) + ((0.00238044374f * (fTemp48 + (fTemp217 + fTemp160))) + ((0.00231940672f * (fTemp21 + (fTemp75 - (fTemp209 + fTemp290)))) + ((0.00183111057f * (fTemp219 + fTemp54)) + ((0.000885036774f * (fTemp307 + (fTemp263 + (fTemp235 + fTemp394)))) + ((9.15555283e-05f * (fTemp69 - (fTemp514 + fTemp101))) + ((0.00152592547f * (fTemp111 - fTemp96)) + ((0.00170903653f * (fTemp167 + fTemp159)) + ((0.00219733268f * (fTemp323 - (fTemp496 + (fTemp508 - fTemp233)))) + ((0.000152592547f * (fTemp46 - (fTemp5 - fTemp326))) + ((0.0057985168f * (fTemp133 - fTemp119)) + ((0.00375377666f * (fTemp84 + fTemp169)) + ((0.00900296029f * (fTemp385 + fTemp73)) + ((0.00570696127f * (fTemp341 + (fTemp247 - (fTemp407 + fTemp32)))) + ((0.00604266487f * (fTemp273 + (fTemp205 - fTemp360))) + ((0.00430310983f * (fTemp140 + fTemp859)) + ((0.001617481f * (fTemp257 + (fTemp173 - (fTemp282 + (fTemp430 + (fTemp229 + fTemp492)))))) + ((0.0019531846f * (fTemp70 + fTemp145)) + ((0.00250251777f * (fTemp171 - (fTemp239 - fTemp343))) + ((0.000366222113f * (fTemp0 + fTemp103)) + ((0.004852443f * (fTemp190 - fTemp87)) + ((0.00177007355f * (fTemp429 + (fTemp234 - fTemp499))) + ((0.0141911069f * (fTemp153 - fTemp364)) + ((0.00357066561f * fTemp809) + ((0.00308236945f * fTemp297) + ((0.00228888821f * fTemp309) + ((0.00186162908f * fTemp270) + ((3.05185094e-05f * fTemp331) + ((0.00488296151f * fTemp23) + ((0.00469985045f * fTemp286) + ((0.0067751091f * fTemp325) + ((0.00955229346f * fTemp311) + ((0.0111697745f * fTemp340) + ((0.00994903408f * fTemp37) + ((0.000396740623f * fTemp155) + ((0.00305185094f * fTemp72) + ((0.00100711081f * fTemp79) + ((0.00320444349f * fTemp105) + ((0.00866725668f * fTemp272) + ((0.0115054781f * fTemp322) + ((0.0119632557f * fTemp3) + ((0.00997955259f * fTemp519) + ((0.00735496078f * fTemp352) + ((0.0058290353f * fTemp165) + ((0.00561540574f * fTemp166) + ((0.0135196997f * fTemp120) + ((0.0150456252f * fTemp102) + ((0.012878811f * fTemp20) + ((0.008087405f * fTemp124) + ((0.00598162785f * fTemp137) + ((0.00619525742f * fTemp10) + ((0.0051576281f * fTemp80) + ((0.00372325815f * fTemp56) + ((0.00265511032f * fTemp366) + ((0.00146488845f * fTemp6) + ((0.00283822138f * fTemp30) + ((0.00280770287f * fTemp134) + ((0.00262459181f * fTemp306) + (fTemp857 + ((0.000732444227f * fTemp82) + ((0.000854518265f * fTemp403) + ((0.000823999755f * fTemp404) + ((0.00131229591f * fTemp127) + ((0.00244148076f * fTemp375) + ((0.00137333293f * fTemp371) + ((0.00360118411f * fTemp428) + ((0.00769066438f * fTemp434) + ((0.0152897732f * fTemp435) + ((0.0191351064f * fTemp436) + ((0.0174260698f * fTemp437) + ((0.0126956999f * fTemp438) + ((0.00933866389f * fTemp439) + ((0.00738547929f * fTemp381) + ((0.00567644276f * fTemp344) + ((0.00845362712f * fTemp443) + ((0.0155949583f * fTemp522) + ((0.0170903653f * fTemp175) + ((0.00714133121f * fTemp328) + ((0.00363170262f * fTemp444) + ((0.0077517014f * fTemp387) + ((0.048341319f * fTemp446) + ((0.0735801235f * fTemp447) + ((0.0726035312f * fTemp448) + ((0.048890654f * fTemp77) + ((0.0142216254f * fTemp179) + ((0.00729392376f * fTemp452) + ((0.0328073986f * fTemp458) + ((0.0782494619f * fTemp459) + ((0.117862485f * fTemp460) + ((0.132877588f * fTemp461) + ((0.108798489f * fTemp462) + ((0.0482802838f * fTemp463) + ((0.0386364348f * fTemp466) + ((0.0808435306f * fTemp467) + ((0.09543138f * fTemp468) + ((0.0886257514f * fTemp368) + ((0.082918793f * fTemp181) + ((0.0866420493f * fTemp86) + ((0.0783104971f * fTemp367) + ((0.057985168f * fTemp141) + ((0.0251167342f * fTemp182) + ((0.0762352347f * fTemp191) + ((0.128421888f * fTemp192) + ((0.150517285f * fTemp193) + ((0.0971709341f * fTemp194) + ((0.0397961363f * fTemp470) + ((0.10388501f * fTemp346) + ((0.128452405f * fTemp471) + ((0.101535082f * fTemp472) + ((0.0810266435f * fTemp473) + ((0.0724204257f * fTemp474) + ((0.131565288f * fTemp475) + ((0.13663137f * fTemp476) + ((0.111331522f * fTemp197) + ((0.0538041331f * fTemp198) + ((0.0307321399f * fTemp199) + ((0.0572527237f * fTemp200) + ((0.0636005774f * fTemp58) + ((0.0775170177f * fTemp477) + ((0.109103672f * fTemp481) + ((0.449171424f * fTemp201) + ((0.678792715f * fTemp202) + ((0.511856437f * fTemp203) + ((0.0163274035f * fTemp486) + ((0.0292062145f * fTemp487) + ((0.0312509537f * fTemp488) + ((0.00234992523f * fTemp227) + (0.0242927335f * fTemp489))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000762962736f * (fTemp1 + (fTemp31 - (fTemp90 - (fTemp42 + (fTemp223 + fTemp338)))))))) : (((0.00625629444f * (fTemp166 - fTemp245)) + ((0.0061342204f * (fTemp257 - fTemp251)) + ((0.00558488723f * (fTemp358 - fTemp254)) + ((0.00469985045f * (fTemp408 - fTemp283)) + ((0.00497451704f * (fTemp413 - fTemp277)) + ((3.05185094e-05f * (fTemp331 - (fTemp224 + fTemp285))) + ((0.000122074038f * (fTemp31 + (fTemp491 + fTemp137))) + ((0.000976592302f * (fTemp333 + (fTemp213 - fTemp129))) + ((0.00796533097f * (fTemp375 - fTemp253)) + ((0.0101321451f * (fTemp343 - fTemp264)) + ((0.0136417737f * (fTemp327 - fTemp325)) + ((0.00302133244f * (fTemp280 + (fTemp239 + fTemp56))) + ((0.00366222113f * (fTemp416 + fTemp61)) + ((0.00396740623f * (fTemp370 - fTemp101)) + ((0.00213629566f * (fTemp507 + fTemp46)) + ((0.0104068117f * (fTemp172 + fTemp163)) + ((0.00686666463f * (fTemp164 + (fTemp371 + fTemp372))) + ((0.00350962859f * (fTemp84 - fTemp350)) + ((0.00799584948f * (fTemp409 - fTemp399)) + ((0.0108951079f * (fTemp382 - fTemp353)) + ((0.00573747978f * (fTemp365 - fTemp3)) + ((0.00943021942f * (fTemp329 + fTemp167)) + ((0.00320444349f * (fTemp74 - (fTemp217 - fTemp211))) + ((0.0083925901f * (fTemp108 + fTemp124)) + ((0.00878933072f * (fTemp152 + fTemp125)) + ((0.00122074038f * (fTemp391 - fTemp247)) + ((0.00390636921f * fTemp859) + ((0.00784325693f * (fTemp142 + fTemp306)) + ((0.00714133121f * (fTemp274 + fTemp326)) + ((0.0109256264f * (fTemp422 + fTemp267)) + ((0.0113528855f * (fTemp66 + fTemp148)) + ((0.0147709586f * (fTemp40 + fTemp147)) + ((0.012939848f * (fTemp314 + (fTemp112 + fTemp59))) + ((0.0132450331f * (fTemp348 + (fTemp289 + fTemp139))) + ((0.0141300699f * (fTemp243 + fTemp290)) + ((0.0133671071f * (fTemp418 + fTemp128)) + ((0.0121463668f * (fTemp90 + (fTemp9 + fTemp107))) + ((0.0102542192f * (fTemp177 + fTemp316)) + ((0.011383404f * (fTemp404 + (fTemp405 + fTemp248))) + ((0.0176396985f * (fTemp470 + fTemp369)) + ((0.000610370189f * (fTemp230 - fTemp360)) + ((0.000793481246f * (fTemp495 - fTemp456)) + ((0.00253303628f * (fTemp209 + (fTemp499 + (fTemp502 + (fTemp510 - fTemp511))))) + ((0.00326548051f * (fTemp498 + fTemp210)) + ((0.00241096225f * (fTemp240 - fTemp226)) + ((0.0111697745f * fTemp810) + ((0.0142521439f * fTemp652) + ((0.000152592547f * fTemp256) + ((0.00463881344f * fTemp45) + ((0.000274666585f * fTemp320) + ((9.15555283e-05f * fTemp33) + ((0.001617481f * fTemp68) + ((0.00378429517f * fTemp55) + ((0.00280770287f * fTemp345) + ((0.00198370311f * fTemp323) + ((0.00228888821f * fTemp110) + ((0.00564592425f * fTemp71) + ((0.00848414563f * fTemp113) + ((0.0108645894f * fTemp117) + ((0.0120853297f * fTemp161) + ((0.0120242927f * fTemp119) + ((0.00964384899f * fTemp363) + ((0.00671407208f * fTemp63) + ((0.0019531846f * fTemp102) + ((0.00106814783f * fTemp78) + ((0.00149540696f * fTemp10) + ((0.00292977691f * fTemp140) + ((0.0035401471f * fTemp104) + ((0.00576799829f * fTemp298) + ((0.00695822015f * fTemp6) + ((0.00747703481f * fTemp145) + (fTemp768 + ((0.00689718314f * fTemp30) + ((0.00723288674f * fTemp134) + ((0.00885036774f * fTemp144) + ((0.00897244178f * fTemp354) + ((0.00860621966f * fTemp374) + ((0.00701925717f * fTemp263) + ((0.00769066438f * fTemp295) + ((0.0090334788f * fTemp171) + ((0.0112308115f * fTemp173) + ((0.0112918485f * fTemp103) + ((0.0107425153f * fTemp288) + ((0.0109561449f * fTemp150) + ((0.0111087374f * fTemp359) + ((0.0123905148f * fTemp114) + ((0.0137943663f * fTemp131) + ((0.0148319956f * fTemp97) + ((0.0144047365f * fTemp313) + ((0.0141605884f * fTemp57) + ((0.0138248848f * fTemp13) + ((0.0133365886f * fTemp12) + ((0.0137028107f * fTemp315) + ((0.0140690329f * fTemp29) + ((0.0135502182f * fTemp361) + ((0.0132145146f * fTemp126) + ((0.00827051606f * fTemp258) + ((0.00845362712f * fTemp82) + ((0.0100405896f * fTemp403) + ((0.0122379223f * fTemp127) + ((0.00891140476f * fTemp64) + ((0.00720236823f * fTemp70) + ((0.00820947904f * fTemp514) + ((0.00982696004f * fTemp136) + ((0.0114749596f * fTemp335) + ((0.0150456252f * fTemp334) + ((0.0155644398f * fTemp49) + ((0.0153813288f * fTemp32) + ((0.0142216254f * fTemp92) + ((0.012817774f * fTemp299) + ((0.0119022187f * fTemp356) + ((0.0115359966f * fTemp130) + ((0.0114139225f * fTemp406) + ((0.0110782189f * fTemp355) + ((0.0121158483f * fTemp15) + ((0.0136112552f * fTemp384) + ((0.0151066622f * fTemp100) + ((0.0149235511f * fTemp99) + ((0.0126041444f * fTemp379) + ((0.0110171819f * fTemp301) + ((0.0101016266f * fTemp281) + ((0.0093691824f * fTemp138) + ((0.00802636798f * fTemp516) + ((0.00616473891f * fTemp81) + ((0.00448622089f * fTemp407) + ((0.00735496078f * fTemp52) + ((0.014435255f * fTemp250) + ((0.0150151066f * fTemp4) + ((0.0132755516f * fTemp87) + ((0.0105288858f * fTemp383) + ((0.00640888698f * fTemp410) + ((0.00537125766f * fTemp386) + ((0.00521866512f * fTemp388) + ((0.00540177617f * fTemp411) + ((0.004852443f * fTemp414) + ((0.0045167394f * fTemp390) + ((0.00402844325f * fTemp415) + ((0.00308236945f * fTemp417) + ((0.00527970213f * fTemp39) + ((0.00930814538f * fTemp122) + ((0.0166631062f * fTemp420) + ((0.0179448836f * fTemp421) + ((0.0165105145f * fTemp515) + ((0.0140385143f * fTemp149) + (fTemp802 + ((0.0117191076f * fTemp423) + ((0.0124515519f * fTemp424) + ((0.00985747855f * fTemp425) + ((0.00393688772f * fTemp426) + ((0.0238044374f * fTemp178) + ((0.0312814713f * fTemp249) + ((0.0269478448f * fTemp387) + ((0.00842310861f * fTemp449) + ((0.00424207281f * fTemp450) + ((0.00698873866f * fTemp455) + ((0.0525528751f * fTemp393) + ((0.0591448732f * fTemp465) + ((0.0215460677f * fTemp466) + ((0.0197759941f * fTemp184) + ((0.0366832502f * fTemp185) + ((0.032227546f * fTemp186) + ((0.043916136f * fTemp187) + ((0.0511490218f * fTemp188) + ((0.0543839857f * fTemp189) + ((0.0595416129f * fTemp151) + ((0.0363780633f * fTemp190) + ((0.0339365825f * fTemp196) + ((0.0872218981f * fTemp469) + ((0.0730307922f * fTemp154) + ((0.119479962f * fTemp479) + ((0.186956391f * fTemp480) + ((0.109256268f * fTemp481) + ((0.370189518f * fTemp35) + ((0.928342521f * fTemp482) + (fTemp397 + ((0.603900254f * fTemp483) + ((0.202398762f * fTemp484) + ((0.042298656f * fTemp396) + ((0.014679403f * fTemp485) + ((0.003234962f * fTemp497) + ((0.00146488845f * fTemp22) + ((0.00265511032f * fTemp504) + ((0.00167851802f * fTemp505) + ((0.00274666585f * fTemp238) + ((0.00103762932f * fTemp506) + (0.00177007355f * fTemp229)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00445570238f * (fTemp76 + fTemp513)) + ((0.00473036896f * (fTemp242 + (fTemp155 + fTemp48))) + ((0.00531022064f * (fTemp302 + fTemp244)) + ((0.00476088747f * (fTemp260 - (fTemp530 - fTemp47))) + ((0.00399792474f * (fTemp269 + fTemp265)) + ((0.00534073915f * (fTemp297 - (fTemp412 - fTemp24))) + ((0.00271614734f * (fTemp318 - (fTemp115 + (fTemp342 - (fTemp220 - (fTemp508 - fTemp228)))))) + ((0.00231940672f * (fTemp324 + (fTemp341 - (fTemp496 - fTemp135)))) + ((0.000640888698f * (fTemp330 - (fTemp165 - fTemp2))) + ((0.000183111057f * (fTemp37 - fTemp278)) + ((0.00054933317f * (fTemp332 + fTemp310)) + ((0.000488296151f * (fTemp518 - (fTemp236 + fTemp377))) + ((0.00119022187f * (fTemp7 - (fTemp500 + fTemp246))) + ((0.00256355479f * (fTemp337 + (fTemp233 - fTemp454))) + ((0.00430310983f * (fTemp486 + fTemp8)) + ((0.00732444227f * (fTemp14 - (fTemp351 - fTemp272))) + ((0.00180059206f * (fTemp219 + fTemp28)) + ((0.00234992523f * (fTemp312 + fTemp262)) + ((0.00500503555f * (fTemp319 + (fTemp457 - fTemp402))) + ((0.0127567369f * (fTemp286 - (fTemp93 + fTemp98))) + ((0.00595110934f * (fTemp340 - (fTemp20 - fTemp519))) + ((0.00219733268f * (fTemp27 + fTemp266)) + ((0.00384533219f * (fTemp252 - fTemp840)) + ((0.00305185094f * (fTemp54 - (fTemp80 + fTemp69))) + ((0.00100711081f * (fTemp79 + fTemp307)) + ((0.00238044374f * (fTemp62 + (fTemp132 + (fTemp273 - (fTemp362 - (fTemp218 - fTemp212)))))) + ((0.00314340647f * (fTemp216 + fTemp156)) + ((0.00201422162f * (fTemp234 + fTemp157)) + ((0.000946073793f * (fTemp493 + fTemp75)) + ((0.00109866634f * (fTemp349 - (fTemp109 - fTemp271))) + ((0.000732444227f * (fTemp231 + fTemp293)) + ((0.000335703604f * (fTemp83 - (fTemp118 - (fTemp0 - fTemp512)))) + ((0.00338755455f * (fTemp96 - (fTemp287 + (fTemp366 + fTemp170)))) + ((0.000701925717f * (fTemp214 + fTemp105)) + ((0.00170903653f * (fTemp241 - fTemp44)) + ((0.00296029542f * (fTemp221 + fTemp120)) + ((0.00375377666f * (fTemp303 - fTemp41)) + ((0.00772118289f * (fTemp451 - fTemp123)) + ((0.0133060701f * (fTemp478 - fTemp5)) + ((0.0135807367f * (fTemp294 - fTemp317)) + ((0.00717184972f * (fTemp389 - fTemp42)) + ((0.0120548112f * (fTemp376 - fTemp378)) + ((0.0147404401f * (fTemp300 - fTemp26)) + ((0.0151676992f * (fTemp441 - fTemp380)) + ((0.00311288796f * (fTemp208 - fTemp36)) + ((0.00833155308f * (fTemp116 - fTemp95)) + ((0.0103152562f * (fTemp394 - fTemp94)) + ((0.00186162908f * (fTemp232 - fTemp237)) + ((0.00115970336f * (fTemp225 + fTemp490)) + ((0.00140385143f * (fTemp223 - fTemp492)) + ((0.00299081393f * (fTemp227 - fTemp503)) + ((0.00589007232f * fTemp398) + ((0.00357066561f * fTemp255) + ((0.00363170262f * fTemp261) + ((0.00488296151f * fTemp291) + ((0.0051576281f * fTemp296) + ((0.00433362834f * fTemp305) + ((0.00344859157f * fTemp309) + (fTemp663 + ((0.00268562883f * fTemp284) + (fTemp860 + ((0.000427259132f * fTemp304) + ((0.00592059083f * fTemp11) + ((0.00817896053f * fTemp18) + (fTemp726 + ((0.00778221991f * fTemp339) + ((0.00668355357f * fTemp23) + ((0.00372325815f * fTemp25) + ((0.00656147953f * fTemp34) + ((0.0071108127f * fTemp279) + ((0.0111392559f * fTemp311) + ((0.00491348002f * fTemp321) + ((0.00439466536f * fTemp21) + ((0.00173955504f * fTemp60) + ((0.00454725791f * fTemp67) + ((0.00415051728f * fTemp347) + ((0.00125125889f * fTemp72) + ((0.000396740623f * fTemp43) + ((0.00210577715f * fTemp88) + ((0.00286873989f * fTemp91) + ((0.00408948027f * fTemp159) + ((0.00262459181f * fTemp160) + ((0.0116275521f * fTemp357) + ((0.00997955259f * fTemp268) + ((0.00570696127f * fTemp322) + ((0.00405896176f * fTemp352) + ((0.000762962736f * fTemp400) + ((0.0054933317f * fTemp401) + ((0.0102237007f * fTemp38) + ((0.0128482925f * fTemp168) + ((0.0119937742f * fTemp169) + (fTemp861 + ((0.00247199927f * fTemp50) + ((0.00207525864f * fTemp133) + ((0.00183111057f * fTemp106) + ((0.00546281319f * fTemp17) + ((0.0141911069f * fTemp338) + ((0.0196234025f * fTemp427) + ((0.0198370311f * fTemp428) + ((0.0175176244f * fTemp429) + (fTemp862 + ((0.0148625141f * fTemp431) + ((0.0177617725f * fTemp432) + ((0.0208441429f * fTemp433) + ((0.0228278451f * fTemp434) + ((0.0248115491f * fTemp435) + ((0.0256355479f * fTemp436) + ((0.0270699188f * fTemp437) + ((0.0289010294f * fTemp438) + ((0.0304269549f * fTemp439) + ((0.0301522873f * fTemp381) + ((0.0267647337f * fTemp344) + ((0.0207220688f * fTemp111) + ((0.0106814783f * fTemp440) + ((0.0122074038f * fTemp392) + ((0.014496292f * fTemp442) + ((0.0127262184f * fTemp443) + ((0.0127872555f * fTemp522) + ((0.0204779208f * fTemp175) + ((0.0319223627f * fTemp176) + ((0.0366527289f * fTemp328) + ((0.0319528803f * fTemp444) + ((0.0236823633f * fTemp445) + ((0.000671407208f * fTemp446) + ((0.041993469f * fTemp447) + ((0.0837427899f * fTemp448) + ((0.102481157f * fTemp77) + ((0.0904873833f * fTemp179) + ((0.0524918362f * fTemp180) + ((0.0200811792f * fTemp452) + ((0.0247810297f * fTemp385) + ((0.025940733f * fTemp373) + ((0.0195013285f * fTemp121) + (fTemp822 + ((0.00619525742f * fTemp364) + ((0.0214239936f * fTemp458) + ((0.0502334684f * fTemp459) + ((0.0900601223f * fTemp460) + ((0.129795223f * fTemp461) + ((0.150242627f * fTemp462) + ((0.136326179f * fTemp463) + ((0.0813623443f * fTemp464) + (fTemp839 + ((0.085055083f * fTemp468) + ((0.0991241187f * fTemp368) + ((0.0856959745f * fTemp181) + ((0.0840479732f * fTemp86) + ((0.0851771608f * fTemp367) + ((0.0805383474f * fTemp141) + ((0.0605182052f * fTemp182) + ((0.0243537705f * fTemp183) + ((0.0183721427f * fTemp191) + ((0.0913418978f * fTemp192) + ((0.136722922f * fTemp193) + ((0.139683217f * fTemp194) + ((0.0613116845f * fTemp195) + ((0.0463881344f * fTemp346) + ((0.098422192f * fTemp471) + ((0.11224708f * fTemp472) + ((0.0904568657f * fTemp473) + ((0.0647907928f * fTemp474) + ((0.0683614612f * fTemp475) + ((0.126529738f * fTemp476) + ((0.109408855f * fTemp197) + ((0.0825220495f * fTemp198) + ((0.0163579211f * fTemp199) + ((0.0183111057f * fTemp200) + ((0.0202337727f * fTemp58) + ((0.0377208777f * fTemp477) + ((0.181920841f * fTemp201) + ((0.507553339f * fTemp202) + ((0.635914207f * fTemp203) + ((0.295480222f * fTemp204) + ((0.0234992523f * fTemp487) + ((0.0325632505f * fTemp488) + ((0.0308236945f * fTemp489) + ((0.0220343638f * fTemp153) + ((0.0117496261f * fTemp205) + ((0.00506607257f * fTemp206) + ((0.00341807306f * fTemp207) + ((0.00222785119f * fTemp215) + ((0.000366222113f * fTemp501) + ((0.00250251777f * fTemp222) + ((0.000915555283f * fTemp235) + (0.000244148076f * fTemp16))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00442518387f * (fTemp276 + fTemp1)))))) : (iSlow53 ? (iSlow55 ? (((0.00662251655f * (fTemp414 + fTemp513)) + ((0.00842310861f * (fTemp261 + (fTemp307 + (fTemp97 + fTemp33)))) + ((0.008087405f * (fTemp302 - (fTemp208 + fTemp44))) + ((0.00747703481f * (fTemp277 - (fTemp211 - fTemp443))) + ((0.00378429517f * (fTemp366 + fTemp309)) + ((0.00152592547f * (fTemp241 + fTemp318)) + ((0.00167851802f * (fTemp292 + fTemp284)) + ((0.000518814661f * (fTemp330 - (fTemp39 + fTemp56))) + ((0.00122074038f * (fTemp69 - fTemp331)) + ((0.0107730338f * (fTemp372 - fTemp14)) + ((0.00851466414f * (fTemp396 - fTemp24)) + ((0.00906399731f * (fTemp142 - fTemp262)) + ((0.0111087374f * (fTemp66 - fTemp311)) + ((0.000854518265f * (fTemp252 + (fTemp177 - fTemp80))) + ((0.00595110934f * (fTemp68 - fTemp51)) + ((0.00894192327f * (fTemp22 - fTemp345)) + ((0.00204474013f * (fTemp417 + fTemp62)) + ((0.00537125766f * (fTemp271 + (fTemp504 - fTemp216))) + ((0.00430310983f * (fTemp226 - fTemp91)) + ((0.00390636921f * (fTemp457 + fTemp101)) + ((0.0183111057f * (fTemp477 + fTemp323)) + ((0.0115665151f * (fTemp435 - fTemp353)) + ((0.00222785119f * (fTemp6 - fTemp400)) + ((0.00500503555f * (fTemp442 - fTemp102)) + ((0.00891140476f * (fTemp194 - fTemp365)) + ((0.00314340647f * (fTemp52 - fTemp10)) + ((0.00924710836f * (fTemp144 + fTemp30)) + ((0.00439466536f * (fTemp224 + fTemp114)) + ((0.00555436872f * (fTemp147 - (fTemp205 + (fTemp235 - fTemp512)))) + ((0.00357066561f * (fTemp356 - (fTemp237 - fTemp411))) + ((0.0121463668f * (fTemp484 - fTemp100)) + ((0.00546281319f * (fTemp42 - fTemp59)) + ((0.0175786614f * (fTemp250 + (fTemp416 - (fTemp17 - fTemp421)))) + ((0.0328073986f * (fTemp452 + fTemp409)) + ((0.0157170333f * (fTemp483 + fTemp369)) + ((0.00363170262f * (fTemp422 - (fTemp493 + fTemp489))) + ((0.00155644398f * (fTemp522 + fTemp426)) + ((0.00930814538f * (fTemp223 - fTemp490)) + ((0.00830103457f * fTemp557) + (((0.00512710959f * fTemp242) + ((0.00445570238f * fTemp245) + ((0.011444441f * fTemp254) + ((0.0151982177f * fTemp260) + ((0.0163274035f * fTemp265) + ((0.0137638478f * fTemp255) + ((0.00219733268f * fTemp269) + ((0.000122074038f * fTemp291) + ((0.00375377666f * fTemp296) + ((0.00674459059f * fTemp297) + ((0.00231940672f * fTemp270) + ((0.00198370311f * fTemp324) + ((0.00054933317f * fTemp266) + ((0.00573747978f * fTemp60) + ((0.00604266487f * fTemp303) + ((0.00784325693f * fTemp347) + ((0.00796533097f * fTemp156) + ((0.0166020691f * fTemp72) + ((0.0242622159f * fTemp75) + ((0.0312204361f * fTemp79) + ((0.0345469527f * fTemp349) + ((0.0328684337f * fTemp293) + ((0.0255745109f * fTemp83) + ((0.0155339213f * fTemp43) + ((0.0120548112f * fTemp76) + ((0.0201116987f * fTemp159) + ((0.0252998453f * fTemp160) + ((0.0266731773f * fTemp105) + ((0.0238349568f * fTemp109) + ((0.0110171819f * fTemp46) + ((0.00372325815f * fTemp110) + ((0.00106814783f * fTemp53) + ((0.00396740623f * fTemp370) + ((0.00344859157f * fTemp402) + (fTemp615 + ((0.00143436994f * fTemp298) + (fTemp856 + ((0.00726340525f * fTemp146) + ((0.0103152562f * fTemp306) + ((0.00964384899f * fTemp108) + ((0.00860621966f * fTemp354) + ((0.00799584948f * fTemp374) + ((0.0110477004f * fTemp326) + ((0.0136112552f * fTemp263) + ((0.0140079958f * fTemp295) + ((0.0124820704f * fTemp171) + ((0.00912503432f * fTemp173) + ((0.0117496261f * fTemp103) + ((0.0168156996f * fTemp267) + ((0.0204474013f * fTemp288) + ((0.0199591052f * fTemp150) + ((0.016052736f * fTemp85) + ((0.00543229468f * fTemp148) + ((0.00384533219f * fTemp131) + ((0.0112918485f * fTemp313) + ((0.0115359966f * fTemp259) + ((9.15555283e-05f * fTemp107) + ((0.00317392498f * fTemp371) + ((0.00985747855f * fTemp514) + ((0.014496292f * fTemp136) + ((0.0188909583f * fTemp335) + ((0.0196539201f * fTemp112) + ((0.0177922919f * fTemp243) + ((0.0157475509f * fTemp334) + ((0.0165715516f * fTemp49) + ((0.0205389578f * fTemp32) + ((0.0249641407f * fTemp92) + ((0.0197759941f * fTemp327) + ((0.024445327f * fTemp4) + ((0.0299386587f * fTemp87) + ((0.0331736207f * fTemp383) + ((0.0277718436f * fTemp410) + ((0.0216986611f * fTemp386) + ((0.0122989593f * fTemp388) + ((0.0185857732f * fTemp390) + ((0.0242927335f * fTemp415) + ((0.0100711081f * fTemp122) + (fTemp816 + ((0.0202337727f * fTemp420) + ((0.0139774773f * fTemp515) + ((0.0128482925f * fTemp149) + ((0.0118411817f * fTemp329) + ((0.0233466607f * fTemp423) + ((0.03234962f * fTemp424) + ((0.0224921424f * fTemp425) + ((0.0151066622f * fTemp428) + ((0.0418408774f * fTemp429) + ((0.061830502f * fTemp430) + ((0.0679036826f * fTemp431) + ((0.0568254665f * fTemp432) + ((0.0321054719f * fTemp433) + ((0.0145878475f * fTemp434) + ((0.0308236945f * fTemp436) + ((0.0537430942f * fTemp437) + ((0.0645466447f * fTemp438) + ((0.0609149449f * fTemp439) + ((0.0462660603f * fTemp381) + ((0.0327463597f * fTemp344) + ((0.0158696249f * fTemp111) + ((0.00335703604f * fTemp294) + ((0.0339976214f * fTemp376) + ((0.0746177584f * fTemp449) + ((0.088656269f * fTemp450) + ((0.0589312427f * fTemp451) + ((0.0360118411f * fTemp385) + ((0.0555131696f * fTemp373) + ((0.0722067952f * fTemp121) + ((0.0754417554f * fTemp453) + ((0.069551684f * fTemp454) + ((0.0657368675f * fTemp455) + ((0.0387279876f * fTemp152) + ((0.0377208777f * fTemp362) + ((0.0323801376f * fTemp456) + ((0.0705587938f * fTemp460) + ((0.104525894f * fTemp461) + ((0.0907315314f * fTemp462) + ((0.0552690215f * fTemp463) + ((0.141270176f * fTemp368) + ((0.21857357f * fTemp181) + ((0.220313117f * fTemp86) + ((0.0777001232f * fTemp367) + ((0.149815366f * fTemp186) + ((0.412091434f * fTemp187) + ((0.55592519f * fTemp188) + ((0.555070639f * fTemp189) + ((0.289864808f * fTemp151) + ((0.301705986f * fTemp195) + ((0.618915379f * fTemp196) + ((0.895626724f * fTemp469) + ((0.916196167f * fTemp154) + ((0.443342388f * fTemp470) + ((0.022705771f * fTemp478) + ((0.0256355479f * fTemp479) + ((0.0261848811f * fTemp480) + ((0.0263985116f * fTemp481) + ((0.0259102155f * fTemp201) + (fTemp759 + ((0.0254829563f * fTemp203) + ((0.0250556972f * fTemp204) + ((0.0238044374f * fTemp35) + ((0.0218207352f * fTemp482) + ((0.0190435499f * fTemp397) + ((0.00518814661f * fTemp485) + ((0.00253303628f * fTemp497) + ((0.00875881221f * fTemp499) + ((0.0202642903f * fTemp501) + ((0.0087282937f * fTemp221) + ((0.00256355479f * fTemp222) + ((0.00488296151f * fTemp502) + ((0.0083925901f * fTemp503) + ((0.00720236823f * fTemp225) + ((0.00164799951f * fTemp228) + (0.00469985045f * fTemp227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00823999755f * fTemp1))))))))))))))))))))))))))))))))))))))))) - (((0.00366222113f * (fTemp412 - fTemp398)) + ((0.00729392376f * (fTemp246 - fTemp251)) + ((0.00247199927f * (fTemp278 + fTemp283)) + ((0.00585955381f * (fTemp41 - fTemp305)) + ((0.00305185094f * (fTemp285 + (fTemp337 + (fTemp507 + fTemp408)))) + ((0.00244148076f * (fTemp441 + fTemp304)) + ((0.000427259132f * (fTemp140 + fTemp332)) + ((0.00561540574f * (fTemp8 + (fTemp169 + (fTemp230 + fTemp440)))) + ((0.00506607257f * (fTemp236 + fTemp333)) + ((0.0109256264f * (fTemp319 - (fTemp58 + fTemp157))) + ((0.00939970091f * (fTemp492 + fTemp340)) + ((0.00411999878f * (fTemp168 + fTemp45)) + ((0.000610370189f * (fTemp127 + fTemp320)) + ((0.000183111057f * (fTemp487 + fTemp47)) + ((0.00216681417f * (fTemp321 + (fTemp240 - fTemp486))) + ((0.00479140598f * (fTemp48 + (fTemp130 + fTemp20))) + ((0.00302133244f * (fTemp54 - (fTemp13 + fTemp104))) + ((0.00131229591f * (fTemp405 - fTemp312)) + ((0.00778221991f * (fTemp61 + (fTemp163 + (fTemp427 - fTemp359)))) + ((0.00820947904f * (fTemp113 - (fTemp505 - fTemp123))) + ((0.00869777519f * (fTemp209 + fTemp117)) + ((0.00845362712f * (fTemp360 + fTemp161)) + ((0.00827051606f * (fTemp119 + (fTemp166 + (fTemp210 - fTemp57)))) + ((0.0106814783f * (fTemp399 + fTemp858)) + ((0.00183111057f * (fTemp220 + fTemp401)) + ((0.0025940733f * (fTemp496 + fTemp38)) + ((0.00637836847f * (fTemp231 + fTemp73)) + ((0.00558488723f * (fTemp407 + fTemp120)) + ((0.0071108127f * (fTemp207 + fTemp125)) + ((0.00973540451f * (fTemp170 - (fTemp219 + fTemp172))) + ((0.00347911008f * (fTemp247 - (fTemp200 + fTemp65))) + ((0.0022583697f * (fTemp115 + (fTemp506 + fTemp488))) + ((0.00436414685f * (fTemp315 - fTemp145)) + ((0.0109866634f * (fTemp178 - fTemp282)) + ((0.00448622089f * (fTemp343 + fTemp348)) + ((0.0154118473f * (fTemp82 + fTemp258)) + ((0.00112918485f * (fTemp0 - fTemp70)) + ((0.0247199927f * (fTemp476 - fTemp40)) + ((0.011383404f * (fTemp198 - fTemp299)) + ((0.021332439f * (fTemp464 + fTemp9)) + ((0.00650044251f * (fTemp232 + fTemp206)) + ((0.00668355357f * (fTemp233 + fTemp213)) + ((0.00531022064f * (fTemp229 + fTemp217)) + ((0.00454725791f * (fTemp510 + fTemp498)) + ((0.00186162908f * fTemp276) + ((0.00149540696f * fTemp310) + ((0.00057985168f * fTemp518) + ((0.00137333293f * fTemp7) + ((0.00814844202f * fTemp11) + ((0.0125736259f * fTemp18) + ((0.0132755516f * fTemp19) + ((0.0127262184f * fTemp339) + ((0.0108645894f * fTemp23) + ((0.00610370189f * fTemp25) + (fTemp727 + ((0.0042115543f * fTemp31) + ((0.00689718314f * fTemp256) + ((0.0116580706f * fTemp34) + ((0.0119327372f * fTemp279) + ((0.0119937742f * fTemp253) + ((0.0125125889f * fTemp264) + ((0.0126651814f * fTemp286) + ((0.0122379223f * fTemp325) + ((0.00781273842f * fTemp37) + ((0.00213629566f * fTemp280) + ((0.00619525742f * fTemp21) + ((0.00369273964f * fTemp55) + ((0.00308236945f * fTemp2) + ((0.00158696249f * fTemp88) + ((0.00210577715f * fTemp96) + ((0.00234992523f * fTemp287) + ((0.00640888698f * fTemp71) + ((0.00762962736f * fTemp164) + ((0.00918607134f * fTemp350) + ((0.0118106632f * fTemp357) + ((0.0109561449f * fTemp268) + ((0.0102542192f * fTemp272) + (fTemp832 + ((0.0103762932f * fTemp3) + ((0.0108035523f * fTemp519) + ((0.0107119968f * fTemp352) + ((0.00982696004f * fTemp165) + ((0.00671407208f * fTemp363) + ((0.00509659108f * fTemp167) + ((0.00408948027f * fTemp63) + ((0.00286873989f * fTemp74) + ((0.00598162785f * fTemp124) + ((0.0110782189f * fTemp78) + ((0.0123905148f * fTemp129) + ((0.0134586627f * fTemp27) + ((0.0129703665f * fTemp50) + ((0.0116885891f * fTemp132) + ((0.00885036774f * fTemp341) + ((0.006469924f * fTemp273) + ((0.00427259132f * fTemp133) + ((0.00329599902f * fTemp137) + ((0.00115970336f * fTemp84) + ((0.000305185094f * fTemp275) + ((0.00207525864f * fTemp12) + ((0.00473036896f * fTemp314) + ((0.00540177617f * fTemp290) + ((0.00888088625f * fTemp29) + ((0.013061922f * fTemp361) + ((0.01803644f * fTemp126) + ((0.0222174749f * fTemp5) + ((0.0256050304f * fTemp317) + ((0.0264900662f * fTemp128) + ((0.0240180679f * fTemp90) + ((0.0194402914f * fTemp316) + ((0.0150761437f * fTemp274) + ((0.0159611814f * fTemp351) + ((0.0104983672f * fTemp403) + ((0.00402844325f * fTemp404) + ((0.00292977691f * fTemp248) + ((0.00311288796f * fTemp64) + ((0.000732444227f * fTemp375) + ((0.00704977568f * fTemp378) + ((0.0108951079f * fTemp98) + ((0.012939848f * fTemp139) + ((0.0150456252f * fTemp289) + ((0.0174871068f * fTemp93) + ((0.0264595486f * fTemp406) + ((0.0297250282f * fTemp382) + ((0.0307626575f * fTemp355) + ((0.030793177f * fTemp15) + ((0.0295419171f * fTemp384) + ((0.0263374746f * fTemp26) + ((0.019348735f * fTemp380) + ((0.014618366f * fTemp336) + ((0.0233771782f * fTemp379) + ((0.0265205856f * fTemp301) + ((0.0238959938f * fTemp281) + ((0.0166936256f * fTemp138) + ((0.00979644153f * fTemp516) + ((0.00695822015f * fTemp81) + ((0.0028992584f * fTemp413) + ((0.00790429395f * fTemp342) + ((0.00897244178f * fTemp36) + ((0.0236518458f * fTemp106) + ((0.0345164351f * fTemp377) + ((0.0353099145f * fTemp530) + ((0.0309457686f * fTemp95) + ((0.0238654744f * fTemp94) + ((0.0134891812f * fTemp89) + ((0.021210365f * fTemp338) + ((0.00759910885f * fTemp392) + ((0.02438429f * fTemp175) + (fTemp604 + ((0.0975676775f * fTemp328) + ((0.112613298f * fTemp444) + ((0.105716117f * fTemp445) + ((0.0774559751f * fTemp300) + ((0.0431226529f * fTemp116) + ((0.0177617725f * fTemp118) + ((0.0448011719f * fTemp249) + ((0.0838648677f * fTemp387) + ((0.114200264f * fTemp446) + ((0.123966187f * fTemp447) + ((0.125949889f * fTemp448) + ((0.119266339f * fTemp77) + ((0.0919522718f * fTemp179) + ((0.0444959886f * fTemp180) + ((0.0462050252f * fTemp364) + ((0.100497454f * fTemp394) + ((0.0726950914f * fTemp458) + ((0.0220648833f * fTemp459) + ((0.117923521f * fTemp389) + ((0.25452438f * fTemp393) + ((0.355815291f * fTemp465) + ((0.307962269f * fTemp466) + ((0.202612385f * fTemp467) + ((0.0051576281f * fTemp468) + ((0.0786767155f * fTemp141) + ((0.231818601f * fTemp182) + ((0.313028365f * fTemp183) + ((0.23227638f * fTemp184) + ((0.0972624868f * fTemp185) + ((0.00497451704f * fTemp190) + ((0.225501269f * fTemp191) + ((0.282845557f * fTemp192) + ((0.165807068f * fTemp193) + ((0.332316041f * fTemp346) + ((0.939268172f * fTemp471) + ((1.00003052f * fTemp472) + ((0.634937584f * fTemp473) + ((0.254036069f * fTemp474) + ((0.0705282763f * fTemp475) + ((0.0179448836f * fTemp197) + ((0.00527970213f * fTemp199) + ((0.004852443f * fTemp153) + ((0.00854518265f * fTemp135) + ((0.00927762687f * fTemp491) + ((0.00708029419f * fTemp212) + ((0.00634784997f * fTemp214) + ((0.00631733146f * fTemp215) + ((0.00320444349f * fTemp218) + ((0.000274666585f * fTemp495) + ((0.0301217698f * fTemp500) + ((0.000793481246f * fTemp16) + ((0.000671407208f * fTemp391) + ((0.0019531846f * fTemp239) + ((0.00332651753f * fTemp238) + ((0.00698873866f * fTemp511) + (0.00665303506f * fTemp234)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00399792474f * (fTemp508 - fTemp244)))) : (((0.00119022187f * (fTemp1 + (fTemp254 + (fTemp292 - (fTemp250 + fTemp90))))) + ((0.00106814783f * (fTemp513 - (fTemp339 - (fTemp160 - (fTemp375 - fTemp372))))) + ((0.000885036774f * (fTemp245 + fTemp242)) + ((0.000823999755f * (fTemp244 + (fTemp21 + fTemp398))) + ((0.00100711081f * (fTemp251 + (fTemp466 + fTemp46))) + ((0.00137333293f * (fTemp260 + (fTemp270 + (fTemp324 + (fTemp454 + fTemp30))))) + ((0.00155644398f * (fTemp265 - (fTemp11 - (fTemp84 + (fTemp104 - (fTemp258 + fTemp316)))))) + ((0.001617481f * (fTemp255 + (fTemp277 - fTemp817))) + ((0.00158696249f * (fTemp261 + (fTemp80 - fTemp14))) + ((0.00149540696f * (fTemp340 + fTemp269)) + ((0.00134281442f * (fTemp276 + (fTemp291 + (fTemp48 - fTemp8)))) + ((0.00152592547f * (fTemp296 + (fTemp305 + (fTemp404 + (fTemp122 + (fTemp464 + fTemp455)))))) + ((0.00173955504f * (fTemp302 + (fTemp133 + (fTemp467 + fTemp56)))) + ((0.00140385143f * (fTemp318 + (fTemp284 - (fTemp18 - (fTemp423 - fTemp87))))) + ((0.000976592302f * (fTemp330 - (fTemp23 + (fTemp445 + fTemp61)))) + ((0.000518814661f * (fTemp331 - (fTemp383 - fTemp52))) + ((0.00170903653f * (fTemp319 + (fTemp115 + (fTemp134 - (fTemp360 + fTemp4))))) + ((0.00277718436f * (fTemp34 + (fTemp325 - (fTemp138 - fTemp334)))) + ((0.00366222113f * (fTemp306 + fTemp279)) + ((0.00204474013f * (fTemp311 + (fTemp362 + fTemp366))) + ((0.000762962736f * (fTemp41 + (fTemp280 + (fTemp266 + (fTemp252 + (fTemp444 - fTemp110)))))) + ((0.000671407208f * (fTemp45 + (fTemp317 + (fTemp408 + fTemp371)))) + ((0.00592059083f * (fTemp357 - fTemp33)) + ((0.00311288796f * (fTemp188 - fTemp156)) + ((0.000396740623f * (fTemp75 - (fTemp465 + fTemp128))) + ((0.00219733268f * (fTemp388 + fTemp79)) + ((0.0035401471f * (fTemp327 + fTemp349)) + ((0.00299081393f * (fTemp271 - (fTemp287 - (fTemp78 + (fTemp92 + (fTemp176 - (fTemp190 + fTemp177))))))) + ((0.00180059206f * (fTemp88 + (fTemp326 - (fTemp149 - fTemp386)))) + ((6.10370189e-05f * (fTemp159 - (fTemp428 + fTemp377))) + ((0.0019226661f * (fTemp399 + fTemp105)) + ((0.00201422162f * (fTemp152 + fTemp323)) + ((0.00418103579f * (fTemp356 + fTemp268)) + ((0.004852443f * (fTemp401 + (fTemp479 - fTemp171))) + ((0.00228888821f * (fTemp102 + (fTemp185 + fTemp42))) + ((0.003234962f * (fTemp20 - (fTemp281 - fTemp130))) + ((0.00125125889f * (fTemp129 + (fTemp53 + (fTemp410 + (fTemp180 - fTemp427))))) + ((0.00198370311f * (fTemp468 - fTemp50)) + ((0.00216681417f * (fTemp328 + fTemp10)) + ((0.00271614734f * (fTemp40 + fTemp370)) + ((0.00231940672f * (fTemp146 + (fTemp456 + fTemp418))) + ((0.00540177617f * (fTemp414 + fTemp142)) + ((0.00360118411f * (fTemp136 - fTemp150)) + ((0.00875881221f * (fTemp348 + fTemp147)) + ((0.00863673817f * (fTemp433 - fTemp57)) + ((0.00692770164f * (fTemp432 - fTemp13)) + ((0.00109866634f * (fTemp403 + (fTemp98 - (fTemp389 - fTemp417)))) + ((0.000274666585f * (fTemp248 + (fTemp139 - (fTemp66 + (fTemp425 - fTemp94))))) + ((0.00341807306f * (fTemp514 + (fTemp442 + fTemp430))) + ((0.00305185094f * (fTemp335 - (fTemp99 - fTemp49))) + ((0.00411999878f * (fTemp6 + (fTemp413 + (fTemp483 - fTemp387)))) + ((0.00393688772f * (fTemp376 + fTemp405)) + ((0.0022583697f * (fTemp378 + (fTemp522 - (fTemp178 + fTemp300)))) + ((0.00308236945f * (fTemp416 - fTemp336)) + ((0.0019531846f * (fTemp421 - fTemp516)) + ((0.00238044374f * (fTemp443 + fTemp411)) + ((0.000152592547f * (fTemp95 + fTemp530)) + ((0.000732444227f * (fTemp424 + fTemp89)) + ((0.00985747855f * (fTemp462 + fTemp435)) + ((0.00585955381f * (fTemp463 + fTemp111)) + ((0.00891140476f * (fTemp477 + fTemp450)) + ((0.0122379223f * (fTemp461 + fTemp394)) + ((0.0188909583f * (fTemp484 - fTemp183)) + ((0.00189214759f * (fTemp496 - fTemp189)) + ((0.00473036896f * fTemp788) + ((0.00372325815f * fTemp562) + ((0.0012817774f * fTemp283) + ((0.00143436994f * fTemp309) + ((0.00402844325f * fTemp253) + ((0.00415051728f * fTemp293) + ((0.0042115543f * fTemp83) + ((0.00378429517f * fTemp43) + ((0.00234992523f * fTemp109) + ((0.00482192449f * fTemp353) + ((0.0045167394f * fTemp363) + ((0.00854518265f * fTemp167) + ((0.0104678487f * fTemp63) + ((0.00994903408f * fTemp74) + ((0.00762962736f * fTemp400) + ((0.00262459181f * fTemp38) + ((0.00405896176f * fTemp124) + ((0.00512710959f * fTemp123) + ((0.00497451704f * fTemp365) + ((0.00427259132f * fTemp170) + ((0.00265511032f * fTemp247) + ((0.00357066561f * fTemp402) + ((0.00442518387f * fTemp358) + ((0.00494399853f * fTemp298) + ((0.0061342204f * fTemp108) + ((0.00817896053f * fTemp374) + ((0.00186162908f * fTemp282) + ((0.00518814661f * fTemp359) + ((0.00796533097f * fTemp148) + ((0.00955229346f * fTemp114) + ((0.0101016266f * fTemp131) + ((0.00479140598f * fTemp97) + ((0.00662251655f * fTemp59) + ((0.00933866389f * fTemp315) + (fTemp745 + ((0.0074159978f * fTemp29) + ((0.00286873989f * fTemp32) + ((0.00408948027f * fTemp299) + ((0.000305185094f * fTemp15) + ((0.00601214636f * fTemp390) + ((0.00976592302f * fTemp434) + ((0.00894192327f * fTemp436) + ((0.00747703481f * fTemp437) + ((0.00595110934f * fTemp438) + ((0.00509659108f * fTemp344) + ((0.00668355357f * fTemp294) + ((0.00726340525f * fTemp440) + ((0.00683614612f * fTemp392) + ((0.00543229468f * fTemp441) + ((0.00280770287f * fTemp175) + (fTemp627 + ((0.0123905148f * fTemp451) + ((0.016052736f * fTemp452) + ((0.0174565874f * fTemp385) + ((0.0147404401f * fTemp373) + ((0.00912503432f * fTemp121) + ((0.00885036774f * fTemp364) + ((0.0137943663f * fTemp458) + ((0.0135807367f * fTemp459) + ((0.0131839961f * fTemp460) + ((0.00784325693f * fTemp187) + ((0.0271614734f * fTemp471) + ((0.0482192449f * fTemp472) + ((0.0587481298f * fTemp473) + ((0.05038606f * fTemp474) + ((0.0226142164f * fTemp475) + ((0.0117191076f * fTemp478) + ((0.0345469527f * fTemp396) + ((0.0495315418f * fTemp485) + ((0.0638142005f * fTemp486) + ((0.0706503466f * fTemp487) + ((0.0589922778f * fTemp488) + ((0.0259712525f * fTemp489) + ((0.00997955259f * fTemp135) + ((0.080813013f * fTemp490) + ((0.107547231f * fTemp491) + ((0.0824304968f * fTemp492) + ((0.0302743614f * fTemp209) + ((0.0415356904f * fTemp497) + ((0.0899685696f * fTemp498) + ((0.126316115f * fTemp499) + ((0.13028352f * fTemp500) + ((0.102603227f * fTemp501) + ((((((((((((fTemp508 + (((0.0979644135f * fTemp0) + (0.333628356f * fTemp506)) + (0.726218462f * fTemp507))) + (0.814081252f * fTemp510)) + (0.183782458f * fTemp229)) + (0.111087374f * fTemp233)) + (0.340098262f * fTemp234)) + (0.336313963f * fTemp235)) + (0.121646777f * fTemp236)) + (0.0851771608f * fTemp504)) + (0.204382464f * fTemp503)) + (0.239143044f * fTemp502)) + (0.156956688f * fTemp22)) + (0.0361949541f * fTemp219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00164799951f * (fTemp17 - fTemp297)) + ((3.05185094e-05f * (fTemp36 - fTemp278)) + ((0.000366222113f * (fTemp285 + (fTemp51 + (fTemp26 - fTemp272)))) + ((0.000640888698f * (fTemp304 - (fTemp73 - fTemp7))) + ((0.000701925717f * (fTemp310 - (fTemp262 - (fTemp76 - (fTemp224 - fTemp106))))) + ((0.000610370189f * (fTemp518 + (fTemp333 - (fTemp91 + (fTemp39 - fTemp93))))) + ((0.00057985168f * (fTemp332 + (fTemp345 - (fTemp169 - (fTemp27 + (fTemp181 + fTemp515)))))) + ((0.000946073793f * (fTemp337 - (fTemp47 - (fTemp64 - fTemp127)))) + ((0.00122074038f * (fTemp19 - (fTemp321 - (fTemp350 - (fTemp422 + fTemp168))))) + ((0.000915555283f * (fTemp24 + (fTemp25 + (fTemp81 + fTemp246)))) + ((0.000854518265f * (fTemp28 + (fTemp101 - (fTemp369 - fTemp382)))) + ((0.000793481246f * (fTemp31 + (fTemp9 - fTemp320))) + ((9.15555283e-05f * (fTemp256 - (fTemp407 + fTemp273))) + ((0.00396740623f * (fTemp322 - fTemp264)) + ((0.00347911008f * (fTemp44 - fTemp286)) + ((0.00103762932f * (fTemp406 - fTemp37)) + ((0.00207525864f * (fTemp54 - fTemp706)) + ((0.00390636921f * (fTemp151 + fTemp312)) + ((0.00503555406f * (fTemp68 - (fTemp415 + (fTemp439 + fTemp431)))) + ((0.00167851802f * (fTemp2 - (fTemp429 + fTemp140))) + ((0.00256355479f * (fTemp62 - (fTemp112 + fTemp314))) + ((0.00317392498f * (fTemp303 + (fTemp116 + fTemp379))) + ((0.00329599902f * (fTemp347 + (fTemp301 - fTemp145))) + ((0.00131229591f * (fTemp72 - (fTemp120 - (fTemp85 - fTemp275)))) + ((0.000427259132f * (fTemp96 - (fTemp409 - fTemp343))) + ((0.00476088747f * (fTemp164 - (fTemp257 - (fTemp103 + fTemp173)))) + ((0.00830103457f * (fTemp519 - (fTemp186 + fTemp144))) + ((0.000335703604f * (fTemp166 - (fTemp82 - (fTemp289 - (fTemp384 - fTemp355))))) + ((0.00469985045f * (fTemp288 - fTemp125)) + ((0.00268562883f * (fTemp191 - fTemp137)) + ((0.00921658985f * (fTemp480 - fTemp354)) + ((0.00146488845f * (fTemp263 - (fTemp107 + (fTemp368 - fTemp393)))) + ((0.00115970336f * (fTemp313 + (fTemp426 + fTemp274))) + ((0.00250251777f * (fTemp12 + (fTemp65 - fTemp243))) + ((0.00561540574f * (fTemp77 - fTemp361)) + ((0.00375377666f * (fTemp58 - fTemp126)) + ((0.00292977691f * (fTemp470 - fTemp412)) + ((0.00247199927f * (fTemp249 - fTemp420)) + ((0.00793481246f * (fTemp448 - (fTemp346 - fTemp154))) + ((0.0236823633f * (fTemp482 + fTemp481)) + ((0.00332651753f * fTemp557) + ((0.00527970213f * fTemp60) + ((0.00598162785f * fTemp307) + ((0.00363170262f * fTemp69) + ((0.00253303628f * fTemp157) + ((0.00537125766f * fTemp71) + ((0.00729392376f * fTemp113) + ((0.00805688649f * fTemp117) + ((0.00766014587f * fTemp161) + ((0.00665303506f * fTemp119) + ((0.00567644276f * fTemp163) + ((0.0071108127f * fTemp3) + ((0.00744651631f * fTemp352) + ((0.00460829493f * fTemp165) + ((0.00241096225f * fTemp132) + ((0.00488296151f * fTemp172) + ((0.00491348002f * fTemp267) + ((0.00650044251f * fTemp259) + (fTemp857 + ((0.00054933317f * fTemp70) + ((0.00274666585f * fTemp100) + ((0.0025940733f * fTemp329) + ((0.00177007355f * fTemp338) + ((0.00335703604f * fTemp118) + ((0.00643940549f * fTemp446) + ((0.00823999755f * fTemp447) + ((0.00213629566f * fTemp179) + ((0.00564592425f * fTemp86) + ((0.0132755516f * fTemp367) + ((0.0207831059f * fTemp141) + ((0.0238044374f * fTemp182) + ((0.0090334788f * fTemp184) + ((0.0083925901f * fTemp192) + ((0.017975403f * fTemp193) + ((0.0251777712f * fTemp194) + ((0.0249946602f * fTemp195) + ((0.0181890316f * fTemp196) + ((0.0115665151f * fTemp469) + ((0.013000885f * fTemp476) + ((0.0400097668f * fTemp197) + ((0.0500503555f * fTemp198) + ((0.0408642851f * fTemp199) + (((0.0319223627f * fTemp201) + ((0.0314035453f * fTemp202) + ((0.0292977691f * fTemp203) + ((0.0305185094f * fTemp204) + (((0.0115970336f * fTemp397) + (((((((((((((((((((((((((((((((((((((0.562547684f * fTemp230) + (0.935758531f * fTemp231)) + (0.815820813f * fTemp232)) + (0.365977973f * fTemp511)) + (0.0639667958f * fTemp237)) + (0.162022769f * fTemp238)) + (0.162694171f * fTemp239)) + (0.160191655f * fTemp240)) + (0.155461282f * fTemp391)) + (0.137699515f * fTemp16)) + (0.099276714f * fTemp241)) + (0.0267647337f * fTemp228)) + (0.0100711081f * fTemp227)) + (0.0545060597f * fTemp226)) + (0.130497143f * fTemp225)) + (0.136967078f * fTemp512)) + (0.0566423535f * fTemp505)) + (0.118717f * fTemp223)) + (0.162724689f * fTemp222)) + (0.13159582f * fTemp221)) + (0.0467238389f * fTemp220)) + (0.0285958443f * fTemp495)) + (0.048890654f * fTemp493)) + (0.0701315328f * fTemp218)) + (0.0983306393f * fTemp217)) + (0.126590773f * fTemp216)) + (0.13876766f * fTemp215)) + (0.133457437f * fTemp214)) + (0.112186044f * fTemp213)) + (0.0867030844f * fTemp212)) + (0.0576494634f * fTemp211)) + (0.0191961434f * fTemp210)) + (0.0728476793f * fTemp208)) + (0.1282693f * fTemp207)) + (0.13342692f * fTemp206)) + (0.0925931558f * fTemp205)) + (0.0307626575f * fTemp153))) + (0.0299996957f * fTemp35)))))) + (0.0222479943f * fTemp200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow54 ? (((0.00213629566f * (fTemp76 + fTemp1)) + ((0.00265511032f * (fTemp242 + (fTemp155 - (fTemp530 + fTemp26)))) + ((0.0025940733f * (fTemp398 + (fTemp292 - (fTemp81 + fTemp99)))) + ((0.00180059206f * (fTemp426 + fTemp251)) + ((0.00106814783f * (fTemp254 + (fTemp209 - fTemp276))) + ((0.000457777642f * (fTemp260 - (fTemp322 + (fTemp352 + (fTemp499 + fTemp370))))) + ((0.00057985168f * (fTemp309 - fTemp283)) + ((0.000305185094f * (fTemp291 + (fTemp402 - (fTemp215 + (fTemp497 + fTemp684))))) + ((0.00189214759f * (fTemp10 + fTemp302)) + ((0.000762962736f * (fTemp270 + fTemp305)) + ((0.00369273964f * (fTemp310 - (fTemp355 + fTemp146))) + ((0.00280770287f * (fTemp332 + (fTemp252 - (fTemp145 - fTemp350)))) + ((0.00308236945f * (fTemp337 + (fTemp165 + fTemp11))) + ((0.00311288796f * (fTemp8 - (fTemp172 + fTemp333))) + ((0.00350962859f * (fTemp14 - (fTemp406 + fTemp273))) + ((0.00619525742f * (fTemp24 - (fTemp357 - fTemp160))) + ((0.00347911008f * (fTemp25 - (fTemp132 + fTemp399))) + ((0.000671407208f * (fTemp503 + fTemp28)) + ((0.00152592547f * (fTemp101 - fTemp31)) + ((9.15555283e-05f * (fTemp279 + (fTemp212 - (fTemp496 + (fTemp236 + fTemp391))))) + ((0.00573747978f * (fTemp264 + (fTemp287 + fTemp37))) + ((0.00564592425f * (fTemp340 - (fTemp127 + fTemp263))) + ((0.00585955381f * (fTemp446 + fTemp41)) + ((0.0022583697f * (fTemp280 - (fTemp313 - fTemp67))) + ((0.0132145146f * (fTemp345 + fTemp61)) + ((0.00631733146f * (fTemp62 - (fTemp415 + fTemp853))) + ((0.00366222113f * (fTemp418 + fTemp303)) + ((0.009704886f * (fTemp293 + (fTemp124 + fTemp323))) + ((0.00173955504f * (fTemp96 - (fTemp27 + fTemp854))) + ((0.0107425153f * (fTemp249 + fTemp117)) + ((0.0148014771f * (fTemp167 + fTemp161)) + ((0.00738547929f * (fTemp365 - (fTemp432 + fTemp112))) + ((0.00503555406f * (fTemp170 - (fTemp388 + fTemp12))) + ((0.00241096225f * (fTemp78 - (fTemp356 + fTemp147))) + ((0.00054933317f * (fTemp80 + (fTemp448 - fTemp298))) + ((0.000946073793f * (fTemp394 + fTemp102)) + ((0.00256355479f * (fTemp440 - fTemp372)) + ((0.0042115543f * (fTemp425 - fTemp348)) + ((0.00543229468f * (fTemp424 - fTemp361)) + ((0.00729392376f * (fTemp392 - fTemp82)) + ((0.00680562761f * (fTemp362 - fTemp403)) + ((0.00329599902f * (fTemp459 - fTemp15)) + ((0.00643940549f * (fTemp423 - fTemp39)) + ((0.00561540574f * (fTemp422 - (fTemp477 - fTemp387))) + ((0.00952177495f * (fTemp461 + fTemp364)) + ((0.000488296151f * (fTemp211 + (fTemp224 - fTemp498))) + ((0.00668355357f * fTemp845) + (fTemp812 + ((0.00134281442f * fTemp277) + ((0.00100711081f * fTemp318) + (fTemp796 + ((0.00466933195f * fTemp331) + (fTemp805 + ((0.00454725791f * fTemp304) + ((0.00296029542f * fTemp518) + ((0.00292977691f * fTemp7) + ((0.00805688649f * fTemp339) + ((0.00799584948f * fTemp23) + ((0.00320444349f * fTemp253) + ((0.00704977568f * fTemp286) + ((0.00698873866f * fTemp325) + ((0.00616473891f * fTemp311) + ((0.00473036896f * fTemp45) + ((0.0109256264f * fTemp321) + ((0.0127262184f * fTemp48) + ((0.0105899228f * fTemp51) + ((0.00848414563f * fTemp54) + ((0.0054933317f * fTemp60) + ((0.00509659108f * fTemp307) + ((0.0117801446f * fTemp55) + ((0.0118411817f * fTemp246) + ((0.0093691824f * fTemp2) + ((0.00433362834f * fTemp347) + ((0.00796533097f * fTemp157) + ((0.00866725668f * fTemp72) + ((0.00891140476f * fTemp75) + ((0.00918607134f * fTemp79) + ((0.00961333048f * fTemp349) + ((0.00885036774f * fTemp83) + ((0.0071108127f * fTemp43) + ((0.00512710959f * fTemp271) + ((0.00375377666f * fTemp159) + ((0.00857570115f * fTemp105) + ((0.00994903408f * fTemp109) + ((0.0057985168f * fTemp71) + ((0.0183416251f * fTemp119) + ((0.0193182174f * fTemp163) + ((0.0165715516f * fTemp164) + (fTemp855 + ((0.00753807183f * fTemp166) + ((0.0116580706f * fTemp363) + ((0.016296884f * fTemp63) + ((0.014679403f * fTemp74) + ((0.0104678487f * fTemp125) + ((0.00939970091f * fTemp123) + ((0.00112918485f * fTemp137) + ((0.00155644398f * fTemp115) + ((0.00701925717f * fTemp420) + ((0.00756859034f * fTemp421) + ((0.00491348002f * fTemp369) + ((0.00137333293f * fTemp94) + ((0.0137638478f * fTemp118) + ((0.0228888821f * fTemp177) + ((0.0189214759f * fTemp178) + ((0.00897244178f * fTemp447) + ((0.037324138f * fTemp450) + ((0.0528275408f * fTemp451) + ((0.0218817722f * fTemp452) + ((0.0156865139f * fTemp456) + ((0.0139164403f * fTemp457) + ((0.0121463668f * fTemp460) + ((0.0271919928f * fTemp466) + ((0.0733665004f * fTemp467) + ((0.0684835389f * fTemp468) + ((0.0203558467f * fTemp368) + ((0.0278939176f * fTemp187) + ((0.0465102084f * fTemp188) + ((0.0442518406f * fTemp189) + ((0.0332651772f * fTemp151) + ((0.0446180627f * fTemp190) + ((0.061525315f * fTemp191) + ((0.0820947886f * fTemp192) + ((0.0867641196f * fTemp193) + ((0.0430005789f * fTemp194) + ((0.112735376f * fTemp346) + ((0.163762316f * fTemp471) + ((0.11758782f * fTemp472) + ((0.0277718436f * fTemp478) + ((0.221625417f * fTemp202) + ((0.357860029f * fTemp203) + ((0.271248519f * fTemp204) + ((0.348338276f * fTemp484) + ((0.962645352f * fTemp396) + (fTemp485 + ((0.576769292f * fTemp486) + ((0.191930905f * fTemp487) + ((0.0485244319f * fTemp488) + ((0.0189825129f * fTemp489) + ((0.000854518265f * fTemp492) + ((0.000213629566f * fTemp511) + (0.000823999755f * fTemp22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00234992523f * (fTemp473 - fTemp245)) + ((0.000122074038f * (fTemp265 + (fTemp213 - fTemp814))) + ((0.000518814661f * (fTemp247 + fTemp255)) + ((0.000915555283f * (fTemp261 - (fTemp502 + fTemp210))) + ((0.0012817774f * (fTemp134 - fTemp296)) + ((0.00183111057f * (fTemp95 - fTemp297)) + ((0.00167851802f * (fTemp6 - fTemp324)) + ((0.00372325815f * (fTemp301 - fTemp330)) + ((0.0051576281f * (fTemp13 - fTemp285)) + ((0.00479140598f * (fTemp142 - fTemp18)) + ((0.00408948027f * (fTemp319 - (fTemp89 - fTemp516))) + ((6.10370189e-05f * (fTemp320 - (fTemp491 + (fTemp218 - (fTemp228 + fTemp505))))) + ((3.05185094e-05f * (fTemp266 + (fTemp129 - (fTemp358 - (fTemp226 - (fTemp227 - (fTemp233 + (fTemp0 - fTemp510)))))))) + ((0.00714133121f * (fTemp136 - fTemp47)) + ((0.0123599963f * (fTemp449 - fTemp21)) + ((0.00662251655f * (fTemp353 - fTemp312)) + ((0.00567644276f * (fTemp126 - fTemp33)) + ((0.00720236823f * (fTemp386 - fTemp68)) + ((0.00949125644f * (fTemp116 - fTemp69)) + ((0.00640888698f * (fTemp52 - fTemp156)) + ((0.0035401471f * (fTemp268 - fTemp88)) + ((0.00244148076f * (fTemp338 - fTemp91)) + ((0.00836207159f * (fTemp375 - fTemp46)) + ((0.00747703481f * (fTemp431 - fTemp113)) + ((0.00888088625f * (fTemp409 - fTemp400)) + ((0.000335703604f * (fTemp401 - (fTemp232 - fTemp458))) + ((0.0110171819f * (fTemp413 + fTemp73)) + ((0.00521866512f * (fTemp329 + fTemp120)) + ((0.00634784997f * (fTemp90 - fTemp20)) + ((0.00277718436f * (fTemp50 + (fTemp407 + fTemp9))) + ((0.0038758507f * (fTemp341 + (fTemp150 + fTemp173))) + ((0.00360118411f * (fTemp30 + (fTemp259 + fTemp131))) + ((0.00589007232f * (fTemp130 + fTemp326)) + ((0.00317392498f * (fTemp171 + (fTemp149 + fTemp379))) + ((0.00488296151f * (fTemp103 + (fTemp411 + fTemp29))) + ((0.00527970213f * (fTemp267 + (fTemp416 + fTemp281))) + ((0.00463881344f * (fTemp114 + fTemp288)) + ((0.00393688772f * (fTemp360 + fTemp85)) + ((0.00436414685f * (fTemp290 + fTemp59)) + ((0.00607318338f * (fTemp404 + fTemp128)) + ((0.00732444227f * (fTemp378 + fTemp258)) + ((0.00762962736f * (fTemp274 + (fTemp351 + (fTemp430 + fTemp417)))) + ((0.00659199804f * (fTemp87 + fTemp248)) + ((0.00735496078f * (fTemp383 + fTemp42)) + ((0.00506607257f * (fTemp139 + fTemp49)) + ((0.00219733268f * (fTemp100 + fTemp92)) + ((0.00238044374f * (fTemp380 + fTemp93)) + ((0.00726340525f * (fTemp294 + fTemp4)) + ((0.000732444227f * (fTemp17 - fTemp515)) + ((0.00210577715f * (fTemp106 - (fTemp441 - fTemp377))) + ((0.000183111057f * (fTemp214 + (fTemp501 + (fTemp225 + (fTemp241 + (fTemp16 - (fTemp240 + (fTemp508 + fTemp237)))))))) + ((0.000244148076f * (fTemp216 + (fTemp219 - (fTemp506 - fTemp512)))) + ((0.000152592547f * (fTemp217 - (fTemp504 + fTemp495))) + ((0.000396740623f * (fTemp500 - (fTemp238 + fTemp239))) + ((0.000274666585f * (fTemp235 + (fTemp234 - (fTemp507 + fTemp231)))) + ((0.00115970336f * fTemp269) + ((0.00411999878f * fTemp256) + ((0.0045167394f * fTemp262) + ((0.00103762932f * fTemp272) + ((0.00149540696f * fTemp3) + ((0.00207525864f * fTemp519) + ((0.00943021942f * fTemp38) + ((0.0147709586f * fTemp168) + ((0.0148625141f * fTemp169) + ((0.00222785119f * fTemp133) + ((0.000366222113f * fTemp140) + ((0.000701925717f * fTemp56) + ((0.000885036774f * fTemp84) + ((0.00143436994f * fTemp275) + ((0.00231940672f * fTemp53) + ((0.00268562883f * fTemp104) + ((0.0019226661f * fTemp366) + (fTemp856 + ((0.000610370189f * fTemp306) + ((0.000640888698f * fTemp108) + ((0.00125125889f * fTemp144) + ((0.00216681417f * fTemp354) + ((0.00335703604f * fTemp374) + ((0.00430310983f * fTemp295) + ((0.004852443f * fTemp282) + ((0.00540177617f * fTemp359) + ((0.00531022064f * fTemp148) + ((0.00476088747f * fTemp57) + ((0.00469985045f * fTemp314) + ((0.00418103579f * fTemp315) + ((0.0058290353f * fTemp5) + ((0.00592059083f * fTemp317) + ((0.00686666463f * fTemp316) + (fTemp715 + ((0.00769066438f * fTemp343) + ((0.00823999755f * fTemp64) + ((0.00817896053f * fTemp70) + ((0.0077517014f * fTemp371) + ((0.00708029419f * fTemp514) + ((0.00744651631f * fTemp335) + ((0.00674459059f * fTemp243) + ((0.00601214636f * fTemp334) + ((0.00399792474f * fTemp32) + ((0.00305185094f * fTemp40) + ((0.00158696249f * fTemp327) + ((0.00384533219f * fTemp405) + ((0.00683614612f * fTemp98) + ((0.00326548051f * fTemp289) + ((0.00378429517f * fTemp382) + ((0.0028992584f * fTemp384) + ((0.00314340647f * fTemp336) + ((0.00558488723f * fTemp138) + ((0.00448622089f * fTemp408) + ((0.00781273842f * fTemp66) + ((0.00811792351f * fTemp250) + ((0.00894192327f * fTemp410) + ((0.0074159978f * fTemp412) + ((0.0122074038f * fTemp414) + ((0.00967436749f * fTemp390) + ((0.00997955259f * fTemp342) + ((0.00985747855f * fTemp36) + ((0.00131229591f * fTemp122) + ((0.00555436872f * fTemp65) + ((0.00427259132f * fTemp427) + ((0.00695822015f * fTemp428) + ((0.00878933072f * fTemp429) + ((0.00650044251f * fTemp434) + ((0.0125125889f * fTemp435) + ((0.0230109561f * fTemp436) + ((0.030976288f * fTemp437) + ((0.0322580636f * fTemp438) + ((0.0273140669f * fTemp439) + ((0.0231025126f * fTemp381) + ((0.0199896246f * fTemp344) + ((0.016052736f * fTemp111) + ((0.0150151066f * fTemp443) + ((0.0240485854f * fTemp522) + ((0.0305185094f * fTemp175) + ((0.027558215f * fTemp176) + ((0.019531846f * fTemp328) + ((0.0156559963f * fTemp444) + ((0.0223700684f * fTemp445) + ((0.02438429f * fTemp300) + ((0.0299081393f * fTemp77) + ((0.0648213178f * fTemp179) + ((0.0800805688f * fTemp180) + ((0.0611896105f * fTemp376) + ((0.0250556972f * fTemp385) + ((0.0530411713f * fTemp373) + ((0.0519425049f * fTemp121) + ((0.0402844325f * fTemp453) + ((0.0296945106f * fTemp454) + ((0.0200506616f * fTemp455) + ((0.00604266487f * fTemp152) + ((0.0171514023f * fTemp462) + ((0.0649433881f * fTemp463) + ((0.11468856f * fTemp464) + ((0.140293583f * fTemp389) + ((0.118747517f * fTemp393) + ((0.0513931699f * fTemp465) + ((0.0357982107f * fTemp181) + ((0.074648276f * fTemp86) + ((0.082491532f * fTemp367) + ((0.0845057517f * fTemp141) + ((0.0843531638f * fTemp182) + ((0.0853907913f * fTemp183) + ((0.0733359754f * fTemp184) + ((0.0492263548f * fTemp185) + ((0.0140385143f * fTemp186) + ((0.0192571804f * fTemp195) + ((0.103762932f * fTemp196) + ((0.158513144f * fTemp469) + ((0.145390183f * fTemp154) + ((0.0244148076f * fTemp470) + ((0.0999481156f * fTemp474) + ((0.155705437f * fTemp475) + ((0.120670184f * fTemp476) + ((0.0511185043f * fTemp197) + ((0.0155034028f * fTemp198) + ((0.0184942167f * fTemp199) + ((0.0632343516f * fTemp200) + ((0.0176091809f * fTemp58) + ((0.0754112378f * fTemp479) + ((0.165105134f * fTemp480) + ((0.187078461f * fTemp481) + ((0.0398266539f * fTemp201) + ((0.137974188f * fTemp35) + ((0.585833311f * fTemp482) + ((0.778038859f * fTemp397) + ((0.420270383f * fTemp483) + ((0.00299081393f * fTemp153) + ((0.0253913999f * fTemp205) + ((0.03607288f * fTemp206) + ((0.0342417695f * fTemp207) + ((0.0236518458f * fTemp208) + ((0.0110477004f * fTemp135) + ((0.000427259132f * fTemp221) + (0.00286873989f * fTemp490))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00247199927f * (fTemp34 - fTemp513)))) : (((0.00222785119f * (fTemp513 - (fTemp238 - fTemp80))) + ((0.00418103579f * (fTemp244 - (fTemp95 - fTemp156))) + ((0.00494399853f * (fTemp254 + (fTemp388 + fTemp157))) + ((0.00433362834f * (fTemp62 + fTemp260)) + ((0.00363170262f * (fTemp265 + (fTemp372 + fTemp53))) + ((0.00326548051f * (fTemp255 + (fTemp180 + fTemp375))) + ((0.00347911008f * (fTemp261 - (fTemp406 - fTemp140))) + ((0.00570696127f * (fTemp283 - (fTemp301 + fTemp405))) + ((0.0071108127f * (fTemp83 + fTemp291)) + ((0.00332651753f * (fTemp97 + fTemp309)) + ((0.00219733268f * (fTemp270 - (fTemp352 - (fTemp511 - fTemp124)))) + ((0.0019226661f * (fTemp318 + (fTemp171 + (fTemp32 + fTemp259)))) + ((0.00241096225f * (fTemp284 + (fTemp120 + (fTemp40 - (fTemp39 - fTemp407))))) + ((0.00308236945f * (fTemp324 - (fTemp409 - fTemp134))) + ((0.00369273964f * (fTemp292 + (fTemp303 + (fTemp347 + (fTemp64 + fTemp258))))) + ((0.00405896176f * (fTemp482 + fTemp330)) + ((0.00820947904f * (fTemp7 + (fTemp412 + fTemp411))) + ((0.00384533219f * (fTemp11 - (fTemp281 - fTemp343))) + ((0.000122074038f * (fTemp14 + (fTemp129 - (fTemp290 + (fTemp299 - (fTemp0 + fTemp215)))))) + ((0.00393688772f * (fTemp317 - fTemp18)) + ((0.00500503555f * (fTemp353 - fTemp339)) + ((0.00943021942f * (fTemp345 + fTemp262)) + ((0.00299081393f * (fTemp253 - (fTemp377 - fTemp313))) + ((0.00247199927f * (fTemp264 + (fTemp250 + fTemp404))) + ((0.00143436994f * (fTemp51 + (fTemp402 + fTemp27))) + ((0.00177007355f * (fTemp50 + fTemp54)) + ((0.00372325815f * (fTemp127 + fTemp312)) + ((0.00640888698f * (fTemp60 - (fTemp379 - fTemp73))) + ((0.0130314035f * (fTemp55 + fTemp68)) + ((0.00338755455f * (fTemp107 + fTemp67)) + ((0.00283822138f * (fTemp271 + (fTemp66 + fTemp274))) + ((0.00119022187f * (fTemp88 + (fTemp370 + (fTemp85 + (fTemp391 + fTemp346))))) + ((0.000854518265f * (fTemp91 + (fTemp267 + (fTemp386 + fTemp282)))) + ((0.00131229591f * (fTemp334 + fTemp96)) + ((0.00469985045f * (fTemp76 - (fTemp113 + (fTemp117 - (fTemp56 - fTemp63))))) + ((0.0022583697f * (fTemp287 + (fTemp81 + fTemp104))) + ((0.0119937742f * (fTemp151 + fTemp357)) + ((0.000213629566f * (fTemp74 - (fTemp384 - (fTemp496 - fTemp418)))) + ((0.00408948027f * (fTemp248 + fTemp400)) + ((0.000915555283f * (fTemp142 + fTemp341)) + ((0.00238044374f * (fTemp247 - (fTemp410 - fTemp10))) + ((0.00277718436f * (fTemp42 + fTemp137)) + ((0.00134281442f * (fTemp4 + fTemp366)) + ((0.00140385143f * (fTemp298 + (fTemp416 - fTemp315))) + ((0.0025940733f * (fTemp30 + (fTemp408 + fTemp361))) + ((0.00149540696f * (fTemp306 + (fTemp243 + fTemp82))) + ((6.10370189e-05f * (fTemp354 + (fTemp491 + (fTemp497 - (fTemp222 - fTemp501))))) + ((0.00103762932f * (fTemp263 + fTemp326)) + ((0.00146488845f * (fTemp112 + fTemp295)) + ((0.00109866634f * (fTemp57 + fTemp103)) + ((0.000244148076f * (fTemp114 + (fTemp216 - fTemp12))) + ((0.00296029542f * (fTemp147 + (fTemp371 - (fTemp36 + fTemp100)))) + ((0.00100711081f * (fTemp273 - fTemp78)) + ((0.000274666585f * (fTemp13 - (fTemp502 + fTemp87))) + ((0.00378429517f * (fTemp414 + fTemp5)) + ((0.00436414685f * (fTemp90 + (fTemp149 + fTemp316))) + ((0.00253303628f * (fTemp237 + fTemp514)) + ((0.00183111057f * (fTemp415 + fTemp335)) + ((0.000183111057f * (fTemp15 - (fTemp360 + (fTemp447 - (fTemp218 + (fTemp493 + (fTemp500 - (fTemp510 + fTemp224)))))))) + ((0.000946073793f * (fTemp241 - fTemp26)) + ((0.000793481246f * (fTemp227 - fTemp421)) + ((0.00057985168f * (fTemp225 - fTemp512)) + ((0.00054933317f * (fTemp490 + (fTemp492 + (fTemp229 - fTemp230)))) + ((0.000305185094f * (fTemp212 + (fTemp219 + (fTemp221 + (fTemp508 + fTemp223))))) + (((((((0.00402844325f * fTemp269) + ((0.00479140598f * fTemp276) + ((0.00854518265f * fTemp296) + ((0.00933866389f * fTemp297) + ((0.00891140476f * fTemp302) + ((0.00735496078f * fTemp277) + ((0.00534073915f * fTemp305) + (fTemp721 + ((0.00439466536f * fTemp278) + ((0.00531022064f * fTemp285) + ((0.00668355357f * fTemp304) + ((0.00811792351f * fTemp310) + ((0.00878933072f * fTemp332) + ((0.00738547929f * fTemp337) + (fTemp614 + ((0.00686666463f * fTemp24) + ((0.0132450331f * fTemp25) + ((0.0170293283f * fTemp28) + ((0.0174565874f * fTemp31) + ((0.0154118473f * fTemp333) + (fTemp815 + ((0.00723288674f * fTemp319) + ((0.00561540574f * fTemp34) + ((0.00415051728f * fTemp279) + ((0.00262459181f * fTemp286) + ((0.0035401471f * fTemp325) + ((0.00466933195f * fTemp311) + ((0.00830103457f * fTemp37) + ((0.0106509598f * fTemp41) + ((0.012817774f * fTemp45) + ((0.0143436994f * fTemp280) + ((0.0151676992f * fTemp320) + ((0.0149235511f * fTemp266) + ((0.0136417737f * fTemp252) + ((0.0112308115f * fTemp47) + ((0.00833155308f * fTemp321) + ((0.0093691824f * fTemp307) + ((0.0116275521f * fTemp33) + ((0.0135502182f * fTemp69) + ((0.0116885891f * fTemp61) + ((0.00729392376f * fTemp246) + ((0.00546281319f * fTemp2) + ((0.00350962859f * fTemp155) + ((0.00598162785f * fTemp72) + ((0.00695822015f * fTemp75) + ((0.00817896053f * fTemp79) + ((0.00860621966f * fTemp293) + ((0.00491348002f * fTemp43) + ((0.00250251777f * fTemp101) + ((0.0149845881f * fTemp160) + ((0.0211798456f * fTemp105) + ((0.0250556972f * fTemp109) + ((0.0242316965f * fTemp323) + ((0.0186162908f * fTemp46) + ((0.0100100711f * fTemp110) + ((0.0178228095f * fTemp268) + ((0.0216986611f * fTemp272) + ((0.0217291787f * fTemp322) + ((0.0174871068f * fTemp3) + ((0.00869777519f * fTemp519) + ((0.00717184972f * fTemp401) + ((0.00955229346f * fTemp38) + ((0.0105288858f * fTemp168) + ((0.00152592547f * fTemp132) + ((0.00207525864f * fTemp115) + ((0.00476088747f * fTemp275) + ((0.000640888698f * fTemp257) + ((0.000732444227f * fTemp146) + ((0.000823999755f * fTemp374) + ((0.000762962736f * fTemp288) + ((0.003234962f * fTemp126) + ((0.00198370311f * fTemp351) + ((0.00167851802f * fTemp49) + ((0.00234992523f * fTemp92) + ((0.00173955504f * fTemp327) + ((0.00268562883f * fTemp52) + ((0.00628681295f * fTemp413) + ((0.00244148076f * fTemp390) + ((0.0019531846f * fTemp515) + ((0.004852443f * fTemp329) + ((0.0156254768f * fTemp176) + ((0.024567401f * fTemp328) + ((0.0227362905f * fTemp444) + ((0.0126651814f * fTemp445) + ((0.0187994018f * fTemp448) + ((0.0334788039f * fTemp77) + ((0.0271919928f * fTemp179) + ((0.0057985168f * fTemp152) + ((0.0243537705f * fTemp362) + ((0.0443128757f * fTemp456) + ((0.0483108014f * fTemp457) + ((0.0275887325f * fTemp364) + ((0.0198370311f * fTemp389) + ((0.0416272469f * fTemp393) + ((0.058656577f * fTemp465) + ((0.055482652f * fTemp466) + ((0.0238349568f * fTemp467) + ((0.0431531742f * fTemp186) + ((0.0820337534f * fTemp187) + ((0.0780053139f * fTemp188) + ((0.0479750969f * fTemp189) + ((0.00265511032f * fTemp190) + ((0.031037325f * fTemp191) + ((0.0558488742f * fTemp192) + ((0.0524918362f * fTemp193) + ((0.0211188085f * fTemp472) + ((0.0809961259f * fTemp473) + ((0.115878783f * fTemp474) + ((0.0932035297f * fTemp475) + ((0.00473036896f * fTemp476) + ((0.0794396773f * fTemp58) + ((0.204168826f * fTemp477) + ((0.220343634f * fTemp478) + ((0.106784262f * fTemp479) + ((0.0138554033f * fTemp204) + ((0.0215765871f * fTemp35) + ((0.0708334595f * fTemp397) + ((0.152195811f * fTemp483) + ((0.151554912f * fTemp484) + ((0.0459303558f * fTemp488) + ((0.688558638f * fTemp489) + (fTemp153 + ((0.816095471f * fTemp205) + ((0.400860608f * fTemp206) + ((0.0982085615f * fTemp207) + ((0.00863673817f * fTemp208) + ((0.000488296151f * fTemp505) + ((0.0157475509f * fTemp234) + (0.00158696249f * fTemp239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00543229468f * fTemp251)) + (0.00540177617f * fTemp245)) + (0.00497451704f * fTemp398)) + (0.00320444349f * fTemp242)) + (0.00137333293f * fTemp1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00885036774f * (fTemp98 - fTemp518)) + ((3.05185094e-05f * (fTemp23 + (fTemp108 + (fTemp355 - (fTemp417 + (fTemp369 - fTemp565)))))) + ((0.00631733146f * (fTemp44 - fTemp340)) + ((0.00521866512f * (fTemp164 - fTemp48)) + ((0.00271614734f * (fTemp71 - fTemp21)) + ((0.00900296029f * (fTemp338 - fTemp349)) + ((0.00894192327f * (fTemp432 - fTemp159)) + ((0.00317392498f * (fTemp119 - (fTemp70 - fTemp559))) + ((0.00122074038f * (fTemp399 - (fTemp29 - fTemp314))) + ((0.0117801446f * (fTemp438 + fTemp165)) + ((0.0157170333f * (fTemp392 + fTemp363)) + ((0.00939970091f * (fTemp423 - fTemp169)) + ((0.00213629566f * (fTemp20 + (fTemp106 - fTemp136))) + ((0.00189214759f * (fTemp123 + (fTemp59 + (fTemp342 + fTemp380)))) + ((0.00186162908f * (fTemp365 - (fTemp175 + fTemp173))) + ((0.00180059206f * (fTemp170 - (fTemp403 + fTemp358))) + ((0.00155644398f * (fTemp240 - fTemp133)) + ((0.00537125766f * (fTemp9 - fTemp84)) + ((0.000427259132f * (fTemp6 + (fTemp145 + (fTemp504 - fTemp503)))) + ((0.000366222113f * (fTemp144 + (fTemp464 - (fTemp135 + (fTemp22 + fTemp214))))) + ((0.00210577715f * (fTemp383 - fTemp172)) + ((0.0012817774f * (fTemp232 - fTemp150)) + ((0.000335703604f * (fTemp148 - (fTemp210 - fTemp420))) + ((0.001617481f * (fTemp382 - fTemp131)) + ((0.00424207281f * (fTemp455 - fTemp128)) + ((0.00759910885f * (fTemp289 + fTemp130)) + ((0.000976592302f * (fTemp138 - (fTemp231 + fTemp516))) + ((0.00305185094f * (fTemp434 - fTemp65)) + ((0.0224921424f * (fTemp111 + fTemp428)) + ((0.000152592547f * (fTemp209 - (fTemp506 + fTemp495))) + ((9.15555283e-05f * (fTemp211 - (fTemp213 + (fTemp498 + fTemp217)))) + ((0.00848414563f * fTemp842) + ((0.00625629444f * fTemp19) + ((0.00390636921f * fTemp161) + ((0.00381481368f * fTemp163) + ((0.0051576281f * fTemp350) + ((0.0166936256f * fTemp166) + ((0.0107730338f * fTemp167) + ((0.000671407208f * fTemp102) + ((0.00201422162f * fTemp125) + ((0.00204474013f * fTemp348) + ((0.00302133244f * fTemp356) + ((0.00823999755f * fTemp139) + ((0.00643940549f * fTemp93) + ((0.00445570238f * fTemp99) + ((0.00555436872f * fTemp336) + ((0.00106814783f * fTemp122) + ((0.00558488723f * fTemp94) + ((0.00720236823f * fTemp89) + ((0.0106204413f * fTemp424) + ((0.0102237007f * fTemp425) + ((0.0090334788f * fTemp426) + ((0.00708029419f * fTemp17) + ((0.0147099216f * fTemp427) + ((0.0284432508f * fTemp429) + ((0.0264290292f * fTemp430) + ((0.0181890316f * fTemp431) + ((0.00604266487f * fTemp435) + ((0.00994903408f * fTemp436) + ((0.0113528855f * fTemp437) + ((0.0122379223f * fTemp439) + ((0.0140079958f * fTemp381) + ((0.0182500686f * fTemp344) + ((0.024506364f * fTemp294) + ((0.0213019196f * fTemp440) + ((0.0109866634f * fTemp441) + ((0.0126041444f * fTemp442) + ((0.0140995514f * fTemp443) + ((0.00985747855f * fTemp522) + ((0.00164799951f * fTemp300) + ((0.01617481f * fTemp116) + ((0.0244758446f * fTemp118) + ((0.02438429f * fTemp177) + ((0.0200506616f * fTemp178) + ((0.016113773f * fTemp249) + ((0.0159611814f * fTemp387) + ((0.0123599963f * fTemp446) + ((0.0296029542f * fTemp376) + ((0.0498672463f * fTemp449) + ((0.0525833927f * fTemp450) + ((0.0497451723f * fTemp451) + ((0.0511490218f * fTemp452) + ((0.0514847264f * fTemp385) + ((0.0431836918f * fTemp373) + ((0.0297250282f * fTemp121) + ((0.0173650328f * fTemp453) + ((0.009704886f * fTemp454) + ((0.0140690329f * fTemp394) + ((0.0603961311f * fTemp458) + ((0.0920743421f * fTemp459) + ((0.0962553769f * fTemp460) + ((0.0758384988f * fTemp461) + ((0.0453199856f * fTemp462) + ((0.0202642903f * fTemp463) + ((0.0335093252f * fTemp468) + ((0.0916165635f * fTemp368) + ((0.125492111f * fTemp181) + ((0.126407668f * fTemp86) + ((0.114780113f * fTemp367) + ((0.102145448f * fTemp141) + ((0.0966521204f * fTemp182) + ((0.0874965638f * fTemp183) + ((0.0614947975f * fTemp184) + ((0.0144047365f * fTemp185) + ((0.0118717002f * fTemp194) + ((0.0688802749f * fTemp195) + ((0.0983306393f * fTemp196) + ((0.0866115317f * fTemp469) + ((0.0389416181f * fTemp154) + ((0.00769066438f * fTemp470) + ((0.00689718314f * fTemp471) + ((0.141056553f * fTemp197) + ((0.252052367f * fTemp198) + ((0.247138888f * fTemp199) + ((0.104770042f * fTemp200) + ((0.0722373128f * fTemp480) + ((0.203100681f * fTemp481) + ((0.246192813f * fTemp201) + ((0.170201734f * fTemp202) + ((0.0799279734f * fTemp203) + ((0.125797302f * fTemp396) + ((0.48039186f * fTemp485) + ((0.732261121f * fTemp486) + ((0.5535447f * fTemp487) + ((0.000701925717f * fTemp226) + ((0.000885036774f * fTemp228) + ((0.00115970336f * fTemp16) + ((0.00357066561f * fTemp236) + ((0.00399792474f * fTemp233) + (0.0118106632f * fTemp235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow36 ? (iSlow44 ? (iSlow48 ? (iSlow50 ? (((0.00158696249f * (fTemp404 - fTemp277)) + ((0.00643940549f * (fTemp382 - fTemp324)) + ((0.00820947904f * (fTemp383 - fTemp11)) + ((0.00497451704f * (fTemp52 - fTemp256)) + ((0.00491348002f * (fTemp445 - fTemp262)) + ((0.00598162785f * (fTemp407 - fTemp319)) + ((0.003234962f * (fTemp456 - fTemp286)) + ((0.00433362834f * (fTemp268 - fTemp280)) + ((0.012878811f * (fTemp362 - fTemp345)) + ((0.00738547929f * (fTemp15 - fTemp271)) + ((0.000213629566f * (fTemp109 - (fTemp295 + fTemp132))) + ((0.00885036774f * (fTemp102 - fTemp161)) + ((0.00753807183f * (fTemp355 - fTemp353)) + ((0.000305185094f * (fTemp82 - fTemp357)) + ((0.0157475509f * (fTemp387 - fTemp44)) + ((0.00164799951f * (fTemp165 + (fTemp139 + fTemp130))) + ((0.00177007355f * (fTemp363 - (fTemp298 - (fTemp315 + (fTemp416 - fTemp299))))) + ((0.00314340647f * (fTemp386 - fTemp167)) + ((0.0110171819f * (fTemp328 + fTemp120)) + ((0.00170903653f * (fTemp39 - fTemp124)) + ((0.0100100711f * (fTemp380 - fTemp78)) + ((0.000823999755f * (fTemp133 + (fTemp107 + fTemp10))) + ((0.00125125889f * (fTemp247 - (fTemp144 - (fTemp289 + fTemp403)))) + ((6.10370189e-05f * (fTemp115 + (fTemp402 - (fTemp171 - (fTemp361 + (fTemp136 - (fTemp505 + (fTemp234 + fTemp225)))))))) + ((0.00131229591f * (fTemp93 - fTemp173)) + ((0.00320444349f * (fTemp410 - fTemp148)) + ((0.00402844325f * (fTemp516 - fTemp97)) + ((0.0038758507f * (fTemp388 - fTemp313)) + ((0.00381481368f * (fTemp66 - fTemp259)) + ((0.00332651753f * (fTemp464 - fTemp57)) + ((0.00198370311f * (fTemp98 + fTemp378)) + ((0.00921658985f * (fTemp106 + fTemp26)) + ((0.00546281319f * (fTemp409 + fTemp138)) + ((0.00430310983f * (fTemp187 + fTemp81)) + ((0.00463881344f * (fTemp300 + fTemp94)) + ((0.0188299213f * (fTemp431 + (fTemp376 + fTemp435))) + ((0.0241401419f * (fTemp446 + fTemp178)) + ((0.00723288674f * fTemp848) + ((0.00106814783f * fTemp160) + ((0.00631733146f * fTemp272) + ((0.00552385021f * fTemp322) + ((0.00326548051f * fTemp166) + ((0.00747703481f * fTemp73) + ((0.00357066561f * fTemp20) + ((0.00186162908f * fTemp290) + ((0.00207525864f * fTemp9) + ((0.00393688772f * fTemp406) + ((0.00769066438f * fTemp384) + ((0.0093691824f * fTemp100) + ((0.00875881221f * fTemp99) + ((0.00860621966f * fTemp336) + ((0.00778221991f * fTemp379) + ((0.00683614612f * fTemp281) + ((0.00637836847f * fTemp408) + ((0.00460829493f * fTemp250) + ((0.00869777519f * fTemp87) + ((0.00396740623f * fTemp413) + ((0.000640888698f * fTemp36) + (fTemp611 + ((0.00845362712f * fTemp421) + ((0.00967436749f * fTemp369) + ((0.0108340709f * fTemp515) + ((0.0107425153f * fTemp149) + ((0.0110782189f * fTemp329) + ((0.0122074038f * fTemp65) + ((0.0123905148f * fTemp360) + (fTemp560 + ((0.00589007232f * fTemp422) + ((0.00924710836f * fTemp423) + ((0.0137638478f * fTemp424) + ((0.0170293283f * fTemp425) + ((0.0182500686f * fTemp426) + ((0.0178838465f * fTemp17) + ((0.0166325886f * fTemp338) + ((0.0198980682f * fTemp427) + ((0.024323253f * fTemp428) + ((0.0222479943f * fTemp429) + ((0.0162663665f * fTemp430) + ((0.0268257707f * fTemp432) + ((0.0284432508f * fTemp433) + ((0.0223395489f * fTemp434) + ((0.0220038462f * fTemp436) + ((0.0250251777f * fTemp437) + ((0.0196539201f * fTemp438) + ((0.0167851802f * fTemp439) + ((0.0260322895f * fTemp381) + ((0.0362559892f * fTemp344) + ((0.0310983621f * fTemp111) + ((0.0232245866f * fTemp294) + ((0.0234076977f * fTemp440) + ((0.0229499191f * fTemp392) + ((0.0228278451f * fTemp441) + ((0.0253913999f * fTemp442) + ((0.0272530299f * fTemp443) + (fTemp850 + ((0.0152592547f * fTemp175) + ((0.0150456252f * fTemp176) + ((0.00567644276f * fTemp444) + ((0.00823999755f * fTemp177) + ((0.0221259203f * fTemp249) + ((0.0454420596f * fTemp447) + ((0.0606707968f * fTemp448) + ((0.0632648692f * fTemp77) + ((0.053559985f * fTemp179) + ((0.0359202847f * fTemp180) + ((0.022644734f * fTemp449) + ((0.0345164351f * fTemp450) + ((0.0424817652f * fTemp451) + ((0.0382091738f * fTemp452) + ((0.0279854741f * fTemp385) + ((0.0233161412f * fTemp373) + ((0.0275887325f * fTemp121) + ((0.0269783624f * fTemp453) + ((0.0202337727f * fTemp454) + ((0.0150151066f * fTemp455) + ((0.0167546626f * fTemp152) + ((0.00247199927f * fTemp457) + ((0.0181279946f * fTemp364) + ((0.0242316965f * fTemp394) + (fTemp851 + ((0.028992584f * fTemp459) + ((0.0417493209f * fTemp460) + ((0.0491958372f * fTemp461) + ((0.0546586514f * fTemp462) + ((0.040742211f * fTemp463) + ((0.0229804385f * fTemp466) + ((0.0649433881f * fTemp467) + ((0.0766319782f * fTemp468) + ((0.0551469475f * fTemp368) + ((0.029114658f * fTemp181) + ((0.0331125818f * fTemp86) + ((0.050263986f * fTemp367) + ((0.0372936204f * fTemp141) + (((((((((((((((((((((((((((0.00112918485f * fTemp207) + (0.00796533097f * fTemp206)) + (0.0208441429f * fTemp205)) + (0.0292672515f * fTemp153)) + (0.0272835474f * fTemp489)) + (0.0167241432f * fTemp488)) + (0.0224005859f * fTemp482)) + (0.640888691f * fTemp35)) + (0.433362842f * fTemp204)) + (0.0827967152f * fTemp481)) + (0.174291208f * fTemp480)) + (0.0752281249f * fTemp479)) + (0.0397656187f * fTemp58)) + (0.0777306408f * fTemp200)) + (0.0603350922f * fTemp199)) + (0.091433458f * fTemp198)) + (0.0426343568f * fTemp197)) + (0.134983361f * fTemp473)) + (0.148716703f * fTemp472)) + (0.0378124341f * fTemp471)) + (0.0746177584f * fTemp196)) + (0.142246768f * fTemp195)) + (0.0706503466f * fTemp194)) + (0.0153813288f * fTemp192)) + (0.0644245744f * fTemp191)) + (0.042542804f * fTemp190)) + (0.0200811792f * fTemp182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00256355479f * (fTemp282 + fTemp513)) + ((0.00280770287f * (fTemp398 + (fTemp101 + fTemp309))) + ((0.00299081393f * (fTemp323 + fTemp245)) + ((0.00302133244f * (fTemp251 + (fTemp306 + fTemp261))) + ((0.0025940733f * (fTemp254 - (fTemp412 - fTemp255))) + ((0.00228888821f * (fTemp6 + fTemp260)) + ((0.00231940672f * (fTemp265 + (fTemp417 + fTemp12))) + ((0.00347911008f * (fTemp276 + (fTemp85 + fTemp134))) + ((0.00222785119f * (fTemp291 + (fTemp342 + fTemp263))) + ((0.00152592547f * (fTemp275 + fTemp296)) + ((0.0012817774f * (fTemp297 + (fTemp84 + (fTemp530 + fTemp146)))) + ((0.00439466536f * (fTemp318 + (fTemp37 + fTemp719))) + ((0.0083925901f * fTemp852) + ((0.00878933072f * (fTemp14 - (fTemp390 - fTemp123))) + ((0.00506607257f * (fTemp116 + fTemp339)) + ((0.0051576281f * (fTemp326 + fTemp31)) + ((0.00653096102f * (fTemp253 + (fTemp311 - (fTemp89 - fTemp340)))) + ((0.00213629566f * (fTemp103 + fTemp41)) + ((0.0122379223f * (fTemp38 + fTemp266)) + ((0.00686666463f * (fTemp54 + fTemp21)) + ((0.006469924f * (fTemp51 + (fTemp88 - (fTemp415 - fTemp142)))) + ((0.00704977568f * (fTemp312 - (fTemp414 + fTemp4))) + ((0.00888088625f * (fTemp63 + fTemp33)) + ((0.0105594043f * (fTemp293 + fTemp69)) + ((0.00448622089f * (fTemp347 + fTemp155)) + ((0.00805688649f * (fTemp168 + fTemp43)) + ((0.00189214759f * (fTemp366 + fTemp76)) + ((0.000701925717f * (fTemp209 + fTemp159)) + ((0.0019226661f * (fTemp327 - fTemp105)) + ((0.00726340525f * (fTemp71 - (fTemp301 - fTemp113))) + ((0.00238044374f * (fTemp359 - fTemp3)) + ((0.000366222113f * (fTemp519 - (fTemp341 + (fTemp405 - (fTemp212 + (fTemp215 + fTemp214)))))) + ((0.00057985168f * (fTemp352 - (fTemp273 - (fTemp495 + fTemp172)))) + ((0.000427259132f * (fTemp169 + (fTemp224 + fTemp127))) + ((0.00173955504f * (fTemp50 + (fTemp108 + fTemp145))) + ((0.00137333293f * (fTemp248 - fTemp137)) + ((0.000671407208f * (fTemp80 + (fTemp95 + fTemp42))) + ((0.00143436994f * (fTemp140 + (fTemp491 - fTemp29))) + ((0.00149540696f * (fTemp30 + fTemp56)) + ((0.000457777642f * (fTemp358 - (fTemp122 - (fTemp211 + fTemp824)))) + ((0.00250251777f * (fTemp354 + fTemp257)) + ((0.00338755455f * (fTemp267 - (fTemp411 - fTemp49))) + ((0.00488296151f * (fTemp112 + fTemp147)) + ((0.000274666585f * (fTemp22 + fTemp59)) + ((0.00103762932f * (fTemp5 - fTemp348)) + ((0.00100711081f * (fTemp356 + fTemp126)) + ((0.000518814661f * (fTemp128 + (fTemp351 + (fTemp217 + (fTemp498 + (fTemp500 + (fTemp503 + fTemp501))))))) + ((0.00115970336f * (fTemp90 - (fTemp418 - fTemp64))) + ((0.00167851802f * (fTemp258 + (fTemp92 + fTemp335))) + ((0.00109866634f * (fTemp274 + (fTemp474 + (fTemp492 - fTemp487)))) + ((0.000946073793f * (fTemp70 + fTemp375)) + ((0.000122074038f * (fTemp514 + (fTemp504 + (fTemp16 + (fTemp239 + (fTemp238 + (fTemp236 + (fTemp511 + (fTemp232 + (fTemp229 + fTemp564)))))))))) + ((0.000152592547f * (fTemp208 + (fTemp226 + (fTemp241 + (fTemp391 + (fTemp237 + fTemp581)))))) + ((0.00054933317f * (fTemp135 + (fTemp210 + (fTemp218 + (fTemp493 + (fTemp496 + (fTemp499 + fTemp497))))))) + ((0.000488296151f * (fTemp216 + (fTemp220 + fTemp219))) + ((0.000244148076f * (fTemp512 + fTemp502)) + ((9.15555283e-05f * (fTemp227 + (fTemp235 + fTemp536))) + ((0.00674459059f * fTemp845) + ((0.000183111057f * fTemp686) + ((0.00521866512f * fTemp635) + ((0.00274666585f * fTemp244) + ((0.00344859157f * fTemp269) + ((0.00308236945f * fTemp283) + ((0.00146488845f * fTemp302) + ((0.0019531846f * fTemp305) + ((0.00372325815f * fTemp270) + ((0.00527970213f * fTemp284) + ((0.0077517014f * fTemp292) + ((0.00866725668f * fTemp330) + ((0.00900296029f * fTemp331) + ((0.00881984923f * fTemp278) + ((0.00851466414f * fTemp285) + ((0.00827051606f * fTemp304) + ((0.00817896053f * fTemp310) + ((0.00781273842f * fTemp7) + ((0.0071108127f * fTemp337) + ((0.008087405f * fTemp18) + ((0.00350962859f * fTemp23) + ((0.00277718436f * fTemp24) + ((0.00305185094f * fTemp25) + ((0.00399792474f * fTemp28) + ((0.0054933317f * fTemp333) + ((0.00766014587f * fTemp34) + ((0.00811792351f * fTemp279) + ((0.00418103579f * fTemp264) + ((0.00454725791f * fTemp325) + ((0.00204474013f * fTemp45) + ((0.00836207159f * fTemp320) + ((0.014435255f * fTemp252) + ((0.0142521439f * fTemp47) + ((0.0119937742f * fTemp321) + ((0.00894192327f * fTemp48) + ((0.00717184972f * fTemp60) + ((0.00784325693f * fTemp307) + ((0.00976592302f * fTemp68) + ((0.0111392559f * fTemp55) + ((0.0120548112f * fTemp61) + ((0.012817774f * fTemp246) + ((0.0115359966f * fTemp2) + ((0.00943021942f * fTemp62) + ((0.00714133121f * fTemp303) + ((0.00534073915f * fTemp67) + ((0.004852443f * fTemp156) + ((0.00555436872f * fTemp157) + ((0.00720236823f * fTemp72) + ((0.00955229346f * fTemp75) + ((0.01126133f * fTemp79) + ((0.0114749596f * fTemp349) + ((0.00912503432f * fTemp83) + ((0.00509659108f * fTemp91) + ((0.00390636921f * fTemp96) + ((0.00540177617f * fTemp46) + ((0.00729392376f * fTemp287) + ((0.00793481246f * fTemp117) + ((0.00961333048f * fTemp119) + ((0.0107730338f * fTemp163) + ((0.0126651814f * fTemp164) + ((0.0175481439f * fTemp350) + ((0.014679403f * fTemp399) + ((0.0124820704f * fTemp74) + ((0.0136112552f * fTemp400) + ((0.0133976256f * fTemp401) + ((0.00570696127f * fTemp125) + ((0.0106509598f * fTemp365) + ((0.0111087374f * fTemp170) + (fTemp849 + ((0.00445570238f * fTemp27) + ((0.00216681417f * fTemp53) + ((0.00241096225f * fTemp104) + ((0.000762962736f * fTemp370) + ((0.00262459181f * fTemp372) + ((0.00503555406f * fTemp374) + ((0.00442518387f * fTemp114) + ((0.00268562883f * fTemp13) + ((0.00155644398f * fTemp314) + ((0.000610370189f * fTemp317) + ((0.00183111057f * fTemp316) + ((0.001617481f * fTemp343) + ((0.000976592302f * fTemp371) + ((0.00640888698f * fTemp243) + ((0.00234992523f * fTemp32) + ((0.00180059206f * fTemp40) + ((0.00708029419f * fTemp118) + ((0.0412305072f * fTemp389) + ((0.0532547981f * fTemp393) + ((0.0267952513f * fTemp465) + ((0.0101321451f * fTemp183) + ((0.043244727f * fTemp184) + ((0.0474868007f * fTemp185) + ((0.0372325815f * fTemp188) + ((0.0409253202f * fTemp189) + ((0.0149235511f * fTemp151) + ((0.0102847377f * fTemp193) + ((0.0106814783f * fTemp469) + ((0.0790734589f * fTemp154) + ((0.10489212f * fTemp470) + ((0.0847498998f * fTemp346) + ((0.0785546452f * fTemp475) + ((0.0223700684f * fTemp476) + ((0.025940733f * fTemp477) + ((0.0106204413f * fTemp478) + ((0.164830476f * fTemp201) + ((0.445417643f * fTemp202) + ((0.206366166f * fTemp203) + ((0.860805094f * fTemp397) + (fTemp617 + ((0.493240148f * fTemp484) + ((0.100955233f * fTemp396) + ((0.0133365886f * fTemp485) + ((0.0122989593f * fTemp486) + ((0.00122074038f * fTemp490) + ((0.000396740623f * fTemp223) + (0.000335703604f * fTemp213))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00265511032f * (fTemp242 + fTemp1)))) : (((0.00332651753f * (fTemp288 - fTemp513)) + ((0.00469985045f * (fTemp21 - fTemp245)) + ((0.00357066561f * (fTemp445 - fTemp254)) + ((0.00119022187f * (fTemp382 - fTemp255)) + ((0.000122074038f * (fTemp269 - (fTemp360 - (fTemp205 + (fTemp492 + (fTemp210 + (fTemp228 + fTemp740))))))) + ((0.000213629566f * (fTemp276 + (fTemp282 - (fTemp5 + (fTemp441 - fTemp619))))) + ((0.00454725791f * (fTemp484 - fTemp277)) + ((0.00424207281f * (fTemp83 - fTemp305)) + ((0.000915555283f * (fTemp359 - fTemp324)) + ((0.000640888698f * (fTemp292 - (fTemp336 - (fTemp206 - fTemp515)))) + ((0.0019531846f * (fTemp107 + fTemp331)) + ((0.00183111057f * (fTemp386 - fTemp7)) + ((0.000366222113f * (fTemp135 - fTemp337)) + ((0.00610370189f * (fTemp14 + (fTemp80 + fTemp123))) + ((0.00543229468f * fTemp845) + ((0.00338755455f * (fTemp55 + fTemp339)) + ((0.00393688772f * (fTemp61 + fTemp34)) + ((0.00592059083f * (fTemp418 + fTemp279)) + ((0.00509659108f * (fTemp440 + fTemp311)) + ((0.00247199927f * (fTemp248 + fTemp340)) + ((0.00656147953f * (fTemp48 - fTemp41)) + ((0.00314340647f * (fTemp54 + (fTemp307 + (fTemp70 + fTemp349)))) + ((0.00341807306f * (fTemp313 + fTemp33)) + ((0.00350962859f * (fTemp97 + fTemp68)) + ((0.00500503555f * (fTemp75 + fTemp345)) + ((0.00625629444f * (fTemp144 + fTemp246)) + ((0.00363170262f * (fTemp414 + fTemp79)) + ((0.00958281197f * (fTemp132 + fTemp101)) + ((0.00817896053f * (fTemp119 + fTemp76)) + ((0.00457777642f * (fTemp71 + fTemp105)) + ((0.004852443f * (fTemp444 + fTemp109)) + ((0.00665303506f * (fTemp115 + fTemp161)) + ((0.00372325815f * (fTemp84 + fTemp399)) + ((9.15555283e-05f * (fTemp166 - (fTemp87 + (fTemp294 - (fTemp491 + (fTemp217 + (fTemp218 + (fTemp512 + (fTemp225 + (fTemp16 + (fTemp391 + (fTemp240 + (fTemp239 + (fTemp237 + (fTemp236 + (fTemp234 + (fTemp233 + (fTemp511 + (fTemp232 + fTemp535))))))))))))))))))) + ((0.00262459181f * (fTemp15 + fTemp400)) + ((0.00531022064f * (fTemp104 + fTemp357)) + ((0.00280770287f * (fTemp371 + fTemp401)) + ((0.00564592425f * (fTemp140 + fTemp818)) + ((0.00326548051f * (fTemp147 + fTemp275)) + ((0.00378429517f * (fTemp53 + (fTemp295 + fTemp263))) + ((0.00787377544f * (fTemp146 + fTemp370)) + ((0.00671407208f * (fTemp358 + (fTemp420 + fTemp6))) + ((0.00585955381f * (fTemp374 + fTemp298)) + ((0.00799584948f * (fTemp30 - (fTemp428 + fTemp17))) + ((0.00567644276f * (fTemp392 + fTemp173)) + ((0.00170903653f * (fTemp150 + (fTemp411 + fTemp258))) + ((0.000396740623f * (fTemp82 + fTemp85)) + ((0.00201422162f * (fTemp148 + (fTemp316 + (fTemp32 + fTemp335)))) + ((0.00277718436f * (fTemp343 + fTemp259)) + ((0.00152592547f * (fTemp413 + fTemp57)) + ((0.000244148076f * (fTemp212 + fTemp13)) + ((3.05185094e-05f * (fTemp12 + (fTemp99 - (fTemp377 - (fTemp493 + (fTemp495 - (fTemp496 - (fTemp499 + (fTemp219 - (fTemp221 + (fTemp222 + (fTemp223 + (fTemp224 + (fTemp22 + (fTemp502 - (fTemp503 + (fTemp508 + fTemp229))))))))))))))))) + ((0.00057985168f * (fTemp410 + fTemp128)) + ((0.000976592302f * (fTemp4 + fTemp403)) + ((0.00228888821f * (fTemp42 - fTemp365)) + ((0.003234962f * (fTemp40 + fTemp375)) + ((0.00155644398f * (fTemp136 + (fTemp243 + (fTemp93 - (fTemp379 - (fTemp122 + fTemp342)))))) + ((0.000946073793f * (fTemp100 + fTemp334)) + ((0.00427259132f * (fTemp421 + fTemp299)) + ((0.00115970336f * (fTemp405 - (fTemp408 - fTemp139))) + ((0.000671407208f * (fTemp130 + (fTemp378 + (fTemp208 + fTemp66)))) + ((0.00164799951f * (fTemp181 + fTemp355)) + ((0.00109866634f * (fTemp369 - fTemp383)) + ((0.00921658985f * fTemp846) + ((0.0151676992f * (fTemp86 - fTemp443)) + ((0.000183111057f * (fTemp490 + (fTemp211 - (fTemp504 - fTemp215)))) + ((6.10370189e-05f * (fTemp209 + (fTemp500 + (fTemp501 - (fTemp505 - (fTemp235 + (fTemp507 + fTemp554))))))) + ((0.00112918485f * fTemp820) + ((0.00134281442f * fTemp278) + ((0.00653096102f * fTemp18) + ((0.00720236823f * fTemp253) + ((0.00750755332f * fTemp264) + ((0.00714133121f * fTemp286) + ((0.00640888698f * fTemp325) + ((0.00405896176f * fTemp266) + ((0.00845362712f * fTemp252) + ((0.00982696004f * fTemp47) + ((0.00863673817f * fTemp321) + ((0.00366222113f * fTemp51) + ((0.00296029542f * fTemp312) + ((0.00335703604f * fTemp69) + ((0.00747703481f * fTemp2) + ((0.00814844202f * fTemp62) + ((0.00842310861f * fTemp303) + ((0.00869777519f * fTemp67) + ((0.00924710836f * fTemp155) + ((0.00994903408f * fTemp347) + ((0.00888088625f * fTemp157) + ((0.00701925717f * fTemp72) + ((0.00344859157f * fTemp293) + ((0.00546281319f * fTemp43) + ((0.0067751091f * fTemp271) + (fTemp847 + ((0.00955229346f * fTemp91) + ((0.0101931822f * fTemp96) + ((0.00634784997f * fTemp159) + ((0.00512710959f * fTemp160) + ((0.00527970213f * fTemp323) + ((0.00555436872f * fTemp46) + ((0.00518814661f * fTemp287) + ((0.00494399853f * fTemp117) + ((0.00851466414f * fTemp163) + ((0.00738547929f * fTemp164) + ((0.00558488723f * fTemp44) + ((0.00408948027f * fTemp353) + ((0.00875881221f * fTemp268) + ((0.0133976256f * fTemp272) + ((0.0187688842f * fTemp322) + ((0.0220343638f * fTemp3) + ((0.0216681417f * fTemp519) + ((0.0161442924f * fTemp352) + ((0.00796533097f * fTemp165) + ((0.000854518265f * fTemp168) + ((0.00283822138f * fTemp169) + ((0.0074159978f * fTemp73) + ((0.012878811f * fTemp120) + ((0.0172124393f * fTemp102) + ((0.0187994018f * fTemp20) + ((0.0173345134f * fTemp124) + ((0.0131534776f * fTemp125) + ((0.0133671071f * fTemp341) + ((0.0149845881f * fTemp273) + ((0.0144657735f * fTemp133) + ((0.0125736259f * fTemp247) + ((0.0100405896f * fTemp137) + ((0.00784325693f * fTemp10) + ((0.00466933195f * fTemp56) + ((0.00692770164f * fTemp366) + ((0.00759910885f * fTemp402) + ((0.00604266487f * fTemp257) + ((0.00756859034f * fTemp145) + ((0.00793481246f * fTemp372) + ((0.00802636798f * fTemp306) + ((0.00729392376f * fTemp108) + ((0.0057985168f * fTemp142) + ((0.00482192449f * fTemp326) + ((0.00433362834f * fTemp171) + ((0.00524918362f * fTemp172) + ((0.00488296151f * fTemp267) + ((0.00143436994f * fTemp59) + ((0.00250251777f * fTemp348) + ((0.00317392498f * fTemp315) + ((0.0028992584f * fTemp290) + ((0.00198370311f * fTemp29) + ((0.00158696249f * fTemp90) + ((0.000885036774f * fTemp274) + ((0.000274666585f * fTemp351) + ((0.001617481f * fTemp404) + ((0.00216681417f * fTemp127) + ((0.00305185094f * fTemp64) + ((0.00167851802f * fTemp514) + ((0.00213629566f * fTemp112) + ((0.0025940733f * fTemp356) + ((0.00149540696f * fTemp289) + ((0.00122074038f * fTemp9) + ((0.00106814783f * fTemp406) + ((0.00375377666f * fTemp384) + ((0.00384533219f * fTemp26) + ((0.00140385143f * fTemp250) + ((0.00222785119f * fTemp388) + (fTemp529 + ((0.00631733146f * fTemp417) + ((0.00103762932f * fTemp106) + ((0.00311288796f * fTemp176) + ((0.00704977568f * fTemp328) + ((0.00460829493f * fTemp300) + ((0.0159306619f * fTemp385) + ((0.028931547f * fTemp373) + ((0.0308847316f * fTemp121) + ((0.0178228095f * fTemp453) + ((0.0268257707f * fTemp458) + ((0.040498063f * fTemp459) + ((0.0350352488f * fTemp460) + ((0.00900296029f * fTemp461) + ((0.0239265114f * fTemp367) + ((0.0476699136f * fTemp182) + ((0.067445904f * fTemp183) + ((0.0698568672f * fTemp184) + ((0.0431836918f * fTemp185) + ((0.0594500564f * fTemp192) + ((0.137730032f * fTemp193) + ((0.133335367f * fTemp194) + ((0.0389111005f * fTemp195) + ((0.057985168f * fTemp346) + ((0.0613116845f * fTemp471) + ((0.00906399731f * fTemp472) + ((0.033845026f * fTemp200) + ((0.175420389f * fTemp58) + ((0.269875169f * fTemp477) + ((0.193060085f * fTemp478) + ((0.132053584f * fTemp202) + ((0.806695759f * fTemp203) + (fTemp204 + ((0.694967508f * fTemp35) + ((0.283791631f * fTemp482) + ((0.0249641407f * fTemp483) + (0.0744346455f * fTemp397))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.0038758507f * (fTemp309 + fTemp242)) + ((0.00430310983f * (fTemp244 - (fTemp11 + (fTemp113 + (fTemp50 + fTemp350))))) + ((0.00189214759f * (fTemp265 + (fTemp516 - fTemp319))) + ((0.000427259132f * (fTemp261 - (fTemp262 + fTemp285))) + ((0.000305185094f * (fTemp256 + fTemp283)) + ((0.00253303628f * (fTemp296 - (fTemp380 + fTemp114))) + ((0.00302133244f * (fTemp318 - (fTemp131 + fTemp60))) + ((0.00219733268f * (fTemp39 + fTemp284)) + ((0.00173955504f * (fTemp27 - fTemp330)) + ((0.000457777642f * (fTemp304 - (fTemp314 - (fTemp149 + fTemp52)))) + ((0.00131229591f * (fTemp310 - (fTemp23 + (fTemp38 - (fTemp407 - fTemp361))))) + ((0.00234992523f * (fTemp301 + fTemp332)) + ((0.00180059206f * fTemp848) + ((0.000152592547f * (fTemp24 + (fTemp317 - (fTemp216 + (fTemp227 + fTemp226))))) + ((0.000793481246f * (fTemp25 - (fTemp207 - fTemp394))) + ((0.000762962736f * (fTemp28 + (fTemp409 - fTemp98))) + ((0.000518814661f * (fTemp333 + (fTemp329 - fTemp126))) + ((0.00988799706f * (fTemp431 - fTemp156)) + ((0.008087405f * (fTemp454 - fTemp134)) + ((0.00439466536f * (fTemp530 - fTemp92)) + ((0.00491348002f * (fTemp387 - fTemp327)) + ((0.0184331797f * (fTemp396 + fTemp437)) + ((0.0325937681f * (fTemp485 - fTemp141)) + ((0.00463881344f * fTemp398) + ((0.00436414685f * fTemp251) + ((0.00271614734f * fTemp260) + ((0.0012817774f * fTemp291) + (fTemp798 + ((0.00445570238f * fTemp302) + ((0.00347911008f * fTemp270) + ((0.00204474013f * fTemp518) + ((0.000610370189f * fTemp31) + ((0.0019226661f * fTemp37) + ((0.00897244178f * fTemp45) + ((0.00726340525f * fTemp280) + ((0.00207525864f * fTemp320) + ((0.00534073915f * fTemp363) + ((0.00698873866f * fTemp167) + ((0.00473036896f * fTemp63) + ((0.000335703604f * fTemp74) + ((0.00915555283f * fTemp170) + ((0.0108645894f * fTemp78) + (fTemp849 + ((0.00238044374f * fTemp138) + ((0.00137333293f * fTemp81) + ((0.00244148076f * fTemp36) + ((0.000488296151f * fTemp65) + ((0.0103762932f * fTemp95) + ((0.014557329f * fTemp94) + ((0.01617481f * fTemp89) + ((0.0158696249f * fTemp422) + ((0.0148319956f * fTemp423) + ((0.0142521439f * fTemp424) + ((0.012817774f * fTemp425) + ((0.0107425153f * fTemp426) + ((0.0071108127f * fTemp338) + ((0.00790429395f * fTemp427) + ((0.00778221991f * fTemp429) + ((0.0083925901f * fTemp430) + ((0.0117496261f * fTemp432) + ((0.014496292f * fTemp433) + ((0.0180059206f * fTemp434) + ((0.0175786614f * fTemp435) + ((0.0168767367f * fTemp436) + ((0.0231635496f * fTemp438) + ((0.0261238441f * fTemp439) + ((0.022583697f * fTemp381) + ((0.0143131809f * fTemp344) + ((0.00601214636f * fTemp111) + ((0.00976592302f * fTemp442) + ((0.0151066622f * fTemp522) + ((0.00680562761f * fTemp175) + ((0.00210577715f * fTemp116) + ((0.0153202917f * fTemp118) + ((0.0247505121f * fTemp177) + ((0.0217291787f * fTemp178) + ((0.0123599963f * fTemp249) + ((0.00308236945f * fTemp446) + ((0.0077517014f * fTemp447) + ((0.0182805881f * fTemp448) + ((0.0302133244f * fTemp77) + ((0.0379650258f * fTemp179) + ((0.0404065065f * fTemp180) + ((0.0391552486f * fTemp376) + ((0.0351268053f * fTemp449) + ((0.0280770287f * fTemp450) + ((0.0168462172f * fTemp451) + ((0.00177007355f * fTemp452) + ((0.0394299142f * fTemp455) + ((0.064271979f * fTemp152) + ((0.0763267949f * fTemp362) + ((0.0748313889f * fTemp456) + ((0.0599993914f * fTemp457) + ((0.0329905078f * fTemp364) + ((0.0272835474f * fTemp462) + ((0.0589312427f * fTemp463) + ((0.0726950914f * fTemp464) + ((0.076967679f * fTemp389) + ((0.0786767155f * fTemp393) + ((0.0878322721f * fTemp465) + ((0.0938749388f * fTemp466) + ((0.0887478292f * fTemp467) + ((0.0595110953f * fTemp468) + ((0.0261543635f * fTemp368) + ((0.0409253202f * fTemp187) + ((0.0590227991f * fTemp188) + ((0.0731223524f * fTemp189) + ((0.0766319782f * fTemp151) + ((0.0749839768f * fTemp190) + ((0.0281380657f * fTemp191) + ((0.0789513811f * fTemp196) + ((0.171269879f * fTemp469) + ((0.146000549f * fTemp154) + ((0.0572222061f * fTemp470) + ((0.0821253061f * fTemp473) + ((0.117343672f * fTemp474) + ((0.100039676f * fTemp475) + ((0.0736716837f * fTemp476) + ((0.0713522732f * fTemp197) + ((0.0729087219f * fTemp198) + ((0.0339671001f * fTemp199) + ((0.148960844f * fTemp479) + ((0.586809874f * fTemp480) + ((0.819910288f * fTemp481) + ((((((0.00100711081f * fTemp153) + (0.00497451704f * fTemp489)) + (0.0140079958f * fTemp488)) + (0.0256355479f * fTemp487)) + (0.0339976214f * fTemp486)) + (0.572923958f * fTemp201)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00256355479f * (fTemp281 + fTemp1))))) : (iSlow49 ? (((9.15555283e-05f * (fTemp244 - (fTemp278 - (fTemp518 - (fTemp57 - (fTemp139 - (fTemp391 - fTemp439))))))) + ((0.000366222113f * (fTemp2 + fTemp398)) + ((0.000518814661f * (fTemp245 - (fTemp333 + (fTemp256 - (fTemp164 - (fTemp314 + (fTemp409 + fTemp317))))))) + ((0.000488296151f * (fTemp251 + (fTemp265 + (fTemp330 - (fTemp31 + (fTemp13 - fTemp85)))))) + ((0.000457777642f * (fTemp254 - (fTemp69 - (fTemp268 + (fTemp247 + (fTemp259 - (fTemp351 + (fTemp98 + (fTemp420 - fTemp99))))))))) + ((0.000427259132f * (fTemp260 + (fTemp284 - (fTemp8 - (fTemp51 - (fTemp403 - (fTemp178 + fTemp26))))))) + ((0.00057985168f * (fTemp255 + (fTemp324 - (fTemp28 + (fTemp150 - (fTemp289 - fTemp70)))))) + ((0.000732444227f * (fTemp269 + (fTemp175 - fTemp274))) + ((0.000885036774f * (fTemp276 - (fTemp90 + (fTemp42 + fTemp258)))) + ((0.00106814783f * (fTemp291 + (fTemp296 - (fTemp468 + fTemp24)))) + ((0.000915555283f * (fTemp297 - (fTemp356 + (fTemp378 + (fTemp87 + (fTemp383 - (fTemp121 + fTemp411))))))) + ((0.000671407208f * (fTemp302 + (fTemp34 - (fTemp12 - (fTemp126 - (fTemp371 - (fTemp388 - fTemp299))))))) + ((0.000396740623f * (fTemp277 - (fTemp262 + (fTemp443 + fTemp125)))) + ((0.000152592547f * (fTemp305 - (fTemp79 - (fTemp522 + fTemp377)))) + ((0.000244148076f * (fTemp318 + (fTemp380 - fTemp285))) + ((0.000213629566f * (fTemp331 + (fTemp332 - (fTemp415 - fTemp100)))) + ((0.000183111057f * (fTemp123 + fTemp7)) + ((0.00155644398f * (fTemp279 + (fTemp37 - (fTemp249 - fTemp293)))) + ((0.00296029542f * (fTemp264 + (fTemp101 + fTemp96))) + ((0.00299081393f * (fTemp286 + (fTemp48 + (fTemp50 + fTemp363)))) + ((0.00219733268f * (fTemp311 - (fTemp68 - (fTemp427 + fTemp83)))) + ((0.00183111057f * (fTemp340 + (fTemp177 + fTemp148))) + ((0.00143436994f * (fTemp41 + (fTemp45 + (fTemp338 + fTemp170)))) + ((0.00210577715f * (fTemp320 - (fTemp360 - (fTemp116 + fTemp438)))) + ((0.00274666585f * (fTemp266 - (fTemp156 + (fTemp369 + fTemp243)))) + ((0.00329599902f * (fTemp252 - (fTemp329 - fTemp53))) + ((0.0019226661f * (fTemp21 - (fTemp137 + (fTemp127 - fTemp29)))) + ((0.00308236945f * (fTemp76 - fTemp312)) + ((0.00415051728f * (fTemp437 - fTemp60)) + ((0.00112918485f * (fTemp55 + (fTemp444 - fTemp92))) + ((0.0022583697f * (fTemp345 - (fTemp303 - (fTemp129 - fTemp120)))) + ((0.000762962736f * (fTemp349 + (fTemp250 - fTemp128))) + ((0.00265511032f * (fTemp43 + (fTemp408 - fTemp110))) + ((0.00305185094f * (fTemp91 + fTemp88)) + ((0.00326548051f * (fTemp273 + fTemp159)) + ((0.00402844325f * (fTemp186 + fTemp109)) + ((0.000335703604f * (fTemp46 - (fTemp376 + fTemp82))) + ((0.00717184972f * (fTemp373 - fTemp117)) + ((0.0054933317f * (fTemp298 - fTemp161)) + ((0.0045167394f * (fTemp449 + fTemp350)) + ((0.00628681295f * (fTemp399 + (fTemp58 + fTemp104))) + ((0.00189214759f * (fTemp400 + (fTemp78 + fTemp837))) + ((0.00338755455f * (fTemp132 - fTemp38)) + ((0.000823999755f * (fTemp365 + (fTemp17 - fTemp375))) + ((0.00222785119f * (fTemp133 - (fTemp145 - (fTemp463 - fTemp344)))) + ((0.0093691824f * (fTemp451 + fTemp354)) + ((0.00119022187f * (fTemp282 + fTemp780)) + ((0.00180059206f * (fTemp530 - fTemp343)) + ((0.00115970336f * (fTemp425 - fTemp405)) + ((0.00100711081f * (fTemp93 + (fTemp336 + (fTemp176 - (fTemp204 - fTemp328))))) + ((0.00103762932f * (fTemp390 + fTemp412)) + ((0.00424207281f * (fTemp188 - fTemp36)) + ((0.00177007355f * (fTemp300 - fTemp440)) + ((0.0117801446f * (fTemp197 - fTemp469)) + ((0.000640888698f * fTemp261) + ((0.000976592302f * fTemp283) + (fTemp843 + ((0.001617481f * fTemp280) + ((0.00366222113f * fTemp47) + ((0.0035401471f * fTemp321) + ((0.00369273964f * fTemp160) + ((0.00411999878f * fTemp105) + ((0.00277718436f * fTemp323) + ((0.00250251777f * fTemp44) + ((0.00674459059f * fTemp353) + ((0.00482192449f * fTemp357) + ((0.00659199804f * fTemp167) + ((0.00747703481f * fTemp63) + ((0.00546281319f * fTemp74) + ((0.00778221991f * fTemp366) + ((0.00802636798f * fTemp370) + ((0.00375377666f * fTemp257) + ((0.00509659108f * fTemp144) + ((0.01126133f * fTemp374) + ((0.0101626636f * fTemp142) + ((0.00680562761f * fTemp326) + ((0.0019531846f * fTemp114) + ((0.00201422162f * fTemp147) + ((0.00170903653f * fTemp406) + ((0.003234962f * fTemp95) + ((0.00399792474f * fTemp94) + ((0.00405896176f * fTemp89) + ((0.00314340647f * fTemp423) + ((0.00454725791f * fTemp429) + ((0.00543229468f * fTemp430) + ((0.00573747978f * fTemp431) + ((0.00637836847f * fTemp434) + ((0.00625629444f * fTemp435) + ((0.00555436872f * fTemp436) + ((0.00234992523f * fTemp118) + ((0.0077517014f * fTemp450) + (fTemp753 + ((0.0101321451f * fTemp385) + ((0.00408948027f * fTemp364) + ((0.00866725668f * fTemp394) + ((0.0111087374f * fTemp458) + ((0.0110477004f * fTemp459) + ((0.00988799706f * fTemp460) + ((0.00845362712f * fTemp461) + ((0.00607318338f * fTemp462) + ((0.00598162785f * fTemp187) + ((0.0135807367f * fTemp470) + ((0.0242927335f * fTemp346) + ((0.0363170281f * fTemp471) + ((0.0599688701f * fTemp473) + ((0.0623798333f * fTemp474) + ((0.0535294674f * fTemp475) + ((((((((((((((((((((((((((((((((((((((((fTemp508 + (((0.132755518f * fTemp0) + (0.421094388f * fTemp506)) + (0.834070861f * fTemp507))) + (0.6551103f * fTemp510)) + (0.0108645894f * fTemp238)) + (0.064271979f * fTemp239)) + (0.0602435395f * fTemp240)) + (0.00909451582f * fTemp504)) + (0.101596117f * fTemp503)) + (0.119479962f * fTemp502)) + (0.0512100607f * fTemp22)) + (0.0157780703f * fTemp219)) + (0.0464491732f * fTemp501)) + (0.0585650206f * fTemp500)) + (0.0722373128f * fTemp499)) + (0.0797753856f * fTemp498)) + (0.0732444227f * fTemp497)) + (0.0658894628f * fTemp496)) + (0.0505081341f * fTemp495)) + (0.0136417737f * fTemp493)) + (0.0537430942f * fTemp209)) + (0.114078186f * fTemp492)) + (0.137821585f * fTemp491)) + (0.111911371f * fTemp490)) + (0.0500808731f * fTemp135)) + (0.0537736155f * fTemp488)) + (0.0906704888f * fTemp487)) + (0.0943021923f * fTemp486)) + (0.0749229416f * fTemp485)) + (0.0541093163f * fTemp396)) + (0.0433362834f * fTemp484)) + (0.0387279876f * fTemp483)) + (0.0302133244f * fTemp397)) + (0.0177007355f * fTemp482)) + (0.00558488723f * fTemp35)) + (0.00506607257f * fTemp201)) + (0.0148625141f * fTemp481)) + (0.0233466607f * fTemp480)) + (0.0280159917f * fTemp479)) + (0.0278634001f * fTemp478)) + (0.0208441429f * fTemp477)) + (0.0348826572f * fTemp476))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.000610370189f * (fTemp513 - (fTemp292 + (fTemp348 + (fTemp384 - (fTemp185 - fTemp426)))))) + ((0.000274666585f * (fTemp242 + (fTemp304 + (fTemp108 - (fTemp386 - fTemp4))))) + ((3.05185094e-05f * (fTemp337 + (fTemp5 + fTemp319))) + ((0.000854518265f * (fTemp11 + (fTemp124 + (fTemp275 + (fTemp189 - fTemp15))))) + ((0.00152592547f * (fTemp18 - (fTemp382 - (fTemp202 - fTemp154)))) + ((0.00164799951f * (fTemp19 - (fTemp246 + (fTemp301 - fTemp102)))) + ((0.00158696249f * (fTemp339 - (fTemp359 - (fTemp136 - (fTemp81 + fTemp281))))) + ((0.00137333293f * (fTemp381 + fTemp23)) + ((0.000793481246f * (fTemp404 + fTemp25)) + ((0.00268562883f * (fTemp368 - fTemp325)) + ((0.00134281442f * (fTemp54 - (fTemp516 + fTemp315))) + ((0.00360118411f * (fTemp33 + (fTemp149 - fTemp341))) + ((0.00213629566f * (fTemp416 - fTemp61)) + ((0.00109866634f * (fTemp62 - (fTemp313 + fTemp6))) + ((0.0028992584f * (fTemp155 + (fTemp73 - fTemp271))) + ((0.0025940733f * (fTemp157 - (fTemp52 + fTemp27))) + ((0.00207525864f * (fTemp72 - (fTemp131 - fTemp166))) + ((0.00122074038f * (fTemp75 + (fTemp295 + (fTemp514 + (fTemp122 + (fTemp392 + fTemp106)))))) + ((0.00140385143f * (fTemp163 + (fTemp107 - (fTemp414 + fTemp138)))) + ((0.00701925717f * (fTemp446 + fTemp165)) + ((0.00146488845f * (fTemp401 - (fTemp361 + (fTemp445 + fTemp9)))) + ((0.0038758507f * (fTemp456 + fTemp168)) + ((0.0012817774f * (fTemp20 - (fTemp413 - fTemp64))) + ((0.00753807183f * (fTemp190 - fTemp402)) + ((0.00668355357f * (fTemp362 - fTemp358)) + ((0.00518814661f * (fTemp172 + fTemp306)) + ((0.00256355479f * (fTemp49 - fTemp263)) + ((0.00167851802f * (fTemp40 - fTemp97)) + ((6.10370189e-05f * (fTemp410 + fTemp59)) + ((0.000946073793f * (fTemp441 + fTemp316)) + ((0.00204474013f * (fTemp335 + fTemp248)) + ((0.00247199927f * (fTemp464 + fTemp112)) + ((0.00280770287f * (fTemp334 + fTemp844)) + ((0.00216681417f * (fTemp32 - (fTemp424 + fTemp407))) + ((0.00149540696f * (fTemp421 - fTemp379)) + ((0.00372325815f * (fTemp465 - fTemp422)) + ((0.00332651753f * (fTemp203 - fTemp428)) + ((0.00592059083f * (fTemp389 - fTemp432)) + ((0.00619525742f * (fTemp453 - fTemp433)) + ((0.00054933317f * (fTemp467 + fTemp457)) + ((0.0061342204f * (fTemp181 + fTemp393)) + ((0.0162053294f * (fTemp199 + fTemp183)) + ((0.0491042808f * (fTemp236 - fTemp472)) + ((0.00347911008f * fTemp804) + ((0.009704886f * fTemp783) + ((((0.00433362834f * fTemp307) + ((0.00283822138f * fTemp67) + ((0.00286873989f * fTemp347) + ((0.00537125766f * fTemp287) + ((0.00720236823f * fTemp71) + ((0.00787377544f * fTemp113) + ((0.00335703604f * fTemp119) + ((0.00500503555f * fTemp272) + ((0.00976592302f * fTemp322) + ((0.0125431074f * fTemp3) + ((0.0127872555f * fTemp519) + ((0.0108035523f * fTemp352) + ((0.00350962859f * fTemp169) + ((0.00466933195f * fTemp10) + ((0.00729392376f * fTemp115) + ((0.00921658985f * fTemp80) + ((0.00830103457f * fTemp56) + ((0.00512710959f * fTemp84) + ((0.00576799829f * fTemp146) + ((0.00854518265f * fTemp30) + ((0.00860621966f * fTemp134) + ((0.00381481368f * fTemp171) + ((0.00540177617f * fTemp173) + ((0.00476088747f * fTemp103) + ((0.00198370311f * fTemp288) + (fTemp641 + ((0.00473036896f * fTemp342) + ((0.000305185094f * fTemp418) + ((0.00262459181f * fTemp111) + ((0.00241096225f * fTemp294) + ((0.00396740623f * fTemp387) + ((0.0101931822f * fTemp447) + ((0.0121768853f * fTemp448) + ((0.0122684408f * fTemp77) + ((0.00997955259f * fTemp179) + ((0.00567644276f * fTemp180) + ((0.0107730338f * fTemp454) + ((0.0115359966f * fTemp455) + ((0.00958281197f * fTemp152) + ((0.00125125889f * fTemp466) + ((0.0121463668f * fTemp86) + ((0.0191351064f * fTemp367) + ((0.0235297717f * fTemp141) + ((0.022583697f * fTemp182) + ((0.00784325693f * fTemp184) + ((0.00570696127f * fTemp151) + ((0.0074159978f * fTemp191) + ((0.00912503432f * fTemp192) + ((0.0154728843f * fTemp193) + ((0.0235908087f * fTemp194) + ((0.0272530299f * fTemp195) + ((0.0229499191f * fTemp196) + ((0.00814844202f * fTemp198) + ((0.00918607134f * fTemp200) + ((0.00439466536f * fTemp489) + ((0.0616473891f * fTemp153) + ((0.0988189355f * fTemp205) + ((0.103671379f * fTemp206) + ((0.0747398287f * fTemp207) + (fTemp672 + ((0.0158696249f * fTemp210) + ((0.0701925755f * fTemp211) + ((0.0966216028f * fTemp212) + ((0.105746634f * fTemp213) + ((0.111636706f * fTemp214) + ((0.115268409f * fTemp215) + ((0.104525894f * fTemp216) + ((0.076967679f * fTemp217) + ((0.0350047313f * fTemp218) + ((0.0388805829f * fTemp220) + ((0.0837733075f * fTemp221) + ((0.108951077f * fTemp222) + ((0.105349898f * fTemp223) + ((0.0488296151f * fTemp224) + ((0.101168856f * fTemp505) + ((0.18030335f * fTemp512) + ((0.179357275f * fTemp225) + ((0.114352852f * fTemp226) + ((0.0557573177f * fTemp227) + ((0.0593584999f * fTemp228) + ((0.0743430927f * fTemp241) + ((0.0577105023f * fTemp16) + (((((((((0.0428479873f * fTemp229) + (0.628406644f * fTemp230)) + (0.810052812f * fTemp231)) + (0.620441318f * fTemp232)) + (0.30417797f * fTemp511)) + (0.111117892f * fTemp233)) + (0.0492263548f * fTemp234)) + (0.0554521307f * fTemp235)) + (0.0413525812f * fTemp237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00131229591f * fTemp14)) + (0.000122074038f * fTemp310))))))))))))))))))))))))))))))))))))))))))))))) + (0.000701925717f * (fTemp1 + (fTemp442 + fTemp327))))) : (((0.00112918485f * (fTemp390 - fTemp398)) + ((0.000274666585f * (fTemp305 - fTemp261)) + ((3.05185094e-05f * (fTemp383 - fTemp276)) + ((6.10370189e-05f * (fTemp291 - (fTemp270 + (fTemp34 - (fTemp33 - (fTemp161 + (fTemp515 - (fTemp135 - fTemp451)))))))) + ((0.000183111057f * (fTemp296 + (fTemp325 - (fTemp72 + (fTemp360 + fTemp149))))) + ((0.000335703604f * (fTemp289 + fTemp297)) + ((0.000854518265f * (fTemp253 - fTemp324)) + ((0.00250251777f * (fTemp394 - fTemp310)) + ((0.001617481f * (fTemp144 - fTemp333)) + ((0.000457777642f * (fTemp377 + fTemp279)) + ((0.00271614734f * (fTemp405 - fTemp304)) + ((0.00137333293f * (fTemp413 - fTemp266)) + ((0.00125125889f * (fTemp406 - fTemp21)) + ((0.00134281442f * (fTemp267 - fTemp60)) + ((0.00219733268f * (fTemp69 - (fTemp113 - (fTemp89 - (fTemp209 - fTemp393))))) + ((0.003234962f * (fTemp55 + (fTemp474 + fTemp306))) + ((0.00366222113f * (fTemp345 + (fTemp386 + fTemp5))) + ((0.00280770287f * (fTemp257 + fTemp246)) + ((9.15555283e-05f * (fTemp106 + fTemp62)) + ((0.000793481246f * (fTemp530 - fTemp157)) + ((0.000671407208f * (fTemp75 + (fTemp91 + (fTemp81 - (fTemp362 + fTemp122))))) + ((0.00146488845f * (fTemp79 + (fTemp43 + (fTemp412 + (fTemp439 - fTemp416))))) + ((0.0019531846f * (fTemp425 + fTemp349)) + ((0.00201422162f * (fTemp338 + fTemp293)) + ((0.00177007355f * (fTemp110 + fTemp83)) + ((0.000152592547f * (fTemp407 + fTemp96)) + ((0.000244148076f * (fTemp159 + (fTemp461 - fTemp329))) + ((0.00341807306f * (fTemp105 - (fTemp86 - fTemp125))) + ((0.00402844325f * (fTemp323 + (fTemp112 + fTemp97))) + ((0.00302133244f * (fTemp46 - (fTemp457 + fTemp178))) + ((0.00521866512f * (fTemp164 + (fTemp371 + fTemp363))) + ((0.00430310983f * (fTemp109 - (fTemp522 - fTemp436))) + ((0.00479140598f * (fTemp452 + fTemp44)) + ((0.0051576281f * (fTemp435 + fTemp350)) + ((0.00277718436f * (fTemp272 + fTemp842)) + ((0.00418103579f * (fTemp32 + fTemp400)) + ((0.00183111057f * (fTemp341 + fTemp401)) + ((0.00189214759f * (fTemp459 + fTemp120)) + ((0.0028992584f * (fTemp102 + (fTemp30 + fTemp6))) + ((0.00305185094f * (fTemp123 + (fTemp145 + (fTemp281 + fTemp316)))) + ((0.00210577715f * (fTemp273 + (fTemp17 + fTemp426))) + ((0.0061342204f * (fTemp148 + fTemp275)) + ((0.00601214636f * (fTemp470 + fTemp402)) + ((0.00491348002f * (fTemp314 + fTemp358)) + ((0.00292977691f * (fTemp475 + fTemp146)) + ((0.00314340647f * (fTemp372 + (fTemp258 - (fTemp456 + fTemp36)))) + ((0.0022583697f * (fTemp374 - (fTemp464 - fTemp449))) + ((0.00427259132f * (fTemp57 + fTemp142)) + ((0.0058290353f * (fTemp514 + fTemp326)) + ((0.00393688772f * (fTemp295 + (fTemp49 + fTemp243))) + ((0.00140385143f * (fTemp516 + fTemp171)) + ((0.00317392498f * (fTemp288 + (fTemp410 + fTemp130))) + ((0.00616473891f * (fTemp359 - (fTemp454 + fTemp118))) + ((0.00518814661f * (fTemp131 + (fTemp315 + (fTemp136 + fTemp64)))) + ((0.00445570238f * (fTemp82 + fTemp147)) + ((0.00424207281f * (fTemp13 + (fTemp126 + (fTemp487 - fTemp445)))) + ((0.00442518387f * (fTemp12 + (fTemp335 + fTemp361))) + ((0.0054933317f * (fTemp480 + fTemp59)) + ((0.00439466536f * (fTemp29 + (fTemp428 + fTemp40))) + ((0.00265511032f * (fTemp128 + (fTemp376 - fTemp417))) + ((0.00283822138f * (fTemp90 - (fTemp463 - fTemp26))) + ((0.00329599902f * (fTemp274 + (fTemp380 + fTemp327))) + ((0.00585955381f * (fTemp434 + fTemp42)) + ((0.00222785119f * (fTemp356 - (fTemp387 - fTemp138))) + ((0.00213629566f * (fTemp424 + fTemp384)) + ((0.00396740623f * (fTemp379 + fTemp336)) + ((0.00308236945f * (fTemp368 + fTemp388)) + ((0.00604266487f * (fTemp433 + fTemp432)) + ((0.000366222113f * (fTemp381 - (fTemp294 + (fTemp476 - fTemp152)))) + ((0.00540177617f * (fTemp154 - fTemp300)) + ((0.000762962736f * fTemp286) + ((0.00378429517f * fTemp61) + ((0.00473036896f * fTemp163) + ((0.00689718314f * fTemp399) + ((0.00897244178f * fTemp353) + ((0.00924710836f * fTemp357) + ((0.0067751091f * fTemp268) + ((0.00891140476f * fTemp63) + ((0.00708029419f * fTemp74) + ((0.00369273964f * fTemp124) + ((0.0025940733f * fTemp133) + ((0.00476088747f * fTemp137) + ((0.00589007232f * fTemp10) + ((0.00656147953f * fTemp115) + ((0.00714133121f * fTemp140) + ((0.00695822015f * fTemp56) + ((0.00622577593f * fTemp53) + ((0.006469924f * fTemp104) + ((0.00662251655f * fTemp366) + ((0.00650044251f * fTemp370) + ((0.00338755455f * fTemp134) + ((0.00253303628f * fTemp108) + ((0.00567644276f * fTemp263) + ((0.00448622089f * fTemp150) + ((0.00543229468f * fTemp85) + ((0.0057985168f * fTemp114) + ((0.00399792474f * fTemp313) + ((0.0042115543f * fTemp259) + ((0.00564592425f * fTemp348) + ((0.00296029542f * fTemp317) + ((0.00375377666f * fTemp351) + ((0.00497451704f * fTemp403) + ((0.00506607257f * fTemp404) + ((0.00500503555f * fTemp107) + ((0.00509659108f * fTemp127) + ((0.00537125766f * fTemp248) + ((0.00463881344f * fTemp375) + ((0.00454725791f * fTemp70) + ((0.00390636921f * fTemp334) + (fTemp834 + ((0.00244148076f * fTemp299) + ((0.00057985168f * fTemp93) + ((0.00360118411f * fTemp100) + ((0.00384533219f * fTemp99) + ((0.00363170262f * fTemp301) + ((0.000640888698f * fTemp418) + ((0.00576799829f * fTemp429) + ((0.00625629444f * fTemp430) + ((0.00619525742f * fTemp431) + ((0.00344859157f * fTemp437) + ((0.00247199927f * fTemp438) + ((0.00906399731f * fTemp385) + ((0.00784325693f * fTemp373) + ((0.00299081393f * fTemp458) + ((0.00350962859f * fTemp181) + ((0.0077517014f * fTemp477) + ((0.0185857732f * fTemp478) + ((0.0153508103f * fTemp479) + ((0.0237128828f * fTemp483) + ((0.0271309558f * fTemp484) + ((0.0231940672f * fTemp396) + ((0.01803644f * fTemp485) + ((((((((((((((((((((((((fTemp508 + (((0.0616779067f * fTemp0) + (0.222785115f * fTemp506)) + (0.605487227f * fTemp507))) + (0.884151757f * fTemp510)) + (0.151890621f * fTemp229)) + (0.265541553f * fTemp233)) + (0.142704546f * fTemp234)) + (0.014435255f * fTemp239)) + (0.0781884193f * fTemp504)) + (0.180700094f * fTemp503)) + (0.179204687f * fTemp502)) + (0.0735801235f * fTemp22)) + (0.0234992523f * fTemp219)) + (0.0546586514f * fTemp501)) + (0.0728782043f * fTemp500)) + (0.0757469386f * fTemp499)) + (0.0710776076f * fTemp498)) + (0.066377759f * fTemp497)) + (0.0726645738f * fTemp496)) + (0.0825525671f * fTemp495)) + (0.0719626471f * fTemp493)) + (0.03234962f * fTemp218)) + (0.0657979101f * fTemp492)) + (0.0967131555f * fTemp491)) + (0.0680867955f * fTemp490)) + (0.0126041444f * fTemp486)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00106814783f * (fTemp513 + (fTemp245 + (fTemp19 - (fTemp68 - (fTemp469 + fTemp322)))))) + ((0.00115970336f * (fTemp242 + (fTemp337 - (fTemp355 - (fTemp87 + fTemp66))))) + ((0.00119022187f * (fTemp244 + (fTemp292 + (fTemp37 + (fTemp280 + (fTemp320 - (fTemp95 + fTemp382))))))) + ((0.000885036774f * (fTemp251 + (fTemp14 + (fTemp111 + fTemp18)))) + ((0.000732444227f * (fTemp254 + (fTemp307 + (fTemp303 - (fTemp38 + (fTemp169 + (fTemp465 + fTemp139))))))) + ((0.00054933317f * (fTemp260 - (fTemp168 - fTemp319))) + ((0.000427259132f * (fTemp265 - (fTemp302 - (fTemp311 - (fTemp369 + fTemp287))))) + ((0.000396740623f * (fTemp255 - (fTemp277 - (fTemp76 + (fTemp408 - (fTemp389 - fTemp392)))))) + ((0.000122074038f * (fTemp269 + (fTemp440 - fTemp309))) + ((0.000213629566f * (fTemp364 + fTemp318)) + ((0.000488296151f * (fTemp450 + fTemp284)) + ((0.00158696249f * (fTemp330 + (fTemp173 + fTemp312))) + ((0.00268562883f * (fTemp285 - (fTemp119 + (fTemp365 - (fTemp481 - fTemp423))))) + ((0.00207525864f * (fTemp518 + (fTemp249 - fTemp411))) + ((0.00131229591f * (fTemp7 + (fTemp256 + (fTemp41 + (fTemp45 - (fTemp27 - fTemp51)))))) + ((0.00103762932f * (fTemp8 - (fTemp88 + fTemp264))) + ((0.0012817774f * (fTemp339 - (fTemp420 + fTemp271))) + ((0.00149540696f * (fTemp23 - (fTemp129 + (fTemp15 + (fTemp121 + fTemp414))))) + ((0.00155644398f * (fTemp252 + fTemp24)) + ((0.00167851802f * (fTemp25 - (fTemp132 - (fTemp4 - fTemp98)))) + ((0.00173955504f * (fTemp28 + (fTemp31 + (fTemp47 - (fTemp409 + fTemp160))))) + ((0.00143436994f * (fTemp48 - (fTemp50 + fTemp2))) + ((0.00152592547f * (fTemp54 - (fTemp94 - fTemp250))) + ((0.000976592302f * (fTemp67 + (fTemp180 + (fTemp473 - fTemp460)))) + ((0.00109866634f * (fTemp155 + (fTemp347 + (fTemp71 - (fTemp166 + (fTemp73 + (fTemp346 + fTemp421))))))) + ((0.000305185094f * (fTemp65 + fTemp101)) + ((0.00357066561f * (fTemp3 - (fTemp20 + (fTemp298 + fTemp247)))) + ((0.00436414685f * (fTemp444 + fTemp352)) + ((0.00823999755f * (fTemp448 - fTemp167)) + ((0.00228888821f * (fTemp443 - fTemp170)) + ((0.00186162908f * (fTemp468 - fTemp78)) + ((0.00701925717f * (fTemp472 - fTemp80)) + ((0.00640888698f * (fTemp176 - fTemp84)) + ((0.00122074038f * (fTemp462 - fTemp354)) + ((0.000610370189f * (fTemp103 + (fTemp441 + fTemp344))) + ((0.00595110934f * (fTemp175 - fTemp282)) + ((0.00460829493f * (fTemp467 - fTemp290)) + ((0.00552385021f * (fTemp471 - fTemp343)) + ((0.00274666585f * (fTemp466 - fTemp427)) + ((0.0038758507f * (fTemp240 + fTemp187)) + ((0.0115970336f * (fTemp220 - fTemp397)) + ((0.000946073793f * fTemp534) + ((0.000823999755f * fTemp537) + ((0.0019226661f * fTemp331) + ((0.00234992523f * fTemp278) + ((0.00164799951f * fTemp332) + ((0.000915555283f * fTemp340) + ((0.00170903653f * fTemp321) + ((0.00198370311f * fTemp117) + ((0.00469985045f * fTemp519) + ((0.00241096225f * fTemp165) + ((0.00332651753f * fTemp342) + ((0.00216681417f * fTemp39) + ((0.00555436872f * fTemp328) + ((0.00634784997f * fTemp116) + ((0.00466933195f * fTemp177) + ((0.00372325815f * fTemp446) + ((0.00607318338f * fTemp447) + ((0.0083925901f * fTemp77) + ((0.00570696127f * fTemp179) + ((0.00488296151f * fTemp453) + ((0.00256355479f * fTemp455) + ((0.0122989593f * fTemp367) + ((0.0163579211f * fTemp141) + ((0.0163884405f * fTemp182) + ((0.0148930326f * fTemp183) + ((0.0129093295f * fTemp184) + ((0.0105594043f * fTemp185) + ((0.00683614612f * fTemp186) + ((0.00561540574f * fTemp188) + ((0.0127872555f * fTemp189) + ((0.0188909583f * fTemp151) + ((0.0193182174f * fTemp190) + ((0.0177312549f * fTemp191) + ((0.0178838465f * fTemp192) + ((0.0208746605f * fTemp193) + ((0.0244148076f * fTemp194) + ((0.0230414756f * fTemp195) + ((0.013061922f * fTemp196) + ((0.00863673817f * fTemp197) + ((0.0215765871f * fTemp198) + ((0.0325632505f * fTemp199) + ((0.0299996957f * fTemp200) + ((0.0136417737f * fTemp58) + ((0.0093691824f * fTemp201) + ((0.0213019196f * fTemp202) + ((0.034272287f * fTemp203) + ((0.0390026569f * fTemp204) + ((0.029053621f * fTemp35) + ((0.00885036774f * fTemp482) + ((0.004852443f * fTemp488) + ((0.0151066622f * fTemp489) + ((0.0313425101f * fTemp153) + ((0.0565507971f * fTemp205) + ((0.082491532f * fTemp206) + ((0.0898159742f * fTemp207) + ((0.0622272417f * fTemp208) + ((0.0670186505f * fTemp210) + ((0.101107821f * fTemp211) + ((0.107760854f * fTemp212) + ((0.112735376f * fTemp213) + ((0.125766784f * fTemp214) + ((0.12851344f * fTemp215) + ((0.095675528f * fTemp216) + ((0.0316171758f * fTemp217) + ((0.0661946461f * fTemp221) + ((0.132114634f * fTemp222) + ((0.154728845f * fTemp223) + ((0.0727256089f * fTemp224) + ((0.0661336109f * fTemp505) + ((0.149906918f * fTemp512) + ((0.129245892f * fTemp225) + ((0.0653401315f * fTemp226) + ((0.0376598425f * fTemp227) + ((0.0407116935f * fTemp228) + ((0.0303353984f * fTemp241) + ((0.0238959938f * fTemp16) + (((((((((0.685995042f * fTemp230) + (0.961851835f * fTemp231)) + (0.571825325f * fTemp232)) + (0.00744651631f * fTemp511)) + (0.0749534592f * fTemp235)) + (0.131076992f * fTemp236)) + (0.0648518354f * fTemp237)) + (0.00680562761f * fTemp238)) + (0.0227973275f * fTemp391))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00100711081f * (fTemp1 + (fTemp156 + (fTemp442 - fTemp9)))))))) : (iSlow45 ? (iSlow47 ? (((0.00149540696f * (fTemp148 + fTemp242)) + ((0.00207525864f * (fTemp244 + (fTemp62 - fTemp260))) + ((0.00308236945f * (fTemp76 - fTemp269)) + ((0.000854518265f * (fTemp140 - fTemp283)) + ((0.000488296151f * (fTemp291 + (fTemp341 - (fTemp211 - fTemp402)))) + ((0.00344859157f * (fTemp226 + fTemp297)) + ((0.00497451704f * (fTemp302 + (fTemp351 + fTemp519))) + ((0.00717184972f * (fTemp342 + fTemp305)) + ((0.00180059206f * (fTemp493 + fTemp292)) + ((0.00244148076f * (fTemp330 + (fTemp321 - fTemp835))) + ((0.00378429517f * (fTemp369 + fTemp331)) + ((0.00512710959f * (fTemp347 + fTemp278)) + ((0.00704977568f * (fTemp310 - (fTemp268 - (fTemp515 + fTemp371)))) + ((0.0071108127f * (fTemp230 + fTemp518)) + ((0.00524918362f * (fTemp7 + (fTemp444 + fTemp172))) + ((0.00335703604f * (fTemp219 + fTemp337)) + ((0.00109866634f * (fTemp19 + fTemp8)) + ((0.000427259132f * (fTemp316 - fTemp11)) + ((0.000885036774f * (fTemp247 - fTemp14)) + ((0.00241096225f * (fTemp339 - (fTemp46 - (fTemp98 - fTemp164)))) + ((0.003234962f * (fTemp127 + fTemp23)) + ((0.00396740623f * (fTemp24 + (fTemp333 + (fTemp349 + fTemp45)))) + ((0.000671407208f * (fTemp128 + fTemp256)) + ((0.0045167394f * (fTemp73 - fTemp319)) + ((0.00860621966f * (fTemp193 + fTemp325)) + ((0.00262459181f * (fTemp280 - (fTemp299 - fTemp168))) + ((0.00158696249f * (fTemp320 - (fTemp88 - fTemp157))) + ((0.000762962736f * (fTemp266 + (fTemp273 + (fTemp133 + (fTemp90 + fTemp80))))) + ((0.00054933317f * (fTemp233 + fTemp252)) + ((0.00402844325f * (fTemp48 - (fTemp22 - fTemp263))) + ((0.0109561449f * (fTemp312 + (fTemp464 - fTemp430))) + ((0.00317392498f * (fTemp156 + (fTemp354 + fTemp372))) + ((0.001617481f * (fTemp72 - (fTemp96 - (fTemp103 - fTemp50)))) + ((0.0025940733f * (fTemp282 + fTemp75)) + ((0.00106814783f * (fTemp43 + fTemp676)) + ((0.00543229468f * (fTemp136 + fTemp160)) + ((0.00253303628f * (fTemp119 - (fTemp496 - fTemp326))) + ((0.00457777642f * (fTemp334 - fTemp44)) + ((0.000701925717f * (fTemp366 + fTemp3)) + ((0.00958281197f * (fTemp166 + fTemp352)) + ((0.00296029542f * (fTemp64 + fTemp363)) + ((0.00375377666f * (fTemp391 + fTemp169)) + ((0.000976592302f * (fTemp6 + fTemp124)) + ((0.00164799951f * (fTemp146 + fTemp84)) + ((0.00140385143f * (fTemp104 + (fTemp225 - fTemp409))) + ((0.000244148076f * (fTemp495 + fTemp370)) + ((0.00265511032f * (fTemp248 + fTemp30)) + ((0.00286873989f * (fTemp144 + fTemp108)) + ((0.00292977691f * (fTemp173 + fTemp374)) + ((0.00238044374f * (fTemp49 + fTemp142)) + ((0.00653096102f * fTemp836) + ((0.00146488845f * (fTemp359 - (fTemp59 + (fTemp81 + fTemp361)))) + ((0.000640888698f * (fTemp315 - (fTemp122 - fTemp99))) + ((0.000823999755f * fTemp837) + ((0.00177007355f * (fTemp224 - fTemp5)) + ((0.00405896176f * (fTemp107 + (fTemp149 + fTemp39))) + ((0.00683614612f * (fTemp413 + fTemp514)) + ((0.00482192449f * (fTemp344 + fTemp335)) + ((0.00137333293f * (fTemp378 - fTemp92)) + ((0.00701925717f * (fTemp388 - fTemp406)) + ((0.0167546626f * fTemp838) + ((0.00332651753f * (fTemp229 - fTemp100)) + ((0.0022583697f * (fTemp240 + fTemp386)) + ((0.0109866634f * (fTemp222 + fTemp381)) + ((0.022461623f * (fTemp194 + fTemp455)) + ((0.0138248848f * (fTemp206 + fTemp201)) + ((0.00885036774f * (fTemp205 - fTemp488)) + ((0.00460829493f * (fTemp212 + fTemp538)) + ((0.00125125889f * fTemp245) + ((0.000183111057f * fTemp251) + ((0.00189214759f * fTemp296) + ((0.00631733146f * fTemp277) + ((0.00729392376f * fTemp309) + ((0.00656147953f * fTemp270) + ((0.00503555406f * fTemp318) + ((0.00338755455f * fTemp284) + ((0.00610370189f * fTemp285) + ((0.00665303506f * fTemp304) + ((0.00662251655f * fTemp332) + ((0.00488296151f * fTemp25) + ((0.00589007232f * fTemp28) + ((0.00576799829f * fTemp31) + ((0.00408948027f * fTemp286) + ((0.011200293f * fTemp340) + ((0.00900296029f * fTemp37) + ((0.00119022187f * fTemp47) + ((0.0111087374f * fTemp307) + ((0.0100711081f * fTemp33) + ((0.00854518265f * fTemp68) + ((0.00573747978f * fTemp55) + ((0.00320444349f * fTemp345) + ((0.00155644398f * fTemp2) + ((0.00567644276f * fTemp67) + ((0.00637836847f * fTemp155) + ((0.00393688772f * fTemp79) + ((0.0028992584f * fTemp105) + ((0.00280770287f * fTemp110) + ((0.013061922f * fTemp71) + ((0.0133365886f * fTemp113) + ((0.0107119968f * fTemp117) + ((0.0118106632f * fTemp165) + ((0.000366222113f * fTemp38) + ((0.00500503555f * fTemp102) + ((0.00350962859f * fTemp20) + ((0.000793481246f * fTemp115) + ((0.00115970336f * fTemp56) + ((0.0019226661f * fTemp275) + (fTemp579 + ((0.00100711081f * fTemp358) + ((0.0012817774f * fTemp257) + ((0.00329599902f * fTemp134) + (fTemp701 + ((0.00604266487f * fTemp295) + ((0.00228888821f * fTemp267) + (fTemp616 + ((0.00430310983f * fTemp85) + ((0.00186162908f * fTemp114) + ((0.00152592547f * fTemp131) + ((0.000610370189f * fTemp258) + ((0.00268562883f * fTemp274) + ((0.00674459059f * fTemp82) + ((0.00546281319f * fTemp404) + ((0.00247199927f * fTemp343) + ((0.00418103579f * fTemp375) + ((0.0074159978f * fTemp42) + ((0.0125125889f * fTemp250) + ((0.0200811792f * fTemp4) + ((0.00668355357f * fTemp383) + ((0.00787377544f * fTemp411) + ((0.00933866389f * fTemp414) + ((0.00915555283f * fTemp416) + ((0.00833155308f * fTemp417) + ((0.00689718314f * fTemp36) + ((0.0107425153f * fTemp437) + ((0.0164799951f * fTemp438) + ((0.0156865139f * fTemp439) + ((0.0240485854f * fTemp294) + ((0.0293588061f * fTemp440) + ((0.0166631062f * fTemp392) + ((0.0143742179f * fTemp176) + ((0.0127567369f * fTemp328) + ((0.0133976256f * fTemp445) + ((0.0354319885f * fTemp300) + ((0.0507827997f * fTemp116) + ((0.0218817722f * fTemp118) + ((0.0327158421f * fTemp447) + ((0.0385448784f * fTemp448) + ((0.0356151015f * fTemp77) + ((0.0383312479f * fTemp179) + ((0.040070802f * fTemp180) + ((0.0354930274f * fTemp376) + ((0.0193792544f * fTemp449) + ((0.0349436924f * fTemp152) + ((0.0186162908f * fTemp362) + ((0.0249336231f * fTemp389) + ((0.0336313993f * fTemp393) + ((0.0182500686f * fTemp465) + ((0.0278328806f * fTemp466) + (fTemp839 + ((0.0836817548f * fTemp468) + ((0.0953703448f * fTemp368) + ((0.0846583471f * fTemp181) + ((0.0289010294f * fTemp86) + ((0.00415051728f * fTemp185) + ((0.0802636817f * fTemp186) + ((0.136478782f * fTemp187) + ((0.112491228f * fTemp188) + ((0.0147099216f * fTemp189) + ((0.124179818f * fTemp472) + ((0.150944546f * fTemp473) + ((0.0877407119f * fTemp474) + ((0.426313072f * fTemp58) + ((0.904293954f * fTemp477) + (fTemp478 + ((0.677755058f * fTemp479) + ((0.271980971f * fTemp480) + ((0.0668660551f * fTemp481) + ((0.00167851802f * fTemp153) + ((0.0146488845f * fTemp207) + ((0.0108645894f * fTemp208) + ((0.00366222113f * fTemp135) + ((0.00735496078f * fTemp213) + ((0.0077517014f * fTemp214) + ((0.00650044251f * fTemp215) + ((0.004852443f * fTemp216) + ((0.0035401471f * fTemp217) + ((0.00277718436f * fTemp218) + ((0.00842310861f * fTemp220) + ((0.0114139225f * fTemp221) + ((0.00738547929f * fTemp223) + ((0.00439466536f * fTemp16) + ((0.00527970213f * fTemp511) + ((0.0090334788f * fTemp231) + (0.0083925901f * fTemp232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00201422162f * (fTemp97 - fTemp398)) + ((0.000946073793f * (fTemp254 + (fTemp510 - fTemp137))) + ((0.00311288796f * (fTemp13 + fTemp265)) + ((0.00363170262f * (fTemp261 + (fTemp238 + fTemp313))) + ((0.00216681417f * (fTemp276 + (fTemp130 - fTemp83))) + ((0.00210577715f * (fTemp78 - fTemp324)) + ((0.000213629566f * (fTemp29 + fTemp18)) + ((0.00250251777f * (fTemp262 + (fTemp501 + fTemp12))) + ((0.00521866512f * (fTemp34 - (fTemp159 - (fTemp485 - fTemp243)))) + ((0.000457777642f * (fTemp264 + (fTemp163 + (fTemp317 + fTemp132)))) + ((0.011322367f * (fTemp380 - fTemp311)) + ((0.00622577593f * (fTemp506 - fTemp41)) + ((0.00585955381f * (fTemp446 - fTemp21)) + ((0.00781273842f * fTemp840) + ((0.00967436749f * (fTemp353 - fTemp54)) + ((0.011383404f * (fTemp63 - fTemp60)) + ((0.00698873866f * (fTemp500 - fTemp69)) + ((0.00442518387f * (fTemp356 - fTemp61)) + ((0.00198370311f * (fTemp314 - fTemp246)) + ((0.0038758507f * (fTemp57 - fTemp303)) + ((0.00341807306f * (fTemp329 - fTemp293)) + ((0.000274666585f * (fTemp348 - fTemp101)) + ((0.00894192327f * (fTemp420 - fTemp287)) + ((0.00628681295f * (fTemp507 - fTemp161)) + ((0.00671407208f * (fTemp237 + fTemp350)) + ((0.00222785119f * (fTemp365 + fTemp322)) + ((0.00381481368f * (fTemp484 + fTemp401)) + ((0.00518814661f * (fTemp138 - fTemp120)) + ((0.00219733268f * (fTemp410 + fTemp123)) + ((0.00204474013f * (fTemp202 + fTemp170)) + ((0.000915555283f * (fTemp516 - fTemp10)) + ((0.00143436994f * (fTemp327 - fTemp298)) + ((0.00411999878f * (fTemp259 - fTemp288)) + ((0.00561540574f * (fTemp497 - fTemp70)) + ((0.00479140598f * (fTemp0 - fTemp112)) + ((0.00433362834f * (fTemp421 + fTemp382)) + ((0.00747703481f * (fTemp235 - fTemp412)) + ((0.0108035523f * (fTemp471 - fTemp390)) + ((0.00769066438f * (fTemp486 + fTemp427)) + ((0.00436414685f * (fTemp436 - (fTemp227 - fTemp490))) + ((0.00830103457f * (fTemp236 - fTemp111)) + ((0.012939848f * (fTemp492 + fTemp456)) + ((0.0792260543f * (fTemp192 + fTemp182)) + ((0.0110782189f * (fTemp367 - fTemp415)) + ((0.00360118411f * fTemp255) + ((0.00494399853f * fTemp279) + ((0.00347911008f * fTemp253) + ((0.00234992523f * fTemp91) + ((0.00372325815f * fTemp323) + ((0.00881984923f * fTemp399) + ((0.00921658985f * fTemp357) + ((0.00473036896f * fTemp272) + ((0.00531022064f * fTemp167) + ((0.0125736259f * fTemp74) + ((0.00906399731f * fTemp400) + ((0.00122074038f * fTemp125) + ((9.15555283e-05f * fTemp147) + ((0.00231940672f * fTemp126) + ((0.000396740623f * fTemp32) + ((0.00131229591f * fTemp40) + (fTemp841 + ((3.05185094e-05f * fTemp139) + ((0.00476088747f * fTemp289) + ((0.00878933072f * fTemp93) + ((0.00979644153f * fTemp9) + ((0.0051576281f * fTemp355) + ((0.0106814783f * fTemp15) + ((0.015991699f * fTemp384) + ((0.00274666585f * fTemp336) + ((0.0101626636f * fTemp379) + ((0.0141300699f * fTemp301) + ((0.0117496261f * fTemp281) + ((0.0067751091f * fTemp407) + ((0.0100405896f * fTemp408) + ((0.00857570115f * fTemp52) + ((0.00708029419f * fTemp418) + ((0.00869777519f * fTemp360) + ((0.00866725668f * fTemp106) + ((0.0141605884f * fTemp377) + ((0.0193182174f * fTemp530) + ((0.0236213263f * fTemp95) + ((0.021332439f * fTemp94) + ((0.0185552537f * fTemp89) + ((0.0157780703f * fTemp422) + ((0.0184026621f * fTemp423) + ((0.0209967345f * fTemp424) + ((0.0231940672f * fTemp425) + ((0.0196844395f * fTemp426) + ((0.0132450331f * fTemp17) + ((0.00759910885f * fTemp338) + ((0.0113528855f * fTemp428) + ((0.0140995514f * fTemp429) + ((0.0136722922f * fTemp431) + ((0.0234992523f * fTemp432) + ((0.0335398428f * fTemp433) + ((0.0313425101f * fTemp434) + ((0.0203863643f * fTemp435) + ((0.0154423658f * fTemp441) + ((0.0396130271f * fTemp442) + ((0.0451979116f * fTemp443) + ((0.0301522873f * fTemp522) + ((0.00369273964f * fTemp175) + ((0.0555131696f * fTemp177) + ((0.131473735f * fTemp178) + ((0.141788989f * fTemp249) + ((0.0801416039f * fTemp387) + ((0.00305185094f * fTemp450) + ((0.0283822138f * fTemp451) + ((0.0553300567f * fTemp452) + ((0.0789513811f * fTemp385) + ((0.090578936f * fTemp373) + ((0.0785241276f * fTemp121) + ((0.0480361357f * fTemp453) + ((0.00753807183f * fTemp454) + ((0.0577715375f * fTemp457) + ((0.0899685696f * fTemp364) + ((0.113834038f * fTemp394) + ((0.117221594f * fTemp458) + ((0.125949889f * fTemp459) + ((0.120181888f * fTemp460) + ((0.112918489f * fTemp461) + ((0.0751365721f * fTemp462) + ((0.0345774703f * fTemp463) + ((0.0625324249f * fTemp141) + ((0.0745567158f * fTemp183) + ((0.0451368764f * fTemp184) + ((0.0931730121f * fTemp151) + ((0.166783661f * fTemp190) + ((0.158482626f * fTemp191) + ((0.046967987f * fTemp195) + ((0.121158481f * fTemp196) + ((0.18967253f * fTemp469) + ((0.221869558f * fTemp154) + ((0.216772974f * fTemp470) + ((0.12494278f * fTemp346) + ((0.0397045799f * fTemp475) + ((0.152592555f * fTemp476) + ((0.326517522f * fTemp197) + ((0.469557792f * fTemp198) + ((0.448957801f * fTemp199) + ((0.143528551f * fTemp200) + ((0.0202642903f * fTemp203) + ((0.0318918414f * fTemp204) + ((0.0329599902f * fTemp35) + ((0.0267342143f * fTemp482) + ((0.0163579211f * fTemp397) + ((0.00778221991f * fTemp483) + ((0.00357066561f * fTemp396) + ((0.00946073793f * fTemp487) + ((0.00491348002f * fTemp489) + ((0.0105288858f * fTemp491) + ((0.0112308115f * fTemp209) + ((0.00643940549f * fTemp210) + ((0.00827051606f * fTemp498) + ((0.00891140476f * fTemp499) + ((0.00820947904f * fTemp502) + ((0.009704886f * fTemp503) + ((0.00851466414f * fTemp504) + ((0.00540177617f * fTemp505) + ((0.00173955504f * fTemp512) + ((0.000305185094f * fTemp239) + ((0.00448622089f * fTemp508) + (0.00424207281f * fTemp234))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000518814661f * (fTemp1 + (fTemp271 - fTemp513))))) : (((0.00204474013f * (fTemp312 + fTemp242)) + ((0.00146488845f * (fTemp244 + (fTemp95 + fTemp45))) + ((0.000732444227f * (fTemp255 + (fTemp492 - fTemp328))) + ((0.00219733268f * (fTemp83 + fTemp269)) + ((0.00213629566f * (fTemp276 - (fTemp347 + (fTemp114 + fTemp27)))) + ((0.00149540696f * (fTemp283 + (fTemp38 + fTemp256))) + ((0.0012817774f * (fTemp54 - fTemp302)) + ((0.00344859157f * (fTemp518 + fTemp284)) + ((0.00402844325f * (fTemp292 - (fTemp369 + fTemp53))) + ((0.00399792474f * (fTemp330 - (fTemp57 - fTemp331))) + ((0.00393688772f * (fTemp307 + fTemp278)) + ((0.00396740623f * (fTemp285 + (fTemp394 - fTemp372))) + ((0.00372325815f * (fTemp310 - (fTemp289 + fTemp80))) + ((0.00207525864f * (fTemp43 - fTemp28)) + ((0.00103762932f * (fTemp110 - fTemp31)) + ((0.000183111057f * (fTemp325 + (fTemp129 + (fTemp495 + fTemp824)))) + ((0.000946073793f * (fTemp287 + fTemp51)) + ((0.00546281319f * (fTemp61 - (fTemp342 - fTemp123))) + ((0.00744651631f * (fTemp119 + fTemp246)) + ((0.00445570238f * (fTemp303 - (fTemp12 + fTemp295))) + ((0.000244148076f * (fTemp72 + (fTemp218 + fTemp214))) + ((0.00265511032f * (fTemp78 + fTemp349)) + ((0.000885036774f * (fTemp491 - fTemp109)) + ((0.000976592302f * (fTemp113 - (fTemp58 - fTemp450))) + ((0.00537125766f * (fTemp94 - fTemp282)) + ((0.000671407208f * (fTemp490 - fTemp122)) + ((0.000610370189f * (fTemp176 - fTemp418)) + ((6.10370189e-05f * (fTemp230 + (fTemp510 + fTemp797))) + ((0.00622577593f * fTemp760) + ((0.000274666585f * fTemp572) + ((((0.00164799951f * fTemp261) + ((0.000518814661f * fTemp309) + ((0.00268562883f * fTemp318) + ((0.00341807306f * fTemp332) + ((0.00469985045f * fTemp337) + ((0.00778221991f * fTemp11) + ((0.00833155308f * fTemp14) + ((0.00723288674f * fTemp18) + ((0.00180059206f * fTemp339) + ((0.00292977691f * fTemp262) + ((0.00424207281f * fTemp319) + ((0.00540177617f * fTemp34) + ((0.0058290353f * fTemp279) + ((0.00534073915f * fTemp253) + ((0.00378429517f * fTemp264) + ((0.00567644276f * fTemp280) + ((0.00933866389f * fTemp320) + ((0.0102542192f * fTemp252) + ((0.00143436994f * fTemp21) + (fTemp825 + ((0.00210577715f * fTemp67) + ((0.00189214759f * fTemp75) + ((0.00277718436f * fTemp79) + ((0.00241096225f * fTemp293) + ((0.00106814783f * fTemp46) + ((0.00521866512f * fTemp161) + ((0.0090334788f * fTemp163) + ((0.00234992523f * fTemp399) + ((0.000762962736f * fTemp167) + ((0.00531022064f * fTemp63) + ((0.00625629444f * fTemp400) + ((0.00408948027f * fTemp401) + ((0.0019531846f * fTemp125) + ((0.00634784997f * fTemp365) + ((0.00512710959f * fTemp170) + ((0.00228888821f * fTemp89) + ((0.00112918485f * fTemp300) + ((0.0156254768f * fTemp116) + ((0.0212408826f * fTemp118) + ((0.0119022187f * fTemp177) + ((0.0120242927f * fTemp455) + ((0.0195928831f * fTemp152) + ((0.0277108066f * fTemp362) + ((0.030915251f * fTemp456) + ((0.032227546f * fTemp457) + ((0.0197149571f * fTemp364) + ((0.0231025126f * fTemp389) + ((0.0623493157f * fTemp393) + ((0.0638142005f * fTemp465) + (fTemp826 + ((0.0166936256f * fTemp184) + ((0.0584734641f * fTemp185) + ((0.0664082766f * fTemp186) + ((0.0675984994f * fTemp187) + ((0.0824304968f * fTemp188) + ((0.0789208636f * fTemp189) + ((0.061525315f * fTemp151) + ((0.0458082817f * fTemp190) + ((0.0594195388f * fTemp469) + ((0.0960722715f * fTemp154) + ((0.072542496f * fTemp470) + (fTemp827 + ((0.0645771697f * fTemp477) + ((0.097781308f * fTemp478) + ((0.109439373f * fTemp479) + ((0.109225743f * fTemp480) + ((0.0439466536f * fTemp481) + ((0.202063054f * fTemp482) + ((0.790887177f * fTemp397) + (fTemp483 + ((0.672627926f * fTemp484) + ((0.246375933f * fTemp396) + ((0.0533463545f * fTemp485) + ((3.05185094e-05f * fTemp504) + (0.0140690329f * fTemp486))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00231940672f * fTemp513)) + (0.00238044374f * fTemp1)))))))))))))))))))))))))))))))) - (((0.000213629566f * (fTemp245 - (fTemp333 + (fTemp71 + (fTemp135 + (fTemp505 + fTemp210)))))) + ((0.00109866634f * (fTemp311 + fTemp254)) + ((0.000122074038f * (fTemp265 - (fTemp211 + (fTemp22 + (fTemp502 + (fTemp512 + (fTemp227 + (fTemp240 + (fTemp239 + (fTemp238 + (fTemp236 + (fTemp235 + (fTemp234 + (fTemp233 + fTemp533)))))))))))))) + ((0.000488296151f * (fTemp296 - fTemp291)) + ((0.00119022187f * (fTemp297 - (fTemp88 - (fTemp267 + fTemp144)))) + ((0.00167851802f * (fTemp41 - fTemp270)) + ((0.0038758507f * (fTemp13 - fTemp324)) + ((0.00390636921f * fTemp828) + ((0.00381481368f * (fTemp140 - fTemp7)) + ((0.00473036896f * (fTemp451 - fTemp19)) + ((0.00216681417f * (fTemp340 + fTemp24)) + ((0.00183111057f * (fTemp105 - fTemp286)) + ((0.0110782189f * (fTemp272 - fTemp266)) + ((0.00759910885f * (fTemp111 - fTemp47)) + ((0.00476088747f * (fTemp84 - fTemp321)) + ((0.00262459181f * (fTemp257 - fTemp48)) + ((0.00305185094f * (fTemp124 - fTemp60)) + ((0.0042115543f * (fTemp171 - fTemp33)) + ((0.00415051728f * (fTemp40 - fTemp68)) + ((0.0045167394f * fTemp829) + ((0.00674459059f * (fTemp243 - fTemp345)) + ((0.00735496078f * (fTemp352 - fTemp2)) + ((0.000335703604f * (fTemp155 - (fTemp209 + fTemp449))) + ((0.00253303628f * (fTemp156 + (fTemp421 - fTemp117))) + ((0.00155644398f * (fTemp454 + fTemp157)) + ((0.00170903653f * (fTemp191 - fTemp271)) + ((9.15555283e-05f * (fTemp91 - (fTemp500 + (fTemp219 + (fTemp225 + (fTemp237 + (fTemp231 + (fTemp506 + fTemp229)))))))) + ((0.0025940733f * (fTemp366 + fTemp101)) + ((0.00311288796f * (fTemp159 + fTemp76)) + ((0.000152592547f * (fTemp323 - (fTemp212 + (fTemp213 + (fTemp493 + (fTemp496 + (fTemp497 + (fTemp498 + (fTemp499 + (fTemp501 + (fTemp220 + (fTemp223 + (fTemp224 + (fTemp503 + (fTemp226 + (fTemp228 + fTemp571)))))))))))))))) + ((0.00964384899f * (fTemp127 - fTemp164)) + ((0.00927762687f * (fTemp20 - fTemp44)) + ((0.00738547929f * (fTemp316 - fTemp350)) + ((0.00848414563f * (fTemp4 + fTemp165)) + ((0.0106509598f * (fTemp169 + (fTemp281 + fTemp404))) + ((0.00494399853f * (fTemp381 + fTemp132)) + ((0.00637836847f * (fTemp98 + fTemp133)) + ((0.00427259132f * (fTemp145 + fTemp115)) + ((0.00430310983f * (fTemp9 + fTemp56)) + ((0.00280770287f * (fTemp36 + fTemp298)) + ((0.00308236945f * (fTemp326 + fTemp6)) + ((0.00363170262f * (fTemp134 + fTemp606)) + ((0.00286873989f * (fTemp355 + fTemp306)) + ((0.00186162908f * (fTemp288 + fTemp374)) + ((0.00158696249f * (fTemp39 + fTemp103)) + ((0.00497451704f * (fTemp85 + (fTemp515 + fTemp147))) + ((0.00329599902f * (fTemp422 + fTemp148)) + ((0.0054933317f * fTemp830) + ((0.00570696127f * (fTemp344 + fTemp314)) + ((0.0074159978f * (fTemp348 + (fTemp178 + fTemp274))) + ((0.00714133121f * (fTemp258 + fTemp290)) + ((0.0067751091f * (fTemp405 + fTemp29)) + ((0.00659199804f * fTemp831) + ((0.00653096102f * (fTemp375 + fTemp126)) + ((0.00701925717f * (fTemp343 + fTemp317)) + ((0.00766014587f * (fTemp90 + (fTemp201 + fTemp130))) + ((0.00827051606f * (fTemp99 + fTemp351)) + ((0.0100405896f * (fTemp301 + fTemp403)) + ((0.0107730338f * (fTemp408 + fTemp107)) + ((0.00619525742f * (fTemp356 + fTemp64)) + ((0.00875881221f * (fTemp100 + fTemp371)) + ((0.00598162785f * (fTemp329 + fTemp334)) + ((0.00756859034f * (fTemp70 + fTemp315)) + ((0.0112918485f * (fTemp428 + fTemp52)) + ((0.0117801446f * (fTemp412 + fTemp409)) + ((0.0154728843f * (fTemp452 + fTemp390)) + ((0.0108035523f * (fTemp427 + fTemp416)) + ((0.011322367f * (fTemp376 + fTemp424)) + ((0.0130924406f * (fTemp206 + fTemp338)) + ((0.00732444227f * fTemp696) + ((0.00979644153f * fTemp595) + ((0.000854518265f * fTemp251) + ((0.000823999755f * fTemp260) + ((0.00100711081f * fTemp277) + ((0.000366222113f * fTemp305) + ((0.00256355479f * fTemp25) + ((0.00274666585f * fTemp37) + ((0.00140385143f * fTemp96) + ((0.0022583697f * fTemp160) + ((0.00326548051f * fTemp353) + ((0.00802636798f * fTemp357) + ((0.0101931822f * fTemp268) + (fTemp832 + ((0.00811792351f * fTemp3) + ((0.00689718314f * fTemp519) + ((0.00790429395f * fTemp166) + ((0.00460829493f * fTemp363) + ((0.00338755455f * fTemp168) + ((0.0172124393f * fTemp73) + ((0.0186773278f * fTemp120) + ((0.0153508103f * fTemp102) + ((0.00384533219f * fTemp50) + (fTemp821 + ((0.00628681295f * fTemp273) + ((0.00601214636f * fTemp247) + ((0.00543229468f * fTemp137) + ((0.004852443f * fTemp10) + ((0.00482192449f * fTemp275) + ((0.00302133244f * fTemp104) + ((0.00317392498f * fTemp370) + ((0.0035401471f * fTemp402) + ((0.003234962f * fTemp358) + ((0.00500503555f * fTemp146) + ((0.00479140598f * fTemp30) + ((0.00173955504f * fTemp108) + ((0.00137333293f * fTemp354) + ((0.00222785119f * fTemp142) + ((0.00366222113f * fTemp172) + ((0.00244148076f * fTemp173) + ((0.00375377666f * fTemp150) + ((0.00454725791f * fTemp359) + ((0.00314340647f * fTemp131) + (fTemp833 + ((0.00457777642f * fTemp259) + ((0.00686666463f * fTemp59) + ((0.00753807183f * fTemp128) + ((0.00930814538f * fTemp82) + ((0.00836207159f * fTemp248) + ((0.00906399731f * fTemp42) + ((0.00854518265f * fTemp514) + ((0.00762962736f * fTemp136) + ((0.00717184972f * fTemp112) + ((0.00524918362f * fTemp49) + ((0.00463881344f * fTemp32) + (fTemp834 + ((0.00488296151f * fTemp327) + ((0.00561540574f * fTemp299) + ((0.00769066438f * fTemp378) + ((0.00442518387f * fTemp406) + (fTemp665 + ((0.00610370189f * fTemp384) + ((0.0087282937f * fTemp26) + ((0.00952177495f * fTemp380) + ((0.00830103457f * fTemp336) + ((0.00924710836f * fTemp379) + (fTemp547 + ((0.00958281197f * fTemp516) + ((0.00912503432f * fTemp81) + ((0.00973540451f * fTemp407) + ((0.0109256264f * fTemp66) + ((0.0100711081f * fTemp250) + ((0.00796533097f * fTemp87) + ((0.00900296029f * fTemp383) + ((0.0125431074f * fTemp410) + ((0.0115054781f * fTemp386) + ((0.0145268105f * fTemp413) + ((0.0159611814f * fTemp414) + ((0.0136112552f * fTemp415) + ((0.00842310861f * fTemp417) + ((0.00057985168f * fTemp420) + ((0.00592059083f * fTemp149) + ((0.00683614612f * fTemp65) + ((0.00888088625f * fTemp360) + ((0.0109866634f * fTemp106) + ((0.0101321451f * fTemp377) + ((0.00509659108f * fTemp530) + ((0.00851466414f * fTemp423) + ((0.0134891812f * fTemp425) + ((0.0141911069f * fTemp426) + ((0.0148625141f * fTemp17) + ((0.0152897732f * fTemp429) + ((0.0187383648f * fTemp430) + ((0.0201422162f * fTemp431) + ((0.0228888821f * fTemp432) + ((0.0288399924f * fTemp433) + ((0.0339060649f * fTemp434) + ((0.0343638435f * fTemp435) + ((0.0292977691f * fTemp436) + ((0.0208136234f * fTemp437) + ((0.0121768853f * fTemp438) + ((0.00704977568f * fTemp439) + ((0.0125125889f * fTemp294) + ((0.016052736f * fTemp440) + ((0.0187688842f * fTemp392) + ((0.0233771782f * fTemp441) + ((0.0271919928f * fTemp442) + ((0.0267342143f * fTemp443) + ((0.0181279946f * fTemp522) + ((0.00595110934f * fTemp175) + ((0.00527970213f * fTemp444) + ((0.0139774773f * fTemp249) + ((0.00949125644f * fTemp387) + ((0.00772118289f * fTemp446) + ((0.0172429588f * fTemp447) + ((0.0349131748f * fTemp448) + ((0.0515457615f * fTemp77) + ((0.0508438386f * fTemp179) + ((0.0348216183f * fTemp180) + ((0.0289010294f * fTemp385) + ((0.0321359895f * fTemp373) + ((0.0259712525f * fTemp121) + ((0.0138554033f * fTemp453) + ((0.0192571804f * fTemp458) + ((0.0509964302f * fTemp459) + ((0.083162941f * fTemp460) + ((0.103823967f * fTemp461) + ((0.109103672f * fTemp462) + ((0.0887173042f * fTemp463) + ((0.0395519882f * fTemp464) + ((0.0189214759f * fTemp467) + ((0.0620136112f * fTemp468) + ((0.0758079812f * fTemp368) + ((0.0780053139f * fTemp181) + ((0.0785546452f * fTemp86) + ((0.0843226388f * fTemp367) + ((0.0734885707f * fTemp141) + ((0.0531632453f * fTemp182) + ((0.0255134739f * fTemp183) + ((0.0431531742f * fTemp192) + ((0.0659199804f * fTemp193) + ((0.0756553859f * fTemp194) + ((0.0823999792f * fTemp195) + ((0.0235297717f * fTemp196) + ((0.0524308011f * fTemp471) + ((0.0885036811f * fTemp472) + ((0.0918607116f * fTemp473) + ((0.0434278399f * fTemp474) + ((0.0286873989f * fTemp475) + ((0.0397045799f * fTemp476) + ((0.0985747874f * fTemp197) + ((0.0934781954f * fTemp198) + ((0.103854485f * fTemp199) + ((0.0457472466f * fTemp200) + ((0.156163216f * fTemp202) + ((0.326975316f * fTemp203) + ((0.457564026f * fTemp204) + ((0.309121996f * fTemp35) + ((0.00335703604f * fTemp487) + ((0.0230109561f * fTemp488) + ((0.0331431031f * fTemp489) + ((0.0328684337f * fTemp153) + (fTemp613 + ((0.000701925717f * fTemp208) + (0.00418103579f * fTemp207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000640888698f * (fTemp23 - fTemp398))))) : (iSlow46 ? (((0.000885036774f * (fTemp70 - fTemp261)) + ((0.00244148076f * (fTemp257 - fTemp291)) + ((6.10370189e-05f * (fTemp330 - (fTemp8 - (fTemp325 + (fTemp41 - (fTemp366 + fTemp62)))))) + ((0.000183111057f * (fTemp331 + (fTemp278 + (fTemp337 - (fTemp37 - (fTemp63 - (fTemp281 - fTemp258))))))) + ((0.00057985168f * (fTemp431 - fTemp339)) + ((0.000762962736f * (fTemp87 - fTemp333)) + ((0.000793481246f * (fTemp220 + fTemp34)) + ((0.00054933317f * (fTemp253 + (fTemp45 - (fTemp51 + (fTemp303 - (fTemp293 - (fTemp117 - (fTemp326 - fTemp720)))))))) + ((0.00100711081f * (fTemp20 + fTemp280)) + ((0.00146488845f * (fTemp320 + (fTemp271 + (fTemp81 + fTemp88)))) + ((0.00170903653f * (fTemp266 + (fTemp371 + fTemp252))) + ((0.00125125889f * (fTemp47 + (fTemp64 + (fTemp334 - (fTemp141 + fTemp423))))) + ((0.0012817774f * (fTemp43 - fTemp155)) + ((0.00106814783f * (fTemp299 - fTemp347)) + ((0.000396740623f * (fTemp157 + (fTemp77 - fTemp425))) + ((0.000946073793f * (fTemp72 + (fTemp364 + fTemp163))) + ((0.000854518265f * (fTemp83 + (fTemp172 + (fTemp351 + fTemp820)))) + ((0.00314340647f * (fTemp101 + (fTemp248 + fTemp123))) + ((0.00491348002f * (fTemp415 + fTemp159)) + ((0.00619525742f * (fTemp109 + (fTemp477 + fTemp36))) + ((0.006469924f * (fTemp400 + fTemp323)) + ((0.00503555406f * (fTemp110 + (fTemp50 - (fTemp294 - fTemp404)))) + ((0.00311288796f * (fTemp408 + fTemp287)) + ((0.00103762932f * (fTemp169 + fTemp71)) + ((0.00256355479f * (fTemp386 + fTemp44)) + ((0.00332651753f * (fTemp350 + (fTemp6 - (fTemp459 - fTemp427)))) + ((0.00390636921f * (fTemp399 + (fTemp145 + (fTemp146 - (fTemp221 - fTemp306))))) + ((0.00405896176f * (fTemp127 + fTemp357)) + ((0.00335703604f * (fTemp429 + fTemp268)) + ((0.00396740623f * (fTemp74 + (fTemp52 + (fTemp250 + (fTemp179 - fTemp441))))) + ((0.00253303628f * (fTemp354 + fTemp168)) + ((0.00180059206f * (fTemp301 + fTemp124)) + ((0.00317392498f * (fTemp365 - (fTemp438 + fTemp89))) + ((0.00308236945f * (fTemp78 + (fTemp390 + fTemp134))) + ((0.0035401471f * (fTemp129 - (fTemp346 - fTemp136))) + ((0.00561540574f * (fTemp132 + (fTemp288 - (fTemp207 - fTemp449)))) + ((0.00430310983f * (fTemp133 + (fTemp405 + fTemp108))) + ((0.00280770287f * (fTemp42 + fTemp247)) + ((0.00158696249f * (fTemp394 + fTemp137)) + ((0.00274666585f * (fTemp491 + fTemp372)) + ((0.00701925717f * (fTemp359 + (fTemp376 + fTemp361))) + ((0.00778221991f * (fTemp148 + (fTemp336 + fTemp128))) + ((0.00814844202f * (fTemp93 + fTemp114)) + ((0.00567644276f * (fTemp90 + fTemp147)) + ((0.00234992523f * (fTemp313 + (fTemp430 + fTemp329))) + ((0.00216681417f * (fTemp13 - (fTemp478 - fTemp343))) + ((0.00283822138f * (fTemp65 + fTemp82)) + ((0.000732444227f * (fTemp95 + fTemp375)) + ((0.000366222113f * (fTemp457 + fTemp92)) + ((0.00241096225f * (fTemp407 + fTemp356)) + ((0.00851466414f * (fTemp182 + fTemp378)) + ((0.0067751091f * (fTemp369 + fTemp420)) + ((0.00384533219f * (fTemp428 + fTemp360)) + ((0.00500503555f * (fTemp450 - fTemp381)) + ((0.00524918362f * (fTemp227 - fTemp111)) + ((0.0387279876f * (fTemp217 + fTemp208)) + ((0.0509659126f * (fTemp0 - fTemp240)) + ((0.00271614734f * fTemp703) + ((0.00640888698f * fTemp683) + ((0.00219733268f * fTemp96) + ((0.00411999878f * fTemp76) + ((0.00546281319f * fTemp160) + ((0.0057985168f * fTemp105) + ((0.00628681295f * fTemp46) + ((0.000213629566f * fTemp119) + ((0.00177007355f * fTemp164) + ((0.0042115543f * fTemp353) + ((0.0028992584f * fTemp519) + ((0.00460829493f * fTemp38) + ((0.00292977691f * fTemp170) + ((0.00433362834f * fTemp27) + (fTemp821 + ((0.0019226661f * fTemp402) + ((0.00320444349f * fTemp30) + ((0.00366222113f * fTemp144) + (fTemp730 + ((0.00445570238f * fTemp267) + ((0.00622577593f * fTemp150) + ((0.00643940549f * fTemp85) + ((0.00653096102f * fTemp282) + ((0.00738547929f * fTemp131) + ((0.001617481f * fTemp259) + ((0.00149540696f * fTemp57) + ((0.00393688772f * fTemp12) + ((0.00607318338f * fTemp314) + ((0.00753807183f * fTemp59) + ((0.00747703481f * fTemp348) + ((0.00570696127f * fTemp290) + (fTemp799 + ((0.00811792351f * fTemp126) + ((0.00878933072f * fTemp5) + ((0.00869777519f * fTemp317) + ((0.00448622089f * fTemp403) + ((0.00482192449f * fTemp107) + ((0.00326548051f * fTemp335) + ((0.00656147953f * fTemp130) + ((0.00958281197f * fTemp98) + ((0.00943021942f * fTemp139) + ((0.00875881221f * fTemp289) + ((0.00842310861f * fTemp9) + ((0.00912503432f * fTemp406) + ((0.00973540451f * fTemp382) + ((0.00967436749f * fTemp355) + ((0.00924710836f * fTemp15) + ((0.00909451582f * fTemp384) + ((0.00921658985f * fTemp26) + ((0.00976592302f * fTemp380) + ((0.0100100711f * fTemp100) + ((0.00955229346f * fTemp99) + ((0.004852443f * fTemp379) + ((0.00442518387f * fTemp66) + ((0.00250251777f * fTemp4) + ((0.0061342204f * fTemp416) + ((0.00695822015f * fTemp417) + ((0.00689718314f * fTemp342) + ((0.0054933317f * fTemp39) + ((0.00540177617f * fTemp122) + ((0.00589007232f * fTemp418) + ((0.00723288674f * fTemp421) + ((0.00509659108f * fTemp515) + ((0.00357066561f * fTemp149) + ((0.00488296151f * fTemp106) + ((0.00350962859f * fTemp530) + ((0.0074159978f * fTemp180) + ((0.00823999755f * fTemp451) + ((0.0131229591f * fTemp452) + ((0.0152592547f * fTemp385) + ((0.013000885f * fTemp373) + ((0.00964384899f * fTemp121) + (fTemp822 + ((0.0136417737f * fTemp454) + ((0.0172124393f * fTemp455) + ((0.0153508103f * fTemp152) + ((0.00863673817f * fTemp362) + ((0.00207525864f * fTemp456) + ((0.00338755455f * fTemp183) + ((0.0105288858f * fTemp192) + ((0.0131839961f * fTemp193) + ((0.00997955259f * fTemp194) + ((0.00466933195f * fTemp195) + ((0.0127567369f * fTemp196) + ((0.0303048808f * fTemp469) + ((0.0376598425f * fTemp154) + ((0.0293893255f * fTemp470) + ((0.00805688649f * fTemp58) + ((0.0107119968f * fTemp203) + ((0.0205694754f * fTemp204) + ((0.0193182174f * fTemp35) + ((0.0168462172f * fTemp482) + ((0.0171208847f * fTemp397) + ((0.0196539201f * fTemp483) + ((0.0224005859f * fTemp484) + ((0.0153202917f * fTemp396) + ((0.00363170262f * fTemp485) + ((0.0652485713f * fTemp135) + ((0.0552079827f * fTemp490) + ((0.0596331693f * fTemp218) + ((0.0709860548f * fTemp493) + ((0.0513016135f * fTemp495) + ((0.0318613239f * fTemp496) + ((0.0301217698f * fTemp497) + ((0.0157475509f * fTemp498) + ((0.0117801446f * fTemp499) + ((0.0803552344f * fTemp22) + ((0.110660113f * fTemp502) + ((((0.0234687347f * fTemp234) + ((0.169103056f * fTemp233) + ((0.218451485f * fTemp229) + ((0.802026451f * fTemp510) + (fTemp508 + ((0.272286147f * fTemp506) + (0.701773107f * fTemp507))))))) + (0.0463881344f * fTemp228)) + (0.0417493209f * fTemp503))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00167851802f * (fTemp53 + fTemp513)) + ((0.00152592547f * (fTemp242 - (fTemp411 - fTemp302))) + ((0.00134281442f * (fTemp31 + fTemp244)) + ((0.00109866634f * (fTemp398 - (fTemp370 + fTemp75))) + ((0.000915555283f * (fTemp245 + (fTemp270 - (fTemp79 + (fTemp522 + fTemp10))))) + ((0.000701925717f * (fTemp251 - (fTemp279 - (fTemp345 + fTemp312)))) + ((0.000488296151f * (fTemp84 + fTemp254)) + ((0.000335703604f * (fTemp260 - (fTemp17 + fTemp120))) + ((0.000274666585f * (fTemp265 + (fTemp284 + (fTemp518 + (fTemp161 - fTemp286))))) + ((0.000457777642f * (fTemp255 - (fTemp295 - (fTemp274 + (fTemp200 - fTemp327))))) + ((0.00228888821f * (fTemp296 - (fTemp3 + fTemp272))) + ((0.00189214759f * (fTemp297 + (fTemp68 - (fTemp338 + fTemp322)))) + ((0.00131229591f * (fTemp277 + (fTemp307 + (fTemp61 - (fTemp80 - (fTemp462 - fTemp140)))))) + ((0.00119022187f * (fTemp305 + (fTemp24 + (fTemp458 + fTemp175)))) + ((0.000610370189f * (fTemp318 - (fTemp321 + (fTemp349 + (fTemp32 + fTemp56))))) + ((9.15555283e-05f * (fTemp383 + fTemp324)) + ((3.05185094e-05f * (fTemp292 - (fTemp332 - (fTemp256 - (fTemp2 - fTemp48))))) + ((0.000244148076f * (fTemp304 + (fTemp340 - fTemp7))) + ((0.000427259132f * (fTemp310 + (fTemp14 - (fTemp264 - (fTemp21 + (fTemp156 - (fTemp516 + (fTemp443 + fTemp409)))))))) + ((0.000518814661f * (fTemp18 + (fTemp19 - (fTemp262 + (fTemp73 + (fTemp102 + (fTemp263 + (fTemp171 - (fTemp426 + fTemp138))))))))) + ((0.000823999755f * (fTemp23 - (fTemp319 + fTemp525))) + ((0.00164799951f * (fTemp28 + (fTemp33 - (fTemp173 + fTemp91)))) + ((0.00238044374f * (fTemp283 - (fTemp388 + fTemp352))) + ((0.000152592547f * (fTemp311 + (fTemp113 + fTemp246))) + ((0.000976592302f * (fTemp60 - (fTemp115 - fTemp67))) + ((0.00198370311f * (fTemp69 - (fTemp358 - (fTemp448 + fTemp94)))) + ((0.00173955504f * (fTemp55 - (fTemp410 - (fTemp442 - fTemp414)))) + ((0.00262459181f * (fTemp422 - fTemp125)) + ((0.00534073915f * (fTemp434 - fTemp273)) + ((0.0019531846f * (fTemp447 - fTemp298)) + ((0.00140385143f * (fTemp432 - fTemp374)) + ((0.00369273964f * (fTemp433 - fTemp97)) + ((0.00344859157f * (fTemp437 - fTemp514)) + ((0.00186162908f * (fTemp461 - fTemp243)) + ((0.00506607257f * (fTemp392 - fTemp377)) + ((0.0121768853f * (fTemp199 + fTemp444)) + ((0.0142521439f * (fTemp178 + fTemp116)) + ((0.0151982177f * (fTemp226 + fTemp476)) + (((0.00143436994f * fTemp269) + ((0.00201422162f * fTemp276) + ((0.00112918485f * fTemp309) + ((0.000305185094f * fTemp11) + ((0.00155644398f * fTemp25) + ((0.000640888698f * fTemp54) + (fTemp823 + ((0.00454725791f * fTemp363) + ((0.00341807306f * fTemp167) + ((0.00137333293f * fTemp275) + ((0.00115970336f * fTemp104) + ((0.00558488723f * fTemp435) + ((0.00476088747f * fTemp436) + ((0.0038758507f * fTemp439) + ((0.00512710959f * fTemp344) + ((0.00537125766f * fTemp440) + ((0.00555436872f * fTemp176) + ((0.00952177495f * fTemp328) + ((0.0131534776f * fTemp445) + ((0.0133671071f * fTemp300) + ((0.0155034028f * fTemp118) + ((0.0160832554f * fTemp177) + ((0.00994903408f * fTemp249) + ((0.00518814661f * fTemp387) + ((0.00265511032f * fTemp446) + ((0.00329599902f * fTemp460) + ((0.00436414685f * fTemp463) + ((0.0109256264f * fTemp464) + ((0.0154728843f * fTemp389) + ((0.0176396985f * fTemp393) + ((0.0145268105f * fTemp465) + ((0.0104983672f * fTemp466) + ((0.0102542192f * fTemp467) + ((0.0170598477f * fTemp468) + ((0.0288399924f * fTemp368) + ((0.0332346559f * fTemp181) + ((0.030854214f * fTemp86) + ((0.0125736259f * fTemp367) + ((0.00796533097f * fTemp184) + ((0.0169682913f * fTemp185) + ((0.0231635496f * fTemp186) + ((0.0281075481f * fTemp187) + ((0.0369273983f * fTemp188) + ((0.0419324338f * fTemp189) + ((0.0419019125f * fTemp151) + ((0.0265816227f * fTemp190) + ((0.00790429395f * fTemp191) + ((0.0337839909f * fTemp471) + ((0.0463576168f * fTemp472) + ((0.0370494723f * fTemp473) + ((0.0175481439f * fTemp474) + ((0.0102847377f * fTemp475) + ((0.0222174749f * fTemp197) + ((0.0225531794f * fTemp198) + ((0.0159306619f * fTemp479) + ((0.0273445845f * fTemp480) + ((0.0308847316f * fTemp481) + ((0.0230719931f * fTemp201) + ((0.00457777642f * fTemp202) + ((0.0171514023f * fTemp486) + ((0.0353404358f * fTemp487) + ((0.05301065f * fTemp488) + ((0.0560625009f * fTemp489) + ((0.0600909442f * fTemp153) + ((0.057985168f * fTemp205) + ((0.0398571752f * fTemp206) + ((0.0633869469f * fTemp492) + ((0.11346782f * fTemp209) + ((0.127689451f * fTemp210) + ((0.119083226f * fTemp211) + ((0.111941896f * fTemp212) + ((0.0940885618f * fTemp213) + ((0.0892971605f * fTemp214) + ((0.0521561317f * fTemp215) + ((0.014618366f * fTemp216) + ((0.0332956947f * fTemp500) + ((0.035950806f * fTemp501) + ((0.0283822138f * fTemp219) + ((0.0355845839f * fTemp222) + ((0.0410168767f * fTemp223) + ((0.00845362712f * fTemp224) + ((0.0344553962f * fTemp504) + ((0.164311662f * fTemp505) + ((0.161351353f * fTemp512) + (((((((((((((0.377636045f * fTemp230) + (0.512833059f * fTemp231)) + (0.300057977f * fTemp232)) + (0.0184026621f * fTemp511)) + (0.101016268f * fTemp235)) + (0.230719939f * fTemp236)) + (0.178655356f * fTemp237)) + (0.134769738f * fTemp238)) + (0.0476699136f * fTemp239)) + (0.0760521293f * fTemp391)) + (0.0581377596f * fTemp16)) + (0.0544755384f * fTemp241)) + (0.157261878f * fTemp225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00183111057f * fTemp1))))))))))))))))))))))))))))))))))))))))) : (((0.00543229468f * (fTemp104 - fTemp1)) + ((0.00503555406f * (fTemp163 - fTemp242)) + ((0.00244148076f * (fTemp101 - fTemp245)) + ((0.00054933317f * (fTemp265 - (fTemp514 + fTemp253))) + ((0.00146488845f * (fTemp255 - (fTemp70 + fTemp343))) + ((0.00396740623f * (fTemp270 - fTemp291)) + ((0.00170903653f * (fTemp60 + fTemp309)) + ((0.00155644398f * (fTemp284 - (fTemp320 + fTemp14))) + ((0.000732444227f * (fTemp155 - fTemp324)) + ((0.00201422162f * (fTemp57 - fTemp292)) + ((0.00186162908f * (fTemp156 - fTemp331)) + ((0.000610370189f * (fTemp310 + (fTemp126 - (fTemp107 - (fTemp382 - fTemp243))))) + ((0.000671407208f * (fTemp332 + (fTemp339 + (fTemp25 + (fTemp136 + (fTemp195 + fTemp194)))))) + ((0.000305185094f * (fTemp127 - fTemp337)) + ((0.000366222113f * (fTemp193 - fTemp19)) + ((0.00134281442f * (fTemp24 + fTemp23)) + ((0.000335703604f * (fTemp48 - fTemp28)) + ((0.00299081393f * (fTemp259 - fTemp256)) + ((0.00112918485f * (fTemp274 + fTemp264)) + ((0.00238044374f * (fTemp286 + (fTemp355 + fTemp312))) + ((0.00271614734f * (fTemp311 - (fTemp404 + fTemp266))) + ((0.00222785119f * (fTemp160 + fTemp41)) + ((0.000885036774f * (fTemp386 - fTemp321)) + ((0.000122074038f * (fTemp33 + (fTemp72 + (fTemp93 - (fTemp470 - (fTemp206 + fTemp153)))))) + ((0.000640888698f * (fTemp69 - (fTemp128 + fTemp62))) + ((0.00180059206f * (fTemp55 + (fTemp246 + (fTemp258 + fTemp347)))) + ((0.00274666585f * (fTemp61 + (fTemp301 + fTemp345))) + ((0.00375377666f * (fTemp144 + fTemp83)) + ((0.00518814661f * (fTemp119 + fTemp43)) + ((0.00527970213f * (fTemp91 + (fTemp374 + fTemp287))) + ((0.00366222113f * (fTemp96 + (fTemp168 + fTemp350))) + ((0.00207525864f * (fTemp13 + fTemp76)) + ((0.00372325815f * (fTemp323 + (fTemp20 + fTemp399))) + ((0.00476088747f * (fTemp306 + fTemp71)) + ((0.00442518387f * (fTemp357 + fTemp113)) + ((0.00546281319f * (fTemp272 + (fTemp425 + fTemp298))) + ((0.0057985168f * (fTemp429 + fTemp3)) + ((0.00460829493f * (fTemp352 + (fTemp140 + fTemp791))) + ((0.00411999878f * (fTemp165 + (fTemp170 + fTemp166))) + ((0.00436414685f * (fTemp363 + (fTemp131 + fTemp167))) + ((0.00347911008f * (fTemp29 + fTemp74)) + ((0.00305185094f * (fTemp172 + fTemp400)) + ((0.00296029542f * (fTemp401 - (fTemp413 + fTemp52))) + ((0.00488296151f * (fTemp139 + fTemp120)) + ((0.00390636921f * (fTemp313 + fTemp365)) + ((0.00619525742f * (fTemp358 + fTemp27)) + ((0.00698873866f * (fTemp379 + fTemp50)) + ((0.00769066438f * fTemp817) + ((0.00659199804f * (fTemp295 + fTemp115)) + ((0.00384533219f * (fTemp108 + fTemp84)) + ((0.0042115543f * fTemp818) + ((0.00686666463f * (fTemp314 + fTemp267)) + ((0.00988799706f * (fTemp130 + fTemp150)) + ((0.000152592547f * (fTemp5 - (fTemp317 + (fTemp466 - (fTemp469 - (fTemp346 - (fTemp473 + (fTemp474 - (fTemp396 - fTemp476))))))))) + ((0.000915555283f * (fTemp406 + fTemp316)) + ((0.00149540696f * (fTemp112 + fTemp361)) + ((0.00607318338f * (fTemp432 + fTemp98)) + ((9.15555283e-05f * (fTemp197 - (fTemp201 - (fTemp35 + (fTemp482 - (fTemp483 + (fTemp484 + (fTemp490 - (fTemp492 + (fTemp209 + (fTemp511 + fTemp215))))))))))) + ((0.00106814783f * fTemp261) + ((0.00363170262f * fTemp318) + ((0.00247199927f * fTemp340) + ((0.00210577715f * fTemp51) + ((0.00250251777f * fTemp54) + (fTemp699 + ((0.00109866634f * fTemp157) + ((0.000244148076f * fTemp79) + ((0.00119022187f * fTemp349) + ((0.00622577593f * fTemp271) + ((0.0028992584f * fTemp109) + ((0.00469985045f * fTemp46) + ((0.00534073915f * fTemp110) + ((0.0045167394f * fTemp117) + ((0.00494399853f * fTemp161) + ((0.00457777642f * fTemp164) + ((0.00405896176f * fTemp353) + ((0.00497451704f * fTemp268) + ((0.0058290353f * fTemp322) + ((0.00537125766f * fTemp519) + ((0.00317392498f * fTemp38) + ((0.00427259132f * fTemp169) + ((0.004852443f * fTemp73) + (fTemp520 + ((0.0035401471f * fTemp125) + ((0.00445570238f * fTemp78) + ((0.00521866512f * fTemp129) + ((0.00744651631f * fTemp132) + ((0.00787377544f * fTemp273) + ((0.00781273842f * fTemp133) + ((0.00766014587f * fTemp247) + ((0.0074159978f * fTemp137) + ((0.00714133121f * fTemp10) + ((0.00570696127f * fTemp80) + ((0.00399792474f * fTemp56) + ((0.00424207281f * fTemp275) + ((0.00479140598f * fTemp53) + (fTemp811 + ((0.00634784997f * fTemp370) + ((0.006469924f * fTemp402) + ((0.00473036896f * fTemp257) + ((0.00448622089f * fTemp6) + ((0.00601214636f * fTemp146) + ((0.00671407208f * fTemp30) + ((0.00662251655f * fTemp372) + ((0.00595110934f * fTemp134) + ((0.00653096102f * fTemp142) + ((0.00738547929f * fTemp326) + ((0.00756859034f * fTemp263) + ((0.00463881344f * fTemp171) + ((0.00280770287f * fTemp173) + ((0.00906399731f * fTemp288) + ((0.00964384899f * fTemp85) + ((0.0087282937f * fTemp282) + ((0.00729392376f * fTemp359) + ((0.00567644276f * fTemp148) + ((0.00466933195f * fTemp114) + ((0.00863673817f * fTemp59) + ((0.00833155308f * fTemp315) + ((0.00640888698f * fTemp290) + ((0.00173955504f * fTemp335) + ((0.00393688772f * fTemp327) + ((0.0108951079f * fTemp299) + ((0.0140385143f * fTemp356) + ((0.0125431074f * fTemp405) + ((0.00735496078f * fTemp378) + ((0.00552385021f * fTemp15) + ((0.00823999755f * fTemp384) + ((0.00985747855f * fTemp26) + ((0.00732444227f * fTemp100) + ((0.00708029419f * fTemp99) + ((0.00851466414f * fTemp336) + ((0.0201422162f * fTemp515) + ((0.0344859175f * fTemp149) + ((0.0241096225f * fTemp329) + ((0.00057985168f * fTemp65) + ((0.0151066622f * fTemp377) + ((0.0119632557f * fTemp530) + ((0.0114749596f * fTemp424) + ((0.00668355357f * fTemp430) + ((0.00637836847f * fTemp431) + ((0.0206610318f * fTemp433) + ((0.0341196954f * fTemp434) + ((0.0443739146f * fTemp435) + ((0.0395214707f * fTemp436) + ((0.0296639912f * fTemp437) + ((0.00357066561f * fTemp438) + ((0.037446212f * fTemp441) + ((0.0951567143f * fTemp442) + ((0.0948210061f * fTemp443) + ((0.05038606f * fTemp522) + ((0.00854518265f * fTemp178) + ((0.0230414756f * fTemp249) + ((0.0271004364f * fTemp387) + ((0.0552079827f * fTemp446) + ((0.0671102032f * fTemp447) + ((0.0658589453f * fTemp448) + ((0.0294503625f * fTemp77) + ((0.112125002f * fTemp373) + ((0.172734767f * fTemp121) + ((0.141422778f * fTemp453) + ((0.0137943663f * fTemp454) + ((0.0723899081f * fTemp457) + ((0.0985442698f * fTemp364) + ((0.0697042793f * fTemp393) + ((0.172917873f * fTemp465) + ((0.0430921353f * fTemp181) + ((0.741904974f * fTemp86) + (fTemp367 + ((0.689382613f * fTemp141) + ((0.251533568f * fTemp182) + (fTemp761 + (fTemp667 + ((0.000396740623f * fTemp196) + (0.00558488723f * fTemp185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00402844325f * (fTemp244 - (fTemp12 + fTemp63))) + ((0.00241096225f * (fTemp251 - (fTemp37 + (fTemp105 + fTemp293)))) + ((0.00213629566f * (fTemp47 + fTemp254)) + ((0.00103762932f * (fTemp303 + fTemp260)) + ((0.000183111057f * (fTemp269 + (fTemp192 - (fTemp205 + fTemp475)))) + ((0.00216681417f * (fTemp330 + (fTemp333 - (fTemp159 - fTemp279)))) + ((0.00140385143f * (fTemp278 + fTemp576)) + ((6.10370189e-05f * (fTemp304 + (fTemp154 + (fTemp471 - (fTemp478 - (fTemp202 + (fTemp485 - (fTemp489 + (fTemp207 - (fTemp135 - (fTemp210 + (fTemp214 + (fTemp216 + (fTemp502 + (fTemp503 - (fTemp512 - (fTemp227 + (fTemp228 + (fTemp233 + fTemp241))))))))))))))))))) + ((0.000946073793f * (fTemp191 - fTemp518)) + ((0.000213629566f * (fTemp75 - fTemp7)) + ((0.00360118411f * (fTemp262 + (fTemp408 + fTemp92))) + ((0.00378429517f * (fTemp319 - (fTemp388 + fTemp123))) + ((0.00283822138f * (fTemp252 - fTemp325)) + ((3.05185094e-05f * (fTemp280 + (fTemp9 - (fTemp472 - (fTemp199 + (fTemp200 - (fTemp477 + (fTemp479 - (fTemp481 - (fTemp204 - (fTemp486 - (fTemp488 - (fTemp208 + (fTemp491 - (fTemp212 + (fTemp213 + (fTemp217 - (fTemp493 - (fTemp495 + (fTemp496 + (fTemp497 + (fTemp498 + (fTemp500 + (fTemp220 - (fTemp223 - (fTemp22 + (fTemp504 - (fTemp225 + (fTemp226 - (fTemp16 - (fTemp391 + (fTemp240 + (fTemp239 + (fTemp236 - (fTemp232 + (fTemp0 + fTemp231)))))))))))))))))))))))))))))))))))) + ((0.000518814661f * (fTemp248 - fTemp2)) + ((0.00631733146f * (fTemp49 - fTemp88)) + ((0.00408948027f * (fTemp403 - fTemp44)) + ((0.00131229591f * (fTemp11 - (fTemp21 - fTemp31))) + ((0.00439466536f * (fTemp407 - fTemp102)) + ((0.00509659108f * (fTemp281 - fTemp145)) + ((0.00924710836f * (fTemp414 - fTemp348)) + ((0.000274666585f * (fTemp106 + fTemp90)) + ((0.00167851802f * (fTemp456 - fTemp289)) + ((0.00231940672f * (fTemp369 - fTemp411)) + ((((0.00152592547f * fTemp276) + ((0.00256355479f * fTemp283) + ((0.00625629444f * fTemp296) + ((0.00860621966f * fTemp297) + ((0.00927762687f * fTemp302) + ((0.00701925717f * fTemp277) + ((0.00268562883f * fTemp305) + ((0.000793481246f * fTemp285) + ((0.000854518265f * fTemp8) + ((0.00122074038f * fTemp18) + ((0.00329599902f * fTemp34) + ((0.000488296151f * fTemp67) + ((0.00100711081f * fTemp351) + ((0.00292977691f * fTemp82) + ((0.00198370311f * fTemp64) + ((0.00177007355f * fTemp375) + ((0.00125125889f * fTemp42) + ((0.00314340647f * fTemp334) + ((0.00817896053f * fTemp32) + ((0.00753807183f * fTemp40) + ((0.0100711081f * fTemp138) + ((0.00967436749f * fTemp516) + (fTemp819 + ((0.00381481368f * fTemp66) + ((0.00875881221f * fTemp250) + ((0.0163884405f * fTemp4) + ((0.0246284381f * fTemp87) + ((0.0288399924f * fTemp383) + ((0.0234382153f * fTemp409) + ((0.0108035523f * fTemp410) + ((0.00204474013f * fTemp412) + ((0.0149845881f * fTemp390) + ((0.0202337727f * fTemp415) + ((0.0211798456f * fTemp416) + ((0.0209051799f * fTemp417) + ((0.0185552537f * fTemp342) + ((0.0174565874f * fTemp36) + ((0.0157170333f * fTemp39) + ((0.0126651814f * fTemp122) + ((0.0158085879f * fTemp418) + ((0.0166936256f * fTemp420) + ((0.0174260698f * fTemp421) + ((0.00689718314f * fTemp360) + ((0.0104678487f * fTemp95) + ((0.0397961363f * fTemp94) + ((0.0505081341f * fTemp89) + ((0.036774803f * fTemp422) + ((0.00598162785f * fTemp423) + ((0.0177312549f * fTemp426) + ((0.042542804f * fTemp17) + ((0.0507522821f * fTemp338) + ((0.0340586565f * fTemp427) + ((0.0122684408f * fTemp428) + ((0.0301217698f * fTemp439) + ((0.0535905026f * fTemp381) + ((0.0733054578f * fTemp344) + ((0.087588124f * fTemp111) + ((0.0848719776f * fTemp294) + ((0.0654927194f * fTemp440) + ((0.0240485854f * fTemp392) + ((0.0299386587f * fTemp175) + ((0.0962553769f * fTemp176) + ((0.129978329f * fTemp328) + ((0.114658043f * fTemp444) + ((0.100619525f * fTemp445) + ((0.0787377581f * fTemp300) + ((0.0505996905f * fTemp116) + ((0.0401318409f * fTemp118) + ((0.0143436994f * fTemp177) + ((0.053437911f * fTemp179) + ((0.0877712369f * fTemp180) + ((0.0698263496f * fTemp376) + ((0.0212408826f * fTemp449) + ((0.0194402914f * fTemp450) + ((0.0491653197f * fTemp451) + ((0.0732749403f * fTemp452) + ((0.0273445845f * fTemp385) + ((0.151738033f * fTemp455) + ((0.225775927f * fTemp152) + ((0.183172092f * fTemp362) + ((0.0544755384f * fTemp394) + ((0.0963164195f * fTemp458) + ((0.157902762f * fTemp459) + ((0.0680562779f * fTemp460) + ((0.040070802f * fTemp461) + ((0.0296945106f * fTemp462) + ((0.0463881344f * fTemp463) + ((0.0936307907f * fTemp464) + ((0.0105594043f * fTemp389) + ((0.344920188f * fTemp467) + ((0.717032373f * fTemp468) + ((0.61525315f * fTemp368) + ((0.0164799951f * fTemp186) + ((0.0307016205f * fTemp187) + ((0.0328684337f * fTemp188) + ((0.0249336231f * fTemp189) + ((0.00430310983f * fTemp190) + (0.0136417737f * fTemp151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00302133244f * fTemp398)) + (0.00555436872f * fTemp513)))))))))))))))))))))))))))))) : (iSlow37 ? (iSlow41 ? (iSlow43 ? (((0.000122074038f * (fTemp398 + (fTemp218 - (fTemp220 + fTemp538)))) + ((0.000976592302f * (fTemp245 - (fTemp52 - fTemp306))) + ((0.00198370311f * (fTemp251 - (fTemp257 - fTemp340))) + ((0.00302133244f * (fTemp254 + (fTemp309 + (fTemp74 - fTemp165)))) + ((0.00390636921f * (fTemp260 - (fTemp356 - fTemp270))) + ((0.00457777642f * (fTemp255 + (fTemp19 + (fTemp25 + (fTemp378 + fTemp167))))) + ((0.00396740623f * (fTemp413 + fTemp261)) + ((0.00189214759f * (fTemp276 + (fTemp289 - fTemp374))) + ((0.000793481246f * (fTemp291 - fTemp577)) + ((0.00256355479f * (fTemp247 + fTemp305)) + ((0.00811792351f * (fTemp14 - (fTemp65 - fTemp161))) + ((0.00329599902f * (fTemp171 + fTemp23)) + ((0.0139164403f * (fTemp156 + fTemp262)) + ((0.00372325815f * (fTemp37 + fTemp325)) + ((0.00753807183f * (fTemp478 + fTemp41)) + ((0.0182195511f * (fTemp61 + fTemp266)) + ((0.0164189581f * (fTemp303 + fTemp252)) + ((0.0054933317f * (fTemp71 + fTemp331)) + ((0.0144047365f * (fTemp48 - (fTemp515 + fTemp39))) + ((0.0173345134f * (fTemp67 + (fTemp120 + fTemp272))) + ((0.0114139225f * (fTemp83 + fTemp157)) + ((0.0120548112f * (fTemp271 + fTemp43)) + ((0.0118411817f * (fTemp88 - (fTemp314 + fTemp12))) + ((0.00460829493f * (fTemp110 - (fTemp452 + fTemp70))) + ((0.00750755332f * (fTemp350 + fTemp117)) + ((0.00610370189f * (fTemp78 + fTemp38)) + ((0.00689718314f * (fTemp385 + fTemp20)) + ((0.0117496261f * (fTemp50 - (fTemp348 + (fTemp451 + fTemp290)))) + ((0.00125125889f * (fTemp137 - (fTemp250 + fTemp370))) + ((0.00299081393f * (fTemp130 + fTemp275)) + ((0.00274666585f * (fTemp172 + fTemp53)) + ((0.000152592547f * (fTemp10 - (fTemp217 - (fTemp500 + fTemp582)))) + ((0.00473036896f * fTemp813) + ((0.000244148076f * (fTemp100 + (fTemp209 + (fTemp22 + (fTemp231 + fTemp503))))) + ((0.021210365f * (fTemp186 - fTemp432)) + ((9.15555283e-05f * (fTemp213 - (fTemp223 - (fTemp232 - fTemp511)))) + ((0.000488296151f * (fTemp229 + fTemp495)) + ((0.000366222113f * (fTemp207 + (fTemp491 + fTemp814))) + ((6.10370189e-05f * (fTemp206 - (fTemp227 - fTemp225))) + (((0.00112918485f * fTemp283) + ((0.000946073793f * fTemp296) + ((0.00201422162f * fTemp302) + ((0.00231940672f * fTemp277) + ((0.00494399853f * fTemp318) + ((0.00585955381f * fTemp284) + ((0.00619525742f * fTemp324) + ((0.00601214636f * fTemp292) + ((0.00738547929f * fTemp304) + ((0.00869777519f * fTemp310) + ((0.00991851557f * fTemp518) + ((0.0108951079f * fTemp332) + ((0.0115970336f * fTemp7) + ((0.0119632557f * fTemp337) + ((0.0116275521f * fTemp8) + ((0.0102237007f * fTemp11) + ((0.0035401471f * fTemp24) + ((0.006469924f * fTemp28) + ((0.00848414563f * fTemp31) + ((0.0104068117f * fTemp333) + (fTemp815 + ((0.0149540696f * fTemp319) + ((0.013061922f * fTemp279) + ((0.0077517014f * fTemp264) + ((0.00555436872f * fTemp286) + ((0.00228888821f * fTemp311) + ((0.0122989593f * fTemp45) + ((0.0163579211f * fTemp280) + ((0.0184636991f * fTemp320) + ((0.014557329f * fTemp47) + ((0.0138554033f * fTemp321) + ((0.0155339213f * fTemp21) + ((0.016296884f * fTemp51) + ((0.0159306619f * fTemp312) + ((0.0153508103f * fTemp60) + ((0.0148930326f * fTemp307) + ((0.0150761437f * fTemp33) + ((0.0160222184f * fTemp68) + ((0.0183416251f * fTemp55) + ((0.0169377737f * fTemp345) + ((0.0154423658f * fTemp246) + ((0.0152287362f * fTemp62) + ((0.015991699f * fTemp347) + ((0.00915555283f * fTemp72) + ((0.00769066438f * fTemp75) + ((0.00759910885f * fTemp79) + ((0.00857570115f * fTemp349) + ((0.0101321451f * fTemp293) + ((0.0115054781f * fTemp96) + ((0.011444441f * fTemp101) + ((0.0113528855f * fTemp76) + ((0.0107425153f * fTemp159) + ((0.00979644153f * fTemp160) + ((0.00836207159f * fTemp105) + ((0.00701925717f * fTemp109) + ((0.00573747978f * fTemp323) + ((0.00503555406f * fTemp46) + ((0.00482192449f * fTemp287) + ((0.00662251655f * fTemp113) + ((0.00817896053f * fTemp119) + ((0.00723288674f * fTemp164) + ((0.00686666463f * fTemp44) + ((0.0103152562f * fTemp399) + ((0.0142216254f * fTemp353) + ((0.0178228095f * fTemp357) + ((0.0057985168f * fTemp3) + ((0.0028992584f * fTemp363) + (fTemp777 + ((0.00366222113f * fTemp401) + ((0.009704886f * fTemp168) + ((0.0136722922f * fTemp169) + ((0.0168462172f * fTemp73) + ((0.00985747855f * fTemp129) + ((0.0116885891f * fTemp27) + ((0.0107119968f * fTemp132) + ((0.00875881221f * fTemp341) + ((0.00650044251f * fTemp273) + ((0.00433362834f * fTemp133) + (fTemp680 + ((0.00238044374f * fTemp295) + ((0.000671407208f * fTemp173) + ((0.00378429517f * fTemp139) + ((0.00134281442f * fTemp380) + ((0.00784325693f * fTemp414) + ((0.0090334788f * fTemp390) + ((0.00756859034f * fTemp415) + ((0.00405896176f * fTemp416) + ((0.00213629566f * fTemp522) + ((0.00921658985f * fTemp175) + ((0.0197149571f * fTemp176) + ((0.0269478448f * fTemp328) + ((0.0237128828f * fTemp444) + ((0.00540177617f * fTemp445) + ((0.0217902157f * fTemp373) + ((0.0340586565f * fTemp121) + ((0.0338755473f * fTemp453) + ((0.0203863643f * fTemp454) + ((0.028931547f * fTemp460) + ((0.0525223538f * fTemp461) + ((0.0365916938f * fTemp462) + ((0.0209967345f * fTemp86) + ((0.0499893203f * fTemp367) + ((0.0660420582f * fTemp141) + ((0.0707113892f * fTemp182) + ((0.0762657523f * fTemp183) + ((0.0838038251f * fTemp184) + ((0.0712912381f * fTemp185) + ((0.0573747978f * fTemp193) + ((0.108584858f * fTemp194) + ((0.0939054564f * fTemp195) + ((0.0237739198f * fTemp196) + ((0.0866420493f * fTemp197) + ((0.125614181f * fTemp198) + ((0.0900601223f * fTemp199) + ((0.225135043f * fTemp202) + ((0.769951463f * fTemp203) + (fTemp204 + ((0.763542593f * fTemp35) + ((0.336313963f * fTemp482) + ((0.0764793828f * fTemp397) + (((0.000518814661f * fTemp508) + (0.00057985168f * fTemp510)) + (0.00976592302f * fTemp483)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.0045167394f * fTemp265))))))))))))))))))))))))))))))))))))))))) - ((((0.000640888698f * (fTemp242 - (fTemp263 + (fTemp26 - fTemp93)))) + ((0.000457777642f * (fTemp244 - (fTemp239 + fTemp170))) + ((0.00292977691f * (fTemp9 - fTemp269)) + ((0.00149540696f * (fTemp124 - fTemp297)) + ((0.00564592425f * (fTemp411 - fTemp330)) + ((0.00576799829f * (fTemp138 - fTemp278)) + ((0.00637836847f * (fTemp243 - fTemp285)) + ((0.00607318338f * (fTemp147 - fTemp18)) + ((0.00369273964f * (fTemp15 - fTemp339)) + ((0.0147709586f * (fTemp472 - fTemp34)) + ((0.0163884405f * (fTemp106 - fTemp54)) + ((0.0174565874f * (fTemp425 - fTemp69)) + ((0.0147099216f * (fTemp436 - fTemp2)) + ((0.0172429588f * (fTemp426 - fTemp155)) + ((0.0115359966f * (fTemp315 - fTemp91)) + ((0.00796533097f * (fTemp82 - fTemp163)) + ((0.0191351064f * (fTemp17 - fTemp268)) + ((0.0124515519f * (fTemp361 - fTemp322)) + ((3.05185094e-05f * (fTemp519 - (fTemp56 - (fTemp219 + fTemp214)))) + ((0.000427259132f * (fTemp166 - (fTemp496 + fTemp490))) + ((0.00262459181f * (fTemp383 - fTemp400)) + ((0.0140079958f * (fTemp128 - fTemp102)) + ((0.00546281319f * (fTemp365 + (fTemp484 + fTemp335))) + ((0.000823999755f * (fTemp66 + fTemp115)) + ((0.00143436994f * (fTemp80 + (fTemp103 + (fTemp384 + fTemp150)))) + ((0.0012817774f * (fTemp140 + (fTemp412 - fTemp104))) + ((0.00183111057f * (fTemp408 - fTemp84)) + ((0.000396740623f * (fTemp366 - (fTemp134 + (fTemp240 + (fTemp507 + fTemp238))))) + ((0.00244148076f * (fTemp371 + fTemp288)) + ((0.00103762932f * (fTemp298 + fTemp402)) + ((0.0129703665f * (fTemp434 + fTemp126)) + ((0.00643940549f * (fTemp107 + fTemp404)) + ((0.00119022187f * (fTemp153 + fTemp42)) + ((0.000213629566f * (fTemp405 - (fTemp210 + (fTemp211 + (fTemp212 - (fTemp222 - (fTemp505 + (fTemp391 + (fTemp237 - (fTemp233 + fTemp234)))))))))) + ((0.00509659108f * (fTemp410 + fTemp355)) + ((0.00393688772f * (fTemp471 + fTemp336)) + ((0.0207220688f * (fTemp338 + fTemp424)) + ((0.000183111057f * (fTemp215 - (fTemp498 + (fTemp499 + (fTemp224 + (fTemp506 - fTemp235)))))) + ((0.000274666585f * (fTemp216 + fTemp205)) + ((0.000305185094f * (fTemp221 - fTemp492)) + ((0.0104678487f * fTemp742) + ((0.00326548051f * fTemp352) + ((0.00772118289f * fTemp125) + ((0.00906399731f * fTemp123) + ((0.000701925717f * fTemp358) + ((0.00314340647f * fTemp6) + ((0.00357066561f * fTemp145) + ((0.00338755455f * fTemp146) + ((0.00216681417f * fTemp30) + ((0.00109866634f * fTemp354) + (fTemp660 + ((0.000854518265f * fTemp326) + ((0.00265511032f * fTemp267) + ((0.000610370189f * fTemp282) + ((0.00115970336f * fTemp359) + ((0.00170903653f * fTemp148) + ((0.00222785119f * fTemp114) + ((0.00344859157f * fTemp131) + ((0.0093691824f * fTemp97) + ((0.0120242927f * fTemp313) + ((0.0129093295f * fTemp259) + ((0.0127872555f * fTemp57) + ((0.0121463668f * fTemp13) + ((0.0119937742f * fTemp59) + ((0.0121158483f * fTemp29) + ((0.0135196997f * fTemp5) + ((0.0140385143f * fTemp317) + ((0.0132450331f * fTemp90) + ((0.0119022187f * fTemp316) + ((0.00939970091f * fTemp274) + ((0.00863673817f * fTemp351) + ((0.00714133121f * fTemp403) + (fTemp800 + ((0.00845362712f * fTemp248) + ((0.00918607134f * fTemp343) + ((0.0087282937f * fTemp64) + ((0.00708029419f * fTemp375) + ((0.00146488845f * fTemp514) + ((0.00320444349f * fTemp136) + (fTemp574 + ((0.00506607257f * fTemp334) + (fTemp764 + ((0.00640888698f * fTemp40) + ((0.00787377544f * fTemp92) + ((0.00814844202f * fTemp327) + ((0.00680562761f * fTemp299) + ((0.00454725791f * fTemp406) + ((0.00531022064f * fTemp382) + ((0.0019226661f * fTemp99) + ((0.00512710959f * fTemp379) + ((0.00537125766f * fTemp301) + ((0.00543229468f * fTemp281) + ((0.00592059083f * fTemp516) + ((0.00497451704f * fTemp81) + ((0.00335703604f * fTemp407) + ((0.0019531846f * fTemp4) + ((0.00234992523f * fTemp87) + ((0.00341807306f * fTemp409) + ((0.00698873866f * fTemp386) + ((0.00744651631f * fTemp388) + ((0.0058290353f * fTemp342) + ((0.0106509598f * fTemp36) + ((0.0159611814f * fTemp122) + (fTemp816 + ((0.0158085879f * fTemp420) + ((0.0161442924f * fTemp421) + ((0.0158391073f * fTemp369) + ((0.0110782189f * fTemp149) + ((0.00802636798f * fTemp329) + ((0.0117191076f * fTemp360) + ((0.0194402914f * fTemp377) + ((0.0203253273f * fTemp530) + ((0.021149328f * fTemp95) + ((0.0245979186f * fTemp94) + ((0.0273140669f * fTemp89) + ((0.0276497696f * fTemp422) + ((0.0251777712f * fTemp423) + ((0.0216986611f * fTemp427) + ((0.0228583645f * fTemp428) + ((0.0229499191f * fTemp429) + ((0.0234076977f * fTemp430) + ((0.0230719931f * fTemp431) + ((0.0166631062f * fTemp433) + ((0.0123294778f * fTemp435) + ((0.0209051799f * fTemp437) + ((0.0269783624f * fTemp438) + ((0.0286568813f * fTemp439) + ((0.0261848811f * fTemp381) + ((0.0238959938f * fTemp344) + ((0.0260628071f * fTemp111) + ((0.0346385092f * fTemp294) + ((0.0431226529f * fTemp440) + ((0.0422376171f * fTemp392) + ((0.0300607327f * fTemp441) + ((0.0147404401f * fTemp442) + ((0.00463881344f * fTemp443) + ((0.0200811792f * fTemp300) + ((0.0415356904f * fTemp116) + ((0.0542008728f * fTemp118) + ((0.0571916886f * fTemp177) + ((0.0463881344f * fTemp178) + ((0.0262764376f * fTemp249) + ((0.00842310861f * fTemp387) + ((0.00424207281f * fTemp446) + ((0.0127262184f * fTemp447) + ((0.0248420667f * fTemp448) + ((0.0329599902f * fTemp77) + ((0.0381786563f * fTemp179) + ((0.039124731f * fTemp180) + ((0.0348216183f * fTemp376) + ((0.0274971779f * fTemp449) + ((0.0196234025f * fTemp450) + ((0.00604266487f * fTemp455) + ((0.0375988036f * fTemp152) + ((0.0657063499f * fTemp362) + ((0.0805993825f * fTemp456) + ((0.0891750827f * fTemp457) + ((0.0930204168f * fTemp364) + ((0.08484146f * fTemp394) + ((0.0580156855f * fTemp458) + ((0.0160832554f * fTemp459) + ((0.0134586627f * fTemp463) + ((0.0672627985f * fTemp464) + ((0.101016268f * fTemp389) + ((0.109866634f * fTemp393) + ((0.105197303f * fTemp465) + ((0.0968047157f * fTemp466) + ((0.094180122f * fTemp467) + ((0.082308419f * fTemp468) + ((0.0557268001f * fTemp368) + ((0.0150456252f * fTemp181) + ((0.0313425101f * fTemp187) + ((0.0621967241f * fTemp188) + ((0.0722373128f * fTemp189) + ((0.0610065013f * fTemp151) + ((0.0570390932f * fTemp190) + ((0.0511185043f * fTemp191) + ((0.0205084383f * fTemp192) + ((0.0813318267f * fTemp469) + ((0.155949578f * fTemp154) + ((0.147495955f * fTemp470) + ((0.0685750917f * fTemp346) + ((0.0925321206f * fTemp473) + ((0.169652387f * fTemp474) + ((0.14743492f * fTemp475) + ((0.0445265062f * fTemp476) + ((0.0219122898f * fTemp200) + ((0.0780053139f * fTemp58) + ((0.0453199856f * fTemp477) + ((0.0610980578f * fTemp479) + ((0.245887637f * fTemp480) + ((0.370159f * fTemp481) + ((0.250160217f * fTemp201) + ((0.0242622159f * fTemp396) + ((0.0353709534f * fTemp485) + ((0.0357676931f * fTemp486) + ((0.0271919928f * fTemp487) + ((0.00570696127f * fTemp489) + (0.0155034028f * fTemp488))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00054933317f * (fTemp513 + (fTemp85 - (fTemp135 + fTemp208))))) + (0.000335703604f * (fTemp1 - (fTemp502 + fTemp497))))) : (((0.00308236945f * (fTemp160 - fTemp276)) + ((0.00146488845f * (fTemp234 - fTemp309)) + ((0.00375377666f * (fTemp257 - fTemp324)) + ((0.00405896176f * (fTemp323 - fTemp292)) + ((0.00433362834f * (fTemp401 - fTemp331)) + ((0.00494399853f * (fTemp147 - fTemp285)) + ((0.00762962736f * (fTemp137 - fTemp7)) + ((3.05185094e-05f * (fTemp272 + fTemp24)) + ((0.000457777642f * (fTemp222 + fTemp28)) + ((0.00598162785f * fTemp809) + ((0.00628681295f * (fTemp134 - fTemp253)) + ((0.00573747978f * (fTemp150 + fTemp340)) + ((0.00869777519f * (fTemp42 - fTemp266)) + ((0.00607318338f * (fTemp114 - fTemp47)) + ((0.00796533097f * (fTemp267 - fTemp155)) + ((6.10370189e-05f * (fTemp208 - fTemp72)) + ((0.00286873989f * (fTemp298 + fTemp349)) + ((0.00390636921f * (fTemp40 - fTemp96)) + ((0.00143436994f * (fTemp117 + fTemp159)) + ((0.00427259132f * (fTemp295 + fTemp46)) + ((0.00418103579f * (fTemp142 + fTemp110)) + ((0.0132755516f * (fTemp440 + fTemp519)) + ((0.00689718314f * (fTemp288 - fTemp73)) + ((0.000427259132f * (fTemp491 + fTemp78)) + ((0.000152592547f * (fTemp341 + (fTemp89 - (fTemp230 - fTemp500)))) + ((0.00625629444f * (fTemp247 + (fTemp423 + fTemp53))) + ((0.00918607134f * (fTemp360 + fTemp140)) + ((0.00848414563f * (fTemp136 + fTemp56)) + ((0.00766014587f * (fTemp327 + fTemp84)) + ((0.0067751091f * (fTemp36 + fTemp275)) + ((0.00521866512f * (fTemp313 + fTemp370)) + ((0.00622577593f * (fTemp145 + (fTemp59 + fTemp12))) + ((0.00488296151f * (fTemp32 + fTemp108)) + ((0.00463881344f * (fTemp144 + (fTemp97 + fTemp374))) + ((0.00473036896f * fTemp810) + ((0.00952177495f * (fTemp290 + (fTemp9 + fTemp130))) + ((0.00955229346f * (fTemp81 + fTemp128)) + ((0.00753807183f * (fTemp49 + fTemp316)) + ((0.0116275521f * (fTemp112 + fTemp82)) + ((0.0109866634f * (fTemp138 + fTemp404)) + ((0.0116580706f * (fTemp127 + (fTemp394 + fTemp342))) + ((0.013000885f * (fTemp4 + fTemp64)) + ((0.0162663665f * (fTemp411 + fTemp409)) + ((0.0170598477f * (fTemp415 + (fTemp176 + fTemp344))) + ((0.0237739198f * (fTemp328 + fTemp426)) + ((0.0177922919f * (fTemp153 + fTemp438)) + ((0.000732444227f * (fTemp501 - fTemp452)) + ((0.000335703604f * (fTemp490 + (fTemp224 - (fTemp229 - fTemp232)))) + ((0.000823999755f * (fTemp511 + fTemp219)) + ((0.00183111057f * (fTemp241 + fTemp215)) + ((0.000518814661f * (fTemp223 + fTemp221)) + ((0.0025940733f * (fTemp228 + fTemp217)) + ((0.0106204413f * fTemp694) + ((0.00991851557f * fTemp677) + ((0.000885036774f * fTemp25) + ((0.00231940672f * fTemp325) + ((0.00534073915f * fTemp37) + ((0.00152592547f * fTemp161) + ((0.00610370189f * fTemp322) + ((0.0108951079f * fTemp3) + ((0.0132145146f * fTemp352) + ((0.0119937742f * fTemp165) + ((0.00854518265f * fTemp363) + ((0.00759910885f * fTemp63) + (fTemp729 + ((0.00650044251f * fTemp400) + ((0.000640888698f * fTemp38) + ((0.0114749596f * fTemp20) + ((0.0182500686f * fTemp124) + ((0.0199285876f * fTemp125) + ((0.016296884f * fTemp123) + ((0.0101626636f * fTemp365) + ((0.0045167394f * fTemp133) + ((0.00863673817f * fTemp10) + ((0.00924710836f * fTemp115) + ((0.0093691824f * fTemp80) + (fTemp811 + ((0.0051576281f * fTemp6) + ((0.00665303506f * fTemp146) + ((0.00680562761f * fTemp372) + ((0.00564592425f * fTemp306) + ((0.00466933195f * fTemp354) + ((0.00366222113f * fTemp263) + ((0.004852443f * fTemp171) + ((0.00561540574f * fTemp172) + ((0.00683614612f * fTemp173) + ((0.00503555406f * fTemp359) + ((0.0057985168f * fTemp148) + ((0.00570696127f * fTemp131) + ((0.00701925717f * fTemp57) + ((0.00692770164f * fTemp13) + ((0.00585955381f * fTemp314) + ((0.00750755332f * fTemp315) + ((0.0122074038f * fTemp29) + ((0.0141911069f * fTemp361) + ((0.0147099216f * fTemp126) + ((0.0137333293f * fTemp5) + ((0.0117801446f * fTemp317) + ((0.00802636798f * fTemp90) + ((0.0083925901f * fTemp258) + ((0.00979644153f * fTemp274) + ((0.0112918485f * fTemp351) + ((0.0111087374f * fTemp107) + ((0.0121158483f * fTemp248) + ((0.0126651814f * fTemp343) + ((0.0125431074f * fTemp375) + ((0.011444441f * fTemp70) + ((0.0100405896f * fTemp371) + ((0.0120242927f * fTemp243) + ((0.0107425153f * fTemp334) + (fTemp765 + ((0.00885036774f * fTemp356) + ((0.00900296029f * fTemp405) + ((0.00997955259f * fTemp378) + ((0.0102237007f * fTemp98) + ((0.0110171819f * fTemp289) + ((0.00833155308f * fTemp406) + ((0.00604266487f * fTemp382) + ((0.00408948027f * fTemp355) + ((0.003234962f * fTemp15) + ((0.00891140476f * fTemp26) + ((0.0121768853f * fTemp380) + ((0.0138859218f * fTemp100) + ((0.0136722922f * fTemp99) + ((0.012817774f * fTemp336) + ((0.0127567369f * fTemp379) + (fTemp661 + ((0.0129093295f * fTemp281) + ((0.00933866389f * fTemp516) + ((0.0103152562f * fTemp408) + ((0.00967436749f * fTemp52) + ((0.00949125644f * fTemp66) + ((0.0108645894f * fTemp250) + ((0.0157170333f * fTemp87) + ((0.0167851802f * fTemp383) + ((0.0142521439f * fTemp410) + ((0.0134586627f * fTemp386) + ((0.0140079958f * fTemp388) + ((0.0184026621f * fTemp412) + ((0.0198980682f * fTemp413) + ((0.0198370311f * fTemp414) + ((0.0187688842f * fTemp390) + ((0.0156254768f * fTemp416) + ((0.0139774773f * fTemp417) + (fTemp801 + ((0.0115970336f * fTemp369) + ((0.0163884405f * fTemp515) + ((0.0171514023f * fTemp149) + ((0.0154118473f * fTemp329) + ((0.0120853297f * fTemp65) + ((0.000946073793f * fTemp530) + ((0.0151676992f * fTemp424) + ((0.0208746605f * fTemp425) + ((0.0241706595f * fTemp17) + ((0.0242011789f * fTemp338) + ((0.0235602893f * fTemp427) + ((0.0229804385f * fTemp428) + ((0.0192571804f * fTemp429) + ((0.0133365886f * fTemp430) + ((0.0104373302f * fTemp431) + ((0.0165715516f * fTemp432) + ((0.024445327f * fTemp433) + ((0.0343028046f * fTemp434) + ((0.0397656187f * fTemp435) + ((0.0369273983f * fTemp436) + ((0.0295724366f * fTemp437) + ((0.0110782189f * fTemp439) + ((0.011383404f * fTemp381) + ((0.0172124393f * fTemp111) + ((0.0146488845f * fTemp294) + ((0.0139164403f * fTemp392) + ((0.0128482925f * fTemp441) + ((0.0151066622f * fTemp442) + ((0.0179448836f * fTemp443) + ((0.0162053294f * fTemp522) + ((0.0141605884f * fTemp175) + ((0.0277108066f * fTemp444) + ((0.0182195511f * fTemp445) + ((0.0339976214f * fTemp249) + ((0.0661336109f * fTemp387) + ((0.0839564204f * fTemp446) + ((0.08273568f * fTemp447) + ((0.0567949452f * fTemp448) + ((0.0226142164f * fTemp77) + ((0.0022583697f * fTemp180) + ((0.0158391073f * fTemp376) + ((0.0262154005f * fTemp449) + ((0.0186162908f * fTemp450) + ((0.00723288674f * fTemp451) + ((0.0484023578f * fTemp458) + ((0.0907010138f * fTemp459) + ((0.121707819f * fTemp460) + ((0.129825741f * fTemp461) + ((0.100863673f * fTemp462) + ((0.0372020639f * fTemp463) + ((0.0326853245f * fTemp466) + ((0.069551684f * fTemp467) + ((0.0769981965f * fTemp468) + ((0.0765099004f * fTemp368) + ((0.0795922726f * fTemp181) + ((0.0751060545f * fTemp86) + ((0.0555131696f * fTemp367) + ((0.0288399924f * fTemp141) + ((0.00363170262f * fTemp190) + ((0.0560930222f * fTemp191) + ((0.0752586424f * fTemp192) + ((0.0920133069f * fTemp193) + ((0.068697162f * fTemp194) + ((0.0600909442f * fTemp346) + ((0.113711968f * fTemp471) + ((0.0878627896f * fTemp472) + ((0.0462965779f * fTemp473) + ((0.00347911008f * fTemp474) + (fTemp671 + ((0.0795007199f * fTemp476) + ((0.0921659023f * fTemp197) + ((0.0947599709f * fTemp198) + ((0.0523392446f * fTemp199) + ((0.0369884335f * fTemp200) + ((0.0221259203f * fTemp481) + ((0.323129982f * fTemp201) + ((0.48905912f * fTemp202) + ((0.40397352f * fTemp203) + ((0.0155644398f * fTemp486) + ((0.0299691763f * fTemp487) + ((0.033722952f * fTemp488) + ((0.0283822138f * fTemp489) + ((0.00732444227f * fTemp205) + ((0.000366222113f * fTemp207) + ((0.00277718436f * fTemp216) + ((0.000122074038f * fTemp236) + (0.000671407208f * fTemp220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00244148076f * (fTemp505 + fTemp513)) + ((0.00274666585f * (fTemp210 + fTemp242)) + ((0.00238044374f * (fTemp398 - (fTemp227 - fTemp43))) + ((0.00177007355f * (fTemp245 + (fTemp506 - fTemp113))) + ((0.00131229591f * (fTemp251 + (fTemp260 - (fTemp218 + (fTemp233 + fTemp226))))) + ((0.00106814783f * (fTemp254 + (fTemp296 + (fTemp277 - (fTemp235 + fTemp470))))) + ((0.00265511032f * (fTemp255 + (fTemp318 + (fTemp240 - fTemp421)))) + ((0.00170903653f * (fTemp291 - (fTemp293 + fTemp75))) + ((0.000854518265f * (fTemp499 + fTemp297)) + ((0.000976592302f * (fTemp45 + fTemp302)) + ((0.00115970336f * (fTemp305 + (fTemp508 - fTemp119))) + ((0.00415051728f * (fTemp121 + fTemp330)) + ((0.00454725791f * (fTemp91 + fTemp278)) + ((0.00720236823f * (fTemp332 - (fTemp106 - fTemp11))) + ((0.0077517014f * (fTemp337 + (fTemp252 + (fTemp364 - fTemp167)))) + ((0.00769066438f * (fTemp303 + fTemp8)) + ((0.00531022064f * (fTemp18 - (fTemp384 + fTemp92))) + ((0.00299081393f * (fTemp333 - (fTemp358 - (fTemp239 + fTemp496)))) + ((0.00457777642f * (fTemp256 + (fTemp156 - fTemp311))) + ((0.00283822138f * (fTemp21 - fTemp41)) + ((0.00784325693f * (fTemp320 - (fTemp514 + fTemp103))) + ((0.00442518387f * (fTemp350 + fTemp321)) + ((0.00332651753f * (fTemp27 + fTemp48)) + ((0.00378429517f * (fTemp312 - (fTemp326 + fTemp105))) + ((0.00399792474f * (fTemp60 - (fTemp402 + fTemp109))) + ((0.00411999878f * (fTemp373 + fTemp33)) + ((0.00445570238f * (fTemp69 - (fTemp377 + fTemp170))) + ((0.00476088747f * (fTemp268 + fTemp55)) + ((0.0028992584f * (fTemp497 - fTemp79)) + ((0.000305185094f * (fTemp83 - (fTemp16 - fTemp94))) + ((0.00247199927f * (fTemp101 - (fTemp71 + (fTemp273 - (fTemp238 + fTemp504))))) + ((0.00350962859f * (fTemp168 - fTemp287)) + ((0.000701925717f * (fTemp510 - fTemp163)) + ((0.00671407208f * (fTemp169 - (fTemp348 + fTemp30))) + ((0.00369273964f * (fTemp178 + fTemp120)) + ((0.00317392498f * (fTemp50 - fTemp102)) + ((0.00180059206f * (fTemp132 - (fTemp206 - (fTemp503 + fTemp213)))) + ((0.00616473891f * (fTemp122 - fTemp259)) + ((0.0114139225f * (fTemp454 - fTemp403)) + ((0.0103457747f * (fTemp195 - fTemp407)) + ((0.00894192327f * (fTemp152 + fTemp418)) + ((0.000915555283f * (fTemp502 - fTemp422)) + ((9.15555283e-05f * (fTemp179 - (fTemp135 - (fTemp22 - fTemp214)))) + ((0.001617481f * (fTemp507 + fTemp512)) + ((0.00592059083f * fTemp673) + (fTemp812 + ((0.00189214759f * fTemp265) + ((0.00320444349f * fTemp261) + ((0.00335703604f * fTemp269) + ((0.00250251777f * fTemp283) + ((0.0019531846f * fTemp270) + ((0.00326548051f * fTemp284) + ((0.00540177617f * fTemp304) + (fTemp772 + ((0.00637836847f * fTemp14) + ((0.00436414685f * fTemp19) + ((0.00314340647f * fTemp339) + ((0.00158696249f * fTemp23) + ((0.00109866634f * fTemp31) + ((0.00714133121f * fTemp319) + ((0.00793481246f * fTemp34) + ((0.00772118289f * fTemp279) + ((0.00360118411f * fTemp264) + ((0.000396740623f * fTemp286) + ((0.00500503555f * fTemp280) + ((0.00296029542f * fTemp51) + ((0.00344859157f * fTemp54) + ((0.00402844325f * fTemp307) + ((0.0042115543f * fTemp68) + ((0.00506607257f * fTemp61) + ((0.00527970213f * fTemp345) + ((0.00546281319f * fTemp246) + ((0.00674459059f * fTemp62) + ((0.00823999755f * fTemp67) + ((0.00668355357f * fTemp347) + ((0.00222785119f * fTemp157) + ((0.00384533219f * fTemp271) + ((0.00448622089f * fTemp88) + ((0.00054933317f * fTemp76) + ((0.000610370189f * fTemp164) + ((0.00216681417f * fTemp44) + ((0.00619525742f * fTemp399) + ((0.00735496078f * fTemp353) + ((0.00704977568f * fTemp357) + ((0.00567644276f * fTemp420) + ((0.00173955504f * fTemp95) + ((0.0102542192f * fTemp300) + ((0.0442823581f * fTemp116) + ((0.0589617603f * fTemp118) + ((0.041993469f * fTemp177) + ((0.00311288796f * fTemp385) + ((0.00897244178f * fTemp453) + ((0.0110477004f * fTemp455) + ((0.0116885891f * fTemp362) + ((0.0171819218f * fTemp456) + ((0.0154423658f * fTemp457) + ((0.0310678426f * fTemp464) + ((0.0669881254f * fTemp389) + ((0.0583819076f * fTemp393) + ((0.0191045869f * fTemp465) + ((0.00799584948f * fTemp182) + ((0.0468459129f * fTemp183) + ((0.0678121299f * fTemp184) + ((0.0633564293f * fTemp185) + ((0.0698263496f * fTemp186) + ((0.0809656084f * fTemp187) + ((0.0729087219f * fTemp188) + ((0.0747703463f * fTemp189) + ((0.0485549495f * fTemp151) + ((0.0959807113f * fTemp196) + ((0.097994931f * fTemp469) + ((0.0662556812f * fTemp154) + ((0.0230719931f * fTemp58) + ((0.0195013285f * fTemp477) + ((0.124576554f * fTemp478) + ((0.21222572f * fTemp479) + ((0.203802601f * fTemp480) + ((0.048463393f * fTemp204) + ((0.641834795f * fTemp35) + ((1.00003052f * fTemp482) + ((0.827936649f * fTemp397) + ((0.379528195f * fTemp483) + ((0.0950346366f * fTemp484) + ((0.0216986611f * fTemp396) + ((0.00552385021f * fTemp485) + ((0.000213629566f * fTemp492) + ((0.00149540696f * fTemp209) + ((0.00338755455f * fTemp211) + ((0.00305185094f * fTemp212) + ((0.000488296151f * fTemp493) + ((0.00213629566f * fTemp495) + ((0.00204474013f * fTemp498) + ((0.000274666585f * fTemp225) + ((0.00137333293f * fTemp391) + ((0.00134281442f * fTemp0) + (0.00122074038f * fTemp237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00219733268f * (fTemp129 + fTemp1))))) : (iSlow42 ? (((0.00329599902f * (fTemp209 - fTemp254)) + ((3.05185094e-05f * (fTemp270 - (fTemp230 - fTemp114))) + ((0.00268562883f * (fTemp284 + (fTemp496 - fTemp286))) + ((0.00503555406f * (fTemp331 + (fTemp40 + fTemp8))) + ((0.00506607257f * (fTemp139 + fTemp285)) + ((0.00457777642f * (fTemp62 + fTemp332)) + ((0.00512710959f * (fTemp7 + (fTemp93 + fTemp108))) + ((0.00375377666f * (fTemp11 + (fTemp392 + fTemp128))) + ((0.000152592547f * (fTemp28 - (fTemp101 - (fTemp492 - fTemp80)))) + ((0.00378429517f * (fTemp307 + fTemp333)) + ((0.00466933195f * (fTemp256 + (fTemp104 - (fTemp514 + fTemp42)))) + ((0.00463881344f * (fTemp262 + (fTemp79 - (fTemp159 - (fTemp13 + fTemp259))))) + ((0.00283822138f * (fTemp34 - (fTemp156 - (fTemp409 + fTemp405)))) + ((0.00601214636f * (fTemp238 - fTemp311)) + ((0.00561540574f * (fTemp248 - fTemp340)) + ((0.00149540696f * (fTemp130 + fTemp41)) + ((0.0102847377f * (fTemp123 + fTemp280)) + ((0.000366222113f * (fTemp321 - (fTemp452 + fTemp243))) + ((0.00534073915f * (fTemp33 - (fTemp241 - fTemp299))) + ((0.00674459059f * (fTemp15 + fTemp68)) + ((0.0012817774f * (fTemp72 + (fTemp17 + fTemp410))) + ((0.00320444349f * (fTemp75 + (fTemp512 + fTemp301))) + ((0.00598162785f * (fTemp442 + fTemp349)) + ((0.00714133121f * (fTemp103 + fTemp293)) + ((0.00747703481f * (fTemp355 + fTemp271)) + ((0.0019226661f * (fTemp214 + fTemp96)) + ((0.00164799951f * (fTemp287 + (fTemp36 + fTemp314))) + ((0.0170903653f * (fTemp63 + fTemp117)) + ((0.0022583697f * (fTemp281 + fTemp165)) + ((0.00570696127f * (fTemp20 + fTemp555)) + ((0.00845362712f * (fTemp288 + fTemp365)) + ((0.00592059083f * (fTemp173 + fTemp170)) + ((0.00115970336f * (fTemp122 + fTemp129)) + ((0.00210577715f * (fTemp229 - fTemp341)) + ((0.000335703604f * (fTemp145 + fTemp137)) + ((0.00143436994f * (fTemp84 - (fTemp263 - fTemp803))) + ((0.0042115543f * (fTemp53 + (fTemp384 - fTemp136))) + ((0.00442518387f * (fTemp370 - (fTemp223 + (fTemp233 + fTemp227)))) + ((0.00454725791f * (fTemp402 + (fTemp97 + (fTemp9 + (fTemp505 - fTemp414))))) + ((0.00405896176f * (fTemp358 + (fTemp369 + fTemp172))) + ((0.00305185094f * (fTemp298 - (fTemp70 - (fTemp502 + fTemp379)))) + ((0.00177007355f * (fTemp336 + fTemp257)) + ((0.000488296151f * (fTemp146 - (fTemp295 + (fTemp361 - (fTemp235 + fTemp380))))) + ((0.000671407208f * (fTemp64 + fTemp30)) + ((0.00253303628f * (fTemp342 + fTemp134)) + ((0.00540177617f * (fTemp144 + (fTemp213 + fTemp107))) + ((0.000793481246f * (fTemp386 + fTemp142)) + ((0.00790429395f * fTemp804) + ((0.00524918362f * (fTemp282 + (fTemp504 - fTemp437))) + ((0.00219733268f * (fTemp359 + (fTemp417 + fTemp317))) + ((0.00338755455f * (fTemp343 + fTemp12)) + ((0.00341807306f * (fTemp236 + fTemp316)) + ((0.00350962859f * (fTemp98 + (fTemp507 - fTemp81))) + ((0.000640888698f * (fTemp99 - (fTemp411 - (fTemp0 + fTemp225)))) + ((0.00772118289f * (fTemp498 + fTemp65)) + ((0.0134891812f * (fTemp191 - fTemp436)) + ((0.00607318338f * (fTemp497 + fTemp210)) + ((0.00488296151f * (fTemp239 + fTemp500)) + ((0.00473036896f * fTemp330) + (fTemp805 + ((0.00476088747f * fTemp304) + ((0.00445570238f * fTemp310) + ((0.00439466536f * fTemp518) + ((0.00537125766f * fTemp337) + ((0.00384533219f * fTemp319) + ((0.00656147953f * fTemp45) + ((0.0114139225f * fTemp320) + ((0.009704886f * fTemp266) + ((0.006469924f * fTemp252) + ((0.00830103457f * fTemp69) + ((0.00994903408f * fTemp55) + ((0.01126133f * fTemp61) + ((0.0114749596f * fTemp345) + ((0.0101931822f * fTemp246) + ((0.0077517014f * fTemp2) + ((0.008087405f * fTemp83) + ((0.00820947904f * fTemp43) + ((0.0058290353f * fTemp88) + ((0.00396740623f * fTemp91) + ((0.00625629444f * fTemp71) + ((0.0115970336f * fTemp113) + ((0.0219428092f * fTemp161) + ((0.0248420667f * fTemp119) + ((0.0248725861f * fTemp163) + ((0.0215460677f * fTemp164) + ((0.0151066622f * fTemp44) + ((0.0067751091f * fTemp350) + ((0.0127567369f * fTemp363) + ((0.0162053294f * fTemp167) + ((0.0147099216f * fTemp74) + ((0.0090334788f * fTemp400) + ((0.00961333048f * fTemp124) + ((0.0109561449f * fTemp125) + ((0.003234962f * fTemp78) + ((0.000610370189f * fTemp10) + ((0.000396740623f * fTemp115) + ((0.00448622089f * fTemp366) + ((0.00109866634f * fTemp372) + ((0.00152592547f * fTemp171) + ((0.00869777519f * fTemp150) + ((0.00759910885f * fTemp85) + ((0.000183111057f * fTemp148) + ((0.00479140598f * fTemp313) + ((0.00491348002f * fTemp57) + ((0.000915555283f * fTemp5) + ((0.00436414685f * fTemp90) + ((0.00265511032f * fTemp404) + ((0.00650044251f * fTemp127) + ((0.00112918485f * fTemp334) + ((0.0025940733f * fTemp49) + ((0.00393688772f * fTemp32) + (fTemp806 + ((0.00558488723f * fTemp289) + ((0.001617481f * fTemp26) + ((0.000122074038f * fTemp100) + ((0.00173955504f * fTemp138) + ((0.00991851557f * fTemp4) + ((0.00952177495f * fTemp87) + ((0.00054933317f * fTemp39) + ((0.00106814783f * fTemp418) + ((0.0115359966f * fTemp149) + ((0.0121158483f * fTemp329) + ((0.00805688649f * fTemp94) + ((0.0177922919f * fTemp89) + ((0.0249031037f * fTemp422) + ((0.0281685852f * fTemp423) + (fTemp794 + ((0.0220648833f * fTemp425) + ((0.0102542192f * fTemp426) + ((0.00527970213f * fTemp441) + ((0.00708029419f * fTemp443) + ((0.00689718314f * fTemp522) + ((0.0130924406f * fTemp116) + ((0.0100405896f * fTemp118) + ((0.0045167394f * fTemp177) + ((0.0187383648f * fTemp249) + ((0.0401318409f * fTemp387) + ((0.046967987f * fTemp446) + ((0.0251777712f * fTemp447) + ((0.00854518265f * fTemp385) + ((0.0103762932f * fTemp373) + ((0.0101321451f * fTemp121) + (fTemp741 + ((0.0184026621f * fTemp454) + ((0.0229194015f * fTemp455) + ((0.0208136234f * fTemp152) + ((0.0195623655f * fTemp362) + ((0.0178228095f * fTemp456) + ((0.0252693258f * fTemp457) + ((0.0357066579f * fTemp364) + ((0.0399182104f * fTemp394) + ((0.029175695f * fTemp458) + ((0.0395825058f * fTemp393) + ((0.0449842848f * fTemp465) + ((0.0112308115f * fTemp466) + ((0.0125736259f * fTemp185) + ((0.0329599902f * fTemp186) + ((0.0372325815f * fTemp187) + ((0.0657368675f * fTemp188) + ((0.086336866f * fTemp189) + ((0.0864894539f * fTemp151) + ((0.0637531653f * fTemp190) + ((0.0307016205f * fTemp196) + ((0.146397293f * fTemp469) + ((0.168187499f * fTemp154) + ((0.117313154f * fTemp470) + ((0.00231940672f * fTemp346) + ((0.0856959745f * fTemp479) + ((0.184759051f * fTemp480) + ((0.109958187f * fTemp481) + ((0.531022072f * fTemp482) + ((0.991088569f * fTemp397) + (fTemp483 + ((0.624347687f * fTemp484) + ((0.23209326f * fTemp396) + ((0.0529190972f * fTemp485) + ((0.0154118473f * fTemp486) + ((0.00766014587f * fTemp211) + ((0.00750755332f * fTemp212) + ((0.00720236823f * fTemp499) + ((0.004852443f * fTemp503) + ((0.00546281319f * fTemp237) + ((0.00228888821f * fTemp506) + (0.00357066561f * fTemp510)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((((0.000885036774f * (fTemp242 + (fTemp175 + fTemp157))) + ((0.00137333293f * (fTemp244 + (fTemp21 - (fTemp303 + (fTemp501 - fTemp348))))) + ((0.00204474013f * (fTemp398 + (fTemp224 - fTemp378))) + ((0.00274666585f * (fTemp245 + (fTemp351 + fTemp339))) + ((0.00302133244f * (fTemp260 - (fTemp275 - fTemp37))) + ((0.00167851802f * (fTemp255 + (fTemp19 + fTemp283))) + ((0.000976592302f * (fTemp48 + fTemp276)) + ((0.00317392498f * (fTemp296 + (fTemp277 + (fTemp155 + fTemp23)))) + ((0.00344859157f * (fTemp297 + (fTemp445 - fTemp147))) + ((0.00146488845f * (fTemp133 - fTemp318)) + ((0.00363170262f * (fTemp438 - fTemp324)) + ((0.00430310983f * (fTemp232 - fTemp292)) + ((0.00189214759f * (fTemp132 - fTemp14)) + ((9.15555283e-05f * (fTemp18 + (fTemp59 + (fTemp388 - fTemp516)))) + ((0.00158696249f * (fTemp495 + fTemp25)) + ((0.00213629566f * (fTemp226 - fTemp31)) + ((0.00186162908f * (fTemp290 - fTemp279)) + ((0.000701925717f * (fTemp264 - (fTemp6 + fTemp312))) + ((0.00469985045f * (fTemp325 - (fTemp354 + (fTemp250 + fTemp406)))) + ((0.00292977691f * (fTemp352 - fTemp47)) + ((0.00119022187f * (fTemp51 + (fTemp29 + fTemp399))) + ((0.000427259132f * (fTemp54 - (fTemp401 - (fTemp247 + fTemp27)))) + ((0.00216681417f * (fTemp219 - fTemp60)) + ((0.00134281442f * (fTemp412 + fTemp67)) + ((0.00616473891f * (fTemp160 + (fTemp221 + fTemp106))) + ((0.00692770164f * (fTemp135 + fTemp109)) + ((0.00222785119f * (fTemp215 + fTemp110)) + ((0.00778221991f * (fTemp218 - fTemp166)) + ((0.00933866389f * (fTemp176 + fTemp120)) + ((6.10370189e-05f * (fTemp420 - fTemp56)) + ((0.00390636921f * (fTemp415 - fTemp306)) + ((0.00296029542f * (fTemp491 - fTemp374)) + ((0.00234992523f * (fTemp82 - (fTemp240 - fTemp112))) + ((0.00604266487f * (fTemp222 - fTemp382)) + ((0.00402844325f * (fTemp66 - (fTemp508 + fTemp300))) + ((0.0057985168f * (fTemp390 - fTemp383)) + ((0.000946073793f * (fTemp95 - fTemp421)) + ((0.00415051728f * (fTemp389 - fTemp178)) + ((0.00564592425f * (fTemp228 + fTemp459)) + ((0.00543229468f * fTemp807) + ((0.00241096225f * (fTemp231 + fTemp234)) + ((0.00244148076f * fTemp738) + (((0.00103762932f * fTemp261) + ((0.00247199927f * fTemp291) + ((0.00347911008f * fTemp302) + ((0.00250251777f * fTemp305) + ((0.00140385143f * fTemp309) + ((0.00280770287f * fTemp24) + ((0.00369273964f * fTemp347) + ((0.00683614612f * fTemp105) + ((0.00653096102f * fTemp323) + ((0.00500503555f * fTemp46) + ((0.00723288674f * fTemp353) + ((0.0111697745f * fTemp357) + ((0.0129703665f * fTemp268) + ((0.013061922f * fTemp272) + ((0.0120242927f * fTemp322) + ((0.0101016266f * fTemp3) + ((0.00717184972f * fTemp519) + (fTemp808 + ((0.0183416251f * fTemp168) + ((0.021210365f * fTemp169) + ((0.0172734763f * fTemp73) + ((0.00131229591f * fTemp50) + ((0.00201422162f * fTemp273) + (fTemp593 + ((0.000762962736f * fTemp326) + ((0.00207525864f * fTemp315) + ((0.00100711081f * fTemp274) + ((0.000213629566f * fTemp403) + (fTemp633 + (fTemp629 + (fTemp691 + ((0.00885036774f * fTemp407) + ((0.0120548112f * fTemp408) + ((0.0105899228f * fTemp52) + ((0.00286873989f * fTemp413) + ((0.0103152562f * fTemp377) + ((0.00860621966f * fTemp530) + ((0.0038758507f * fTemp338) + ((0.00662251655f * fTemp427) + ((0.00817896053f * fTemp428) + ((0.00671407208f * fTemp429) + ((0.00897244178f * fTemp430) + ((0.00964384899f * fTemp431) + ((0.0147404401f * fTemp432) + ((0.0206305124f * fTemp433) + ((0.0230414756f * fTemp434) + ((0.0193792544f * fTemp435) + ((0.012878811f * fTemp439) + ((0.0230109561f * fTemp381) + ((0.0320139155f * fTemp344) + ((0.0306711029f * fTemp111) + ((0.0217902157f * fTemp294) + ((0.0071108127f * fTemp440) + ((0.0137333293f * fTemp328) + ((0.0116580706f * fTemp444) + ((0.0237739198f * fTemp448) + ((0.0724814609f * fTemp77) + ((0.0932645649f * fTemp179) + ((0.0819422007f * fTemp180) + ((0.0585650206f * fTemp376) + ((0.0443739146f * fTemp449) + ((0.0360118411f * fTemp450) + ((0.0198065136f * fTemp451) + ((0.0571916886f * fTemp460) + ((0.108310193f * fTemp461) + ((0.133457437f * fTemp462) + ((0.119479962f * fTemp463) + ((0.0690633878f * fTemp464) + ((0.0317697674f * fTemp467) + ((0.0734580532f * fTemp468) + ((0.0883816034f * fTemp368) + ((0.0971709341f * fTemp181) + ((0.0983916745f * fTemp86) + ((0.105624564f * fTemp367) + ((0.104922637f * fTemp141) + ((0.0826136023f * fTemp182) + ((0.0467848741f * fTemp183) + ((0.0108645894f * fTemp184) + ((0.051637318f * fTemp192) + ((0.107974485f * fTemp193) + ((0.11368145f * fTemp194) + ((0.0665913895f * fTemp195) + ((0.112735376f * fTemp471) + ((0.181218907f * fTemp472) + ((0.187627792f * fTemp473) + ((0.141666919f * fTemp474) + ((0.144993439f * fTemp475) + ((0.111636706f * fTemp476) + ((0.136661887f * fTemp197) + ((0.0633869469f * fTemp198) + ((0.0704061985f * fTemp199) + ((0.0512710959f * fTemp200) + ((0.0989715233f * fTemp58) + ((0.0927457511f * fTemp477) + ((0.0122379223f * fTemp478) + ((0.0982696041f * fTemp201) + ((0.442243725f * fTemp202) + ((0.667592406f * fTemp203) + ((0.622333467f * fTemp204) + ((0.154118478f * fTemp35) + ((0.00332651753f * fTemp487) + ((0.022583697f * fTemp488) + ((0.0314035453f * fTemp489) + ((0.0298776217f * fTemp153) + ((0.0221259203f * fTemp205) + ((0.0140079958f * fTemp206) + ((0.00875881221f * fTemp207) + ((0.00738547929f * fTemp208) + ((0.00589007232f * fTemp216) + ((0.00793481246f * fTemp217) + ((0.00494399853f * fTemp220) + ((0.00509659108f * fTemp511) + (0.00360118411f * fTemp16))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00314340647f * fTemp251)))))))))))))))))))))))))))))))))))))))))))) + (0.000732444227f * (fTemp513 + (fTemp269 + (fTemp416 + (fTemp391 - fTemp22)))))) + (0.000854518265f * (fTemp1 - (fTemp253 + (fTemp360 - fTemp102)))))) : (((0.00131229591f * (fTemp51 - fTemp1)) + ((0.000518814661f * (fTemp65 - fTemp283)) + ((0.00277718436f * (fTemp21 + fTemp324)) + ((0.00216681417f * (fTemp304 - (fTemp74 + (fTemp400 + (fTemp95 + fTemp173))))) + ((0.000823999755f * (fTemp135 + fTemp337)) + ((0.00616473891f * (fTemp19 - (fTemp363 - fTemp68))) + ((0.00244148076f * (fTemp23 + (fTemp116 + fTemp264))) + ((0.00167851802f * (fTemp312 - fTemp25)) + ((9.15555283e-05f * (fTemp256 - (fTemp405 + (fTemp530 - (fTemp493 + (fTemp495 + (fTemp497 + (fTemp498 + (fTemp219 + (fTemp221 + (fTemp227 + (fTemp240 + fTemp795)))))))))))) + ((0.00317392498f * (fTemp262 - (fTemp147 - fTemp60))) + ((0.00506607257f * (fTemp252 - (fTemp92 - fTemp321))) + ((0.0077517014f * (fTemp2 - (fTemp57 + fTemp102))) + ((0.00640888698f * (fTemp67 - (fTemp448 + fTemp361))) + ((0.00521866512f * (fTemp155 - (fTemp94 + fTemp140))) + ((0.003234962f * (fTemp350 - fTemp157)) + ((0.0022583697f * (fTemp43 + (fTemp149 - fTemp172))) + ((0.0104373302f * (fTemp175 - fTemp109)) + ((0.000640888698f * (fTemp490 - fTemp71)) + ((0.00878933072f * (fTemp169 - (fTemp383 + fTemp403))) + ((0.00186162908f * (fTemp367 - fTemp146)) + ((0.000732444227f * (fTemp208 - fTemp326)) + ((0.00268562883f * (fTemp515 - fTemp414)) + ((0.000366222113f * (fTemp491 - fTemp390)) + ((0.00177007355f * (fTemp329 + (fTemp522 - fTemp294))) + ((0.000183111057f * (fTemp492 + (fTemp215 + fTemp213))) + (fTemp796 + ((0.00381481368f * fTemp292) + ((0.00372325815f * fTemp331) + ((0.00250251777f * fTemp285) + ((0.00183111057f * fTemp310) + ((0.00115970336f * fTemp518) + ((0.000335703604f * fTemp332) + ((0.00256355479f * fTemp8) + ((0.00619525742f * fTemp14) + ((0.00460829493f * fTemp339) + ((0.0057985168f * fTemp319) + ((0.00701925717f * fTemp34) + ((0.00643940549f * fTemp279) + ((0.000854518265f * fTemp286) + ((0.00402844325f * fTemp266) + ((0.00531022064f * fTemp47) + ((0.00430310983f * fTemp48) + ((0.000762962736f * fTemp54) + ((0.00454725791f * fTemp307) + ((0.00558488723f * fTemp33) + ((0.0071108127f * fTemp61) + ((0.00271614734f * fTemp347) + ((0.00347911008f * fTemp293) + ((0.00332651753f * fTemp83) + ((0.0012817774f * fTemp271) + ((0.00247199927f * fTemp113) + ((0.00482192449f * fTemp117) + ((0.00576799829f * fTemp161) + (fTemp781 + ((0.00411999878f * fTemp44) + ((0.00228888821f * fTemp399) + ((0.00109866634f * fTemp353) + ((0.00204474013f * fTemp38) + ((0.00738547929f * fTemp73) + ((0.00231940672f * fTemp78) + ((0.00329599902f * fTemp50) + ((0.000305185094f * fTemp142) + ((0.000396740623f * fTemp342) + ((0.000885036774f * fTemp377) + ((0.0167851802f * fTemp176) + ((0.0185247362f * fTemp328) + ((0.0201116987f * fTemp444) + ((0.0231025126f * fTemp445) + ((0.0170903653f * fTemp300) + ((0.00573747978f * fTemp373) + ((0.0156559963f * fTemp121) + ((0.027558215f * fTemp453) + ((0.0365611762f * fTemp454) + ((0.0430311002f * fTemp455) + ((0.0361644328f * fTemp152) + ((0.0183111057f * fTemp362) + ((0.0441297665f * fTemp462) + ((0.0652485713f * fTemp463) + ((0.042115543f * fTemp464) + ((0.0201727357f * fTemp141) + ((0.0387890264f * fTemp182) + ((0.058107242f * fTemp183) + ((0.0771202743f * fTemp184) + ((0.0758995339f * fTemp185) + ((0.0708944947f * fTemp186) + ((0.0716879815f * fTemp187) + ((0.0571916886f * fTemp188) + ((0.0241401419f * fTemp189) + ((0.0390331745f * fTemp194) + ((0.101199381f * fTemp195) + ((0.116885893f * fTemp196) + ((0.0662251636f * fTemp469) + ((0.0957670808f * fTemp478) + ((0.20871608f * fTemp479) + ((0.131107524f * fTemp480) + ((0.412976474f * fTemp204) + ((0.931394398f * fTemp35) + (fTemp482 + ((0.632038355f * fTemp397) + ((0.252113402f * fTemp483) + ((0.0142521439f * fTemp396) + (0.0742820501f * fTemp484)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.0028992584f * (fTemp244 + (fTemp341 + fTemp28))) + ((0.00378429517f * (fTemp245 + (fTemp418 + fTemp257))) + ((0.00405896176f * (fTemp40 + fTemp251)) + ((0.0025940733f * (fTemp148 + fTemp265)) + ((0.00155644398f * (fTemp354 + fTemp255)) + ((0.000610370189f * (fTemp261 - (fTemp369 + fTemp88))) + ((6.10370189e-05f * (fTemp269 - (fTemp7 + (fTemp210 + (fTemp211 + (fTemp217 + (fTemp218 + (fTemp220 + (fTemp225 + (fTemp226 + (fTemp239 + (fTemp238 + (fTemp237 + (fTemp234 + (fTemp233 + (fTemp511 + fTemp734)))))))))))))))) + ((0.00344859157f * (fTemp131 + fTemp309)) + ((0.00213629566f * (fTemp270 + (fTemp263 + fTemp306))) + ((0.000488296151f * (fTemp318 + (fTemp30 + fTemp357))) + ((0.00415051728f * (fTemp366 - fTemp330)) + ((0.00308236945f * (fTemp53 - fTemp278)) + ((0.0067751091f * (fTemp316 - fTemp18)) + ((0.000274666585f * (fTemp415 - fTemp24)) + ((0.00314340647f * (fTemp31 + (fTemp295 + fTemp84))) + ((0.000213629566f * (fTemp325 + (fTemp374 + (fTemp360 - fTemp130)))) + ((0.00164799951f * (fTemp282 + fTemp311)) + ((0.00366222113f * (fTemp340 + (fTemp75 - (fTemp447 - fTemp421)))) + ((0.00564592425f * (fTemp371 + fTemp37)) + ((0.00436414685f * (fTemp32 + fTemp45)) + ((0.00106814783f * (fTemp401 + fTemp280)) + ((0.00201422162f * (fTemp63 - fTemp320)) + ((0.006469924f * (fTemp343 - fTemp69)) + ((0.00665303506f * (fTemp248 - fTemp55)) + ((0.00759910885f * (fTemp384 - fTemp345)) + ((0.00787377544f * (fTemp336 - fTemp246)) + ((0.00735496078f * (fTemp26 - fTemp62)) + ((0.00695822015f * (fTemp126 - fTemp303)) + ((0.00198370311f * (fTemp136 - fTemp349)) + ((3.05185094e-05f * (fTemp91 - (fTemp132 + (fTemp501 + (fTemp222 + (fTemp22 + (fTemp503 - (fTemp504 - (fTemp512 + (fTemp232 + (fTemp231 + fTemp797))))))))))) + ((0.00210577715f * (fTemp514 + fTemp96)) + ((0.008087405f * (fTemp436 + fTemp46)) + ((0.00396740623f * (fTemp6 + fTemp287)) + ((0.00589007232f * (fTemp290 - fTemp119)) + ((0.0051576281f * (fTemp385 - fTemp164)) + ((0.00463881344f * (fTemp277 - (fTemp11 - (fTemp370 - fTemp253)))) + ((0.00335703604f * (fTemp103 + fTemp167)) + ((0.00595110934f * (fTemp327 - fTemp168)) + ((0.00125125889f * (fTemp416 - fTemp120)) + ((0.0054933317f * (fTemp49 - fTemp129)) + ((0.00567644276f * (fTemp413 - fTemp27)) + ((0.0093691824f * (fTemp247 + (fTemp437 + fTemp386))) + ((0.00891140476f * (fTemp115 + (fTemp13 + fTemp638))) + ((0.00292977691f * (fTemp171 + fTemp275)) + ((0.00341807306f * (fTemp104 + (fTemp145 + (fTemp150 + (fTemp139 + fTemp114))))) + ((0.0038758507f * (fTemp289 + fTemp358)) + ((0.00363170262f * (fTemp97 + fTemp298)) + ((0.000244148076f * (fTemp372 - (fTemp106 + (fTemp214 + fTemp207)))) + ((0.00103762932f * (fTemp122 + fTemp134)) + ((0.00479140598f * (fTemp299 + fTemp267)) + ((0.00918607134f * (fTemp516 + fTemp314)) + ((0.00756859034f * (fTemp258 + fTemp348)) + ((0.00357066561f * (fTemp335 + fTemp42)) + ((0.000152592547f * (fTemp378 - fTemp538)) + ((0.00683614612f * (fTemp301 + fTemp9)) + ((0.000122074038f * (fTemp417 - (fTemp446 + (fTemp209 + (fTemp212 + (fTemp216 + (fTemp496 - (fTemp505 - fTemp570)))))))) + ((((0.00399792474f * fTemp254) + ((0.00350962859f * fTemp260) + ((0.00152592547f * fTemp291) + ((0.00265511032f * fTemp296) + (fTemp798 + ((0.00439466536f * fTemp302) + ((0.00427259132f * fTemp305) + ((0.00222785119f * fTemp333) + ((0.00604266487f * fTemp41) + ((0.000427259132f * fTemp156) + ((0.00445570238f * fTemp72) + ((0.000915555283f * fTemp79) + ((0.00534073915f * fTemp101) + ((0.00909451582f * fTemp76) + ((0.0115665151f * fTemp159) + ((0.0123905148f * fTemp160) + ((0.0118106632f * fTemp105) + ((0.00912503432f * fTemp323) + ((0.00653096102f * fTemp110) + ((0.00238044374f * fTemp268) + ((0.00497451704f * fTemp272) + ((0.0087282937f * fTemp322) + ((0.0121768853f * fTemp3) + ((0.0142826624f * fTemp519) + ((0.0137333293f * fTemp352) + ((0.0120853297f * fTemp165) + ((0.00927762687f * fTemp166) + ((0.0163274035f * fTemp20) + ((0.0218817722f * fTemp124) + ((0.0224921424f * fTemp125) + ((0.0183416251f * fTemp123) + ((0.01126133f * fTemp365) + ((0.0035401471f * fTemp170) + ((0.00524918362f * fTemp273) + ((0.00753807183f * fTemp133) + ((0.0103457747f * fTemp137) + ((0.0101626636f * fTemp10) + ((0.00714133121f * fTemp80) + ((0.00384533219f * fTemp56) + ((0.00442518387f * fTemp402) + ((0.00283822138f * fTemp108) + ((0.00280770287f * fTemp144) + ((0.00473036896f * fTemp288) + ((0.00173955504f * fTemp359) + ((0.00503555406f * fTemp313) + ((0.00625629444f * fTemp259) + ((0.00933866389f * fTemp12) + ((0.00866725668f * fTemp59) + ((0.00637836847f * fTemp315) + (fTemp799 + ((0.0074159978f * fTemp5) + ((0.00689718314f * fTemp317) + ((0.00628681295f * fTemp128) + ((0.00622577593f * fTemp90) + ((0.00875881221f * fTemp274) + ((0.00924710836f * fTemp351) + ((0.00888088625f * fTemp82) + ((0.00836207159f * fTemp107) + (fTemp800 + ((0.00698873866f * fTemp64) + ((0.00766014587f * fTemp375) + ((0.00732444227f * fTemp70) + ((0.00585955381f * fTemp112) + ((0.00729392376f * fTemp243) + ((0.00692770164f * fTemp334) + ((0.00158696249f * fTemp98) + ((0.0042115543f * fTemp93) + ((0.00997955259f * fTemp406) + ((0.0116885891f * fTemp382) + ((0.011383404f * fTemp355) + ((0.00988799706f * fTemp15) + ((0.00982696004f * fTemp100) + ((0.00900296029f * fTemp99) + ((0.00717184972f * fTemp379) + ((0.00781273842f * fTemp281) + ((0.00894192327f * fTemp138) + ((0.00930814538f * fTemp81) + ((0.0101931822f * fTemp407) + ((0.0106814783f * fTemp408) + ((0.0104068117f * fTemp52) + ((0.0110477004f * fTemp66) + ((0.0119632557f * fTemp250) + ((0.0119327372f * fTemp4) + ((0.0102847377f * fTemp87) + ((0.00750755332f * fTemp409) + ((0.00762962736f * fTemp410) + ((0.0115359966f * fTemp388) + ((0.0106509598f * fTemp411) + (fTemp733 + (fTemp801 + ((0.00552385021f * fTemp420) + (fTemp802 + ((0.0128482925f * fTemp422) + ((0.0142216254f * fTemp423) + ((0.0176091809f * fTemp424) + ((0.0203558467f * fTemp425) + ((0.0185857732f * fTemp426) + ((0.014435255f * fTemp17) + ((0.0120548112f * fTemp338) + ((0.0140079958f * fTemp427) + ((0.0182500686f * fTemp428) + ((0.0232245866f * fTemp429) + ((0.0239265114f * fTemp430) + ((0.0238654744f * fTemp431) + ((0.0216071047f * fTemp432) + ((0.0202032533f * fTemp433) + ((0.0175786614f * fTemp434) + ((0.0132145146f * fTemp435) + ((0.0150151066f * fTemp438) + ((0.0202337727f * fTemp439) + ((0.0214239936f * fTemp381) + ((0.0165715516f * fTemp344) + ((0.009704886f * fTemp111) + ((0.00494399853f * fTemp440) + ((0.0141605884f * fTemp392) + ((0.0245368816f * fTemp441) + ((0.0209356975f * fTemp442) + ((0.0102237007f * fTemp443) + ((0.0207525864f * fTemp118) + ((0.0371410251f * fTemp177) + ((0.0448927283f * fTemp178) + ((0.0313730277f * fTemp249) + ((0.0138554033f * fTemp387) + ((0.0276497696f * fTemp77) + ((0.0432752483f * fTemp179) + ((0.0415356904f * fTemp180) + ((0.0270088818f * fTemp376) + ((0.0176396985f * fTemp449) + ((0.0151371807f * fTemp450) + ((0.0159001444f * fTemp451) + ((((((((((((((((((((((((((((((((((((((((((((((((((0.000976592302f * fTemp206) + (0.00466933195f * fTemp205)) + (0.0127262184f * fTemp153)) + (0.0251472518f * fTemp489)) + (0.0345164351f * fTemp488)) + (0.0370494723f * fTemp487)) + (0.0282296222f * fTemp486)) + (0.00790429395f * fTemp485)) + (0.204077274f * fTemp203)) + (0.534897923f * fTemp202)) + (0.502334654f * fTemp201)) + (0.21738334f * fTemp481)) + (0.0307321399f * fTemp477)) + (0.038819544f * fTemp58)) + (0.00509659108f * fTemp200)) + (0.0103152562f * fTemp199)) + (0.0351573229f * fTemp198)) + (0.0947904885f * fTemp197)) + (0.0986358225f * fTemp476)) + (0.0837427899f * fTemp475)) + (0.0329905078f * fTemp474)) + (0.019226661f * fTemp473)) + (0.0373546556f * fTemp472)) + (0.0960417464f * fTemp471)) + (0.125278488f * fTemp346)) + (0.108462781f * fTemp470)) + (0.0238349568f * fTemp154)) + (0.0460829511f * fTemp193)) + (0.0800805688f * fTemp192)) + (0.0777611658f * fTemp191)) + (0.0507522821f * fTemp190)) + (0.029114658f * fTemp151)) + (0.040498063f * fTemp86)) + (0.0700094625f * fTemp181)) + (0.0842310861f * fTemp368)) + (0.0820947886f * fTemp468)) + (0.0881984904f * fTemp467)) + (0.0953398272f * fTemp466)) + (0.0923795253f * fTemp465)) + (0.0611896105f * fTemp393)) + (0.0103762932f * fTemp389)) + (0.0132755516f * fTemp461)) + (0.0677510947f * fTemp460)) + (0.0994293019f * fTemp459)) + (0.0976592302f * fTemp458)) + (0.0792870894f * fTemp394)) + (0.0524002798f * fTemp364)) + (0.0285348073f * fTemp457)) + (0.00592059083f * fTemp456)) + (0.0112308115f * fTemp452)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00338755455f * fTemp398)) + (0.00241096225f * fTemp242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.0019226661f * (fTemp513 + (fTemp356 + fTemp85))))))) : (iSlow38 ? (iSlow40 ? ((((0.00149540696f * (fTemp398 - (fTemp388 + fTemp322))) + ((0.00231940672f * (fTemp260 - (fTemp495 - fTemp336))) + ((0.00152592547f * (fTemp42 + fTemp265)) + ((0.000610370189f * (fTemp255 - (fTemp20 + (fTemp207 + (fTemp498 + fTemp618))))) + ((3.05185094e-05f * (fTemp261 + (fTemp236 + fTemp493))) + ((0.00119022187f * (fTemp283 - (fTemp208 - fTemp127))) + ((0.00177007355f * (fTemp296 - (fTemp438 + (fTemp237 - fTemp227)))) + ((0.0019226661f * (fTemp297 - (fTemp273 - (fTemp421 + (fTemp511 + fTemp220))))) + ((0.00234992523f * (fTemp488 + fTemp302)) + ((0.00311288796f * (fTemp277 + (fTemp375 - fTemp524))) + ((0.0042115543f * (fTemp305 + (fTemp282 + fTemp96))) + ((0.0061342204f * (fTemp330 + fTemp318)) + ((0.00595110934f * (fTemp331 + (fTemp278 + (fTemp146 + fTemp24)))) + ((0.00634784997f * (fTemp285 - (fTemp26 - fTemp110))) + ((0.00708029419f * (fTemp358 + fTemp14)) + ((0.0045167394f * (fTemp19 + (fTemp23 - (fTemp316 - (fTemp500 - fTemp138))))) + ((0.00399792474f * (fTemp327 + fTemp339)) + ((0.00766014587f * (fTemp25 + (fTemp167 + (fTemp394 - fTemp15)))) + ((0.000244148076f * (fTemp264 - (fTemp335 + fTemp286))) + ((0.0051576281f * (fTemp311 + (fTemp489 + fTemp171))) + ((0.00851466414f * (fTemp48 + fTemp321)) + ((0.0129703665f * (fTemp79 + fTemp60)) + ((0.00778221991f * (fTemp67 + (fTemp453 - fTemp4))) + ((0.00701925717f * (fTemp267 + fTemp155)) + ((0.0071108127f * (fTemp114 + fTemp347)) + ((0.00842310861f * (fTemp6 + fTemp271)) + ((0.00531022064f * (fTemp160 + fTemp91)) + ((0.00378429517f * (fTemp101 + (fTemp205 + fTemp27))) + ((0.00692770164f * (fTemp323 + fTemp109)) + ((0.0077517014f * (fTemp470 + fTemp71)) + ((0.0116580706f * (fTemp328 + fTemp161)) + ((0.00418103579f * (fTemp353 + (fTemp416 - fTemp268))) + ((0.00103762932f * (fTemp57 + fTemp3)) + ((0.00375377666f * (fTemp417 + fTemp165)) + ((0.0058290353f * (fTemp363 - (fTemp281 - fTemp53))) + ((0.000427259132f * (fTemp132 - (fTemp356 + (fTemp221 - fTemp360)))) + ((0.00167851802f * (fTemp40 - fTemp247)) + ((0.00369273964f * (fTemp115 + (fTemp85 - (fTemp420 + fTemp290)))) + ((0.00503555406f * (fTemp108 + fTemp80)) + ((0.00585955381f * (fTemp56 + fTemp140)) + ((0.00567644276f * (fTemp84 + (fTemp275 + (fTemp370 + (fTemp154 - fTemp444))))) + ((0.00564592425f * (fTemp372 + fTemp104)) + ((0.00555436872f * (fTemp30 - (fTemp130 - fTemp288))) + ((0.00576799829f * (fTemp134 + (fTemp306 - (fTemp258 + (fTemp274 - (fTemp149 - fTemp139)))))) + ((0.00360118411f * (fTemp217 + fTemp354)) + ((0.00372325815f * (fTemp413 + fTemp374)) + ((0.00512710959f * (fTemp295 - (fTemp361 - fTemp172))) + ((0.00189214759f * (fTemp97 + (fTemp235 - fTemp240))) + ((0.000915555283f * (fTemp404 + fTemp12)) + ((0.000122074038f * (fTemp32 + fTemp314)) + ((0.00427259132f * (fTemp219 - fTemp5)) + ((0.00100711081f * (fTemp342 + fTemp107)) + ((0.000732444227f * (fTemp376 + fTemp514)) + ((0.00521866512f * (fTemp501 - fTemp378)) + ((0.0012817774f * (fTemp99 + (fTemp206 + (fTemp506 + fTemp492)))) + ((0.00665303506f * (fTemp515 - fTemp52)) + ((0.00296029542f * (fTemp233 + fTemp411)) + ((0.000976592302f * (fTemp512 + fTemp451)) + ((0.000640888698f * (fTemp209 + (fTemp508 + fTemp505))) + ((0.00137333293f * (fTemp241 - fTemp502)) + ((0.00598162785f * fTemp786) + ((0.00906399731f * fTemp771) + ((fTemp725 + (((0.00265511032f * fTemp251) + (((0.000488296151f * fTemp276) + ((0.00164799951f * fTemp291) + ((0.00604266487f * fTemp270) + ((0.00616473891f * fTemp292) + ((0.00836207159f * fTemp310) + ((0.00958281197f * fTemp518) + ((0.0103152562f * fTemp332) + ((0.0103762932f * fTemp7) + ((0.00982696004f * fTemp337) + ((0.00823999755f * fTemp11) + ((0.0057985168f * fTemp18) + ((0.0100711081f * fTemp333) + ((0.00973540451f * fTemp256) + ((0.00866725668f * fTemp262) + ((0.00717184972f * fTemp319) + ((0.00527970213f * fTemp34) + ((0.0035401471f * fTemp279) + ((0.00180059206f * fTemp253) + ((0.00140385143f * fTemp325) + ((0.00955229346f * fTemp340) + ((0.0133060701f * fTemp37) + ((0.0150151066f * fTemp41) + ((0.0148930326f * fTemp45) + ((0.0134586627f * fTemp280) + ((0.0119327372f * fTemp320) + ((0.0104068117f * fTemp266) + ((0.0093691824f * fTemp252) + ((0.00875881221f * fTemp47) + ((0.00878933072f * fTemp21) + ((0.00943021942f * fTemp51) + ((0.0105899228f * fTemp54) + ((0.0117801446f * fTemp312) + ((0.0137028107f * fTemp307) + ((0.0140385143f * fTemp33) + ((0.0141300699f * fTemp68) + ((0.0143742179f * fTemp69) + ((0.0149235511f * fTemp55) + ((0.0157475509f * fTemp61) + ((0.0163579211f * fTemp345) + ((0.016052736f * fTemp246) + ((0.0147404401f * fTemp2) + ((0.00976592302f * fTemp303) + ((0.00790429395f * fTemp156) + ((0.00918607134f * fTemp157) + ((0.0107425153f * fTemp72) + ((0.0121463668f * fTemp75) + ((0.0133671071f * fTemp349) + ((0.0129093295f * fTemp293) + ((0.0117191076f * fTemp83) + ((0.0100100711f * fTemp43) + ((0.00680562761f * fTemp88) + (fTemp708 + ((0.00631733146f * fTemp105) + ((0.00650044251f * fTemp287) + ((0.00949125644f * fTemp113) + ((0.0111697745f * fTemp117) + ((0.0125736259f * fTemp119) + ((0.0144047365f * fTemp163) + ((0.0169377737f * fTemp164) + ((0.0180059206f * fTemp44) + ((0.016296884f * fTemp350) + ((0.0112308115f * fTemp399) + ((0.00350962859f * fTemp352) + ((0.00457777642f * fTemp166) + ((0.0108340709f * fTemp63) + ((0.0152287362f * fTemp74) + ((0.019287698f * fTemp400) + ((0.0198675506f * fTemp401) + ((0.0158085879f * fTemp38) + ((0.00704977568f * fTemp168) + ((0.00558488723f * fTemp124) + ((0.00967436749f * fTemp125) + ((0.0121158483f * fTemp123) + ((0.0124820704f * fTemp365) + ((0.0110477004f * fTemp170) + ((0.00857570115f * fTemp78) + ((0.0019531846f * fTemp50) + ((0.00546281319f * fTemp366) + ((0.00863673817f * fTemp298) + ((0.00924710836f * fTemp257) + ((0.00686666463f * fTemp145) + ((0.00411999878f * fTemp144) + ((0.00393688772f * fTemp142) + ((0.00424207281f * fTemp326) + ((0.00476088747f * fTemp263) + ((0.00628681295f * fTemp173) + ((0.00723288674f * fTemp103) + ((0.00625629444f * fTemp359) + ((0.00787377544f * fTemp148) + ((0.00115970336f * fTemp313) + ((0.00112918485f * fTemp13) + ((0.00173955504f * fTemp248) + ((0.00244148076f * fTemp343) + ((0.00292977691f * fTemp64) + ((0.00314340647f * fTemp70) + (fTemp756 + ((0.000213629566f * fTemp136) + ((0.00317392498f * fTemp299) + ((0.00445570238f * fTemp412) + ((0.00198370311f * fTemp414) + ((0.00250251777f * fTemp415) + ((0.00601214636f * fTemp369) + ((0.00491348002f * fTemp329) + ((0.00247199927f * fTemp65) + ((0.0181890316f * fTemp443) + ((0.0307016205f * fTemp522) + ((0.0341807306f * fTemp175) + ((0.0266426597f * fTemp176) + ((0.0109256264f * fTemp452) + ((0.0148014771f * fTemp385) + ((0.0205999948f * fTemp373) + ((0.0174565874f * fTemp121) + ((0.0540482812f * fTemp458) + ((0.0633259043f * fTemp459) + ((0.025696585f * fTemp460) + ((0.0171208847f * fTemp368) + ((0.0369884335f * fTemp181) + ((0.0430005789f * fTemp86) + ((0.045167394f * fTemp367) + ((0.0476699136f * fTemp141) + ((0.0685445741f * fTemp182) + ((0.0674764216f * fTemp183) + ((0.0548417605f * fTemp184) + ((0.0133976256f * fTemp185) + ((0.0621967241f * fTemp190) + ((0.13888973f * fTemp191) + ((0.0973845646f * fTemp192) + ((0.0199591052f * fTemp193) + ((0.0773644224f * fTemp198) + ((0.21436201f * fTemp199) + ((0.24723044f * fTemp200) + ((0.0263069551f * fTemp58) + ((0.522782087f * fTemp481) + (fTemp201 + ((0.919827878f * fTemp202) + ((0.459212005f * fTemp203) + ((0.123569444f * fTemp204) + ((0.0265205856f * fTemp35) + ((0.0101931822f * fTemp482) + ((0.00552385021f * fTemp153) + ((0.000274666585f * fTemp490) + ((0.00109866634f * fTemp491) + ((0.00332651753f * fTemp216) + ((0.0022583697f * fTemp218) + ((0.00213629566f * fTemp499) + ((6.10370189e-05f * fTemp504) + ((0.00131229591f * fTemp225) + ((0.00155644398f * fTemp226) + ((0.00170903653f * fTemp228) + ((0.00057985168f * fTemp16) + ((0.00299081393f * fTemp234) + ((0.000305185094f * fTemp232) + ((0.000366222113f * fTemp0) + (0.00143436994f * fTemp507)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00274666585f * fTemp254))) + (0.00210577715f * fTemp245))) + (0.000762962736f * fTemp242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00054933317f * fTemp793)) - ((0.00540177617f * (fTemp66 - fTemp309)) + ((0.00720236823f * (fTemp355 - fTemp304)) + ((0.00991851557f * (fTemp122 - fTemp31)) + ((0.0123599963f * (fTemp437 - fTemp62)) + ((0.00433362834f * (fTemp450 - fTemp159)) + ((0.00656147953f * (fTemp439 - fTemp46)) + ((0.00146488845f * (fTemp357 + (fTemp100 + fTemp348))) + ((0.00256355479f * (fTemp223 - fTemp519)) + ((0.00607318338f * (fTemp407 - fTemp129)) + ((0.000885036774f * (fTemp341 - (fTemp442 + fTemp259))) + ((0.00183111057f * (fTemp49 - fTemp10)) + ((0.00610370189f * (fTemp392 - fTemp402)) + ((0.00439466536f * (fTemp81 - fTemp150)) + ((0.00469985045f * (fTemp29 - fTemp131)) + ((0.00283822138f * (fTemp128 - fTemp147)) + ((0.000671407208f * (fTemp59 + (fTemp210 + fTemp135))) + ((0.00341807306f * (fTemp496 + fTemp317)) + ((0.000457777642f * (fTemp112 - fTemp403)) + ((0.00122074038f * (fTemp231 + fTemp243)) + ((0.00204474013f * (fTemp334 + (fTemp211 - fTemp390))) + ((0.00524918362f * (fTemp250 + fTemp98)) + ((0.0074159978f * (fTemp387 + fTemp9)) + ((0.00683614612f * (fTemp377 + fTemp406)) + ((0.0106509598f * (fTemp294 + fTemp410)) + ((0.00207525864f * (fTemp213 + (fTemp230 + fTemp222))) + ((0.00186162908f * (fTemp229 - fTemp215)) + ((0.00750755332f * fTemp659) + ((0.021149328f * fTemp592) + ((0.00347911008f * fTemp272) + ((0.00305185094f * fTemp169) + ((0.0105594043f * fTemp73) + ((0.0118717002f * fTemp120) + ((0.00228888821f * fTemp133) + ((0.000183111057f * fTemp137) + ((0.00241096225f * fTemp315) + ((0.00482192449f * fTemp126) + ((0.00326548051f * fTemp90) + ((0.00381481368f * fTemp351) + ((0.00125125889f * fTemp82) + ((0.0038758507f * fTemp405) + ((0.0067751091f * fTemp289) + ((0.00653096102f * fTemp382) + ((0.00772118289f * fTemp384) + ((0.00430310983f * fTemp380) + ((0.000793481246f * fTemp379) + ((0.00463881344f * fTemp301) + ((0.00344859157f * fTemp516) + ((0.00732444227f * fTemp408) + ((0.0106204413f * fTemp87) + ((0.0124515519f * fTemp383) + ((0.0125431074f * fTemp409) + ((0.00671407208f * fTemp386) + ((0.00442518387f * fTemp36) + ((0.00805688649f * fTemp39) + ((0.00811792351f * fTemp418) + ((0.0126651814f * fTemp530) + ((0.0172734763f * fTemp95) + ((0.0185552537f * fTemp94) + ((0.0150761437f * fTemp89) + ((0.0151982177f * fTemp422) + ((0.0201422162f * fTemp423) + (fTemp794 + ((0.0318613239f * fTemp425) + ((0.0315866582f * fTemp426) + ((0.0264595486f * fTemp17) + ((0.0230719931f * fTemp338) + ((0.0204168838f * fTemp427) + ((0.0177312549f * fTemp428) + ((0.0176396985f * fTemp429) + ((0.0194402914f * fTemp430) + ((0.0204779208f * fTemp431) + ((0.0212408826f * fTemp432) + ((0.02438429f * fTemp434) + ((0.0254524369f * fTemp435) + ((0.0224921424f * fTemp436) + ((0.0167851802f * fTemp381) + ((0.0229194015f * fTemp344) + ((0.0181279946f * fTemp111) + ((0.00415051728f * fTemp440) + ((0.00668355357f * fTemp441) + ((0.0164799951f * fTemp445) + ((0.0272530299f * fTemp300) + ((0.0468459129f * fTemp116) + ((0.0662862062f * fTemp118) + ((0.0676900521f * fTemp177) + ((0.0484328754f * fTemp178) + ((0.0213629566f * fTemp249) + ((0.014435255f * fTemp446) + ((0.0328073986f * fTemp447) + ((0.0418103598f * fTemp448) + ((0.032227546f * fTemp77) + ((0.015991699f * fTemp179) + ((0.00390636921f * fTemp180) + ((0.00494399853f * fTemp449) + ((0.0101321451f * fTemp454) + ((0.0281075481f * fTemp455) + ((0.0590838343f * fTemp152) + ((0.0932035297f * fTemp362) + ((0.113895081f * fTemp456) + ((0.10077212f * fTemp457) + ((0.0580156855f * fTemp364) + ((0.0678426474f * fTemp462) + ((0.0926236734f * fTemp463) + ((0.09967345f * fTemp464) + ((0.0914944932f * fTemp389) + ((0.0885036811f * fTemp393) + ((0.0810876787f * fTemp465) + ((0.0587786511f * fTemp466) + ((0.0322580636f * fTemp467) + ((0.00408948027f * fTemp468) + ((0.0330515467f * fTemp186) + ((0.0691549405f * fTemp187) + ((0.0798059031f * fTemp188) + ((0.0877101943f * fTemp189) + ((0.0316782147f * fTemp151) + ((0.0954618976f * fTemp194) + ((0.151127666f * fTemp195) + ((0.139896855f * fTemp196) + ((0.0682088658f * fTemp469) + ((0.042298656f * fTemp346) + ((0.113254189f * fTemp471) + ((0.104312263f * fTemp472) + ((0.097354047f * fTemp473) + ((0.0614337586f * fTemp474) + ((0.0987884179f * fTemp475) + ((0.0718100518f * fTemp476) + ((0.0530716889f * fTemp197) + ((0.337778866f * fTemp477) + ((0.566484571f * fTemp478) + ((0.577562809f * fTemp479) + ((0.150273144f * fTemp480) + ((0.0104373302f * fTemp397) + ((0.0303353984f * fTemp483) + ((0.0397656187f * fTemp484) + ((0.0380260646f * fTemp396) + ((0.0277718436f * fTemp485) + ((0.0139774773f * fTemp486) + ((0.00357066561f * fTemp487) + ((0.00271614734f * fTemp212) + ((0.000335703604f * fTemp214) + ((0.00286873989f * fTemp497) + ((0.00238044374f * fTemp224) + ((0.00216681417f * fTemp22) + ((0.00277718436f * fTemp239) + ((0.000701925717f * fTemp510) + (0.00280770287f * fTemp238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.00057985168f * (fTemp260 - fTemp1)) + ((0.000396740623f * (fTemp245 - (fTemp4 + fTemp18))) + ((0.00122074038f * (fTemp318 - fTemp291)) + ((0.000671407208f * (fTemp404 + fTemp297)) + ((0.00198370311f * (fTemp302 + (fTemp345 + (fTemp156 + (fTemp343 + fTemp120))))) + ((0.00296029542f * (fTemp144 + fTemp277)) + ((0.00335703604f * (fTemp354 + fTemp305)) + ((0.00320444349f * (fTemp309 + (fTemp274 + fTemp101))) + ((0.00238044374f * (fTemp270 + (fTemp355 + fTemp171))) + ((0.000457777642f * (fTemp284 + (fTemp87 + fTemp292))) + ((0.000854518265f * (fTemp117 + fTemp330)) + ((0.00137333293f * (fTemp331 - (fTemp256 - (fTemp416 + fTemp161)))) + ((0.00177007355f * (fTemp278 + (fTemp459 - fTemp253))) + ((0.0019531846f * (fTemp285 + (fTemp518 + (fTemp175 + fTemp110)))) + ((0.00204474013f * (fTemp304 + (fTemp310 + (fTemp286 + (fTemp102 + (fTemp40 + fTemp78)))))) + ((0.000762962736f * (fTemp7 - (fTemp165 + (fTemp221 - fTemp77)))) + ((6.10370189e-05f * (fTemp337 - (fTemp500 + fTemp19))) + ((0.000793481246f * (fTemp339 - (fTemp375 + (fTemp0 + fTemp411)))) + ((0.00241096225f * (fTemp23 + (fTemp123 + fTemp347))) + ((0.00424207281f * (fTemp24 + (fTemp350 - (fTemp39 - fTemp406)))) + ((0.0054933317f * (fTemp238 + fTemp25)) + ((0.00546281319f * (fTemp160 + fTemp28)) + ((0.00396740623f * (fTemp258 + fTemp31)) + ((0.00723288674f * (fTemp311 - (fTemp364 + fTemp436))) + ((0.00299081393f * (fTemp271 + fTemp45)) + ((0.00170903653f * (fTemp320 + (fTemp216 + fTemp72))) + ((0.00479140598f * (fTemp237 - fTemp321)) + ((0.00372325815f * (fTemp21 + (fTemp76 + (fTemp530 + fTemp131)))) + ((0.00524918362f * (fTemp357 + fTemp60)) + ((0.000274666585f * (fTemp55 + (fTemp448 + fTemp403))) + ((0.00119022187f * (fTemp61 + (fTemp232 + fTemp334))) + ((0.00256355479f * (fTemp15 + fTemp246)) + ((0.00305185094f * (fTemp2 + (fTemp306 + (fTemp377 + fTemp516)))) + ((0.00326548051f * (fTemp62 - (fTemp94 - fTemp303))) + ((0.00314340647f * (fTemp67 + (fTemp146 - (fTemp505 - fTemp514)))) + ((0.00283822138f * (fTemp155 - (fTemp217 + fTemp360))) + ((0.00210577715f * (fTemp42 + fTemp79)) + ((0.00189214759f * (fTemp349 + (fTemp496 + fTemp128))) + ((0.00357066561f * (fTemp91 + (fTemp267 - (fTemp434 - fTemp114)))) + ((0.00329599902f * (fTemp56 + fTemp96)) + ((0.00628681295f * (fTemp226 + fTemp105)) + ((0.00219733268f * (fTemp119 + (fTemp20 + (fTemp348 + (fTemp315 - fTemp607))))) + ((0.00311288796f * (fTemp50 + fTemp163)) + ((0.00378429517f * (fTemp316 + fTemp164)) + ((0.00408948027f * (fTemp44 - (fTemp433 - fTemp38))) + ((0.0045167394f * (fTemp115 + fTemp399)) + ((0.00415051728f * (fTemp499 + fTemp272)) + ((0.00228888821f * (fTemp322 + (fTemp290 - (fTemp184 + fTemp65)))) + ((9.15555283e-05f * (fTemp510 + fTemp3)) + ((0.00155644398f * (fTemp299 - fTemp519)) + ((0.00186162908f * (fTemp107 - fTemp352)) + ((0.00292977691f * (fTemp248 + fTemp363)) + ((0.00500503555f * (fTemp176 + fTemp63)) + ((0.0035401471f * (fTemp168 + (fTemp326 + (fTemp81 + fTemp282)))) + ((0.00277718436f * (fTemp169 + (fTemp379 + fTemp145))) + ((0.00213629566f * (fTemp73 + (fTemp335 + fTemp59))) + ((0.00201422162f * (fTemp317 + fTemp365)) + ((0.00183111057f * (fTemp512 + fTemp170)) + ((0.00250251777f * (fTemp129 + (fTemp12 + (fTemp49 + (fTemp22 + fTemp407))))) + ((0.0028992584f * (fTemp13 + fTemp27)) + ((0.003234962f * (fTemp57 + fTemp132)) + ((0.00332651753f * (fTemp134 + fTemp341)) + ((0.00347911008f * (fTemp133 + (fTemp372 + (fTemp288 + (fTemp150 + (fTemp85 + (fTemp259 + fTemp359))))))) + ((0.00360118411f * (fTemp247 + (fTemp229 + fTemp173))) + ((0.00393688772f * (fTemp80 + (fTemp222 + fTemp281))) + ((0.00338755455f * (fTemp30 + fTemp140)) + ((0.00366222113f * (fTemp84 + (fTemp227 + fTemp374))) + ((0.00427259132f * (fTemp301 + fTemp275)) + ((0.00463881344f * (fTemp53 + (fTemp104 + (fTemp402 - (fTemp367 - fTemp378))))) + ((0.00460829493f * (fTemp366 - (fTemp241 + fTemp17))) + ((0.00445570238f * (fTemp213 + fTemp358)) + ((0.00375377666f * (fTemp313 + fTemp298)) + ((0.00286873989f * (fTemp108 + (fTemp138 + fTemp127))) + ((0.00216681417f * (fTemp295 + (fTemp314 - (fTemp235 - fTemp356)))) + ((0.0038758507f * fTemp791) + ((0.00271614734f * (fTemp90 + (fTemp475 + fTemp450))) + ((0.00180059206f * (fTemp236 + fTemp351)) + ((0.00140385143f * (fTemp336 + fTemp327)) + ((0.00109866634f * (fTemp26 - (fTemp329 - fTemp408))) + ((0.00115970336f * (fTemp99 + (fTemp328 - fTemp388))) + ((0.0237434004f * (fTemp346 - fTemp440)) + ((0.0394909531f * (fTemp463 - fTemp373)) + ((0.000640888698f * fTemp705) + ((0.000122074038f * fTemp398) + ((0.00152592547f * fTemp332) + ((0.00125125889f * fTemp333) + ((0.00482192449f * fTemp325) + ((0.00823999755f * fTemp340) + ((0.00729392376f * fTemp37) + ((0.00509659108f * fTemp41) + ((0.00787377544f * fTemp51) + ((0.00939970091f * fTemp54) + ((0.00811792351f * fTemp312) + ((0.0022583697f * fTemp307) + ((0.000152592547f * fTemp33) + ((0.00167851802f * fTemp157) + ((0.0019226661f * fTemp75) + ((0.00173955504f * fTemp83) + ((0.00231940672f * fTemp43) + ((0.00454725791f * fTemp159) + ((0.00558488723f * fTemp323) + ((0.00384533219f * fTemp46) + ((0.00488296151f * fTemp353) + ((0.0051576281f * fTemp74) + ((0.004852443f * fTemp400) + ((0.00448622089f * fTemp401) + ((0.00253303628f * fTemp124) + ((0.00390636921f * fTemp137) + ((0.00439466536f * fTemp10) + ((0.00457777642f * fTemp370) + ((0.00381481368f * fTemp142) + ((0.00369273964f * fTemp103) + ((0.00344859157f * fTemp148) + ((0.00302133244f * fTemp126) + ((0.00268562883f * fTemp5) + ((0.00149540696f * fTemp92) + ((0.00317392498f * fTemp405) + ((0.00616473891f * fTemp139) + ((0.00662251655f * fTemp93) + ((0.00567644276f * fTemp9) + ((0.00222785119f * fTemp384) + ((0.00100711081f * fTemp100) + ((0.000976592302f * fTemp409) + ((0.000183111057f * fTemp410) + ((0.00054933317f * fTemp415) + ((0.000946073793f * fTemp417) + ((0.00863673817f * fTemp179) + ((0.0239875484f * fTemp180) + ((0.0294198431f * fTemp376) + ((0.0205999948f * fTemp449) + (fTemp695 + ((0.0306711029f * fTemp454) + ((0.0105899228f * fTemp455) + ((0.0399792492f * fTemp460) + ((0.0769981965f * fTemp461) + ((0.0170903653f * fTemp393) + ((0.0347911008f * fTemp465) + ((0.00927762687f * fTemp466) + ((0.071871087f * fTemp141) + ((0.10623493f * fTemp182) + ((0.0757469386f * fTemp183) + (fTemp784 + ((0.0122989593f * fTemp194) + ((0.0263069551f * fTemp195) + ((0.0436109491f * fTemp196) + ((0.0521256141f * fTemp469) + ((0.0892361253f * fTemp154) + ((0.0845667869f * fTemp470) + ((0.126712859f * fTemp476) + ((0.182714313f * fTemp197) + ((0.112643816f * fTemp198) + ((0.0093691824f * fTemp199) + ((0.0153508103f * fTemp481) + ((0.0779747888f * fTemp201) + ((0.061952576f * fTemp202) + ((0.0191351064f * fTemp203) + ((0.053682059f * fTemp483) + ((0.174932092f * fTemp484) + ((0.155186623f * fTemp396) + ((0.240485862f * fTemp489) + ((0.925229669f * fTemp153) + (fTemp205 + ((0.539689302f * fTemp206) + ((0.150517285f * fTemp207) + (fTemp600 + ((0.0253913999f * fTemp135) + ((0.00561540574f * fTemp490) + ((0.00665303506f * fTemp214) + ((0.00555436872f * fTemp497) + ((0.00653096102f * fTemp223) + ((0.00589007232f * fTemp224) + ((0.00564592425f * fTemp225) + ((0.00531022064f * fTemp230) + (0.00436414685f * fTemp231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((((0.000213629566f * (fTemp244 - (fTemp429 - fTemp264))) + ((0.000305185094f * (fTemp106 - fTemp265)) + ((0.000335703604f * (fTemp261 - (fTemp324 - (fTemp412 - fTemp243)))) + ((0.000701925717f * (fTemp269 - (fTemp287 + (fTemp380 - (fTemp228 + fTemp390))))) + ((0.00106814783f * (fTemp276 - (fTemp383 + fTemp166))) + ((0.00134281442f * (fTemp48 + fTemp283)) + ((0.000518814661f * (fTemp296 - (fTemp113 - fTemp69))) + ((0.000244148076f * (fTemp8 - (fTemp266 - (fTemp250 - fTemp371)))) + ((0.000366222113f * (fTemp11 - (fTemp71 - (fTemp192 - fTemp64)))) + ((0.00308236945f * (fTemp262 - (fTemp257 + (fTemp136 + fTemp172)))) + ((0.00341807306f * (fTemp34 - (fTemp239 + fTemp273))) + ((0.00280770287f * (fTemp279 - (fTemp263 + (fTemp361 - (fTemp495 - fTemp382))))) + ((0.00207525864f * (fTemp36 - fTemp280)) + ((0.00274666585f * (fTemp252 - fTemp792)) + ((0.00518814661f * (fTemp47 + (fTemp233 - fTemp268))) + ((0.000732444227f * (fTemp68 + (fTemp386 - fTemp52))) + ((0.001617481f * (fTemp430 - fTemp293)) + ((0.00350962859f * (fTemp508 - fTemp88)) + ((0.006469924f * (fTemp219 - fTemp109)) + ((0.00433362834f * (fTemp501 - fTemp167)) + ((0.00262459181f * (fTemp149 - fTemp125)) + ((0.00244148076f * (fTemp427 - fTemp29)) + ((0.000915555283f * (fTemp70 - (fTemp112 + (fTemp95 - fTemp414)))) + ((0.00402844325f * (fTemp338 - fTemp130)) + ((0.00527970213f * (fTemp507 - fTemp98)) + ((0.00683614612f * (fTemp515 - fTemp289)) + ((0.000488296151f * (fTemp240 + fTemp342)) + ((0.00543229468f * (fTemp426 - (fTemp215 - fTemp438))) + ((0.0808740482f * (fTemp86 - fTemp462)) + ((0.00604266487f * (fTemp493 + fTemp218)) + ((0.00634784997f * (fTemp504 - fTemp498)) + ((3.05185094e-05f * fTemp255) + ((0.00363170262f * fTemp319) + ((0.00668355357f * fTemp122) + ((0.008087405f * fTemp418) + ((0.00918607134f * fTemp420) + ((0.0102542192f * fTemp421) + ((0.00988799706f * fTemp369) + ((0.00762962736f * fTemp89) + ((0.0115665151f * fTemp422) + ((0.012939848f * fTemp423) + ((0.011322367f * fTemp424) + ((0.00817896053f * fTemp425) + ((0.00595110934f * fTemp431) + ((0.00701925717f * fTemp432) + ((0.00692770164f * fTemp435) + ((0.00430310983f * fTemp437) + ((0.00900296029f * fTemp439) + ((0.00952177495f * fTemp381) + ((0.0116580706f * fTemp344) + ((0.0172734763f * fTemp111) + ((0.0222785119f * fTemp294) + ((0.0246894751f * fTemp392) + ((0.0259712525f * fTemp441) + ((0.024506364f * fTemp442) + ((0.0163884405f * fTemp443) + ((0.00576799829f * fTemp522) + ((0.00650044251f * fTemp444) + ((0.0140995514f * fTemp445) + (fTemp778 + ((0.0206915494f * fTemp116) + ((0.0238654744f * fTemp118) + ((0.0247810297f * fTemp177) + ((0.0245368816f * fTemp178) + ((0.0259102155f * fTemp249) + ((0.0254829563f * fTemp387) + ((0.0172429588f * fTemp446) + ((0.0058290353f * fTemp447) + ((0.0209967345f * fTemp451) + ((0.0467848741f * fTemp452) + ((0.0565507971f * fTemp385) + ((0.00534073915f * fTemp121) + ((0.0176702179f * fTemp152) + ((0.0332041383f * fTemp362) + ((0.0302743614f * fTemp456) + ((0.0178838465f * fTemp457) + ((0.013061922f * fTemp394) + ((0.0162663665f * fTemp458) + ((0.00503555406f * fTemp464) + ((0.0135196997f * fTemp389) + ((0.0481887273f * fTemp467) + ((0.103274636f * fTemp468) + ((0.131565288f * fTemp368) + ((0.12518692f * fTemp181) + ((0.0842921212f * fTemp185) + ((0.12524797f * fTemp186) + ((0.121646777f * fTemp187) + ((0.0949125662f * fTemp188) + ((0.0675374642f * fTemp189) + ((0.0474868007f * fTemp151) + ((0.0462355427f * fTemp190) + ((0.0312509537f * fTemp191) + ((0.0465102084f * fTemp471) + ((0.102572709f * fTemp472) + ((0.137821585f * fTemp473) + ((0.114505447f * fTemp474) + ((0.0746177584f * fTemp200) + (fTemp541 + ((0.199743643f * fTemp477) + ((0.163182467f * fTemp478) + ((0.080813013f * fTemp479) + ((0.0417188033f * fTemp480) + ((0.0763573125f * fTemp204) + ((0.127872556f * fTemp35) + ((0.151707515f * fTemp482) + ((0.0577410199f * fTemp397) + ((0.129978329f * fTemp485) + ((0.499588013f * fTemp486) + ((0.736960948f * fTemp487) + ((0.478987992f * fTemp488) + ((0.0185247362f * fTemp491) + ((0.0340586565f * fTemp492) + ((0.0378124341f * fTemp209) + ((0.0298471022f * fTemp210) + ((0.0147709586f * fTemp211) + ((0.00506607257f * fTemp220) + ((0.00585955381f * fTemp503) + ((0.00610370189f * fTemp16) + ((0.00442518387f * fTemp391) + ((0.00497451704f * fTemp234) + ((0.0042115543f * fTemp506) + (0.00265511032f * fTemp511)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000427259132f * (fTemp242 + (fTemp428 + fTemp14)))) + (0.000610370189f * (fTemp513 - (fTemp251 - (fTemp413 - fTemp82))))))) : (iSlow39 ? (((0.00125125889f * (fTemp244 + (fTemp8 - (fTemp450 + fTemp161)))) + ((0.00167851802f * (fTemp398 + (fTemp60 + fTemp277))) + ((0.00216681417f * (fTemp245 + (fTemp291 + (fTemp292 + (fTemp399 - (fTemp362 + fTemp250)))))) + ((0.00265511032f * (fTemp276 + fTemp251)) + ((0.00311288796f * (fTemp254 - (fTemp432 - fTemp363))) + ((0.00344859157f * (fTemp260 + (fTemp73 - (fTemp82 + fTemp351)))) + ((0.0035401471f * (fTemp255 + (fTemp120 + fTemp345))) + ((0.00332651753f * (fTemp261 + (fTemp382 + fTemp357))) + ((0.00302133244f * (fTemp269 + (fTemp69 - (fTemp390 - fTemp281)))) + ((0.00241096225f * (fTemp283 - (fTemp522 + fTemp441))) + ((0.00201422162f * (fTemp330 + fTemp296)) + ((0.001617481f * (fTemp33 + fTemp305)) + ((0.00177007355f * (fTemp309 + (fTemp104 + fTemp331))) + ((0.0019531846f * (fTemp270 + (fTemp275 - (fTemp433 + fTemp114)))) + ((0.00146488845f * (fTemp278 - (fTemp530 + fTemp144))) + ((0.00100711081f * (fTemp310 + (fTemp163 + (fTemp452 - fTemp370)))) + ((0.00115970336f * (fTemp14 + fTemp332)) + ((0.0012817774f * (fTemp7 - (fTemp435 - fTemp19))) + ((0.00119022187f * (fTemp11 + (fTemp18 + (fTemp343 + fTemp316)))) + ((0.00134281442f * (fTemp339 - (fTemp434 + fTemp117))) + ((0.00149540696f * (fTemp384 + fTemp24)) + ((0.00180059206f * (fTemp164 + fTemp28)) + ((0.00292977691f * (fTemp256 + (fTemp56 - (fTemp154 + fTemp274)))) + ((0.00335703604f * (fTemp262 + (fTemp110 + (fTemp140 + (fTemp406 - fTemp403))))) + ((0.00366222113f * (fTemp319 + (fTemp55 + (fTemp102 - fTemp752)))) + ((0.00399792474f * (fTemp253 + (fTemp49 - fTemp322))) + ((0.00393688772f * (fTemp264 - (fTemp118 - fTemp61))) + ((0.00329599902f * (fTemp325 + (fTemp169 - (fTemp116 - fTemp32)))) + ((0.00228888821f * fTemp786) + ((0.0058290353f * (fTemp323 + fTemp252)) + ((0.00512710959f * (fTemp42 + fTemp21)) + ((0.00433362834f * (fTemp51 - (fTemp392 + fTemp386))) + ((0.003234962f * (fTemp54 - (fTemp247 + (fTemp145 - (fTemp15 - fTemp404))))) + ((0.00231940672f * (fTemp268 + fTemp312)) + ((0.00277718436f * (fTemp353 + fTemp246)) + ((0.0019226661f * (fTemp2 - (fTemp458 - fTemp44))) + ((0.000976592302f * (fTemp62 - (fTemp451 + fTemp380))) + ((0.00183111057f * (fTemp72 + (fTemp385 + fTemp287))) + ((0.00543229468f * (fTemp349 + (fTemp371 + fTemp76))) + ((0.006469924f * (fTemp88 + fTemp83)) + ((0.00552385021f * (fTemp159 - (fTemp189 - fTemp327))) + ((0.000457777642f * (fTemp71 + (fTemp94 - fTemp272))) + ((0.000213629566f * (fTemp89 - fTemp119)) + ((0.00189214759f * (fTemp53 + fTemp350)) + ((0.0057985168f * (fTemp125 - fTemp352)) + ((0.00347911008f * (fTemp40 - fTemp165)) + ((0.000640888698f * fTemp787) + ((0.0113528855f * (fTemp483 + fTemp74)) + ((0.00732444227f * (fTemp401 + (fTemp209 + fTemp123))) + ((0.00488296151f * (fTemp38 + (fTemp334 + fTemp243))) + ((0.00360118411f * (fTemp168 + (fTemp355 + fTemp290))) + ((0.00457777642f * (fTemp124 - (fTemp87 - fTemp112))) + ((0.00396740623f * (fTemp142 + fTemp279)) + ((0.00842310861f * (fTemp132 - fTemp788)) + ((0.00375377666f * (fTemp407 - fTemp137)) + ((0.00415051728f * (fTemp375 - fTemp358)) + ((0.00158696249f * (fTemp52 - fTemp146)) + ((0.00381481368f * (fTemp81 + fTemp131)) + ((0.00857570115f * (fTemp378 + fTemp147)) + ((0.00958281197f * (fTemp461 + fTemp259)) + ((0.0111697745f * (fTemp493 + fTemp57)) + ((0.00756859034f * (fTemp405 - (fTemp427 + (fTemp249 + fTemp428)))) + ((0.0022583697f * (fTemp397 - fTemp413)) + ((0.00894192327f * (fTemp474 + fTemp460)) + ((0.00750755332f * (fTemp475 + fTemp462)) + ((0.027741326f * (fTemp396 - fTemp367)) + ((0.108554341f * (fTemp236 - fTemp207)) + (((((0.00213629566f * fTemp318) + ((0.00122074038f * fTemp285) + ((0.00106814783f * fTemp304) + ((0.00103762932f * fTemp518) + ((0.00131229591f * fTemp337) + ((0.00378429517f * fTemp34) + ((0.00363170262f * fTemp286) + ((0.00317392498f * fTemp311) + ((0.00338755455f * fTemp340) + ((0.00405896176f * fTemp41) + ((0.00448622089f * fTemp45) + ((0.00540177617f * fTemp320) + ((0.00570696127f * fTemp266) + ((0.00592059083f * fTemp47) + ((0.00585955381f * fTemp321) + ((0.00561540574f * fTemp48) + ((0.00140385143f * fTemp307) + ((0.00219733268f * fTemp68) + ((9.15555283e-05f * fTemp347) + ((0.00054933317f * fTemp156) + ((0.00427259132f * fTemp79) + ((0.00607318338f * fTemp293) + ((0.00656147953f * fTemp43) + ((0.00662251655f * fTemp271) + ((0.00610370189f * fTemp91) + ((0.00564592425f * fTemp96) + ((0.00537125766f * fTemp101) + ((0.00576799829f * fTemp160) + ((0.00601214636f * fTemp105) + ((0.00704977568f * fTemp167) + ((0.0101321451f * fTemp63) + ((0.0100711081f * fTemp400) + ((0.0038758507f * fTemp20) + ((0.0087282937f * fTemp365) + ((0.0101016266f * fTemp78) + ((0.0102237007f * fTemp129) + ((0.0100100711f * fTemp27) + ((0.00631733146f * fTemp341) + ((0.00299081393f * fTemp273) + ((0.00234992523f * fTemp84) + ((0.000732444227f * fTemp372) + ((0.00109866634f * fTemp134) + ((0.000885036774f * fTemp306) + ((0.00793481246f * fTemp326) + ((0.0112308115f * fTemp263) + ((0.0122989593f * fTemp295) + ((0.00973540451f * fTemp171) + ((0.00476088747f * fTemp172) + ((0.00988799706f * fTemp97) + ((0.0093691824f * fTemp313) + ((0.00976592302f * fTemp13) + ((0.00155644398f * fTemp12) + ((0.0103762932f * fTemp29) + ((0.0134586627f * fTemp126) + ((0.0126041444f * fTemp5) + ((0.0108340709f * fTemp317) + ((0.00817896053f * fTemp128) + ((0.00466933195f * fTemp90) + ((0.00262459181f * fTemp64) + ((0.00509659108f * fTemp70) + ((0.0045167394f * fTemp514) + ((0.00411999878f * fTemp136) + ((0.00442518387f * fTemp92) + (fTemp770 + ((0.00805688649f * fTemp130) + ((0.00891140476f * fTemp98) + ((0.00885036774f * fTemp139) + ((0.008087405f * fTemp289) + ((0.00445570238f * fTemp9) + ((0.000366222113f * fTemp100) + ((0.00280770287f * fTemp99) + ((0.00503555406f * fTemp336) + ((0.00555436872f * fTemp379) + ((0.00408948027f * fTemp301) + ((0.00314340647f * fTemp138) + ((0.00430310983f * fTemp459) + ((0.00384533219f * fTemp463) + ((0.000488296151f * fTemp470) + ((0.00491348002f * fTemp346) + ((0.0104983672f * fTemp471) + ((0.0136112552f * fTemp472) + ((0.0105899228f * fTemp473) + ((0.00170903653f * fTemp476) + ((0.0217291787f * fTemp484) + ((0.0242316965f * fTemp485) + ((0.0204168838f * fTemp486) + ((0.0106509598f * fTemp487) + ((0.0296639912f * fTemp490) + ((0.0608233884f * fTemp491) + ((0.0500503555f * fTemp492) + ((0.0384533219f * fTemp495) + ((0.048341319f * fTemp496) + ((0.0517899096f * fTemp497) + ((0.0612201318f * fTemp498) + ((0.061281167f * fTemp499) + ((0.0544450209f * fTemp500) + ((0.0415967293f * fTemp501) + ((0.0508133173f * fTemp22) + ((0.109317303f * fTemp502) + ((0.0952177495f * fTemp503) + ((0.0290231034f * fTemp504) + ((0.00268562883f * fTemp227) + (((((((fTemp508 + (((0.102542192f * fTemp0) + (0.369182408f * fTemp506)) + (0.785882115f * fTemp507))) + (0.665944397f * fTemp510)) + (0.084810935f * fTemp229)) + (0.0164189581f * fTemp233)) + (0.0616168715f * fTemp234)) + (0.126102477f * fTemp235)) + (0.0289010294f * fTemp237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00357066561f * fTemp265)) + (0.000823999755f * fTemp513)) + (0.000762962736f * fTemp1))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00186162908f * (fTemp436 - fTemp297)) + ((0.00173955504f * (fTemp127 - fTemp302)) + ((0.00143436994f * (fTemp442 - fTemp23)) + ((0.00164799951f * (fTemp176 - fTemp25)) + ((0.00207525864f * (fTemp10 - fTemp31)) + ((0.00244148076f * (fTemp412 - fTemp333)) + ((0.00372325815f * (fTemp388 - fTemp37)) + ((0.00494399853f * (fTemp383 - fTemp280)) + ((0.00112918485f * (fTemp464 - fTemp157)) + ((0.0028992584f * (fTemp188 - fTemp75)) + ((0.000152592547f * (fTemp155 - fTemp303)) + ((0.00619525742f * (fTemp360 - fTemp109)) + ((0.004852443f * (fTemp376 - fTemp46)) + ((0.00961333048f * (fTemp364 - fTemp170)) + ((0.00946073793f * (fTemp342 - fTemp50)) + ((0.00274666585f * (fTemp107 - fTemp80)) + ((0.000854518265f * (fTemp422 - fTemp366)) + ((0.00473036896f * (fTemp431 + fTemp257)) + ((0.00137333293f * (fTemp258 + fTemp354)) + ((0.000518814661f * (fTemp26 - fTemp374)) + ((0.00759910885f * (fTemp294 + fTemp267)) + ((0.0131534776f * (fTemp446 - fTemp361)) + ((0.00418103579f * (fTemp415 - fTemp335)) + ((0.00735496078f * (fTemp338 - fTemp356)) + ((0.00625629444f * fTemp789) + ((0.00305185094f * (fTemp411 - fTemp408)) + ((0.00460829493f * (fTemp410 + (fTemp121 + fTemp106))) + ((0.0104068117f * (fTemp36 + (fTemp469 + fTemp387))) + ((0.0102847377f * (fTemp420 + fTemp122)) + ((0.0109256264f * (fTemp455 + fTemp421)) + ((0.00531022064f * (fTemp186 + fTemp103)) + ((0.00527970213f * (fTemp389 + fTemp438)) + ((0.0107119968f * (fTemp197 + fTemp179)) + ((0.0238349568f * (fTemp191 + fTemp182)) + ((0.0025940733f * (fTemp187 + fTemp175)) + ((0.0237128828f * (fTemp224 + fTemp479)) + ((0.0826441273f * (fTemp241 + fTemp211)) + ((0.000183111057f * fTemp67) + (fTemp754 + ((0.00650044251f * fTemp3) + ((0.00692770164f * fTemp519) + ((0.000610370189f * fTemp133) + ((0.00283822138f * fTemp402) + ((0.00463881344f * fTemp298) + ((0.00424207281f * fTemp6) + ((6.10370189e-05f * fTemp108) + ((0.000915555283f * fTemp173) + ((0.00845362712f * fTemp288) + ((0.00820947904f * fTemp150) + ((0.00848414563f * fTemp85) + ((0.00909451582f * fTemp282) + ((0.00915555283f * fTemp359) + ((0.00695822015f * fTemp148) + ((0.00939970091f * fTemp314) + ((0.0158391073f * fTemp59) + ((0.0141300699f * fTemp348) + ((0.0061342204f * fTemp315) + ((0.000396740623f * fTemp248) + ((0.000244148076f * fTemp66) + ((0.00479140598f * fTemp409) + ((0.00247199927f * fTemp414) + ((0.00589007232f * fTemp416) + ((0.0077517014f * fTemp417) + ((0.0105288858f * fTemp39) + ((0.0100405896f * fTemp418) + ((0.011444441f * fTemp369) + ((0.0115665151f * fTemp515) + (fTemp790 + ((0.00994903408f * fTemp329) + ((0.00811792351f * fTemp65) + (fTemp598 + ((0.000274666585f * fTemp95) + ((0.00271614734f * fTemp423) + ((0.00497451704f * fTemp424) + ((0.00686666463f * fTemp425) + ((0.00784325693f * fTemp426) + ((0.00766014587f * fTemp17) + ((0.00680562761f * fTemp429) + ((0.00598162785f * fTemp430) + ((0.00326548051f * fTemp437) + ((0.00689718314f * fTemp439) + ((0.00906399731f * fTemp344) + ((0.00866725668f * fTemp111) + ((0.00152592547f * fTemp443) + ((0.000305185094f * fTemp328) + ((0.00253303628f * fTemp300) + ((0.00454725791f * fTemp177) + ((0.0054933317f * fTemp178) + ((0.0148930326f * fTemp447) + ((0.0153508103f * fTemp448) + ((0.0137943663f * fTemp77) + ((0.00787377544f * fTemp180) + ((0.00210577715f * fTemp449) + ((0.00057985168f * fTemp373) + ((0.00875881221f * fTemp453) + ((0.0118717002f * fTemp454) + ((0.00567644276f * fTemp152) + ((0.0042115543f * fTemp456) + ((0.0071108127f * fTemp394) + ((0.00558488723f * fTemp393) + ((0.00640888698f * fTemp465) + ((0.00955229346f * fTemp466) + ((0.0133976256f * fTemp467) + ((0.018097477f * fTemp468) + ((0.0217902157f * fTemp368) + ((0.022705771f * fTemp181) + ((0.024506364f * fTemp86) + ((0.0280770287f * fTemp141) + ((0.0191656239f * fTemp183) + (fTemp757 + ((0.00860621966f * fTemp185) + ((0.0124820704f * fTemp151) + ((0.0197759941f * fTemp190) + ((0.0234992523f * fTemp192) + ((0.0225531794f * fTemp193) + ((0.0215765871f * fTemp194) + ((0.0195013285f * fTemp195) + (((((((((0.0313730277f * fTemp480) + ((0.0477004312f * fTemp481) + ((0.0554216132f * fTemp201) + ((0.0504165776f * fTemp202) + ((0.0424817652f * fTemp203) + ((0.0318613239f * fTemp204) + ((0.0218817722f * fTemp35) + ((0.00967436749f * fTemp482) + ((0.0120242927f * fTemp488) + ((0.0416577645f * fTemp489) + ((0.0766624957f * fTemp153) + ((0.102572709f * fTemp205) + ((0.116794333f * fTemp206) + ((0.0744956806f * fTemp208) + ((0.0226752535f * fTemp135) + ((0.0446790978f * fTemp210) + ((0.093752861f * fTemp212) + ((0.0918607116f * fTemp213) + ((0.0872829407f * fTemp214) + ((0.0896023437f * fTemp215) + ((0.0881069377f * fTemp216) + ((0.056184575f * fTemp217) + ((0.0148319956f * fTemp218) + ((0.0129093295f * fTemp219) + ((0.0508743562f * fTemp220) + ((0.0775475353f * fTemp221) + ((0.0866115317f * fTemp222) + ((0.0733359754f * fTemp223) + ((0.0522476882f * fTemp505) + ((0.115665153f * fTemp512) + ((0.135074928f * fTemp225) + ((0.0746787935f * fTemp226) + ((((((((((0.379863888f * fTemp230) + (0.446821511f * fTemp231)) + (0.303842276f * fTemp232)) + (0.136417732f * fTemp511)) + (0.0160832554f * fTemp238)) + (0.0130314035f * fTemp239)) + (0.0747703463f * fTemp240)) + (0.0907010138f * fTemp391)) + (0.0863673836f * fTemp16)) + (0.0304574724f * fTemp228)))))))))))))))))))))))))))))))))) + (0.0200201422f * fTemp478)) + (0.021332439f * fTemp477)) + (0.0276497696f * fTemp58)) + (0.0385448784f * fTemp200)) + (0.0360423587f * fTemp199)) + (0.0254829563f * fTemp198)) + (0.015991699f * fTemp196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000946073793f * (fTemp445 - fTemp242)))) : ((((0.000640888698f * (fTemp242 + (fTemp325 + (fTemp46 - (fTemp3 - (fTemp120 + (fTemp99 - (fTemp385 + fTemp388)))))))) + ((0.000274666585f * (fTemp244 + (fTemp296 - (fTemp37 - (fTemp45 + (fTemp280 - (fTemp430 + fTemp246))))))) + ((0.000213629566f * (fTemp398 - (fTemp337 + (fTemp18 - (fTemp311 - (fTemp340 - (fTemp379 + fTemp382))))))) + ((0.000701925717f * (fTemp245 + (fTemp279 - (fTemp303 + (fTemp347 + (fTemp436 + fTemp433)))))) + ((0.00140385143f * (fTemp251 + (fTemp265 + (fTemp110 + (fTemp356 - (fTemp198 + fTemp454)))))) + ((0.00189214759f * (fTemp260 + fTemp254)) + ((0.000732444227f * (fTemp261 - (fTemp414 + fTemp339))) + ((0.000793481246f * (fTemp269 + (fTemp304 - (fTemp62 - (fTemp378 + (fTemp336 - (fTemp386 + fTemp87))))))) + ((0.000885036774f * (fTemp276 + (fTemp324 + (fTemp321 + (fTemp148 + (fTemp404 + (fTemp136 + (fTemp422 + fTemp377)))))))) + ((0.00057985168f * (fTemp291 + (fTemp270 + (fTemp284 - (fTemp332 - (fTemp286 - (fTemp54 + (fTemp71 - (fTemp315 + (fTemp407 + fTemp40)))))))))) + ((0.000305185094f * (fTemp297 + (fTemp11 + (fTemp371 - (fTemp180 + fTemp122))))) + ((0.000762962736f * (fTemp302 - (fTemp23 - (fTemp117 + (fTemp102 - (fTemp108 - (fTemp375 + fTemp114))))))) + ((0.0012817774f * (fTemp277 + (fTemp34 + (fTemp88 + (fTemp384 + fTemp44))))) + ((0.00146488845f * (fTemp305 - (fTemp52 - fTemp43))) + ((0.00112918485f * (fTemp309 + (fTemp165 + (fTemp20 + (fTemp81 - (fTemp179 + fTemp434)))))) + ((0.000366222113f * (fTemp318 + (fTemp253 + (fTemp69 + (fTemp157 + (fTemp98 + fTemp293)))))) + ((0.00054933317f * (fTemp330 + (fTemp109 - (fTemp127 - (fTemp112 + (fTemp149 - fTemp4)))))) + ((0.000152592547f * (fTemp331 + (fTemp278 - (fTemp518 + (fTemp51 + (fTemp432 - fTemp39)))))) + ((0.000518814661f * (fTemp285 - (fTemp24 + (fTemp67 + (fTemp156 + (fTemp408 + (fTemp424 - fTemp423))))))) + ((0.000488296151f * (fTemp310 - (fTemp19 + (fTemp322 + fTemp155)))) + ((0.000183111057f * (fTemp8 - (fTemp25 - (fTemp47 - (fTemp33 - (fTemp101 - (fTemp352 - (fTemp100 - fTemp354)))))))) + ((9.15555283e-05f * (fTemp14 - (fTemp323 - fTemp28))) + ((0.000427259132f * (fTemp31 + (fTemp21 + (fTemp70 - (fTemp360 - fTemp334))))) + ((0.00158696249f * (fTemp256 + (fTemp13 + (fTemp316 + (fTemp82 - (fTemp410 - fTemp403)))))) + ((0.00198370311f * (fTemp9 + fTemp262)) + ((0.00186162908f * (fTemp319 + (fTemp401 + (fTemp172 + (fTemp59 + (fTemp95 + fTemp128)))))) + ((0.000396740623f * (fTemp264 - (fTemp266 + (fTemp252 - (fTemp159 - (fTemp327 - fTemp343)))))) + ((0.000976592302f * (fTemp48 + (fTemp55 + (fTemp516 - fTemp272)))) + ((0.00137333293f * (fTemp61 + (fTemp124 + (fTemp146 - (fTemp458 + fTemp420))))) + ((0.000854518265f * (fTemp338 - fTemp2)) + ((0.00119022187f * (fTemp72 + (fTemp85 + fTemp105))) + ((0.00106814783f * (fTemp75 + (fTemp83 - (fTemp268 - (fTemp290 - (fTemp250 + (fTemp369 + (fTemp435 - fTemp94)))))))) + ((0.000122074038f * (fTemp349 + (fTemp515 + fTemp355))) + ((0.00143436994f * (fTemp271 + (fTemp400 + (fTemp317 + (fTemp346 - fTemp429))))) + ((0.00103762932f * (fTemp258 + fTemp91)) + ((0.000946073793f * (fTemp160 + (fTemp164 + (fTemp26 - (fTemp437 + fTemp418))))) + ((0.00100711081f * (fTemp49 + fTemp287)) + ((0.00109866634f * (fTemp32 - fTemp113)) + ((0.00347911008f * (fTemp103 + fTemp119)) + ((0.00210577715f * (fTemp163 + (fTemp145 + (fTemp288 + (fTemp259 + (fTemp405 + (fTemp289 - (fTemp294 - fTemp530)))))))) + (((0.00216681417f * (fTemp74 + (fTemp169 - (fTemp426 - fTemp123)))) + ((0.00277718436f * (fTemp168 - (fTemp460 - fTemp6))) + ((0.00125125889f * (fTemp73 + (fTemp282 - (fTemp413 - fTemp57)))) + ((0.00177007355f * (fTemp125 + (fTemp30 - fTemp639))) + ((0.00244148076f * (fTemp365 - (fTemp344 - fTemp142))) + ((0.00256355479f * (fTemp93 + fTemp170)) + ((0.0025940733f * (fTemp314 + fTemp78)) + ((0.0028992584f * (fTemp129 + (fTemp208 - fTemp416))) + ((0.00366222113f * (fTemp313 + fTemp50)) + ((0.00213629566f * (fTemp10 + (fTemp275 + fTemp115))) + ((0.00274666585f * fTemp783) + ((0.00271614734f * (fTemp134 + fTemp56)) + ((0.0019226661f * (fTemp358 + (fTemp263 - fTemp553))) + ((0.00250251777f * (fTemp450 + fTemp257)) + ((0.00134281442f * (fTemp150 - fTemp144)) + ((0.00231940672f * (fTemp12 + fTemp326)) + ((0.00204474013f * (fTemp295 + (fTemp472 - fTemp376))) + ((0.00326548051f * (fTemp147 + fTemp267)) + ((0.00115970336f * (fTemp359 + (fTemp351 - (fTemp411 + (fTemp449 + fTemp390))))) + ((0.00439466536f * (fTemp234 + fTemp97)) + ((0.00219733268f * (fTemp361 - (fTemp409 + (fTemp342 + fTemp415)))) + ((0.00201422162f * (fTemp126 - (fTemp438 - fTemp90))) + ((0.000244148076f * (fTemp243 + (fTemp299 - (fTemp154 - fTemp380)))) + ((0.00781273842f * (fTemp470 - fTemp467)) + ((0.00671407208f * (fTemp482 - fTemp203)) + ((0.00265511032f * fTemp750) + ((0.00292977691f * fTemp350) + ((0.00436414685f * fTemp399) + ((0.00253303628f * fTemp166) + ((0.00408948027f * fTemp363) + ((0.00482192449f * fTemp167) + ((0.00390636921f * fTemp63) + ((0.00338755455f * fTemp27) + ((0.00311288796f * fTemp133) + ((0.00268562883f * fTemp247) + ((0.00228888821f * fTemp137) + ((0.0022583697f * fTemp84) + ((0.00262459181f * fTemp53) + ((0.00350962859f * fTemp104) + ((0.00411999878f * fTemp366) + (fTemp568 + ((0.00122074038f * fTemp306) + ((0.00170903653f * fTemp374) + ((0.00183111057f * fTemp29) + ((0.00152592547f * fTemp5) + ((0.00424207281f * fTemp451) + ((0.00317392498f * fTemp452) + ((0.0228583645f * fTemp473) + ((0.0295113996f * fTemp474) + ((0.00131229591f * fTemp475) + ((0.0314340666f * fTemp199) + ((0.0198370311f * fTemp200) + ((0.0163884405f * fTemp397) + ((0.00933866389f * fTemp483) + ((0.00402844325f * fTemp484) + ((0.0125431074f * fTemp396) + ((0.00384533219f * fTemp485) + ((0.0195013285f * fTemp135) + ((0.00790429395f * fTemp218) + ((0.00396740623f * fTemp493) + ((0.00286873989f * fTemp495) + ((0.0266426597f * fTemp496) + ((0.032654807f * fTemp497) + ((0.0479445793f * fTemp498) + ((0.00302133244f * fTemp223) + ((0.0529801324f * fTemp224) + ((0.024323253f * fTemp22) + ((0.0209051799f * fTemp512) + ((0.0137028107f * fTemp240) + ((0.0292977691f * fTemp239) + ((0.0684530139f * fTemp236) + (((fTemp230 + ((((((0.146763518f * fTemp0) + (0.231604964f * fTemp506)) + (0.226386309f * fTemp507)) + (0.187688828f * fTemp508)) + (0.402447581f * fTemp510)) + (0.887264609f * fTemp229))) + (0.32779932f * fTemp231)) + (0.192724392f * fTemp235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000823999755f * (fTemp283 + (fTemp335 + fTemp345)))))))))))))))))))))))))))))))))))))))))))) + (0.000915555283f * (fTemp1 + (fTemp513 + (fTemp255 + (fTemp292 + (fTemp333 + (fTemp357 + (fTemp348 + (fTemp274 + (fTemp64 + (fTemp514 + (fTemp139 - (fTemp17 - fTemp406)))))))))))))) - ((0.000610370189f * (fTemp7 - (fTemp96 + (fTemp42 - (fTemp281 + (fTemp459 + fTemp36)))))) + ((6.10370189e-05f * (fTemp41 + (fTemp60 + (fTemp68 - (fTemp431 - fTemp65))))) + ((3.05185094e-05f * (fTemp320 - (fTemp307 + (fTemp76 - (fTemp107 + (fTemp92 - (fTemp427 + fTemp138))))))) + ((0.000457777642f * (fTemp312 - (fTemp79 - (fTemp499 + fTemp301)))) + ((0.00296029542f * (fTemp381 - fTemp161)) + ((0.00332651753f * (fTemp440 - fTemp353)) + ((0.000671407208f * (fTemp519 - (fTemp89 + fTemp15))) + ((0.0035401471f * (fTemp392 - fTemp132)) + ((0.00344859157f * (fTemp77 - fTemp341)) + ((0.00335703604f * (fTemp202 - fTemp273)) + ((0.00234992523f * (fTemp439 - fTemp80)) + ((0.00320444349f * (fTemp217 - fTemp402)) + ((0.00167851802f * (fTemp66 - fTemp298)) + ((0.00149540696f * (fTemp455 - fTemp131)) + ((0.000335703604f * (fTemp248 + (fTemp106 - fTemp329))) + ((0.00173955504f * (fTemp421 - fTemp130)) + ((0.00375377666f * (fTemp387 + fTemp441)) + ((0.00372325815f * (fTemp457 + fTemp373)) + ((0.00643940549f * (fTemp471 + fTemp362)) + ((0.0118411817f * (fTemp469 + fTemp466)) + ((0.0125736259f * (fTemp194 + fTemp468)) + ((0.001617481f * fTemp412) + ((0.00299081393f * fTemp417) + ((0.00180059206f * fTemp111) + ((0.00469985045f * fTemp442) + ((0.00534073915f * fTemp443) + ((0.00543229468f * fTemp522) + ((0.00668355357f * fTemp175) + ((0.0083925901f * fTemp176) + ((0.0103457747f * fTemp328) + ((0.0104678487f * fTemp444) + ((0.00772118289f * fTemp445) + ((0.00610370189f * fTemp300) + ((0.00650044251f * fTemp116) + ((0.00888088625f * fTemp118) + ((0.0090334788f * fTemp177) + ((0.00683614612f * fTemp178) + ((0.0045167394f * fTemp249) + ((0.00476088747f * fTemp446) + ((0.00531022064f * fTemp447) + ((0.00527970213f * fTemp448) + ((0.00558488723f * fTemp121) + ((0.00415051728f * fTemp453) + ((0.00448622089f * fTemp152) + ((0.00491348002f * fTemp456) + ((0.00497451704f * fTemp364) + ((0.0051576281f * fTemp394) + ((0.00433362834f * fTemp461) + ((0.00830103457f * fTemp462) + ((0.00900296029f * fTemp463) + ((0.00607318338f * fTemp464) + ((0.00561540574f * fTemp389) + ((0.013061922f * fTemp393) + ((0.016296884f * fTemp465) + ((0.0218207352f * fTemp368) + ((0.0241096225f * fTemp181) + ((0.0175481439f * fTemp86) + ((0.0114139225f * fTemp367) + (fTemp782 + ((0.0239875484f * fTemp182) + ((0.0235297717f * fTemp183) + ((0.0141911069f * fTemp184) + ((0.00720236823f * fTemp185) + ((0.0153813288f * fTemp186) + ((0.0246284381f * fTemp187) + ((0.025818659f * fTemp188) + ((0.0203863643f * fTemp189) + ((0.0173650328f * fTemp151) + ((0.0200811792f * fTemp190) + ((0.0200506616f * fTemp191) + ((0.021149328f * fTemp192) + (fTemp784 + ((0.016235847f * fTemp195) + ((0.0185552537f * fTemp196) + ((0.0258491784f * fTemp476) + ((0.0335398428f * fTemp197) + ((0.014557329f * fTemp58) + ((0.0297860652f * fTemp477) + ((0.0244758446f * fTemp478) + ((0.0255134739f * fTemp479) + ((0.030854214f * fTemp480) + ((0.0254829563f * fTemp481) + ((0.0124515519f * fTemp201) + ((0.00915555283f * fTemp204) + ((0.004852443f * fTemp35) + ((0.0127567369f * fTemp486) + (fTemp785 + ((0.0379345082f * fTemp488) + ((0.0473647267f * fTemp489) + ((0.0548722818f * fTemp153) + ((0.0581377596f * fTemp205) + ((0.0527970232f * fTemp206) + ((0.0290231034f * fTemp207) + ((0.00241096225f * fTemp490) + ((0.0315866582f * fTemp491) + ((0.0570085756f * fTemp492) + ((0.0587176122f * fTemp209) + ((0.0496536158f * fTemp210) + ((0.0437025055f * fTemp211) + ((0.0619830936f * fTemp212) + ((0.0842921212f * fTemp213) + ((0.0651570186f * fTemp214) + ((0.0351573229f * fTemp215) + (((((((((((((((((((((((0.456190675f * fTemp232) + (0.779168069f * fTemp511)) + (0.396069229f * fTemp233)) + (0.149388105f * fTemp237)) + (0.0454115421f * fTemp238)) + (0.0756859034f * fTemp391)) + (0.0751365721f * fTemp16)) + (0.131168559f * fTemp241)) + (0.0700094625f * fTemp228)) + (0.0608233884f * fTemp227)) + (0.119602039f * fTemp226)) + (0.0408032462f * fTemp225)) + (0.0482497625f * fTemp505)) + (0.10400708f * fTemp504)) + (0.0690633878f * fTemp503)) + (0.018097477f * fTemp502)) + (0.0634479821f * fTemp222)) + (0.0814844221f * fTemp221)) + (0.0504165776f * fTemp220)) + (0.0154423658f * fTemp219)) + (0.0142826624f * fTemp501)) + (0.034272287f * fTemp500)) + (0.0248420667f * fTemp216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow2 ? (iSlow20 ? (iSlow28 ? (iSlow32 ? (iSlow34 ? (((0.000274666585f * (fTemp289 + fTemp244)) + ((0.000305185094f * (fTemp302 - fTemp251)) + ((0.000396740623f * (fTemp283 - (fTemp332 + (fTemp8 + (fTemp11 - (fTemp345 - fTemp14)))))) + ((0.00115970336f * (fTemp172 + fTemp291)) + ((0.000854518265f * (fTemp270 - (fTemp19 - (fTemp264 - (fTemp336 + fTemp400))))) + ((0.00103762932f * (fTemp318 - (fTemp154 - fTemp145))) + ((0.000915555283f * (fTemp292 - (fTemp319 - (fTemp311 + (fTemp155 - (fTemp429 + fTemp519)))))) + ((0.000976592302f * (fTemp330 + (fTemp286 + (fTemp347 - fTemp55)))) + ((0.00100711081f * (fTemp325 - fTemp310)) + ((0.000732444227f * (fTemp399 - fTemp518)) + ((0.00057985168f * (fTemp246 - fTemp18)) + ((0.00234992523f * (fTemp338 - fTemp333)) + ((0.001617481f * (fTemp272 - fTemp256)) + ((0.000122074038f * (fTemp2 - fTemp34)) + ((0.000610370189f * (fTemp279 - (fTemp77 - fTemp447))) + ((0.00213629566f * (fTemp37 - (fTemp452 - fTemp100))) + ((0.00204474013f * (fTemp45 + (fTemp198 - fTemp268))) + ((0.00793481246f * (fTemp152 - fTemp54)) + ((0.00494399853f * (fTemp166 - fTemp307)) + ((0.00445570238f * (fTemp83 + fTemp75)) + ((0.00592059083f * (fTemp373 - fTemp91)) + ((0.0149845881f * (fTemp441 - fTemp160)) + ((0.0061342204f * (fTemp4 - fTemp71)) + ((0.00833155308f * (fTemp49 - fTemp119)) + ((0.0042115543f * (fTemp80 - fTemp357)) + ((0.00753807183f * (fTemp167 + (fTemp410 - fTemp15))) + ((0.00256355479f * (fTemp468 - fTemp401)) + ((0.00585955381f * (fTemp87 - fTemp38)) + ((0.0120853297f * (fTemp413 - fTemp20)) + ((0.00723288674f * (fTemp530 + fTemp123)) + ((0.0155034028f * (fTemp515 + fTemp78)) + ((0.00366222113f * (fTemp403 + fTemp53)) + ((0.025818659f * (fTemp485 + fTemp134)) + ((0.00799584948f * (fTemp440 + fTemp142)) + ((0.0187994018f * (fTemp65 - fTemp282)) + ((0.0453199856f * (fTemp204 - fTemp314)) + ((0.0118106632f * (fTemp514 + (fTemp390 + fTemp380))) + ((0.00961333048f * (fTemp89 + fTemp136)) + ((0.0107119968f * (fTemp412 + fTemp40)) + ((0.00701925717f * (fTemp425 + fTemp379)) + ((0.00698873866f * (fTemp438 + fTemp250)) + ((0.0152592547f * (fTemp328 + fTemp420)) + ((0.0108340709f * (fTemp202 + fTemp392)) + ((0.0223395489f * (fTemp505 - fTemp193)) + ((6.10370189e-05f * fTemp242) + ((0.000946073793f * fTemp284) + ((0.000823999755f * fTemp324) + (fTemp744 + ((0.00555436872f * fTemp79) + ((0.00534073915f * fTemp293) + ((0.00363170262f * fTemp44) + ((0.00399792474f * fTemp350) + ((0.00198370311f * fTemp3) + (fTemp777 + ((0.000213629566f * fTemp125) + ((0.012878811f * fTemp365) + ((0.0161442924f * fTemp170) + ((0.00909451582f * fTemp129) + ((0.021088291f * fTemp140) + ((0.0311899167f * fTemp56) + ((0.0296334736f * fTemp84) + ((0.0182195511f * fTemp275) + ((0.0148625141f * fTemp146) + ((0.0229499191f * fTemp30) + ((0.0253913999f * fTemp372) + ((0.0248725861f * fTemp306) + ((0.0207220688f * fTemp108) + ((0.011383404f * fTemp144) + ((0.00619525742f * fTemp354) + ((0.00671407208f * fTemp374) + ((0.01126133f * fTemp326) + ((0.019348735f * fTemp263) + ((0.0233466607f * fTemp295) + ((0.0158085879f * fTemp171) + ((0.0051576281f * fTemp359) + ((0.0200506616f * fTemp148) + ((0.024445327f * fTemp114) + ((0.0286568813f * fTemp131) + ((0.0425122827f * fTemp147) + ((0.0660725757f * fTemp97) + ((0.0852076784f * fTemp313) + ((0.0775780529f * fTemp259) + ((0.0387585089f * fTemp57) + ((0.0202642903f * fTemp29) + ((0.0861232355f * fTemp361) + ((0.113040559f * fTemp126) + ((0.0908536017f * fTemp5) + ((0.0412915424f * fTemp317) + ((0.0157475509f * fTemp404) + ((0.0221564379f * fTemp107) + ((0.0221259203f * fTemp127) + ((0.0190130323f * fTemp248) + ((0.0176091809f * fTemp343) + ((0.0190435499f * fTemp64) + ((0.0215460677f * fTemp375) + ((0.0216071047f * fTemp70) + ((0.0181890316f * fTemp371) + ((0.0138248848f * fTemp42) + ((0.00521866512f * fTemp335) + ((0.00238044374f * fTemp334) + ((0.0122379223f * fTemp32) + ((0.00268562883f * fTemp327) + ((0.000671407208f * fTemp299) + ((0.00244148076f * fTemp405) + ((0.00650044251f * fTemp378) + ((0.00662251655f * fTemp98) + ((0.00457777642f * fTemp139) + ((0.00314340647f * fTemp406) + ((0.00158696249f * fTemp384) + ((0.0131229591f * fTemp301) + ((0.00906399731f * fTemp281) + ((0.0071108127f * fTemp407) + ((0.0108951079f * fTemp408) + ((0.00897244178f * fTemp52) + ((0.00756859034f * fTemp66) + ((0.0054933317f * fTemp383) + ((0.00601214636f * fTemp409) + ((0.00891140476f * fTemp386) + (fTemp585 + ((0.00946073793f * fTemp411) + ((0.0124210333f * fTemp414) + ((0.0103457747f * fTemp415) + ((0.00881984923f * fTemp416) + ((0.00762962736f * fTemp417) + ((0.00778221991f * fTemp342) + ((0.00900296029f * fTemp36) + ((0.0102237007f * fTemp39) + ((0.0135196997f * fTemp418) + ((0.0154423658f * fTemp421) + ((0.0151982177f * fTemp369) + ((0.0163884405f * fTemp149) + ((0.0177922919f * fTemp329) + ((0.0174871068f * fTemp360) + ((0.0143436994f * fTemp106) + ((0.0105288858f * fTemp377) + ((0.00537125766f * fTemp95) + ((0.0133671071f * fTemp422) + ((0.0142521439f * fTemp423) + ((0.00277718436f * fTemp426) + ((0.00119022187f * fTemp17) + ((0.00531022064f * fTemp433) + ((0.00573747978f * fTemp434) + ((0.00299081393f * fTemp435) + ((0.00283822138f * fTemp437) + ((0.0104373302f * fTemp439) + ((0.0118717002f * fTemp381) + ((0.0116275521f * fTemp344) + ((0.0100100711f * fTemp111) + ((0.00827051606f * fTemp294) + ((0.0183721427f * fTemp442) + ((0.0199896246f * fTemp443) + ((0.0197454765f * fTemp522) + ((0.017975403f * fTemp175) + ((0.0160222184f * fTemp176) + ((0.0165105145f * fTemp444) + ((0.0184942167f * fTemp445) + (fTemp778 + ((0.00164799951f * fTemp118) + ((0.00357066561f * fTemp448) + ((0.00292977691f * fTemp449) + ((0.0058290353f * fTemp450) + ((0.00231940672f * fTemp451) + ((0.011200293f * fTemp121) + ((0.0228888821f * fTemp362) + ((0.0343333222f * fTemp456) + ((0.034150213f * fTemp457) + ((0.0177007355f * fTemp364) + ((0.0206610318f * fTemp462) + (fTemp748 + ((0.0100711081f * fTemp466) + ((0.00985747855f * fTemp467) + ((0.00320444349f * fTemp183) + ((0.00167851802f * fTemp184) + ((0.0215765871f * fTemp476) + ((0.0332041383f * fTemp197) + ((0.0522782058f * fTemp477) + ((0.0830713809f * fTemp478) + ((0.0519730225f * fTemp479) + ((0.0318613239f * fTemp203) + ((0.0468153954f * fTemp35) + ((0.037446212f * fTemp482) + ((0.0262764376f * fTemp397) + ((0.0197149571f * fTemp483) + ((0.0188909583f * fTemp484) + ((0.0231025126f * fTemp396) + ((0.0253608823f * fTemp486) + ((0.0263679922f * fTemp487) + ((0.0318002887f * fTemp488) + ((0.0292367321f * fTemp489) + ((0.011322367f * fTemp153) + ((0.0530716889f * fTemp491) + ((0.0945158228f * fTemp492) + ((0.0788598284f * fTemp209) + ((0.0191351064f * fTemp210) + ((0.0237434004f * fTemp495) + ((0.0301217698f * fTemp496) + ((0.00854518265f * fTemp497) + ((0.00604266487f * fTemp500) + ((0.0372020639f * fTemp501) + ((0.0460219122f * fTemp219) + ((0.0209662169f * fTemp220) + ((0.0927762687f * fTemp503) + (((((((fTemp507 + ((0.0526139103f * fTemp0) + (0.639912128f * fTemp506))) + (0.649433911f * fTemp508)) + (0.196600243f * fTemp232)) + (0.306253254f * fTemp511)) + (0.147038177f * fTemp233)) + (0.0281991027f * fTemp228)) + (0.120151371f * fTemp504)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.000152592547f * (fTemp513 - (fTemp128 + fTemp305))) + ((0.000244148076f * (fTemp7 - fTemp398)) + ((0.000488296151f * (fTemp260 - (fTemp309 + (fTemp331 + (fTemp165 - fTemp62))))) + ((0.000885036774f * (fTemp265 - (fTemp157 - fTemp304))) + ((0.0019226661f * (fTemp261 - (fTemp428 - fTemp266))) + ((0.00170903653f * fTemp779) + ((0.000793481246f * (fTemp276 - (fTemp297 - (fTemp27 - fTemp253)))) + ((0.00125125889f * (fTemp262 - fTemp296)) + ((0.000335703604f * (fTemp61 + fTemp337)) + ((0.00122074038f * (fTemp339 - (fTemp340 + (fTemp112 + fTemp74)))) + ((0.00173955504f * (fTemp23 - (fTemp432 - fTemp320))) + ((0.00296029542f * (fTemp28 + (fTemp353 + fTemp31))) + ((0.00280770287f * (fTemp430 - fTemp41)) + ((0.00820947904f * (fTemp21 - (fTemp363 - fTemp101))) + ((0.00817896053f * (fTemp58 + fTemp51)) + ((0.00106814783f * (fTemp69 - (fTemp436 - fTemp271))) + ((0.00054933317f * (fTemp303 - (fTemp356 + fTemp156))) + ((9.15555283e-05f * (fTemp234 - fTemp67)) + ((0.00567644276f * (fTemp113 - fTemp349)) + ((0.0022583697f * (fTemp188 - fTemp43)) + ((0.0141911069f * (fTemp201 + fTemp105)) + ((0.0123294778f * (fTemp323 - (fTemp26 - fTemp366))) + ((0.00347911008f * (fTemp93 - fTemp322)) + ((0.0142216254f * (fTemp205 + fTemp358)) + ((0.0114749596f * (fTemp82 - (fTemp116 + fTemp122))) + ((0.00717184972f * (fTemp179 - fTemp92)) + ((0.00512710959f * fTemp780) + ((0.00180059206f * (fTemp454 - fTemp382)) + ((0.00625629444f * (fTemp177 - fTemp94)) + ((0.0115665151f * (fTemp473 - fTemp424)) + ((0.00332651753f * (fTemp465 - fTemp427)) + ((0.00189214759f * (fTemp385 + fTemp431)) + ((0.00659199804f * (fTemp460 - fTemp453)) + ((0.0118411817f * (fTemp214 - fTemp461)) + ((3.05185094e-05f * fTemp245) + ((0.000366222113f * fTemp254) + ((0.00152592547f * fTemp255) + ((0.000640888698f * fTemp285) + ((0.00222785119f * fTemp24) + ((0.0025940733f * fTemp25) + ((0.0028992584f * fTemp47) + ((0.00527970213f * fTemp321) + ((0.00732444227f * fTemp48) + ((0.00766014587f * fTemp312) + ((0.00683614612f * fTemp60) + ((0.00271614734f * fTemp33) + ((0.00137333293f * fTemp68) + ((0.00415051728f * fTemp88) + ((0.00680562761f * fTemp96) + ((0.0105594043f * fTemp76) + ((0.0135807367f * fTemp159) + ((0.012817774f * fTemp109) + ((0.0120242927f * fTemp46) + ((0.0103762932f * fTemp110) + ((0.008087405f * fTemp287) + ((0.00656147953f * fTemp117) + ((0.00802636798f * fTemp161) + (fTemp781 + ((0.000701925717f * fTemp164) + ((0.00201422162f * fTemp352) + ((0.0102542192f * fTemp168) + ((0.0141605884f * fTemp169) + ((0.0156865139f * fTemp73) + (fTemp622 + ((0.014557329f * fTemp102) + ((0.00692770164f * fTemp124) + ((0.00997955259f * fTemp50) + ((0.0168767367f * fTemp132) + ((0.0228583645f * fTemp341) + ((0.0284127332f * fTemp273) + ((0.0320139155f * fTemp133) + ((0.033600878f * fTemp247) + ((0.0326242857f * fTemp137) + ((0.0267647337f * fTemp10) + ((0.0137028107f * fTemp115) + ((0.00735496078f * fTemp104) + ((0.0140385143f * fTemp370) + ((0.0143131809f * fTemp402) + ((0.0159611814f * fTemp298) + ((0.018097477f * fTemp257) + ((0.0126346629f * fTemp6) + ((0.0165715516f * fTemp173) + ((0.0377513953f * fTemp103) + ((0.0591448732f * fTemp267) + ((0.0686056092f * fTemp288) + ((0.0641499087f * fTemp150) + ((0.0456251726f * fTemp85) + ((0.0170903653f * fTemp13) + ((0.0509964302f * fTemp12) + ((0.0283822138f * fTemp59) + ((0.0363170281f * fTemp348) + ((0.0571306497f * fTemp315) + ((0.040742211f * fTemp290) + ((0.0185247362f * fTemp90) + ((0.0239265114f * fTemp316) + ((0.0267036967f * fTemp258) + ((0.0277108066f * fTemp274) + ((0.0232856236f * fTemp351) + ((0.000427259132f * fTemp243) + ((0.00112918485f * fTemp9) + ((0.00436414685f * fTemp99) + ((0.00430310983f * fTemp138) + ((0.0131534776f * fTemp516) + ((0.00589007232f * fTemp81) + ((0.0107730338f * fTemp178) + ((0.0125125889f * fTemp249) + ((0.0115359966f * fTemp387) + ((0.00668355357f * fTemp446) + ((0.00811792351f * fTemp180) + ((0.003234962f * fTemp376) + ((0.00265511032f * fTemp455) + ((0.00750755332f * fTemp394) + ((0.024506364f * fTemp458) + ((0.022766808f * fTemp459) + ((0.00228888821f * fTemp464) + ((0.0172734763f * fTemp389) + ((0.0171819218f * fTemp393) + ((0.00637836847f * fTemp368) + ((0.0167851802f * fTemp181) + ((0.0249946602f * fTemp86) + ((0.025696585f * fTemp367) + (fTemp782 + ((0.00488296151f * fTemp182) + ((0.00814844202f * fTemp185) + ((0.0147099216f * fTemp186) + ((0.0104678487f * fTemp187) + ((0.00177007355f * fTemp189) + ((0.0111087374f * fTemp151) + ((0.0220954008f * fTemp190) + ((0.0272530299f * fTemp191) + ((0.0273751039f * fTemp192) + ((0.0191656239f * fTemp194) + ((0.0146488845f * fTemp195) + ((0.00689718314f * fTemp196) + ((0.000457777642f * fTemp469) + ((0.00836207159f * fTemp470) + ((0.00759910885f * fTemp346) + ((0.00350962859f * fTemp471) + ((0.00210577715f * fTemp472) + ((0.0188299213f * fTemp474) + ((0.00790429395f * fTemp475) + ((0.0422070995f * fTemp199) + ((0.05038606f * fTemp200) + ((0.0038758507f * fTemp480) + ((0.0285042878f * fTemp481) + ((0.0480361357f * fTemp206) + ((0.0822473839f * fTemp207) + ((0.0973845646f * fTemp208) + ((0.0744346455f * fTemp135) + ((0.0169377737f * fTemp490) + ((0.0363780633f * fTemp211) + ((0.0532242805f * fTemp212) + ((0.0376293212f * fTemp213) + ((0.004852443f * fTemp215) + ((0.0333872512f * fTemp216) + ((0.0617999807f * fTemp217) + ((0.0484328754f * fTemp218) + ((0.00610370189f * fTemp493) + ((0.0202337727f * fTemp498) + ((0.021332439f * fTemp499) + ((0.0281075481f * fTemp221) + ((0.0667745024f * fTemp222) + ((0.111117892f * fTemp223) + ((0.145542771f * fTemp224) + ((0.119083226f * fTemp22) + ((0.019531846f * fTemp502) + ((0.0943021923f * fTemp512) + ((0.145023957f * fTemp225) + ((0.12607196f * fTemp226) + ((0.0387279876f * fTemp227) + ((0.0262459181f * fTemp241) + ((0.093752861f * fTemp16) + (fTemp749 + ((0.0490432456f * fTemp240) + ((0.0657979101f * fTemp239) + ((0.0757469386f * fTemp238) + ((0.0889309347f * fTemp237) + ((0.0864284188f * fTemp236) + (((((0.178502768f * fTemp510) + (0.764641225f * fTemp229)) + (0.766228199f * fTemp230)) + (0.296609402f * fTemp231)) + (0.0455030985f * fTemp235)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000183111057f * (fTemp278 + fTemp1)))) : (((0.00186162908f * (fTemp398 - (fTemp516 - fTemp336))) + ((0.0025940733f * (fTemp384 + fTemp276)) + ((0.0028992584f * (fTemp291 + (fTemp330 + fTemp292))) + ((0.00317392498f * (fTemp518 + fTemp296)) + ((0.00350962859f * (fTemp297 + (fTemp119 + fTemp277))) + ((0.00360118411f * (fTemp302 + (fTemp406 + fTemp337))) + ((0.00347911008f * (fTemp299 + fTemp305)) + ((0.00366222113f * (fTemp309 - (fTemp135 - fTemp26))) + ((0.00314340647f * (fTemp318 - (fTemp394 + fTemp66))) + ((0.00381481368f * (fTemp304 + (fTemp314 + fTemp23))) + ((0.00357066561f * (fTemp310 - (fTemp411 + fTemp386))) + ((0.00372325815f * (fTemp7 + (fTemp316 + (fTemp93 - fTemp549)))) + ((0.00283822138f * (fTemp8 - (fTemp433 - fTemp14))) + ((0.00250251777f * (fTemp307 + fTemp11)) + ((0.00326548051f * (fTemp18 + (fTemp355 + fTemp19))) + ((0.00491348002f * (fTemp25 - (fTemp431 - fTemp327))) + ((0.00424207281f * (fTemp333 + (fTemp172 + fTemp155))) + ((0.00476088747f * (fTemp256 + (fTemp351 + fTemp41))) + ((0.00430310983f * (fTemp319 + (fTemp451 + fTemp356))) + ((0.00570696127f * (fTemp279 + (fTemp335 + (fTemp139 + fTemp378)))) + ((0.00653096102f * fTemp774) + ((0.00680562761f * (fTemp340 + (fTemp47 + (fTemp73 + fTemp246)))) + ((0.00537125766f * (fTemp37 + (fTemp456 - fTemp250))) + ((0.00561540574f * (fTemp280 - (fTemp89 - fTemp259))) + ((0.00555436872f * (fTemp405 + fTemp54)) + ((0.00329599902f * (fTemp332 - (fTemp362 - fTemp117))) + ((0.00442518387f * (fTemp312 - (fTemp426 - fTemp156))) + ((0.00311288796f * (fTemp60 - (fTemp190 - fTemp100))) + ((0.00308236945f * (fTemp9 + fTemp68)) + ((0.00332651753f * (fTemp173 + fTemp69)) + ((0.006469924f * (fTemp165 + fTemp2)) + ((0.00622577593f * (fTemp112 + fTemp62)) + ((0.00509659108f * (fTemp166 + fTemp67)) + ((0.00482192449f * (fTemp258 + fTemp157)) + ((0.00494399853f * (fTemp364 + fTemp72)) + ((0.00991851557f * (fTemp295 + fTemp43)) + ((0.00939970091f * (fTemp5 + fTemp88)) + ((0.00820947904f * (fTemp370 + fTemp96)) + ((0.00854518265f * (fTemp101 - (fTemp465 - fTemp146))) + ((0.00888088625f * (fTemp76 + (fTemp40 + fTemp134))) + ((0.00915555283f * (fTemp59 + fTemp160)) + ((0.00650044251f * (fTemp136 + fTemp345)) + ((0.0106509598f * (fTemp110 + (fTemp126 + fTemp102))) + ((0.009704886f * (fTemp399 + fTemp287)) + ((0.00375377666f * (fTemp85 + fTemp163)) + ((0.00598162785f * (fTemp44 - (fTemp470 - fTemp130))) + ((0.00961333048f * (fTemp298 + fTemp3)) + ((0.00860621966f * (fTemp402 + fTemp167)) + ((0.0115359966f * (fTemp168 + (fTemp359 + fTemp56))) + ((0.0127262184f * (fTemp140 + fTemp20)) + ((0.0122074038f * (fTemp27 - (fTemp464 - fTemp348))) + ((0.0134586627f * fTemp775) + ((0.0077517014f * (fTemp104 + (fTemp366 - (fTemp488 + fTemp436)))) + ((0.0107425153f * (fTemp6 + fTemp257)) + ((0.00726340525f * (fTemp248 + fTemp282)) + ((0.013061922f * (fTemp361 - fTemp776)) + ((0.00390636921f * (fTemp82 + (fTemp380 + fTemp382))) + ((0.00689718314f * (fTemp107 + (fTemp127 + (fTemp376 - fTemp39)))) + ((0.00723288674f * (fTemp514 - (fTemp413 + fTemp4))) + ((0.00231940672f * (fTemp15 - (fTemp388 - fTemp99))) + ((0.0605792403f * (fTemp511 + fTemp497)) + ((0.00201422162f * fTemp658) + ((0.00463881344f * fTemp628) + ((((((0.00173955504f * fTemp251) + (((0.00177007355f * fTemp260) + ((((0.00274666585f * fTemp283) + ((0.00262459181f * fTemp284) + ((0.00265511032f * fTemp324) + ((0.00268562883f * fTemp331) + ((0.00286873989f * fTemp278) + ((0.00341807306f * fTemp285) + ((0.003234962f * fTemp339) + ((0.00469985045f * fTemp24) + ((0.00433362834f * fTemp28) + ((0.0038758507f * fTemp31) + ((0.00708029419f * fTemp286) + (fTemp698 + ((0.00607318338f * fTemp252) + ((0.00671407208f * fTemp321) + ((0.00601214636f * fTemp48) + ((0.00567644276f * fTemp21) + ((0.00576799829f * fTemp51) + ((0.00280770287f * fTemp33) + ((0.00399792474f * fTemp55) + ((0.00592059083f * fTemp303) + ((0.00396740623f * fTemp347) + ((0.00573747978f * fTemp79) + ((0.00695822015f * fTemp349) + ((0.00814844202f * fTemp293) + ((0.00918607134f * fTemp83) + ((0.0100100711f * fTemp271) + ((0.00848414563f * fTemp91) + ((0.00973540451f * fTemp105) + ((0.0109256264f * fTemp46) + ((0.00503555406f * fTemp113) + ((0.00302133244f * fTemp161) + ((0.00439466536f * fTemp164) + ((0.00817896053f * fTemp350) + ((0.0101626636f * fTemp353) + ((0.0121768853f * fTemp268) + ((0.013000885f * fTemp272) + ((0.0119327372f * fTemp322) + ((0.00805688649f * fTemp519) + ((0.00738547929f * fTemp352) + ((0.00531022064f * fTemp363) + ((0.0135196997f * fTemp63) + ((0.0172429588f * fTemp74) + ((0.0184331797f * fTemp400) + ((0.0174565874f * fTemp401) + ((0.0150456252f * fTemp38) + ((0.00827051606f * fTemp169) + ((0.0139164403f * fTemp124) + ((0.0155644398f * fTemp125) + ((0.0172734763f * fTemp123) + ((0.0176091809f * fTemp365) + ((0.015991699f * fTemp170) + ((0.0140079958f * fTemp78) + ((0.012878811f * fTemp129) + ((0.0108951079f * fTemp50) + ((0.00943021942f * fTemp132) + ((0.00924710836f * fTemp341) + ((0.0125125889f * fTemp133) + ((0.0136417737f * fTemp80) + ((0.0110477004f * fTemp84) + ((0.0101931822f * fTemp275) + ((0.00894192327f * fTemp53) + ((0.00878933072f * fTemp358) + ((0.00946073793f * fTemp145) + ((0.00881984923f * fTemp372) + ((0.00979644153f * fTemp306) + ((0.0123294778f * fTemp108) + ((0.0154728843f * fTemp144) + ((0.018097477f * fTemp354) + ((0.0200506616f * fTemp374) + ((0.0213019196f * fTemp142) + ((0.0199285876f * fTemp326) + ((0.0154118473f * fTemp263) + (fTemp763 + ((0.000518814661f * fTemp267) + ((0.00112918485f * fTemp150) + ((0.0197149571f * fTemp114) + ((0.019470809f * fTemp131) + ((0.0169377737f * fTemp147) + ((0.014618366f * fTemp97) + ((0.0116885891f * fTemp313) + ((0.0141911069f * fTemp315) + ((0.0157170333f * fTemp290) + ((0.0153508103f * fTemp29) + ((0.00662251655f * fTemp128) + ((0.00445570238f * fTemp90) + ((0.00460829493f * fTemp403) + ((0.00628681295f * fTemp404) + ((0.00836207159f * fTemp343) + ((0.00885036774f * fTemp64) + ((0.00793481246f * fTemp375) + ((0.00735496078f * fTemp42) + ((0.00616473891f * fTemp49) + ((0.00778221991f * fTemp32) + ((0.00769066438f * fTemp92) + ((0.00564592425f * fTemp98) + ((0.000885036774f * fTemp379) + ((0.000762962736f * fTemp377) + ((0.000610370189f * fTemp530) + ((0.000793481246f * fTemp177) + ((0.0125431074f * fTemp449) + ((0.0109561449f * fTemp450) + ((((((((((((((((((((((0.0892971605f * fTemp498) + ((0.113711968f * fTemp499) + ((0.0983916745f * fTemp500) + ((0.0477309488f * fTemp501) + ((0.0308847316f * fTemp22) + ((0.156285286f * fTemp502) + ((0.175481424f * fTemp503) + ((0.0980559736f * fTemp504) + ((0.0153813288f * fTemp228) + ((0.00466933195f * fTemp241) + ((0.0394604318f * fTemp237) + ((0.104739524f * fTemp236) + ((0.120120853f * fTemp235) + ((0.133640558f * fTemp234) + (((fTemp508 + (((0.17282632f * fTemp0) + (0.555162191f * fTemp506)) + (0.994445622f * fTemp507))) + (0.422315121f * fTemp510)) + (0.125919372f * fTemp233)))))))))))))))) + (0.0380260646f * fTemp496)) + (0.0181890316f * fTemp495)) + (0.0408642851f * fTemp492)) + (0.0653706491f * fTemp491)) + (0.045716729f * fTemp490)) + (0.019287698f * fTemp487)) + (0.033722952f * fTemp486)) + (0.0390026569f * fTemp485)) + (0.0364391021f * fTemp396)) + (0.0209051799f * fTemp484)) + (0.0350352488f * fTemp480)) + (0.0676595345f * fTemp479)) + (0.0544145033f * fTemp478)) + (0.00527970213f * fTemp477)) + (0.00964384899f * fTemp474)) + (0.0306711029f * fTemp473)) + (0.0417188033f * fTemp472)) + (0.0340586565f * fTemp471)) + (0.0140385143f * fTemp346)) + (0.00912503432f * fTemp457))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00228888821f * fTemp269)) + (0.00207525864f * fTemp261))) + (0.00164799951f * fTemp254))) + (0.00189214759f * fTemp245)) + (0.00155644398f * fTemp244)) + (0.00115970336f * fTemp513)) + (0.000854518265f * fTemp1))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00674459059f * (fTemp414 - fTemp264)) + ((0.00772118289f * (fTemp438 - fTemp325)) + ((0.00787377544f * (fTemp87 - fTemp311)) + ((0.00524918362f * (fTemp443 - fTemp45)) + ((0.00543229468f * (fTemp13 - fTemp266)) + ((0.00534073915f * (fTemp425 - fTemp61)) + ((0.00506607257f * (fTemp338 - fTemp75)) + ((0.00363170262f * (fTemp420 - fTemp270)) + ((0.00897244178f * (fTemp369 - fTemp159)) + ((0.0104068117f * (fTemp149 - fTemp109)) + ((0.0107730338f * (fTemp463 - fTemp323)) + ((0.00762962736f * (fTemp383 - fTemp71)) + ((0.0108340709f * (fTemp329 - fTemp357)) + ((0.00811792351f * (fTemp189 - fTemp120)) + ((0.0106204413f * (fTemp417 - fTemp273)) + ((0.0133671071f * (fTemp483 - fTemp10)) + ((0.0137638478f * (fTemp373 - fTemp115)) + ((0.00857570115f * (fTemp360 - fTemp30)) + ((0.00604266487f * (fTemp412 - fTemp171)) + ((0.0162663665f * (fTemp460 - fTemp148)) + ((0.00845362712f * (fTemp522 - fTemp317)) + ((0.00558488723f * (fTemp410 - fTemp274)) + ((0.00683614612f * (fTemp435 - fTemp70)) + ((0.00665303506f * (fTemp440 - fTemp371)) + ((0.00595110934f * (fTemp421 - fTemp334)) + ((0.00497451704f * (fTemp94 - fTemp289)) + ((0.00213629566f * (fTemp52 + fTemp81)) + ((0.0022583697f * (fTemp429 + fTemp408)) + ((0.00701925717f * (fTemp424 + fTemp409)) + ((0.0182805881f * (fTemp481 + fTemp444)) + ((0.0151676992f * (fTemp188 + fTemp459)) + ((0.0150151066f * (fTemp209 + fTemp461)) + ((9.15555283e-05f * fTemp288) + ((0.0019226661f * fTemp57) + ((0.00256355479f * fTemp12) + ((0.000640888698f * fTemp301) + ((0.00180059206f * fTemp281) + ((0.0019531846f * fTemp138) + ((0.00247199927f * fTemp407) + ((0.00717184972f * fTemp390) + ((0.00949125644f * fTemp415) + ((0.0114749596f * fTemp416) + ((0.00823999755f * fTemp342) + ((0.00692770164f * fTemp36) + ((0.00610370189f * fTemp122) + ((0.00415051728f * fTemp418) + ((0.0103457747f * fTemp515) + ((0.0110782189f * fTemp65) + ((0.00338755455f * fTemp106) + ((0.00238044374f * fTemp95) + ((0.00631733146f * fTemp422) + ((0.00714133121f * fTemp423) + ((0.00488296151f * fTemp17) + ((0.00219733268f * fTemp428) + ((0.00405896176f * fTemp430) + ((0.00384533219f * fTemp432) + ((0.00427259132f * fTemp434) + ((0.0071108127f * fTemp437) + ((0.0104678487f * fTemp439) + ((0.0126346629f * fTemp381) + ((0.0121463668f * fTemp344) + ((0.0102542192f * fTemp111) + ((0.00866725668f * fTemp294) + ((0.0012817774f * fTemp441) + ((0.00204474013f * fTemp442) + ((0.0105288858f * fTemp175) + ((0.0160832554f * fTemp328) + ((0.0170598477f * fTemp445) + ((0.0125736259f * fTemp300) + ((0.00625629444f * fTemp116) + ((0.000946073793f * fTemp178) + ((0.00585955381f * fTemp249) + ((0.0132145146f * fTemp387) + ((0.0190435499f * fTemp446) + ((0.0214850307f * fTemp447) + ((0.0214239936f * fTemp448) + ((0.0201116987f * fTemp77) + ((0.0148930326f * fTemp179) + ((0.00448622089f * fTemp180) + ((0.00277718436f * fTemp452) + ((0.00930814538f * fTemp385) + ((0.0163884405f * fTemp121) + ((0.0176702179f * fTemp453) + ((0.0182500686f * fTemp454) + ((0.0169072542f * fTemp455) + ((0.0119632557f * fTemp152) + ((0.0108645894f * fTemp458) + ((0.0120242927f * fTemp462) + ((0.0142826624f * fTemp389) + ((0.00747703481f * fTemp466) + ((0.0133365886f * fTemp467) + ((0.0209967345f * fTemp468) + ((0.0217596982f * fTemp368) + ((0.0156254768f * fTemp181) + ((0.011444441f * fTemp86) + ((0.0163579211f * fTemp367) + ((0.0262459181f * fTemp141) + ((0.0324411765f * fTemp182) + ((0.0336619169f * fTemp183) + ((0.0331431031f * fTemp184) + ((0.0316476934f * fTemp185) + ((0.0278939176f * fTemp186) + ((0.022644734f * fTemp187) + ((0.00457777642f * fTemp151) + ((0.00521866512f * fTemp191) + ((0.0147404401f * fTemp192) + ((0.0311593991f * fTemp193) + ((0.0451063588f * fTemp194) + ((0.0485244319f * fTemp195) + ((0.0439466536f * fTemp196) + ((0.0338145085f * fTemp469) + ((0.0217291787f * fTemp154) + ((0.00830103457f * fTemp475) + ((0.0213934761f * fTemp476) + ((0.0359813236f * fTemp197) + ((0.0539567247f * fTemp198) + ((0.0733359754f * fTemp199) + ((0.0753807202f * fTemp200) + ((0.0483718365f * fTemp58) + ((0.0522782058f * fTemp201) + ((0.0552079827f * fTemp202) + ((0.0412915424f * fTemp203) + ((0.0387279876f * fTemp204) + ((0.0499282815f * fTemp35) + ((0.0601214655f * fTemp482) + ((0.0476088747f * fTemp397) + ((0.0398876928f * fTemp489) + ((0.0721457601f * fTemp153) + ((0.102511674f * fTemp205) + ((0.115817741f * fTemp206) + ((0.0998260453f * fTemp207) + (((((((((((((((((((((((0.000305185094f * fTemp227) + (((((((((0.329721987f * fTemp229) + (0.689016402f * fTemp230)) + (0.532731116f * fTemp231)) + (0.1993469f * fTemp232)) + (0.0543534644f * fTemp238)) + (0.105288856f * fTemp239)) + (0.136051521f * fTemp240)) + (0.0927457511f * fTemp391)) + (0.0606402792f * fTemp16))) + (0.0981170088f * fTemp226)) + (0.168126464f * fTemp225)) + (0.151829585f * fTemp512)) + (0.0334177688f * fTemp505)) + (0.0847193822f * fTemp224)) + (0.122013003f * fTemp223)) + (0.108218633f * fTemp222)) + (0.0888698995f * fTemp221)) + (0.062776573f * fTemp220)) + (0.0100405896f * fTemp219)) + (0.0127872555f * fTemp493)) + (0.0402233973f * fTemp218)) + (0.0636005774f * fTemp217)) + (0.072969757f * fTemp216)) + (0.0702536106f * fTemp215)) + (0.0634174645f * fTemp214)) + (0.0707724243f * fTemp213)) + (0.08908353f * fTemp212)) + (0.093081452f * fTemp211)) + (0.0684530139f * fTemp210)) + (0.0575273894f * fTemp208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00134281442f * (fTemp118 - fTemp242))))) : (iSlow33 ? (((0.00347911008f * (fTemp293 - fTemp513)) + ((0.0074159978f * (fTemp114 - fTemp245)) + ((0.00854518265f * (fTemp104 - fTemp251)) + ((0.00628681295f * (fTemp288 - fTemp309)) + ((0.00601214636f * (fTemp402 - fTemp318)) + ((0.00482192449f * (fTemp92 - fTemp292)) + ((0.00524918362f * (fTemp388 - fTemp285)) + ((0.00918607134f * (fTemp335 - fTemp337)) + ((0.00167851802f * (fTemp119 - fTemp339)) + ((0.00589007232f * (fTemp13 - fTemp25)) + ((0.0119327372f * (fTemp29 - fTemp256)) + ((0.00802636798f * (fTemp26 - fTemp319)) + ((0.00305185094f * (fTemp286 + (fTemp172 + fTemp50))) + ((0.00436414685f * (fTemp325 - (fTemp280 - (fTemp137 + fTemp519)))) + ((0.00149540696f * (fTemp340 - (fTemp413 + fTemp350))) + ((0.00375377666f * (fTemp79 - fTemp51)) + ((0.00463881344f * (fTemp113 - fTemp60)) + ((0.00393688772f * fTemp766) + ((0.00442518387f * (fTemp39 - fTemp69)) + ((0.00503555406f * (fTemp70 - fTemp55)) + ((0.00537125766f * (fTemp267 - fTemp67)) + ((0.00592059083f * (fTemp384 - fTemp347)) + ((0.00491348002f * (fTemp12 - fTemp156)) + ((0.00262459181f * (fTemp294 - fTemp157)) + ((0.000274666585f * (fTemp72 - (fTemp88 + (fTemp91 - (fTemp421 - (fTemp499 + (fTemp223 + (fTemp226 + (fTemp240 + (fTemp507 + fTemp233)))))))))) + ((0.00253303628f * (fTemp488 + fTemp75)) + ((0.000152592547f * (fTemp271 + (fTemp124 - (fTemp508 + fTemp496)))) + ((0.000213629566f * (fTemp96 - (fTemp22 + (fTemp505 + (fTemp236 + fTemp241))))) + ((0.00762962736f * (fTemp160 + (fTemp249 + fTemp32))) + ((0.00909451582f * (fTemp82 + fTemp105)) + ((0.00894192327f * (fTemp59 + fTemp46)) + ((0.00384533219f * (fTemp169 + fTemp117)) + ((0.000305185094f * (fTemp164 - (fTemp218 + fTemp626))) + ((0.013000885f * fTemp767) + ((0.000122074038f * (fTemp120 + (fTemp247 - (fTemp210 + (fTemp217 + (fTemp511 + fTemp227)))))) + ((0.0131229591f * (fTemp140 + fTemp751)) + ((0.00686666463f * (fTemp148 + fTemp366)) + ((0.00860621966f * (fTemp257 + (fTemp404 + fTemp131))) + ((0.00827051606f * (fTemp57 + fTemp6)) + ((0.0045167394f * (fTemp375 + fTemp134)) + ((0.00390636921f * (fTemp295 + fTemp144)) + ((0.00726340525f * (fTemp386 + fTemp150)) + ((0.0123599963f * (fTemp97 + fTemp690)) + ((0.011322367f * (fTemp130 + fTemp351)) + ((0.0107730338f * (fTemp380 + fTemp107)) + ((0.0136417737f * (fTemp289 + (fTemp186 + fTemp449))) + ((0.0148930326f * (fTemp9 + (fTemp424 + fTemp99))) + ((0.000183111057f * (fTemp390 - (fTemp418 + (fTemp215 + fTemp583)))) + ((0.0102542192f * (fTemp432 + fTemp416)) + ((0.0310068056f * (fTemp485 + fTemp436)) + ((0.027619252f * (fTemp180 + fTemp439)) + ((0.0378429517f * (fTemp151 - fTemp184)) + ((0.0361949541f * (fTemp396 - fTemp199)) + ((6.10370189e-05f * (fTemp503 + (fTemp504 - (fTemp232 + (fTemp231 + fTemp632))))) + ((0.0124210333f * fTemp637) + ((0.00680562761f * fTemp552) + ((0.000885036774f * fTemp264) + ((0.00134281442f * fTemp252) + (fTemp647 + ((0.00112918485f * fTemp43) + ((0.00189214759f * fTemp101) + ((0.00396740623f * fTemp76) + ((0.0061342204f * fTemp159) + ((0.00958281197f * fTemp109) + ((0.00955229346f * fTemp323) + ((0.00793481246f * fTemp110) + ((0.00671407208f * fTemp287) + ((0.00268562883f * fTemp161) + ((0.000823999755f * fTemp163) + ((0.0101016266f * fTemp352) + ((0.0149845881f * fTemp165) + ((0.0182195511f * fTemp166) + ((0.0185857732f * fTemp363) + ((0.01803644f * fTemp167) + ((0.0156559963f * fTemp63) + ((0.00927762687f * fTemp400) + ((0.00604266487f * fTemp401) + ((0.00405896176f * fTemp38) + ((0.00341807306f * fTemp168) + ((0.00283822138f * fTemp73) + ((0.00833155308f * fTemp125) + ((0.0184942167f * fTemp123) + ((0.0264290292f * fTemp365) + ((0.0284432508f * fTemp170) + ((0.0238654744f * fTemp78) + ((0.0163884405f * fTemp129) + ((0.00888088625f * fTemp27) + ((0.00869777519f * fTemp10) + ((0.0119937742f * fTemp115) + ((0.0135196997f * fTemp80) + ((0.0123294778f * fTemp56) + ((0.0115665151f * fTemp84) + ((0.0109256264f * fTemp275) + ((0.00982696004f * fTemp53) + ((0.0057985168f * fTemp370) + ((0.00717184972f * fTemp358) + ((0.00836207159f * fTemp298) + ((0.00769066438f * fTemp145) + (fTemp768 + ((0.00610370189f * fTemp372) + (fTemp769 + ((0.00302133244f * fTemp108) + ((0.00750755332f * fTemp142) + ((0.00698873866f * fTemp326) + ((0.00271614734f * fTemp171) + ((0.00500503555f * fTemp103) + ((0.00756859034f * fTemp85) + ((0.0071108127f * fTemp282) + ((0.00689718314f * fTemp359) + ((0.0105899228f * fTemp147) + ((0.0110477004f * fTemp259) + ((0.00650044251f * fTemp314) + ((0.0102237007f * fTemp348) + ((0.0107119968f * fTemp315) + ((0.0108340709f * fTemp290) + ((0.0132450331f * fTemp361) + ((0.014679403f * fTemp126) + ((0.0141605884f * fTemp5) + ((0.012817774f * fTemp317) + ((0.0106204413f * fTemp128) + ((0.00991851557f * fTemp90) + ((0.0106509598f * fTemp316) + ((0.0127567369f * fTemp274) + ((0.00784325693f * fTemp403) + ((0.0126041444f * fTemp127) + ((0.0100405896f * fTemp343) + ((0.00735496078f * fTemp371) + ((0.00939970091f * fTemp42) + ((0.00961333048f * fTemp514) + ((0.00973540451f * fTemp112) + ((0.00988799706f * fTemp243) + ((0.00997955259f * fTemp334) + ((0.00964384899f * fTemp49) + (fTemp770 + ((0.0083925901f * fTemp356) + ((0.00979644153f * fTemp405) + ((0.0122379223f * fTemp378) + ((0.0136112552f * fTemp139) + ((0.0139774773f * fTemp93) + ((0.016052736f * fTemp406) + ((0.0151066622f * fTemp382) + ((0.0111392559f * fTemp355) + ((0.0159306619f * fTemp336) + ((0.0168462172f * fTemp379) + ((0.0178228095f * fTemp301) + ((0.0187688842f * fTemp281) + ((0.0173955504f * fTemp138) + ((0.0153202917f * fTemp516) + ((0.0118717002f * fTemp408) + ((0.0130924406f * fTemp52) + ((0.0150456252f * fTemp66) + ((0.0167241432f * fTemp250) + ((0.0172734763f * fTemp4) + ((0.0173650328f * fTemp87) + ((0.0165715516f * fTemp383) + ((0.0129703665f * fTemp409) + ((0.00994903408f * fTemp410) + ((0.00238044374f * fTemp411) + ((0.00473036896f * fTemp415) + ((0.0137028107f * fTemp417) + ((0.012939848f * fTemp342) + ((0.00213629566f * fTemp122) + ((0.00317392498f * fTemp369) + ((0.00558488723f * fTemp515) + ((0.0118106632f * fTemp149) + ((0.0187383648f * fTemp329) + ((0.0242622159f * fTemp65) + ((0.024567401f * fTemp360) + ((0.0213934761f * fTemp106) + ((0.0205694754f * fTemp377) + ((0.0220038462f * fTemp530) + ((0.0247505121f * fTemp95) + ((0.0246589556f * fTemp94) + ((0.0195013285f * fTemp89) + ((0.0143742179f * fTemp422) + ((0.011200293f * fTemp423) + ((0.0189214759f * fTemp425) + ((0.0234382153f * fTemp426) + ((0.0238349568f * fTemp17) + ((0.0289010294f * fTemp338) + ((0.034150213f * fTemp427) + ((0.0350352488f * fTemp428) + ((0.0304879919f * fTemp429) + ((0.0260933265f * fTemp430) + ((0.019348735f * fTemp431) + ((0.0101626636f * fTemp433) + ((0.0191656239f * fTemp434) + ((0.0306711029f * fTemp435) + ((0.0288399924f * fTemp437) + ((0.0270699188f * fTemp438) + ((0.0276497696f * fTemp381) + ((0.0248725861f * fTemp344) + ((0.0142216254f * fTemp111) + ((0.0158391073f * fTemp328) + ((0.0506607257f * fTemp444) + ((0.0754112378f * fTemp445) + ((0.0644245744f * fTemp300) + ((0.0349742137f * fTemp116) + ((0.013061922f * fTemp387) + ((0.0166631062f * fTemp446) + ((0.0198370311f * fTemp447) + ((0.0250556972f * fTemp448) + ((0.0298165847f * fTemp77) + ((0.0326853245f * fTemp179) + ((0.0224311054f * fTemp376) + ((0.0111697745f * fTemp450) + ((0.0171514023f * fTemp454) + ((0.0354930274f * fTemp455) + ((0.0495620593f * fTemp152) + ((0.0659199804f * fTemp362) + ((0.0787987933f * fTemp456) + ((0.0751976073f * fTemp457) + ((0.0466322824f * fTemp364) + ((0.0284127332f * fTemp461) + ((0.0751060545f * fTemp462) + ((0.103366189f * fTemp463) + ((0.102877893f * fTemp464) + ((0.0941496044f * fTemp389) + ((0.081667535f * fTemp393) + ((0.0780968666f * fTemp465) + ((0.0618610196f * fTemp466) + ((0.0281991027f * fTemp467) + ((0.0372936204f * fTemp187) + ((0.0462660603f * fTemp188) + ((0.0391857661f * fTemp189) + ((0.105685599f * fTemp195) + ((0.12405774f * fTemp196) + ((0.100253306f * fTemp469) + ((0.0188604388f * fTemp154) + ((0.0505081341f * fTemp471) + ((0.111484118f * fTemp472) + ((0.095675528f * fTemp473) + ((0.0856349394f * fTemp474) + ((0.0210272539f * fTemp475) + ((0.0538956895f * fTemp476) + ((0.0497756898f * fTemp197) + ((0.0737327188f * fTemp198) + ((0.317972362f * fTemp478) + ((0.511124015f * fTemp479) + ((0.426984459f * fTemp480) + ((0.0160222184f * fTemp483) + ((0.0333567299f * fTemp484) + ((0.00891140476f * fTemp487) + (0.0199285876f * fTemp486)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.0038758507f * (fTemp242 + (fTemp33 - fTemp311))) + ((0.00476088747f * (fTemp269 + fTemp244)) + ((0.00607318338f * (fTemp305 + fTemp398)) + ((0.00915555283f * (fTemp254 - (fTemp36 + fTemp136))) + ((0.0090334788f * (fTemp441 + fTemp265)) + ((0.00241096225f * (fTemp399 + fTemp291)) + ((0.00329599902f * (fTemp102 + fTemp296)) + ((0.00512710959f * (fTemp331 + fTemp302)) + ((0.00573747978f * (fTemp177 + fTemp277)) + ((0.0054933317f * (fTemp284 - (fTemp354 + fTemp71))) + ((0.00497451704f * (fTemp273 + fTemp324)) + ((0.00521866512f * (fTemp278 + (fTemp304 + (fTemp62 + fTemp14)))) + ((0.00570696127f * (fTemp310 - (fTemp263 + (fTemp40 + (fTemp118 + fTemp327))))) + ((0.00863673817f * fTemp771) + ((0.00708029419f * (fTemp11 - (fTemp15 + fTemp30))) + ((0.00216681417f * (fTemp23 + fTemp19)) + ((0.00360118411f * (fTemp357 + fTemp24)) + ((0.0103457747f * (fTemp522 + fTemp262)) + ((0.00418103579f * (fTemp41 - (fTemp394 + fTemp173))) + ((0.0051576281f * (fTemp303 + fTemp45)) + ((0.00244148076f * (fTemp353 + fTemp320)) + ((0.000335703604f * (fTemp266 - (fTemp420 - (fTemp491 + (fTemp495 + fTemp542))))) + ((0.00186162908f * (fTemp178 - fTemp47)) + ((0.00234992523f * (fTemp414 - fTemp83)) + ((9.15555283e-05f * (fTemp3 + (fTemp492 + (fTemp498 + (fTemp239 + fTemp228))))) + ((0.00427259132f * (fTemp443 + fTemp341)) + ((0.0115359966f * (fTemp468 + fTemp176)) + ((3.05185094e-05f * (fTemp489 - (fTemp209 - (fTemp216 + (fTemp220 + (fTemp221 - (fTemp502 + (fTemp238 - (fTemp229 + fTemp237))))))))) + ((0.000701925717f * (fTemp207 + (fTemp213 + fTemp212))) + ((0.00054933317f * (fTemp490 + fTemp135)) + ((0.000396740623f * (fTemp500 + (fTemp391 + fTemp501))) + ((0.000366222113f * (fTemp234 + fTemp16)) + ((0.000427259132f * (fTemp225 + fTemp493)) + ((0.000457777642f * (fTemp214 + fTemp211)) + ((0.00622577593f * fTemp563) + (((0.00933866389f * fTemp260) + ((0.008087405f * fTemp255) + ((0.00653096102f * fTemp261) + ((0.00314340647f * fTemp276) + ((0.00228888821f * fTemp283) + ((0.00430310983f * fTemp297) + ((0.00631733146f * fTemp270) + ((0.00488296151f * fTemp330) + (fTemp772 + ((0.0077517014f * fTemp332) + ((0.00881984923f * fTemp7) + (fTemp697 + ((0.0109866634f * fTemp31) + ((0.0122684408f * fTemp333) + ((0.00555436872f * fTemp34) + ((0.003234962f * fTemp279) + ((0.00119022187f * fTemp253) + ((0.001617481f * fTemp37) + ((0.000610370189f * fTemp48) + ((0.00247199927f * fTemp21) + ((0.00445570238f * fTemp54) + ((0.00457777642f * fTemp312) + ((0.00424207281f * fTemp307) + ((0.00561540574f * fTemp61) + (fTemp773 + ((0.0058290353f * fTemp155) + ((0.000793481246f * fTemp44) + ((0.00381481368f * fTemp268) + ((0.00399792474f * fTemp272) + ((0.00250251777f * fTemp322) + ((0.00363170262f * fTemp20) + ((0.00146488845f * fTemp132) + ((0.00326548051f * fTemp133) + ((0.000244148076f * fTemp412) + ((0.0100711081f * fTemp440) + ((0.0140385143f * fTemp392) + ((0.00454725791f * fTemp442) + (((0.00408948027f * fTemp451) + ((0.0181890316f * fTemp452) + ((0.0336619169f * fTemp385) + ((0.0334788039f * fTemp373) + ((0.0254219193f * fTemp121) + ((0.00527970213f * fTemp453) + ((0.0392773226f * fTemp458) + ((0.0500808731f * fTemp459) + ((((((((((((((((((((((((((((((((0.000518814661f * fTemp208) + (0.000488296151f * fTemp512)) + (0.00100711081f * fTemp206)) + (0.00115970336f * fTemp205)) + (0.000854518265f * fTemp153)) + (0.00296029542f * fTemp397)) + (0.0343028046f * fTemp482)) + (0.148991361f * fTemp35)) + (0.461867124f * fTemp204)) + (0.890316486f * fTemp203)) + (1.00003052f * fTemp202)) + (0.637989461f * fTemp201)) + (0.0393383577f * fTemp481)) + (0.0523697622f * fTemp477)) + (0.227668077f * fTemp58)) + (0.167821288f * fTemp200)) + (0.00506607257f * fTemp346)) + (0.0266121402f * fTemp470)) + (0.00976592302f * fTemp194)) + (0.0839259028f * fTemp193)) + (0.130832851f * fTemp192)) + (0.0785241276f * fTemp191)) + (0.0170903653f * fTemp190)) + (0.0176091809f * fTemp185)) + (0.0554216132f * fTemp183)) + (0.0560319833f * fTemp182)) + (0.0604266487f * fTemp141)) + (0.0577105023f * fTemp367)) + (0.0587481298f * fTemp86)) + (0.0496230982f * fTemp181)) + (0.0420239866f * fTemp368)) + (0.0253913999f * fTemp460)))))))))) + (0.0142826624f * fTemp175))))))))))))))))))))))))))))))))))))))) + (0.00369273964f * fTemp1)))))))))))))))))))))))))))))))))))))) : (((0.00344859157f * (fTemp319 + fTemp254)) + ((0.00338755455f * (fTemp265 - (fTemp334 + fTemp326))) + ((0.00219733268f * (fTemp261 - (fTemp30 + fTemp247))) + ((0.0012817774f * (fTemp253 + fTemp269)) + ((0.000396740623f * (fTemp276 + (fTemp0 + fTemp16))) + ((0.000152592547f * (fTemp296 - (fTemp102 - fTemp37))) + ((0.000701925717f * (fTemp297 + (fTemp271 + (fTemp501 + fTemp207)))) + ((0.00180059206f * (fTemp88 + fTemp305)) + ((0.00241096225f * (fTemp339 + fTemp309)) + ((0.00518814661f * (fTemp330 - (fTemp27 - fTemp331))) + ((0.00500503555f * (fTemp345 + fTemp278)) + ((0.00634784997f * (fTemp310 - (fTemp441 + fTemp282))) + ((0.00695822015f * (fTemp518 - (fTemp335 - (fTemp121 - fTemp386)))) + ((0.00723288674f * (fTemp337 + fTemp332)) + ((0.00640888698f * fTemp760) + ((0.00491348002f * (fTemp11 + (fTemp61 - (fTemp249 + fTemp168)))) + ((0.00283822138f * (fTemp18 - (fTemp267 + (fTemp316 - (fTemp468 + fTemp373))))) + ((0.00231940672f * (fTemp321 + fTemp23)) + ((0.00262459181f * (fTemp454 + fTemp24)) + ((0.00384533219f * (fTemp262 - (fTemp90 + fTemp358))) + ((0.003234962f * (fTemp34 - (fTemp394 + fTemp70))) + ((0.00247199927f * (fTemp48 + fTemp279)) + ((0.0025940733f * (fTemp47 - fTemp340)) + ((0.00689718314f * (fTemp320 - (fTemp46 - fTemp155))) + ((0.00589007232f * (fTemp156 + fTemp2)) + ((0.000854518265f * (fTemp499 - fTemp43)) + ((0.000122074038f * (fTemp264 - (fTemp119 - (fTemp229 + fTemp306)))) + ((0.00466933195f * (fTemp397 - fTemp117)) + ((0.000671407208f * (fTemp163 + (fTemp220 + fTemp208))) + ((0.00125125889f * (fTemp44 + fTemp164)) + ((0.000640888698f * (fTemp350 + (fTemp504 + fTemp222))) + ((0.00170903653f * (fTemp273 + fTemp353)) + ((0.00399792474f * (fTemp357 - (fTemp42 + fTemp366))) + ((0.00302133244f * (fTemp412 + fTemp519)) + ((0.00244148076f * (fTemp341 - fTemp120)) + ((0.000793481246f * (fTemp498 + fTemp20)) + ((0.0019226661f * (fTemp513 - (fTemp390 - fTemp413))) + ((0.0232245866f * (fTemp470 - fTemp170)) + ((0.00704977568f * (fTemp471 - fTemp317)) + ((0.000732444227f * (fTemp411 + (fTemp206 + (fTemp502 + fTemp214)))) + ((0.000183111057f * (fTemp232 + fTemp153)) + ((0.000518814661f * (fTemp205 + (fTemp213 + (fTemp224 + (fTemp22 + (fTemp505 + (fTemp508 + fTemp227))))))) + ((0.000610370189f * (fTemp221 + fTemp492)) + ((0.000213629566f * (fTemp512 - fTemp210)) + ((0.000915555283f * (fTemp500 + fTemp215)) + ((0.00057985168f * (fTemp493 + (fTemp503 + fTemp219))) + ((0.000274666585f * (fTemp511 + fTemp495)) + ((0.000244148076f * (fTemp496 + (fTemp233 + fTemp240))) + ((0.000366222113f * (fTemp391 + fTemp497)) + ((0.000427259132f * (fTemp223 + (fTemp506 + fTemp510))) + ((0.000457777642f * fTemp538) + (((((0.0035401471f * fTemp260) + ((0.00122074038f * fTemp302) + ((0.00155644398f * fTemp277) + ((0.00411999878f * fTemp318) + ((0.00469985045f * fTemp284) + ((0.00488296151f * fTemp324) + ((0.00512710959f * fTemp292) + ((0.00509659108f * fTemp285) + ((0.0074159978f * fTemp7) + ((0.00350962859f * fTemp14) + ((0.00256355479f * fTemp19) + ((0.004852443f * fTemp28) + ((0.00546281319f * fTemp31) + ((0.00531022064f * fTemp333) + ((0.00445570238f * fTemp256) + ((0.00363170262f * fTemp41) + ((0.00744651631f * fTemp280) + ((0.00375377666f * fTemp252) + ((0.00335703604f * fTemp21) + ((0.00543229468f * fTemp54) + ((0.00601214636f * fTemp307) + ((0.00567644276f * fTemp33) + ((0.00524918362f * fTemp68) + ((0.00534073915f * fTemp246) + ((0.00668355357f * fTemp303) + ((0.00683614612f * fTemp67) + ((0.00665303506f * fTemp347) + ((0.00143436994f * fTemp72) + ((0.0022583697f * fTemp91) + ((0.00167851802f * fTemp96) + ((0.000946073793f * fTemp101) + ((0.00592059083f * fTemp268) + ((0.00766014587f * fTemp272) + ((0.00857570115f * fTemp322) + ((0.00781273842f * fTemp3) + ((0.00228888821f * fTemp132) + ((0.000762962736f * fTemp414) + ((0.017975403f * fTemp442) + ((0.0339671001f * fTemp443) + ((0.0304269549f * fTemp522) + ((0.00982696004f * fTemp175) + ((0.00738547929f * fTemp453) + ((0.0473342091f * fTemp459) + ((0.0475783572f * fTemp460) + ((0.0158696249f * fTemp461) + ((0.0312509537f * fTemp368) + ((0.0287484359f * fTemp181) + ((0.0476393923f * fTemp86) + ((0.0365306549f * fTemp367) + ((0.0361033976f * fTemp141) + ((0.0166936256f * fTemp182) + (fTemp761 + ((0.0236823633f * fTemp184) + ((0.0174565874f * fTemp185) + ((0.095675528f * fTemp192) + ((0.0720236823f * fTemp193) + ((0.0833155289f * fTemp194) + ((0.0473036915f * fTemp346) + ((0.0767540485f * fTemp199) + ((0.108005002f * fTemp200) + ((0.223792225f * fTemp58) + ((0.217627496f * fTemp477) + ((0.0350047313f * fTemp478) + ((0.287057102f * fTemp201) + ((0.853755295f * fTemp202) + (fTemp203 + ((0.600360096f * fTemp204) + ((0.171727657f * fTemp35) + ((0.01617481f * fTemp482) + ((0.000976592302f * fTemp135) + ((0.00109866634f * fTemp490) + ((0.000488296151f * fTemp507) + (0.000823999755f * fTemp218))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00265511032f * fTemp398)) + (0.00177007355f * fTemp242)) + (0.00210577715f * fTemp1))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00207525864f * (fTemp354 - fTemp244)) + ((0.00317392498f * (fTemp142 - fTemp245)) + ((0.00341807306f * (fTemp352 - fTemp251)) + ((0.00292977691f * (fTemp258 - fTemp255)) + ((0.000305185094f * (fTemp283 - (fTemp212 + (fTemp234 + fTemp236)))) + ((0.000335703604f * (fTemp291 + (fTemp76 - (fTemp225 + (fTemp235 + fTemp226))))) + ((0.00320444349f * (fTemp257 - fTemp270)) + ((0.00366222113f * (fTemp274 - fTemp25)) + ((0.00106814783f * (fTemp286 - (fTemp217 + fTemp491))) + ((0.00238044374f * (fTemp160 + fTemp325)) + ((0.00332651753f * (fTemp402 + fTemp311)) + ((0.00637836847f * (fTemp57 - fTemp45)) + ((0.00552385021f * (fTemp104 - fTemp266)) + ((0.00430310983f * (fTemp388 - fTemp51)) + ((0.00598162785f * (fTemp131 - fTemp312)) + ((0.00622577593f * (fTemp313 - fTemp60)) + ((0.00506607257f * (fTemp128 - fTemp69)) + ((0.00494399853f * (fTemp148 - fTemp55)) + ((0.00393688772f * (fTemp288 - fTemp157)) + ((0.00369273964f * (fTemp293 + fTemp79)) + ((0.00439466536f * (fTemp351 + fTemp349)) + ((0.00305185094f * (fTemp404 + fTemp105)) + ((0.00054933317f * (fTemp134 - fTemp399)) + ((0.00885036774f * (fTemp275 + fTemp165)) + ((0.0116885891f * (fTemp405 + fTemp166)) + ((0.00866725668f * (fTemp12 + fTemp74)) + ((0.00573747978f * (fTemp359 + fTemp169)) + ((3.05185094e-05f * (fTemp124 - (fTemp133 + (fTemp209 + (fTemp237 - fTemp535))))) + ((0.00558488723f * (fTemp40 - fTemp304)) + ((0.0118411817f * (fTemp342 + fTemp123)) + ((0.0196844395f * (fTemp406 + fTemp78)) + ((0.0051576281f * (fTemp243 + fTemp137)) + ((0.00787377544f * (fTemp327 + fTemp10)) + ((0.00674459059f * (fTemp416 + fTemp53)) + ((0.00347911008f * (fTemp263 + fTemp370)) + ((0.00372325815f * (fTemp415 + fTemp298)) + ((0.0028992584f * (fTemp295 + fTemp6)) + ((9.15555283e-05f * (fTemp108 + (fTemp211 - fTemp489))) + ((0.00115970336f * (fTemp172 - (fTemp216 - fTemp173))) + ((0.00662251655f * (fTemp248 + fTemp147)) + ((0.00778221991f * (fTemp385 + fTemp5)) + ((0.00576799829f * (fTemp92 + fTemp136)) + ((0.016235847f * (fTemp4 + fTemp378)) + ((0.0182805881f * (fTemp467 + fTemp138)) + ((0.00955229346f * (fTemp122 + fTemp410)) + ((0.0114749596f * (fTemp483 + fTemp387)) + ((0.027558215f * (fTemp484 - fTemp458)) + ((0.00268562883f * fTemp689) + ((0.00158696249f * fTemp75) + ((0.00234992523f * fTemp83) + ((0.00134281442f * fTemp159) + ((0.00424207281f * fTemp109) + ((0.00570696127f * fTemp323) + ((0.00726340525f * fTemp110) + ((0.00753807183f * fTemp287) + (fTemp762 + ((0.00659199804f * fTemp113) + ((0.00222785119f * fTemp161) + ((0.0129093295f * fTemp363) + ((0.0132450331f * fTemp167) + ((0.0118717002f * fTemp63) + ((0.00564592425f * fTemp400) + ((0.0038758507f * fTemp401) + ((0.00378429517f * fTemp38) + ((0.00527970213f * fTemp73) + ((0.00402844325f * fTemp125) + ((0.0202032533f * fTemp365) + ((0.0123294778f * fTemp129) + ((6.10370189e-05f * fTemp50) + ((0.0101931822f * fTemp115) + ((0.0111697745f * fTemp80) + ((0.0115970336f * fTemp140) + ((0.011444441f * fTemp56) + ((0.0103762932f * fTemp84) + ((0.0019531846f * fTemp372) + ((0.00100711081f * fTemp144) + ((0.00277718436f * fTemp374) + ((0.00183111057f * fTemp171) + (fTemp763 + ((0.00521866512f * fTemp150) + ((0.00616473891f * fTemp85) + ((0.0058290353f * fTemp114) + ((0.00643940549f * fTemp97) + ((0.0057985168f * fTemp259) + ((0.00799584948f * fTemp13) + ((0.00848414563f * fTemp314) + ((0.00790429395f * fTemp59) + ((0.008087405f * fTemp348) + ((0.0083925901f * fTemp315) + ((0.00888088625f * fTemp290) + ((0.00921658985f * fTemp29) + ((0.00836207159f * fTemp361) + ((0.00845362712f * fTemp126) + ((0.00405896176f * fTemp82) + ((0.00250251777f * fTemp403) + ((0.00415051728f * fTemp107) + ((0.00625629444f * fTemp127) + ((0.00698873866f * fTemp343) + ((0.00653096102f * fTemp64) + ((0.00476088747f * fTemp375) + ((0.00253303628f * fTemp371) + ((0.00448622089f * fTemp514) + ((0.00732444227f * fTemp112) + (fTemp764 + ((0.00482192449f * fTemp32) + (fTemp765 + ((0.00964384899f * fTemp356) + ((0.0137638478f * fTemp130) + ((0.0175786614f * fTemp98) + ((0.0202337727f * fTemp139) + ((0.021271402f * fTemp289) + ((0.021332439f * fTemp93) + ((0.0202642903f * fTemp9) + ((0.0181890316f * fTemp382) + ((0.0151371807f * fTemp355) + ((0.0126956999f * fTemp15) + ((0.0116275521f * fTemp384) + ((0.0123599963f * fTemp26) + ((0.0137028107f * fTemp380) + ((0.0150151066f * fTemp100) + ((0.0172124393f * fTemp99) + ((0.0195928831f * fTemp336) + ((0.0213934761f * fTemp379) + ((0.0208441429f * fTemp301) + ((0.0199285876f * fTemp281) + ((0.0155949583f * fTemp516) + ((0.0136112552f * fTemp81) + ((0.0138554033f * fTemp407) + ((0.0152897732f * fTemp408) + ((0.016296884f * fTemp52) + ((0.0168767367f * fTemp66) + ((0.0169072542f * fTemp250) + ((0.0154118473f * fTemp87) + ((0.014679403f * fTemp383) + ((0.0126346629f * fTemp409) + ((0.00863673817f * fTemp417) + ((0.0131229591f * fTemp36) + ((0.0124515519f * fTemp39) + ((0.00784325693f * fTemp418) + ((0.00408948027f * fTemp420) + ((0.00442518387f * fTemp421) + ((0.00900296029f * fTemp369) + ((0.0153508103f * fTemp515) + ((0.0139164403f * fTemp149) + ((0.0175481439f * fTemp329) + ((0.0210577715f * fTemp65) + ((0.0271004364f * fTemp360) + ((0.025757622f * fTemp106) + ((0.027619252f * fTemp377) + ((0.0252998453f * fTemp530) + ((0.0287179183f * fTemp95) + ((0.0314340666f * fTemp94) + ((0.0281685852f * fTemp89) + ((0.0209051799f * fTemp422) + ((0.0125125889f * fTemp423) + ((0.012817774f * fTemp424) + ((0.0145268105f * fTemp425) + ((0.0255134739f * fTemp426) + ((0.025818659f * fTemp17) + ((0.0347605832f * fTemp338) + ((0.0352183618f * fTemp427) + ((0.0380260646f * fTemp428) + ((0.0317087322f * fTemp429) + ((0.0328684337f * fTemp430) + ((0.0413525812f * fTemp431) + ((0.036896877f * fTemp432) + ((0.0313119926f * fTemp433) + ((0.0220343638f * fTemp434) + ((0.0338755473f * fTemp435) + ((0.0306100659f * fTemp436) + ((0.0273751039f * fTemp437) + ((0.0270393994f * fTemp438) + ((0.0203253273f * fTemp439) + ((0.0220648833f * fTemp381) + ((0.0158085879f * fTemp344) + ((0.0238044374f * fTemp111) + ((0.0204779208f * fTemp294) + ((0.0198675506f * fTemp440) + ((0.0122684408f * fTemp392) + ((0.0129703665f * fTemp176) + ((0.0171514023f * fTemp328) + ((0.0314645842f * fTemp444) + ((0.0530411713f * fTemp445) + ((0.0730918273f * fTemp300) + ((0.0747398287f * fTemp116) + ((0.0610065013f * fTemp118) + ((0.0399487279f * fTemp177) + ((0.0151066622f * fTemp178) + ((0.0200201422f * fTemp446) + ((0.0300912503f * fTemp447) + ((0.0357982107f * fTemp448) + ((0.0432142094f * fTemp77) + ((0.0398876928f * fTemp179) + ((0.0341196954f * fTemp180) + ((0.0293588061f * fTemp376) + ((0.0278328806f * fTemp449) + ((0.0307321399f * fTemp450) + ((0.029175695f * fTemp451) + ((0.0222479943f * fTemp452) + ((0.0126041444f * fTemp455) + ((0.030915251f * fTemp152) + ((0.0431836918f * fTemp362) + ((0.0515457615f * fTemp456) + ((0.0506607257f * fTemp457) + ((0.0296334736f * fTemp364) + ((0.0279549547f * fTemp462) + ((0.0513016135f * fTemp463) + ((0.0545060597f * fTemp464) + ((0.0467238389f * fTemp389) + ((0.0288399924f * fTemp393) + ((0.027680289f * fTemp465) + ((0.031037325f * fTemp466) + ((0.0141911069f * fTemp186) + ((0.0524308011f * fTemp187) + ((0.0731833875f * fTemp188) + ((0.0710165724f * fTemp189) + ((0.0694296062f * fTemp151) + ((0.065553762f * fTemp190) + ((0.0284737702f * fTemp191) + ((0.0399792492f * fTemp195) + ((0.0788598284f * fTemp196) + ((0.16000855f * fTemp469) + ((0.0652180538f * fTemp154) + ((0.0776085705f * fTemp472) + ((0.089510791f * fTemp473) + ((0.141941592f * fTemp474) + ((0.0721457601f * fTemp475) + ((0.156773582f * fTemp476) + ((0.0940580443f * fTemp197) + ((0.0801721215f * fTemp198) + ((0.123416856f * fTemp479) + ((0.351359606f * fTemp480) + ((((((0.00186162908f * fTemp488) + (0.0101016266f * fTemp487)) + (0.0219733268f * fTemp486)) + (0.0316171758f * fTemp485)) + (0.0346995443f * fTemp396)) + (0.199835196f * fTemp481))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow29 ? (iSlow31 ? (((0.00122074038f * (fTemp513 - (fTemp377 - fTemp160))) + ((0.000671407208f * (fTemp242 - (fTemp278 - (fTemp53 + (fTemp530 + fTemp112))))) + ((0.000183111057f * (fTemp244 + (fTemp55 - (fTemp156 - (fTemp157 + (fTemp515 - fTemp407)))))) + ((0.000122074038f * (fTemp254 + (fTemp243 + fTemp67))) + ((0.00054933317f * (fTemp260 + (fTemp305 + (fTemp258 - fTemp41)))) + ((0.00100711081f * (fTemp265 - (fTemp50 - (fTemp98 + (fTemp100 + (fTemp468 - fTemp416)))))) + ((0.00140385143f * (fTemp255 + (fTemp96 + (fTemp139 - fTemp129)))) + ((0.001617481f * (fTemp261 + (fTemp322 - (fTemp249 - fTemp432)))) + ((0.00115970336f * (fTemp276 + (fTemp311 - fTemp8))) + ((0.000854518265f * (fTemp283 + (fTemp61 + (fTemp166 + fTemp62)))) + ((0.000396740623f * (fTemp296 + (fTemp252 + fTemp302))) + ((0.000366222113f * (fTemp297 + (fTemp87 - fTemp280))) + ((0.000518814661f * (fTemp277 + (fTemp309 - (fTemp45 + fTemp330)))) + ((0.000457777642f * (fTemp270 + (fTemp435 + fTemp303))) + ((0.000305185094f * (fTemp318 - (fTemp285 + (fTemp37 - (fTemp26 + fTemp142))))) + ((3.05185094e-05f * (fTemp518 - (fTemp169 + (fTemp344 + fTemp81)))) + ((0.00112918485f * (fTemp453 - fTemp25)) + ((0.00268562883f * (fTemp286 - fTemp333)) + ((0.00219733268f * (fTemp32 - fTemp256)) + ((0.000610370189f * (fTemp107 + fTemp279)) + ((0.00155644398f * (fTemp253 + (fTemp75 + (fTemp104 + (fTemp335 + (fTemp428 - fTemp106)))))) + ((0.00213629566f * (fTemp325 + (fTemp423 + fTemp136))) + ((0.00186162908f * (fTemp48 + (fTemp21 - (fTemp68 - (fTemp95 - fTemp27))))) + ((0.00244148076f * (fTemp414 - fTemp307)) + ((0.00109866634f * (fTemp246 + (fTemp192 - fTemp275))) + ((0.00222785119f * (fTemp79 + (fTemp274 - (fTemp65 - fTemp382)))) + ((0.00390636921f * (fTemp293 + (fTemp422 + fTemp30))) + ((0.0045167394f * (fTemp88 + (fTemp287 - (fTemp495 + fTemp57)))) + ((0.00286873989f * (fTemp91 - (fTemp294 + fTemp386))) + ((0.00234992523f * (fTemp130 + fTemp105)) + ((0.00604266487f * (fTemp399 + (fTemp476 + fTemp467))) + ((0.0051576281f * (fTemp272 - (fTemp454 - fTemp29))) + ((0.00344859157f * (fTemp402 - fTemp165)) + ((0.00689718314f * (fTemp478 + fTemp74)) + ((0.00378429517f * (fTemp40 + fTemp400)) + ((0.000885036774f * (fTemp4 + fTemp401)) + ((0.00601214636f * (fTemp10 + fTemp102)) + ((0.00125125889f * (fTemp132 - (fTemp317 + (fTemp210 - fTemp175)))) + ((0.00250251777f * (fTemp356 + fTemp366)) + ((0.00302133244f * (fTemp358 - (fTemp441 + fTemp103))) + ((0.00119022187f * (fTemp257 + (fTemp66 - (fTemp111 - fTemp433)))) + ((0.009704886f * (fTemp282 - (fTemp393 + fTemp376))) + ((0.0012817774f * (fTemp434 + fTemp131)) + ((0.00271614734f * (fTemp12 + (fTemp328 + fTemp42))) + ((0.00311288796f * (fTemp361 - (fTemp392 - fTemp336))) + ((0.00238044374f * (fTemp514 - fTemp128)) + ((0.00369273964f * (fTemp82 + (fTemp89 + fTemp327))) + ((0.00299081393f * (fTemp299 + fTemp403)) + ((0.00341807306f * (fTemp93 - (fTemp449 - fTemp379))) + ((0.0042115543f * (fTemp9 - (fTemp440 - fTemp94))) + ((0.000640888698f * (fTemp415 + fTemp52)) + ((0.00177007355f * (fTemp390 - (fTemp387 + fTemp149))) + ((0.00527970213f * (fTemp271 - (fTemp151 - fTemp363))) + ((0.00167851802f * fTemp550) + (((0.00305185094f * fTemp349) + ((0.00466933195f * fTemp83) + ((0.00521866512f * fTemp43) + ((0.00399792474f * fTemp109) + ((0.00543229468f * fTemp323) + ((0.00595110934f * fTemp46) + ((0.00564592425f * fTemp110) + ((0.0028992584f * fTemp71) + (fTemp754 + (fTemp755 + ((0.00796533097f * fTemp353) + ((0.00854518265f * fTemp357) + ((0.00759910885f * fTemp268) + ((0.00823999755f * fTemp167) + ((0.00866725668f * fTemp63) + ((0.00384533219f * fTemp120) + ((0.00772118289f * fTemp20) + ((0.00827051606f * fTemp124) + ((0.00766014587f * fTemp125) + ((0.00665303506f * fTemp273) + ((0.00790429395f * fTemp133) + ((0.00820947904f * fTemp247) + ((0.00735496078f * fTemp137) + (fTemp527 + ((0.00308236945f * fTemp370) + ((0.000946073793f * fTemp146) + ((0.0071108127f * fTemp372) + ((0.0133976256f * fTemp306) + ((0.0153202917f * fTemp108) + ((0.0149540696f * fTemp144) + ((0.0112918485f * fTemp354) + ((0.0057985168f * fTemp374) + ((0.00247199927f * fTemp288) + ((0.00589007232f * fTemp150) + ((0.00863673817f * fTemp85) + ((0.0087282937f * fTemp359) + ((0.00668355357f * fTemp148) + ((0.00454725791f * fTemp114) + ((0.00558488723f * fTemp314) + ((0.00769066438f * fTemp59) + ((0.00897244178f * fTemp348) + ((0.0074159978f * fTemp290) + (fTemp640 + ((0.00189214759f * fTemp404) + (fTemp756 + ((0.00436414685f * fTemp92) + ((0.00253303628f * fTemp289) + ((0.00143436994f * fTemp15) + ((0.00274666585f * fTemp99) + ((0.00103762932f * fTemp281) + ((0.00228888821f * fTemp420) + ((0.003234962f * fTemp421) + ((0.00183111057f * fTemp369) + ((0.000244148076f * fTemp425) + ((0.00512710959f * fTemp429) + ((0.00500503555f * fTemp430) + ((0.00347911008f * fTemp431) + ((0.00173955504f * fTemp438) + ((0.00332651753f * fTemp450) + ((0.00637836847f * fTemp451) + (fTemp654 + ((0.00958281197f * fTemp385) + ((0.00976592302f * fTemp373) + ((0.00704977568f * fTemp121) + ((0.00845362712f * fTemp364) + ((0.0135196997f * fTemp394) + ((0.014679403f * fTemp458) + ((0.0106204413f * fTemp459) + ((0.00350962859f * fTemp460) + ((0.00479140598f * fTemp466) + ((0.004852443f * fTemp346) + ((0.0236213263f * fTemp471) + ((0.0349742137f * fTemp472) + ((0.0386059135f * fTemp473) + ((0.0382091738f * fTemp474) + ((0.0245368816f * fTemp475) + ((0.0425733216f * fTemp479) + ((0.0598773174f * fTemp480) + ((0.030854214f * fTemp481) + ((0.0384838395f * fTemp396) + ((0.0762047172f * fTemp485) + ((0.0924100503f * fTemp486) + ((0.0794702023f * fTemp487) + (((((((((((((((((((((((((((fTemp508 + (((0.0755943507f * fTemp0) + (0.380169064f * fTemp506)) + (0.846919179f * fTemp507))) + (0.51948607f * fTemp510)) + (0.189397871f * fTemp234)) + (0.464491725f * fTemp235)) + (0.436109513f * fTemp236)) + (0.310678422f * fTemp237)) + (0.119907223f * fTemp238)) + (0.00204474013f * fTemp239)) + (0.0360423587f * fTemp227)) + (0.115054779f * fTemp226)) + (0.112796411f * fTemp225)) + (0.140354618f * fTemp512)) + (0.138096258f * fTemp505)) + (0.0951261967f * fTemp504)) + (0.01126133f * fTemp503)) + (0.0825525671f * fTemp219)) + (0.159154028f * fTemp501)) + (0.153172404f * fTemp500)) + (0.128727078f * fTemp499)) + (0.0660115331f * fTemp498)) + (0.0284737702f * fTemp497)) + (0.0223700684f * fTemp496)) + (0.0241401419f * fTemp209)) + (0.0480971709f * fTemp492)) + (0.051637318f * fTemp491)) + (0.0169988107f * fTemp490)) + (0.0422070995f * fTemp488))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00149540696f * fTemp1)))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((9.15555283e-05f * (fTemp398 - (fTemp304 + (fTemp78 - (fTemp5 - (fTemp418 - fTemp138)))))) + ((0.000213629566f * (fTemp245 - (fTemp310 - (fTemp347 - fTemp340)))) + ((0.000152592547f * (fTemp251 - (fTemp284 - (fTemp34 + (fTemp412 + fTemp6))))) + ((0.00146488845f * (fTemp262 - fTemp269)) + ((0.00057985168f * (fTemp193 - fTemp291)) + ((6.10370189e-05f * (fTemp324 + (fTemp155 + fTemp266))) + ((0.000274666585f * (fTemp292 + (fTemp320 + (fTemp140 + (fTemp127 + (fTemp439 - fTemp380)))))) + ((0.000732444227f * (fTemp331 + (fTemp461 + fTemp381))) + ((0.000427259132f * (fTemp332 - (fTemp54 - (fTemp44 + (fTemp267 + fTemp145))))) + ((0.000793481246f * (fTemp7 + (fTemp23 + (fTemp319 + (fTemp312 - (fTemp250 + fTemp72)))))) + ((0.000976592302f * (fTemp168 + fTemp337)) + ((0.00137333293f * (fTemp11 + (fTemp19 - (fTemp51 + (fTemp126 - (fTemp316 - (fTemp70 - (fTemp522 - fTemp355)))))))) + ((0.00152592547f * (fTemp14 + (fTemp18 - (fTemp321 + (fTemp424 - fTemp64))))) + ((0.00106814783f * (fTemp339 - (fTemp47 + (fTemp345 + (fTemp384 + fTemp2))))) + ((0.000762962736f * (fTemp24 + (fTemp13 + fTemp38))) + ((0.0019531846f * (fTemp444 + fTemp28)) + ((0.00241096225f * (fTemp33 - fTemp264)) + ((0.000823999755f * (fTemp69 - (fTemp101 + (fTemp76 + (fTemp49 + fTemp159))))) + ((0.0022583697f * (fTemp3 + (fTemp447 - fTemp176))) + ((0.00518814661f * (fTemp519 + (fTemp463 + fTemp173))) + ((0.00170903653f * (fTemp411 - fTemp73)) + ((0.00619525742f * (fTemp177 - fTemp123)) + ((0.00427259132f * (fTemp342 - fTemp365)) + ((0.00207525864f * (fTemp84 - fTemp170)) + ((0.00415051728f * (fTemp191 - fTemp341)) + ((0.00424207281f * (fTemp326 - fTemp115)) + ((0.00231940672f * (fTemp17 - fTemp298)) + ((0.0103762932f * (fTemp295 - fTemp134)) + ((0.00875881221f * (fTemp86 - fTemp315)) + ((0.00216681417f * (fTemp90 - (fTemp437 + fTemp301))) + ((0.00158696249f * (fTemp343 + fTemp602)) + ((0.000335703604f * (fTemp375 + (fTemp516 - (fTemp457 - fTemp427)))) + ((0.00277718436f * (fTemp189 - fTemp405)) + ((0.00326548051f * (fTemp446 - fTemp406)) + ((0.000488296151f * (fTemp383 - fTemp408)) + ((0.00256355479f * (fTemp410 + (fTemp178 + fTemp122))) + ((0.00280770287f * (fTemp388 + (fTemp338 + fTemp417))) + ((0.00164799951f * (fTemp426 - fTemp413)) + ((0.00329599902f * (fTemp462 + fTemp442)) + ((0.0102542192f * (fTemp389 + fTemp179)) + ((0.0168156996f * (fTemp197 + fTemp367)) + ((0.00180059206f * fTemp634) + ((0.0025940733f * fTemp31) + ((0.00396740623f * fTemp161) + ((0.00531022064f * fTemp119) + ((0.00534073915f * fTemp163) + ((0.00357066561f * fTemp164) + ((0.0058290353f * fTemp352) + ((0.00198370311f * fTemp56) + ((0.00802636798f * fTemp263) + ((0.0100100711f * fTemp171) + ((0.00781273842f * fTemp172) + ((0.00335703604f * fTemp147) + ((0.00778221991f * fTemp97) + ((0.00949125644f * fTemp313) + ((0.00793481246f * fTemp259) + ((0.00131229591f * fTemp248) + ((0.00134281442f * fTemp409) + ((0.00494399853f * fTemp36) + ((0.00439466536f * fTemp39) + ((0.00201422162f * fTemp329) + ((0.00283822138f * fTemp443) + ((0.00720236823f * fTemp445) + ((0.011322367f * fTemp300) + ((0.0106814783f * fTemp116) + ((0.00848414563f * fTemp118) + ((0.00265511032f * fTemp448) + ((0.00610370189f * fTemp77) + ((0.0126651814f * fTemp180) + ((0.00888088625f * fTemp455) + ((0.00833155308f * fTemp152) + ((0.00814844202f * fTemp362) + ((0.00540177617f * fTemp456) + ((0.00891140476f * fTemp464) + ((0.00448622089f * fTemp465) + ((0.00701925717f * fTemp368) + ((0.00744651631f * fTemp181) + ((0.0251777712f * fTemp141) + ((0.0257271044f * fTemp182) + ((0.0184636991f * fTemp183) + (fTemp757 + ((0.00930814538f * fTemp185) + (fTemp758 + ((0.0145878475f * fTemp187) + ((0.00946073793f * fTemp188) + ((0.00985747855f * fTemp190) + ((0.018097477f * fTemp194) + ((0.0286568813f * fTemp195) + ((0.0308236945f * fTemp196) + ((0.0326242857f * fTemp469) + ((0.0359813236f * fTemp154) + ((0.0240485854f * fTemp470) + ((0.0432752483f * fTemp198) + ((0.0604266487f * fTemp199) + ((0.0574053153f * fTemp200) + ((0.0426648781f * fTemp58) + ((0.0213629566f * fTemp477) + ((0.0118717002f * fTemp201) + (fTemp759 + ((0.0143742179f * fTemp203) + ((0.0129093295f * fTemp204) + ((0.0316782147f * fTemp35) + ((0.0601519831f * fTemp482) + ((0.0722067952f * fTemp397) + ((0.0539262071f * fTemp483) + ((0.0107119968f * fTemp484) + ((0.0467238389f * fTemp153) + ((0.0956450105f * fTemp205) + ((0.131962031f * fTemp206) + ((0.139835805f * fTemp207) + ((0.10834071f * fTemp208) + ((0.0496230982f * fTemp135) + ((0.0206915494f * fTemp211) + ((0.0325937681f * fTemp212) + ((0.0244148076f * fTemp213) + ((0.0321359895f * fTemp214) + ((0.0431836918f * fTemp215) + ((0.0723288655f * fTemp216) + ((0.0902127177f * fTemp217) + ((0.0963164195f * fTemp218) + (((((((((((((((((((0.117831968f * fTemp229) + (0.534348607f * fTemp230)) + (0.595294058f * fTemp231)) + (0.564714491f * fTemp232)) + (0.452314824f * fTemp511)) + (0.142796099f * fTemp233)) + (0.188268691f * fTemp240)) + (0.376934111f * fTemp391)) + (0.475051105f * fTemp16)) + (0.388866842f * fTemp241)) + (0.145268112f * fTemp228)) + (0.052064579f * fTemp502)) + (0.111209452f * fTemp22)) + (0.160893589f * fTemp224)) + (0.139011815f * fTemp223)) + (0.104617454f * fTemp222)) + (0.0864589363f * fTemp221)) + (0.0156559963f * fTemp220)) + (0.0620136112f * fTemp493))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.000152592547f * (fTemp254 + (fTemp356 + fTemp283))) + ((0.000854518265f * (fTemp260 + (fTemp429 + fTemp5))) + ((0.00143436994f * (fTemp265 - (fTemp338 + fTemp93))) + ((0.00186162908f * (fTemp48 + fTemp261)) + ((0.00158696249f * (fTemp269 - (fTemp425 + fTemp403))) + ((0.000976592302f * (fTemp276 + (fTemp2 - (fTemp404 + fTemp57)))) + ((0.000488296151f * (fTemp309 + (fTemp145 - (fTemp259 - (fTemp9 + (fTemp26 - (fTemp250 - fTemp407))))))) + ((0.00146488845f * (fTemp270 + (fTemp317 - fTemp170))) + ((0.00222785119f * (fTemp318 - (fTemp243 - fTemp18))) + ((0.00265511032f * (fTemp445 + fTemp284)) + ((0.00253303628f * (fTemp138 + fTemp324)) + ((0.0019226661f * (fTemp292 + (fTemp448 + fTemp52))) + ((0.00183111057f * (fTemp10 - fTemp285)) + ((0.00241096225f * (fTemp176 - fTemp304)) + ((0.00112918485f * (fTemp337 + (fTemp482 + fTemp49))) + ((0.00210577715f * (fTemp8 - (fTemp289 + (fTemp522 - fTemp420)))) + ((0.00296029542f * (fTemp14 + (fTemp421 - fTemp33))) + ((0.000732444227f * (fTemp19 - (fTemp121 - fTemp32))) + ((0.000793481246f * (fTemp256 + (fTemp428 - (fTemp376 - fTemp392)))) + ((0.00479140598f * (fTemp34 - (fTemp27 + fTemp340))) + ((0.00497451704f * (fTemp411 + fTemp279)) + ((0.000274666585f * (fTemp286 - (fTemp40 - fTemp313))) + ((0.00131229591f * (fTemp341 - fTemp21)) + ((0.00662251655f * (fTemp55 - fTemp54)) + ((0.000640888698f * (fTemp68 - (fTemp164 + (fTemp274 - (fTemp413 + fTemp130))))) + ((0.00778221991f * (fTemp422 + fTemp61)) + ((0.00637836847f * (fTemp133 - fTemp347)) + ((0.0100405896f * (fTemp326 + fTemp79)) + ((0.00900296029f * (fTemp167 - fTemp88)) + ((0.00213629566f * (fTemp301 + fTemp159)) + ((0.00946073793f * (fTemp63 - fTemp71)) + ((0.0110171819f * (fTemp142 + fTemp353)) + ((0.00781273842f * (fTemp446 + fTemp357)) + ((0.00292977691f * (fTemp148 + fTemp268)) + ((0.00109866634f * (fTemp39 - fTemp166)) + ((0.00491348002f * (fTemp434 + fTemp363)) + ((0.00372325815f * (fTemp114 - fTemp169)) + ((0.00234992523f * (fTemp102 - (fTemp380 + fTemp115))) + ((0.00433362834f * (fTemp253 + (fTemp328 - fTemp111))) + ((0.00317392498f * (fTemp384 - fTemp78)) + ((0.00137333293f * (fTemp438 - fTemp132)) + ((0.00106814783f * (fTemp144 - (fTemp351 + (fTemp530 - fTemp418)))) + ((0.000305185094f * (fTemp327 - fTemp171)) + ((0.000244148076f * (fTemp336 + fTemp314)) + ((0.0012817774f * (fTemp66 + fTemp128)) + ((0.000427259132f * (fTemp175 + fTemp90)) + ((0.00204474013f * (fTemp386 - fTemp383)) + ((0.00827051606f * (fTemp447 + fTemp435)) + ((0.0104678487f * (fTemp467 - fTemp178)) + ((0.00268562883f * fTemp558) + ((0.00277718436f * fTemp11) + ((0.00271614734f * fTemp264) + (fTemp747 + (fTemp578 + ((0.00570696127f * fTemp47) + ((0.00732444227f * fTemp345) + ((0.00494399853f * fTemp246) + ((0.00558488723f * fTemp72) + ((0.00881984923f * fTemp75) + ((0.00924710836f * fTemp349) + ((0.0067751091f * fTemp293) + ((0.00686666463f * fTemp160) + ((0.0107425153f * fTemp105) + ((0.0124210333f * fTemp109) + ((0.0112308115f * fTemp323) + ((0.0074159978f * fTemp46) + ((0.0019531846f * fTemp110) + ((0.00338755455f * fTemp44) + ((0.0077517014f * fTemp350) + ((0.0109256264f * fTemp399) + ((0.00659199804f * fTemp74) + ((0.00335703604f * fTemp20) + ((0.00320444349f * fTemp124) + ((0.00231940672f * fTemp125) + ((0.00119022187f * fTemp123) + ((0.00411999878f * fTemp273) + ((0.00708029419f * fTemp247) + ((0.00366222113f * fTemp104) + ((0.00717184972f * fTemp370) + ((0.00851466414f * fTemp402) + ((0.00967436749f * fTemp358) + ((0.009704886f * fTemp298) + ((0.00949125644f * fTemp374) + ((0.00689718314f * fTemp263) + ((0.00299081393f * fTemp295) + ((0.00149540696f * fTemp359) + ((0.00238044374f * fTemp70) + ((0.000366222113f * fTemp514) + ((0.00311288796f * fTemp382) + ((0.00381481368f * fTemp355) + ((0.0045167394f * fTemp388) + ((0.000915555283f * fTemp122) + ((0.00332651753f * fTemp95) + ((0.00619525742f * fTemp94) + ((0.000701925717f * fTemp433) + ((0.00854518265f * fTemp436) + ((0.0028992584f * fTemp440) + ((0.00521866512f * fTemp444) + ((0.00573747978f * fTemp453) + ((0.0156865139f * fTemp454) + ((0.0245368816f * fTemp455) + ((0.0263679922f * fTemp152) + ((0.0189519953f * fTemp362) + ((0.00527970213f * fTemp456) + ((0.00469985045f * fTemp461) + ((0.0119937742f * fTemp462) + (fTemp748 + ((0.0165105145f * fTemp464) + ((0.0200811792f * fTemp389) + ((0.0242927335f * fTemp393) + ((0.0260628071f * fTemp465) + ((0.0221869573f * fTemp466) + ((0.0159001444f * fTemp183) + ((0.0386059135f * fTemp184) + ((0.0530716889f * fTemp185) + ((0.0492873937f * fTemp186) + ((0.0281991027f * fTemp187) + ((0.00164799951f * fTemp188) + ((0.0118717002f * fTemp196) + ((0.0375072472f * fTemp469) + ((0.060029909f * fTemp154) + ((0.0672322735f * fTemp470) + ((0.0542619117f * fTemp346) + ((0.02600177f * fTemp471) + ((0.00891140476f * fTemp198) + ((0.0593584999f * fTemp199) + ((0.104586929f * fTemp200) + ((0.132725f * fTemp58) + ((0.138798177f * fTemp477) + ((0.117130041f * fTemp478) + ((0.0633564293f * fTemp479) + ((0.0828577504f * fTemp397) + ((0.165440843f * fTemp483) + ((0.226294741f * fTemp484) + ((0.244880527f * fTemp396) + ((0.207464829f * fTemp485) + ((0.116794333f * fTemp486) + ((0.0375988036f * fTemp208) + ((0.171300396f * fTemp135) + ((0.26319164f * fTemp490) + ((0.299661249f * fTemp491) + ((0.279610574f * fTemp492) + ((0.199133277f * fTemp209) + ((0.0669881254f * fTemp210) + ((0.0942411572f * fTemp218) + ((0.22574541f * fTemp493) + ((0.267677844f * fTemp495) + ((0.241096228f * fTemp496) + ((0.188360244f * fTemp497) + ((0.120761745f * fTemp498) + ((0.0208136234f * fTemp499) + ((0.142246768f * fTemp224) + ((0.293893248f * fTemp22) + ((0.395886093f * fTemp502) + ((0.404400766f * fTemp503) + ((0.266029835f * fTemp504) + ((0.0143436994f * fTemp505) + (fTemp749 + ((0.170323804f * fTemp240) + ((0.273323774f * fTemp239) + ((0.405285805f * fTemp238) + ((0.439222395f * fTemp237) + ((((((0.115054779f * fTemp0) + (0.33823663f * fTemp506)) + (0.679158926f * fTemp507)) + (0.877224028f * fTemp508)) + (0.612720132f * fTemp510)) + (0.254738003f * fTemp236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.000946073793f * (fTemp513 - (fTemp330 + (fTemp42 - (fTemp139 - (fTemp149 - fTemp414)))))) + ((0.00134281442f * (fTemp43 + fTemp242)) + ((0.00152592547f * (fTemp398 + fTemp244)) + ((0.00057985168f * (fTemp251 + (fTemp258 - (fTemp294 + fTemp299)))) + ((0.00177007355f * (fTemp73 - fTemp255)) + ((0.000610370189f * (fTemp291 + (fTemp329 + fTemp343))) + ((0.00125125889f * (fTemp296 - (fTemp157 + (fTemp97 - (fTemp29 - (fTemp408 - fTemp248)))))) + ((0.00173955504f * (fTemp297 - (fTemp515 - fTemp272))) + ((0.00180059206f * (fTemp302 + (fTemp432 + fTemp85))) + ((0.00140385143f * (fTemp277 - (fTemp378 - fTemp333))) + ((0.00054933317f * (fTemp107 + fTemp305)) + ((9.15555283e-05f * (fTemp331 - (fTemp7 - (fTemp282 + (fTemp59 + (fTemp427 + fTemp334)))))) + ((0.00100711081f * (fTemp278 + (fTemp348 - (fTemp449 + fTemp64)))) + ((0.00201422162f * (fTemp518 - (fTemp280 + (fTemp424 + fTemp400)))) + ((0.00103762932f * (fTemp339 + fTemp332)) + ((0.00424207281f * (fTemp25 + (fTemp373 + fTemp163))) + ((0.00326548051f * (fTemp31 + (fTemp41 + (fTemp112 + (fTemp342 + fTemp100))))) + ((0.00274666585f * (fTemp487 - fTemp262)) + ((0.00402844325f * (fTemp287 - fTemp319)) + ((0.00216681417f * (fTemp325 - (fTemp406 - fTemp401))) + ((0.00393688772f * (fTemp275 + fTemp311)) + ((0.000885036774f * (fTemp127 + fTemp45)) + ((0.00625629444f * (fTemp267 - fTemp252)) + ((0.00427259132f * (fTemp300 - fTemp321)) + ((0.00762962736f * (fTemp344 + fTemp312)) + ((0.00408948027f * (fTemp415 - fTemp69)) + ((0.00347911008f * (fTemp62 + (fTemp450 - fTemp131))) + ((0.00863673817f * (fTemp106 + fTemp67)) + ((0.00308236945f * (fTemp156 - (fTemp412 + fTemp83))) + ((0.0057985168f * (fTemp271 - (fTemp423 + fTemp366))) + ((0.0101626636f * (fTemp519 + fTemp91)) + ((0.00244148076f * (fTemp76 - (fTemp235 + fTemp147))) + ((0.00799584948f * (fTemp119 + (fTemp460 - fTemp257))) + ((0.00448622089f * fTemp750) + ((0.000457777642f * (fTemp410 - fTemp120)) + ((0.00543229468f * (fTemp288 - fTemp137)) + ((0.00714133121f * (fTemp77 + fTemp84)) + ((0.0058290353f * (fTemp307 + (fTemp80 - (fTemp437 - fTemp103)))) + ((0.000183111057f * (fTemp12 - fTemp53)) + ((0.00473036896f * (fTemp108 - fTemp6)) + ((0.00598162785f * (fTemp416 - fTemp354)) + ((0.000823999755f * (fTemp13 + (fTemp136 - fTemp751))) + ((0.00170903653f * (fTemp409 + fTemp290)) + ((0.001617481f * (fTemp82 - (fTemp371 - (fTemp431 - fTemp379)))) + ((0.0022583697f * (fTemp87 - fTemp375)) + ((0.00247199927f * (fTemp335 - (fTemp387 + fTemp281))) + ((0.00415051728f * (fTemp249 - fTemp15)) + ((0.00769066438f * (fTemp468 - fTemp89)) + ((0.00189214759f * (fTemp99 + fTemp752)) + ((0.00122074038f * fTemp245) + ((0.00250251777f * fTemp310) + ((0.0025940733f * fTemp23) + ((0.00363170262f * fTemp24) + ((0.00418103579f * fTemp28) + ((0.00454725791f * fTemp37) + ((0.00439466536f * fTemp51) + ((0.00738547929f * fTemp60) + ((0.00701925717f * fTemp303) + ((0.00830103457f * fTemp155) + ((0.00909451582f * fTemp96) + ((0.00628681295f * fTemp101) + ((0.0130924406f * fTemp113) + ((0.0137943663f * fTemp117) + ((0.0116885891f * fTemp161) + ((0.0054933317f * fTemp322) + ((0.00836207159f * fTemp3) + ((0.00985747855f * fTemp352) + ((0.00671407208f * fTemp165) + ((0.00488296151f * fTemp168) + ((0.00457777642f * fTemp129) + ((0.00360118411f * fTemp50) + ((0.00790429395f * fTemp140) + ((0.00845362712f * fTemp56) + ((0.00436414685f * fTemp146) + ((0.00930814538f * fTemp30) + ((0.012817774f * fTemp372) + ((0.0132450331f * fTemp134) + ((0.0101016266f * fTemp306) + ((0.00369273964f * fTemp150) + ((0.00167851802f * fTemp315) + ((0.000671407208f * fTemp361) + ((0.000335703604f * fTemp316) + ((3.05185094e-05f * fTemp405) + ((0.00219733268f * fTemp390) + ((0.00585955381f * fTemp417) + ((0.000213629566f * fTemp36) + ((0.0038758507f * fTemp65) + ((0.00747703481f * fTemp360) + ((0.00595110934f * fTemp377) + ((0.003234962f * fTemp426) + ((0.00283822138f * fTemp17) + ((0.000122074038f * fTemp430) + ((0.00341807306f * fTemp439) + ((0.00704977568f * fTemp381) + (fTemp521 + ((0.00604266487f * fTemp442) + ((0.00503555406f * fTemp443) + ((0.0121158483f * fTemp116) + ((0.0164189581f * fTemp118) + ((0.0152897732f * fTemp177) + ((0.0114139225f * fTemp179) + ((0.00750755332f * fTemp180) + ((0.00897244178f * fTemp451) + (fTemp753 + ((0.00753807183f * fTemp385) + ((0.00991851557f * fTemp457) + ((0.0226752535f * fTemp364) + ((0.0303659178f * fTemp394) + ((0.0301828068f * fTemp458) + ((0.0215765871f * fTemp459) + ((0.027680289f * fTemp368) + ((0.0416272469f * fTemp181) + ((0.0442518406f * fTemp86) + ((0.0363475457f * fTemp367) + ((0.022705771f * fTemp141) + ((0.00546281319f * fTemp182) + ((0.0186468102f * fTemp189) + ((0.0302438438f * fTemp151) + ((0.0360118411f * fTemp190) + ((0.0372325815f * fTemp191) + ((0.0335703604f * fTemp192) + ((0.0262459181f * fTemp193) + ((0.01803644f * fTemp194) + ((0.00674459059f * fTemp195) + ((0.00787377544f * fTemp472) + ((0.0390026569f * fTemp473) + ((0.0609759837f * fTemp474) + ((0.0702841282f * fTemp475) + ((0.0625019073f * fTemp476) + ((0.0353709534f * fTemp197) + ((0.0106509598f * fTemp480) + ((0.081667535f * fTemp481) + ((0.126407668f * fTemp201) + ((0.139530629f * fTemp202) + ((0.130069882f * fTemp203) + ((0.106387526f * fTemp204) + (((((((((((((((((((((((((((((((((fTemp601 + ((0.103915527f * fTemp229) + (0.812952042f * fTemp230))) + (0.679647207f * fTemp232)) + (0.275307477f * fTemp511)) + (0.127109587f * fTemp233)) + (0.131992549f * fTemp234)) + (0.0642109439f * fTemp16)) + (0.234504223f * fTemp241)) + (0.336680204f * fTemp228)) + (0.383587152f * fTemp227)) + (0.399182111f * fTemp226)) + (0.374889374f * fTemp225)) + (0.238380075f * fTemp512)) + (0.0113528855f * fTemp223)) + (0.140293583f * fTemp222)) + (0.225012973f * fTemp221)) + (0.268929094f * fTemp220)) + (0.27362895f * fTemp219)) + (0.220099494f * fTemp501)) + (0.111117892f * fTemp500)) + (0.071474351f * fTemp217)) + (0.200201422f * fTemp216)) + (0.263710439f * fTemp215)) + (0.282509834f * fTemp214)) + (0.270516068f * fTemp213)) + (0.208166748f * fTemp212)) + (0.0865504965f * fTemp211)) + (0.101748712f * fTemp207)) + (0.208105713f * fTemp206)) + (0.260139763f * fTemp205)) + (0.25778985f * fTemp153)) + (0.207922608f * fTemp489)) + (0.119876705f * fTemp488)) + (0.0640583485f * fTemp35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000396740623f * (fTemp92 + fTemp1))))) : (iSlow30 ? (((0.000946073793f * (fTemp513 - (fTemp56 + fTemp23))) + ((0.00057985168f * (fTemp45 + fTemp242)) + ((3.05185094e-05f * (fTemp244 + (fTemp159 + (fTemp493 + (fTemp0 - fTemp500))))) + ((0.000488296151f * (fTemp161 - fTemp398)) + ((0.000244148076f * (fTemp254 - (fTemp157 - (fTemp207 + (fTemp209 + (fTemp213 + (fTemp228 + fTemp227))))))) + ((0.0019531846f * fTemp738) + ((0.00253303628f * (fTemp349 + fTemp255)) + ((0.000701925717f * (fTemp283 - (fTemp514 + fTemp309))) + ((0.000305185094f * (fTemp51 + fTemp270)) + ((0.00271614734f * (fTemp156 + fTemp292)) + ((0.00296029542f * (fTemp330 - (fTemp402 - fTemp331))) + ((0.00262459181f * (fTemp278 + fTemp739)) + ((0.00341807306f * (fTemp332 - (fTemp334 + fTemp322))) + ((0.00424207281f * (fTemp280 + fTemp7)) + ((0.00256355479f * (fTemp18 - (fTemp75 + (fTemp105 - (fTemp445 - fTemp418))))) + ((0.000396740623f * (fTemp215 + fTemp339)) + ((0.00204474013f * (fTemp77 - fTemp24)) + ((0.0012817774f * (fTemp145 + fTemp333)) + ((0.00222785119f * (fTemp256 + (fTemp146 + fTemp163))) + ((0.00463881344f * (fTemp61 + fTemp264)) + ((0.000854518265f * (fTemp60 + fTemp286)) + ((0.0090334788f * (fTemp266 - (fTemp423 + fTemp107))) + ((0.00103762932f * (fTemp21 - (fTemp6 - fTemp119))) + ((0.000457777642f * (fTemp33 - (fTemp485 - fTemp95))) + ((0.000335703604f * (fTemp492 + fTemp68)) + ((0.00115970336f * (fTemp272 + fTemp69)) + ((0.00268562883f * (fTemp55 + (fTemp295 - fTemp370))) + ((0.00723288674f * (fTemp246 - fTemp648)) + ((0.00753807183f * (fTemp2 - (fTemp64 + fTemp128))) + ((0.00726340525f * (fTemp62 - (fTemp393 + fTemp314))) + ((0.00689718314f * (fTemp303 - (fTemp13 - fTemp401))) + ((0.00390636921f * (fTemp271 - (fTemp112 - fTemp88))) + ((0.00283822138f * (fTemp106 - fTemp109)) + ((0.00210577715f * (fTemp36 - fTemp323)) + ((0.000823999755f * (fTemp110 - (fTemp206 - fTemp171))) + ((6.10370189e-05f * (fTemp113 + (fTemp211 + (fTemp499 + (fTemp501 + (fTemp219 - (fTemp222 - fTemp687))))))) + ((0.000183111057f * (fTemp117 + (fTemp497 - (fTemp22 - (fTemp226 + fTemp740))))) + ((0.00875881221f * (fTemp456 - fTemp519)) + ((0.0035401471f * (fTemp377 - fTemp123)) + ((0.00714133121f * (fTemp170 - (fTemp70 + fTemp361))) + ((0.00198370311f * (fTemp30 - (fTemp121 - fTemp372))) + ((0.0155644398f * (fTemp177 - fTemp428)) + ((0.0438550971f * (fTemp183 - fTemp447)) + ((0.000640888698f * (fTemp490 + fTemp208)) + ((9.15555283e-05f * (fTemp212 + (fTemp218 + (fTemp498 + (fTemp221 - (fTemp503 - (fTemp234 + fTemp734))))))) + (((0.00112918485f * fTemp260) + ((0.00177007355f * fTemp276) + ((0.00119022187f * fTemp318) + ((0.00207525864f * fTemp285) + ((0.00173955504f * fTemp304) + ((0.00180059206f * fTemp310) + ((0.00250251777f * fTemp518) + ((0.00473036896f * fTemp8) + ((0.00442518387f * fTemp11) + ((0.00149540696f * fTemp19) + ((0.00396740623f * fTemp319) + ((0.00564592425f * fTemp34) + ((0.00747703481f * fTemp320) + ((0.006469924f * fTemp47) + ((0.0042115543f * fTemp321) + ((0.000885036774f * fTemp307) + ((0.00619525742f * fTemp345) + ((0.00625629444f * fTemp155) + ((0.00506607257f * fTemp347) + ((0.00454725791f * fTemp293) + ((0.00357066561f * fTemp101) + ((0.000610370189f * fTemp71) + ((0.00378429517f * fTemp164) + ((0.00643940549f * fTemp44) + ((0.00988799706f * fTemp350) + ((0.0131229591f * fTemp399) + ((0.0136417737f * fTemp353) + ((0.011383404f * fTemp357) + ((0.00543229468f * fTemp38) + ((0.00692770164f * fTemp168) + ((0.0104068117f * fTemp169) + ((0.0105288858f * fTemp73) + ((0.00329599902f * fTemp120) + ((0.00305185094f * fTemp365) + ((0.00891140476f * fTemp78) + ((0.00921658985f * fTemp129) + (fTemp700 + ((0.00671407208f * fTemp50) + ((0.00134281442f * fTemp341) + ((0.00137333293f * fTemp134) + ((0.00311288796f * fTemp326) + ((0.00344859157f * fTemp263) + ((0.0158391073f * fTemp300) + ((0.0292367321f * fTemp116) + ((0.0295113996f * fTemp118) + ((0.00955229346f * fTemp179) + (fTemp741 + ((0.024567401f * fTemp454) + ((0.0321970284f * fTemp455) + ((0.0309457686f * fTemp152) + ((0.025818659f * fTemp362) + ((0.0603350922f * fTemp463) + ((0.0786461979f * fTemp464) + ((0.0506607257f * fTemp389) + ((0.0242622159f * fTemp182) + ((0.0545365773f * fTemp184) + ((0.0682088658f * fTemp185) + ((0.0771202743f * fTemp186) + ((0.0766624957f * fTemp187) + ((0.0546586514f * fTemp188) + ((0.0384838395f * fTemp189) + ((0.0681478307f * fTemp195) + ((0.149113432f * fTemp196) + ((0.134983361f * fTemp469) + ((0.0550248735f * fTemp154) + ((0.0131534776f * fTemp473) + ((0.009704886f * fTemp199) + ((0.025940733f * fTemp200) + ((0.0383007303f * fTemp58) + ((0.0173039958f * fTemp477) + ((0.0468153954f * fTemp478) + ((0.0863063484f * fTemp479) + ((0.117069006f * fTemp480) + ((0.223792225f * fTemp204) + ((0.845423758f * fTemp35) + (fTemp482 + ((0.679006338f * fTemp397) + ((0.273018599f * fTemp483) + ((0.0702536106f * fTemp484) + ((0.0188604388f * fTemp396) + ((0.000366222113f * fTemp216) + fTemp728))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00106814783f * fTemp1))))))))))))))))))))))))))))))))))))))))))))))) - ((0.000427259132f * (fTemp251 - (fTemp312 - (fTemp79 + (fTemp360 - (fTemp491 - (fTemp504 - fTemp214))))))) + ((0.00265511032f * (fTemp325 - fTemp261)) + ((0.00241096225f * (fTemp41 - fTemp269)) + ((0.00054933317f * (fTemp291 - (fTemp306 - fTemp46))) + ((0.00155644398f * (fTemp296 + (fTemp28 + (fTemp282 - fTemp142)))) + ((0.00231940672f * (fTemp302 - (fTemp48 + (fTemp151 - fTemp354)))) + ((0.00186162908f * (fTemp63 - fTemp284)) + ((0.00234992523f * (fTemp25 - fTemp324)) + ((0.00466933195f * (fTemp115 - fTemp337)) + ((0.00360118411f * (fTemp49 - fTemp14)) + ((0.000122074038f * (fTemp31 - (fTemp54 + (fTemp220 + (fTemp512 + (fTemp225 + (fTemp16 + (fTemp391 + (fTemp236 + (fTemp235 + (fTemp233 + fTemp674))))))))))) + ((0.00280770287f * (fTemp140 - fTemp262)) + ((0.00717184972f * (fTemp167 - fTemp279)) + ((0.00704977568f * fTemp742) + ((0.00469985045f * (fTemp311 + (fTemp205 - fTemp39))) + ((0.00433362834f * (fTemp37 - (fTemp43 - (fTemp103 - fTemp96)))) + ((0.00848414563f * (fTemp315 - fTemp252)) + ((0.00668355357f * (fTemp92 - fTemp67)) + ((0.00494399853f * (fTemp97 - fTemp83)) + ((0.00427259132f * (fTemp247 - fTemp91)) + ((0.00131229591f * (fTemp53 - fTemp287)) + ((0.00653096102f * (fTemp388 - fTemp268)) + ((0.00680562761f * (fTemp317 + fTemp3)) + ((0.00964384899f * (fTemp352 + (fTemp175 + fTemp165))) + ((0.0038758507f * (fTemp358 - fTemp74)) + ((0.00738547929f * (fTemp301 - fTemp400)) + ((0.0074159978f * (fTemp102 + (fTemp390 + fTemp59))) + ((0.0111392559f * (fTemp4 + fTemp125)) + ((0.00445570238f * (fTemp141 - fTemp132)) + ((0.00140385143f * (fTemp342 + fTemp273)) + ((0.00338755455f * (fTemp133 + (fTemp89 - fTemp122))) + ((0.00448622089f * (fTemp267 + fTemp137)) + ((0.00457777642f * (fTemp406 + fTemp10)) + ((0.000152592547f * (fTemp275 - (fTemp462 + (fTemp210 + (fTemp217 + (fTemp495 + (fTemp496 - (fTemp223 + (fTemp224 + (fTemp502 + (fTemp505 - (fTemp240 + (fTemp239 + (fTemp511 + fTemp237)))))))))))))) + ((0.00363170262f * (fTemp410 + fTemp257)) + ((0.00531022064f * (fTemp356 + fTemp259)) + ((0.00604266487f * (fTemp328 + fTemp5)) + ((0.00610370189f * (fTemp299 + fTemp343)) + ((0.00369273964f * (fTemp416 + fTemp243)) + ((0.00595110934f * (fTemp98 + (fTemp139 + fTemp743))) + ((0.0112308115f * (fTemp178 + fTemp100)) + ((0.0105594043f * (fTemp87 + fTemp52)) + ((0.0132145146f * (fTemp425 + fTemp413)) + ((0.000671407208f * fTemp245) + ((0.00216681417f * fTemp297) + ((0.00213629566f * fTemp277) + ((0.00152592547f * fTemp305) + ((0.0051576281f * fTemp340) + (fTemp744 + ((0.00143436994f * fTemp160) + ((0.00991851557f * fTemp166) + ((0.0093691824f * fTemp363) + ((0.0151982177f * fTemp20) + ((0.0159306619f * fTemp124) + ((0.00411999878f * fTemp80) + ((0.00244148076f * fTemp104) + ((0.00286873989f * fTemp366) + ((0.0045167394f * fTemp298) + ((0.00100711081f * fTemp108) + ((0.00219733268f * fTemp144) + ((0.000762962736f * fTemp374) + ((0.00146488845f * fTemp172) + (fTemp174 + ((0.00408948027f * fTemp288) + ((0.00308236945f * fTemp150) + ((0.0022583697f * fTemp85) + ((0.00164799951f * fTemp359) + ((0.00399792474f * fTemp114) + ((0.00509659108f * fTemp131) + ((0.00518814661f * fTemp147) + ((0.00488296151f * fTemp313) + ((0.0061342204f * fTemp57) + ((0.00790429395f * fTemp348) + (fTemp745 + ((0.00823999755f * fTemp29) + ((0.00616473891f * fTemp126) + ((0.00766014587f * fTemp90) + ((0.00772118289f * fTemp274) + ((0.00933866389f * fTemp351) + ((0.0110782189f * fTemp82) + ((0.0119022187f * fTemp403) + ((0.0111087374f * fTemp404) + ((0.00686666463f * fTemp127) + ((0.00567644276f * fTemp248) + ((0.00830103457f * fTemp375) + (fTemp731 + ((0.00170903653f * fTemp42) + ((0.001617481f * fTemp136) + ((0.00314340647f * fTemp335) + ((0.00460829493f * fTemp32) + ((0.0058290353f * fTemp40) + ((0.00674459059f * fTemp327) + ((0.00479140598f * fTemp405) + ((0.00476088747f * fTemp130) + ((0.00527970213f * fTemp378) + ((0.00503555406f * fTemp289) + (fTemp746 + ((0.00347911008f * fTemp9) + ((0.00637836847f * fTemp382) + ((0.00756859034f * fTemp355) + ((0.00833155308f * fTemp15) + ((0.00888088625f * fTemp384) + ((0.00976592302f * fTemp26) + ((0.0106204413f * fTemp380) + ((0.0109256264f * fTemp99) + ((0.0101016266f * fTemp336) + (fTemp732 + ((0.00512710959f * fTemp138) + ((0.00778221991f * fTemp81) + ((0.00939970091f * fTemp407) + ((0.0103762932f * fTemp408) + ((0.0105899228f * fTemp66) + ((0.0107119968f * fTemp250) + ((0.00857570115f * fTemp383) + ((0.00552385021f * fTemp409) + ((0.00402844325f * fTemp386) + ((0.0102542192f * fTemp411) + ((0.0130924406f * fTemp412) + ((0.0107730338f * fTemp414) + ((0.004852443f * fTemp415) + ((0.00335703604f * fTemp417) + ((0.0104983672f * fTemp420) + ((0.0171208847f * fTemp421) + ((0.0202337727f * fTemp369) + ((0.0196844395f * fTemp515) + ((0.0166631062f * fTemp149) + ((0.0119937742f * fTemp329) + ((0.00622577593f * fTemp65) + ((0.00158696249f * fTemp94) + ((0.00540177617f * fTemp422) + ((0.0123905148f * fTemp424) + ((0.0119632557f * fTemp426) + ((0.00994903408f * fTemp17) + ((0.0103152562f * fTemp338) + ((0.0122684408f * fTemp427) + ((0.0177617725f * fTemp429) + ((0.0195013285f * fTemp430) + ((0.0208441429f * fTemp431) + ((0.0209967345f * fTemp432) + ((0.0217902157f * fTemp433) + ((0.0221259203f * fTemp434) + ((0.0217291787f * fTemp435) + ((0.0191961434f * fTemp436) + ((0.016235847f * fTemp437) + ((0.0126346629f * fTemp438) + ((0.0133365886f * fTemp439) + ((0.0170293283f * fTemp381) + ((0.0196234025f * fTemp344) + ((0.0169377737f * fTemp111) + ((0.0115665151f * fTemp294) + ((0.00997955259f * fTemp440) + ((0.0122989593f * fTemp392) + ((0.0189214759f * fTemp441) + ((0.0239875484f * fTemp442) + ((0.0237128828f * fTemp443) + ((0.0171514023f * fTemp522) + ((0.00598162785f * fTemp176) + ((0.00537125766f * fTemp444) + ((0.0385448784f * fTemp249) + ((0.0578630939f * fTemp387) + ((0.0583513901f * fTemp446) + ((0.0191656239f * fTemp448) + ((0.000213629566f * fTemp180) + ((0.0183416251f * fTemp376) + ((0.0335703604f * fTemp449) + ((0.0372020639f * fTemp450) + ((0.0349436924f * fTemp451) + ((0.0284737702f * fTemp452) + ((0.0227973275f * fTemp385) + ((0.0127872555f * fTemp373) + ((0.0133671071f * fTemp457) + ((0.039124731f * fTemp364) + ((0.0633259043f * fTemp394) + ((0.0874660462f * fTemp458) + ((0.100619525f * fTemp459) + ((0.0965300426f * fTemp460) + ((0.0599688701f * fTemp461) + ((0.055055391f * fTemp465) + ((0.0832239762f * fTemp466) + ((0.086733602f * fTemp467) + ((0.0878627896f * fTemp468) + ((0.0898159742f * fTemp368) + ((0.0867030844f * fTemp181) + ((0.0664998293f * fTemp86) + ((0.0371715464f * fTemp367) + ((0.0289620664f * fTemp190) + ((0.0716574639f * fTemp191) + ((0.0983916745f * fTemp192) + ((0.0994598195f * fTemp193) + ((0.0375072472f * fTemp194) + ((0.0728476793f * fTemp470) + ((0.143498033f * fTemp346) + ((0.128086179f * fTemp471) + ((0.02600177f * fTemp472) + ((0.00183111057f * fTemp474) + ((0.0609149449f * fTemp475) + ((0.0828272328f * fTemp476) + ((0.0885647163f * fTemp197) + ((0.0447096154f * fTemp198) + ((0.0745567158f * fTemp481) + ((0.425366998f * fTemp201) + ((0.654591501f * fTemp202) + ((0.439405501f * fTemp203) + ((0.0214545131f * fTemp486) + ((0.0341807306f * fTemp487) + ((0.034272287f * fTemp488) + ((0.0135196997f * fTemp153) + (0.0255134739f * fTemp489))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.0238959938f * (fTemp254 + fTemp245)) + ((0.0237434004f * (fTemp52 + fTemp251)) + ((0.0305795465f * (fTemp339 + fTemp297)) + ((0.0290231034f * (fTemp126 + fTemp284)) + ((0.0277108066f * (fTemp279 + fTemp7)) + ((0.0280465111f * (fTemp253 + fTemp337)) + ((0.0250251777f * (fTemp378 + fTemp325)) + ((0.014435255f * (fTemp45 - (fTemp46 + fTemp271))) + ((0.00109866634f * (fTemp67 - (fTemp263 + (fTemp489 + (fTemp499 + fTemp734))))) + ((0.00927762687f * fTemp735) + ((0.0301522873f * fTemp736) + ((0.027619252f * (fTemp377 - fTemp71)) + ((0.0386669524f * (fTemp9 - fTemp161)) + ((0.035950806f * (fTemp127 - fTemp365)) + ((0.0433362834f * (fTemp87 - fTemp27)) + ((0.00198370311f * (fTemp267 - fTemp326)) + ((0.000152592547f * (fTemp480 - fTemp172)) + ((0.000732444227f * (fTemp173 + (fTemp394 - (fTemp224 + fTemp496)))) + ((0.00314340647f * (fTemp13 - fTemp259)) + ((0.0587786511f * (fTemp327 + fTemp112)) + ((0.000305185094f * (fTemp204 + fTemp479)) + ((0.000457777642f * (fTemp35 - (fTemp492 + fTemp692))) + ((0.000488296151f * (fTemp482 - (fTemp485 + (fTemp215 + (fTemp493 + (fTemp237 + fTemp241)))))) + ((((((0.0246284381f * fTemp260) + ((0.025757622f * fTemp265) + ((0.0267342143f * fTemp255) + ((0.027558215f * fTemp261) + ((0.0285958443f * fTemp269) + ((0.0298776217f * fTemp276) + ((0.0309457686f * fTemp283) + ((0.0313425101f * fTemp291) + ((0.031037325f * fTemp296) + ((0.0303353984f * fTemp302) + ((0.0300912503f * fTemp277) + ((0.0297250282f * fTemp305) + ((0.0293893255f * fTemp309) + ((0.0293282885f * fTemp270) + ((0.0293588061f * fTemp318) + ((0.0281380657f * fTemp324) + ((0.0269478448f * fTemp292) + ((0.02600177f * fTemp330) + ((0.0255439933f * fTemp278) + ((0.0257881414f * fTemp285) + ((0.0266731773f * fTemp310) + ((0.0271004364f * fTemp518) + ((0.0274056215f * fTemp332) + ((0.0289620664f * fTemp14) + ((0.0295419171f * fTemp18) + ((0.0306100659f * fTemp23) + ((0.0292062145f * fTemp25) + ((0.0279854741f * fTemp28) + ((0.0268562883f * fTemp31) + ((0.0260933265f * fTemp333) + ((0.0271614734f * fTemp34) + ((0.0279244371f * fTemp264) + ((0.0269173253f * fTemp286) + ((0.0224311054f * fTemp311) + ((0.0197454765f * fTemp340) + ((0.0173345134f * fTemp37) + ((0.0155034028f * fTemp41) + ((0.0143742179f * fTemp280) + ((0.0152897732f * fTemp320) + ((0.0169072542f * fTemp266) + ((0.0185552537f * fTemp252) + ((0.0196844395f * fTemp47) + ((0.0198980682f * fTemp321) + ((0.0192571804f * fTemp48) + ((0.0182805881f * fTemp21) + ((0.0174871068f * fTemp51) + ((0.0169377737f * fTemp54) + ((0.0165715516f * fTemp312) + ((0.016113773f * fTemp60) + ((0.0156254768f * fTemp307) + ((0.0152592547f * fTemp33) + ((0.0143131809f * fTemp69) + ((0.0131229591f * fTemp55) + ((0.0114749596f * fTemp61) + ((0.00967436749f * fTemp345) + ((0.00796533097f * fTemp246) + ((0.00460829493f * fTemp62) + ((0.00280770287f * fTemp303) + ((0.001617481f * fTemp103) + ((0.00140385143f * fTemp288) + ((0.00619525742f * fTemp12) + ((0.00891140476f * fTemp314) + ((0.01126133f * fTemp59) + ((0.0134281442f * fTemp348) + ((0.0155644398f * fTemp315) + ((0.0180059206f * fTemp290) + ((0.0209967345f * fTemp29) + ((0.0247199927f * fTemp361) + ((0.0335398428f * fTemp5) + ((0.0375682861f * fTemp317) + ((0.0404370241f * fTemp128) + ((0.0415967293f * fTemp90) + ((0.0413220637f * fTemp316) + ((0.0402539149f * fTemp258) + ((0.0389111005f * fTemp274) + ((0.0380260646f * fTemp351) + ((0.0379650258f * fTemp82) + ((0.0384838395f * fTemp403) + ((0.0387585089f * fTemp404) + ((0.0379955433f * fTemp107) + ((0.0330210291f * fTemp248) + ((0.0303048808f * fTemp343) + ((0.0290841404f * fTemp64) + ((0.0297555476f * fTemp375) + ((0.0354625098f * fTemp371) + ((0.0399182104f * fTemp42) + ((0.0452589504f * fTemp514) + ((0.0506607257f * fTemp136) + ((0.0553300567f * fTemp335) + ((0.0611590929f * fTemp243) + ((0.0629291683f * fTemp334) + ((0.0643635392f * fTemp49) + ((0.0653401315f * fTemp32) + ((0.0654622018f * fTemp40) + ((0.0634784997f * fTemp92) + ((0.0516068004f * fTemp299) + ((0.0429395437f * fTemp356) + ((0.0343638435f * fTemp405) + ((0.0278634001f * fTemp130) + ((0.0258491784f * fTemp98) + ((0.028992584f * fTemp139) + ((0.0328684337f * fTemp289) + ((0.03607288f * fTemp93) + ((0.0417188033f * fTemp406) + ((0.0464491732f * fTemp382) + ((0.0524613187f * fTemp355) + ((0.0572527237f * fTemp15) + ((0.0580462068f * fTemp384) + ((0.0542924292f * fTemp26) + ((0.0484328754f * fTemp380) + ((0.0442518406f * fTemp100) + ((0.0445875414f * fTemp99) + ((0.0495620593f * fTemp336) + ((0.0561540574f * fTemp379) + ((0.0609149449f * fTemp301) + ((0.0625934601f * fTemp281) + ((0.0620746501f * fTemp138) + ((0.059480574f * fTemp516) + ((0.0529801324f * fTemp81) + ((0.0424817652f * fTemp407) + ((0.0314340666f * fTemp408) + ((0.0215765871f * fTemp66) + ((0.0253608823f * fTemp250) + ((0.0335093252f * fTemp4) + ((0.0527054667f * fTemp383) + ((0.0610980578f * fTemp409) + ((0.0672322735f * fTemp410) + ((0.0693075359f * fTemp386) + ((0.0668965727f * fTemp388) + ((0.061830502f * fTemp411) + ((0.056611836f * fTemp412) + ((0.0518509485f * fTemp413) + ((0.0420545079f * fTemp390) + ((0.0346079916f * fTemp415) + ((0.0248115491f * fTemp416) + ((0.0153508103f * fTemp417) + ((0.0057985168f * fTemp36) + ((0.00247199927f * fTemp39) + ((0.011383404f * fTemp106) + ((0.0346690267f * fTemp95) + ((0.0259102155f * fTemp94) + ((0.0168156996f * fTemp89) + ((0.0100711081f * fTemp422) + ((0.00164799951f * fTemp423) + ((0.0106509598f * fTemp429) + ((0.0429700613f * fTemp430) + ((0.0543229468f * fTemp431) + ((0.0454115421f * fTemp432) + ((0.02438429f * fTemp433) + ((0.0721457601f * fTemp328) + ((0.124362923f * fTemp444) + ((0.155644402f * fTemp445) + ((0.156407356f * fTemp300) + ((0.124576554f * fTemp116) + ((0.06680502f * fTemp118) + ((0.0083925901f * fTemp152) + ((0.027741326f * fTemp362) + ((0.0336924344f * fTemp456) + ((0.0319833979f * fTemp457) + ((0.0228888821f * fTemp364) + ((0.0344859175f * fTemp389) + ((0.102969453f * fTemp393) + ((0.163243502f * fTemp465) + ((0.158635214f * fTemp466) + ((0.0763267949f * fTemp467) + ((0.0233161412f * fTemp186) + ((0.0150456252f * fTemp187) + ((0.121555224f * fTemp195) + ((0.485854685f * fTemp196) + ((0.858577251f * fTemp469) + (fTemp154 + ((0.822473824f * fTemp470) + ((0.495498508f * fTemp346) + ((0.247657701f * fTemp471) + ((0.126895964f * fTemp472) + (((9.15555283e-05f * fTemp201) + ((0.000122074038f * fTemp202) + ((0.000183111057f * fTemp203) + ((0.000213629566f * fTemp483) + (0.000427259132f * fTemp397))))) + (0.0525833927f * fTemp473))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.0238044374f * fTemp398)) + (0.0230719931f * fTemp244)) + (0.0216376241f * fTemp242)) + (0.0197759941f * fTemp513))))))))))))))))))))))))) - (((0.0255745109f * (fTemp366 - fTemp331)) + ((0.0262459181f * (fTemp372 - fTemp304)) + ((0.0282906592f * (fTemp350 - fTemp8)) + ((0.0285653248f * (fTemp268 - fTemp11)) + ((0.025879696f * (fTemp329 - fTemp256)) + ((0.0261238441f * (fTemp298 - fTemp262)) + ((0.0266426597f * (fTemp257 - fTemp319)) + ((0.0149235511f * (fTemp159 - fTemp68)) + ((0.00631733146f * (fTemp313 - fTemp2)) + ((0.000640888698f * (fTemp155 + (fTemp486 + (fTemp0 + fTemp235)))) + ((0.0136112552f * (fTemp293 - (fTemp176 - fTemp144))) + ((0.0141300699f * (fTemp424 + fTemp83)) + ((0.0133365886f * (fTemp131 + fTemp160)) + ((0.04031495f * (fTemp137 + fTemp352)) + ((0.0392162837f * (fTemp439 + fTemp120)) + ((0.0339365825f * (fTemp125 + fTemp124)) + ((0.0249946602f * (fTemp53 + fTemp56)) + ((0.0243537705f * (fTemp435 + fTemp84)) + ((0.025818659f * (fTemp463 + fTemp358)) + ((0.000885036774f * (fTemp295 + (fTemp503 + fTemp211))) + ((0.000671407208f * (fTemp227 + fTemp171)) + ((3.05185094e-05f * (fTemp150 - (fTemp57 + (fTemp484 + fTemp481)))) + ((0.0320139155f * (fTemp197 - fTemp70)) + ((0.0472731702f * (fTemp437 - fTemp414)) + ((0.0376598425f * (fTemp175 + fTemp369)) + ((0.0364085808f * (fTemp425 - fTemp530)) + ((0.000823999755f * (fTemp434 + (fTemp477 + (fTemp221 + fTemp497)))) + ((0.111697748f * (fTemp188 + fTemp373)) + ((0.000854518265f * (fTemp487 + (fTemp212 + (fTemp502 + (fTemp511 + fTemp225))))) + ((0.00100711081f * (fTemp219 + fTemp488)) + ((0.00115970336f * (fTemp500 + fTemp153)) + ((0.00112918485f * (fTemp501 + fTemp205)) + ((0.000976592302f * (fTemp206 + (fTemp504 + (fTemp505 + (fTemp232 + fTemp512))))) + ((0.000793481246f * (fTemp207 + (fTemp210 + (fTemp213 + (fTemp506 + fTemp226))))) + ((0.000610370189f * (fTemp208 + (fTemp214 + fTemp209))) + ((0.000396740623f * (fTemp135 + (fTemp391 + fTemp702))) + ((0.000335703604f * (fTemp491 + fTemp490)) + ((0.000366222113f * (fTemp216 + (fTemp218 + fTemp217))) + ((0.000946073793f * (fTemp507 + fTemp498)) + ((0.00057985168f * (fTemp236 + fTemp228)) + ((0.000762962736f * (fTemp222 + (fTemp223 + (fTemp233 + fTemp22)))) + ((0.00103762932f * fTemp693) + (fTemp737 + ((0.00448622089f * fTemp156) + ((0.00628681295f * fTemp157) + ((0.00784325693f * fTemp72) + ((0.0107730338f * fTemp79) + ((0.0123599963f * fTemp349) + ((0.0142216254f * fTemp43) + ((0.0151066622f * fTemp88) + ((0.01617481f * fTemp91) + ((0.0170903653f * fTemp96) + ((0.0173039958f * fTemp101) + ((0.0164494775f * fTemp76) + ((0.0122074038f * fTemp105) + ((0.0119632557f * fTemp109) + ((0.0126041444f * fTemp323) + ((0.0222479943f * fTemp287) + ((0.0328379162f * fTemp113) + ((0.036774803f * fTemp117) + ((0.0384533219f * fTemp119) + ((0.0364391021f * fTemp163) + ((0.0336619169f * fTemp164) + ((0.0307626575f * fTemp44) + ((0.0267647337f * fTemp399) + ((0.0263374746f * fTemp353) + ((0.0270393994f * fTemp357) + ((0.0307321399f * fTemp272) + ((0.0332346559f * fTemp322) + ((0.035828732f * fTemp3) + ((0.0382091738f * fTemp519) + ((0.0420850255f * fTemp165) + ((0.043916136f * fTemp166) + ((0.0459303558f * fTemp363) + ((0.0477614664f * fTemp167) + ((0.0490737632f * fTemp63) + ((0.049714651f * fTemp74) + ((0.049836725f * fTemp400) + ((0.0494705029f * fTemp401) + ((0.0486159846f * fTemp38) + ((0.0471510962f * fTemp168) + ((0.0449842848f * fTemp169) + ((0.0422376171f * fTemp73) + ((0.0365611762f * fTemp102) + ((0.0347605832f * fTemp20) + ((0.0345774703f * fTemp123) + ((0.0379039906f * fTemp170) + ((0.0400097668f * fTemp78) + ((0.041871395f * fTemp129) + ((0.0443128757f * fTemp50) + ((0.0449537635f * fTemp132) + ((0.0453505069f * fTemp341) + ((0.0453810245f * fTemp273) + ((0.0447096154f * fTemp133) + ((0.0430311002f * fTemp247) + ((0.0368358418f * fTemp10) + ((0.0330820642f * fTemp115) + ((0.0295724366f * fTemp80) + ((0.0267952513f * fTemp140) + ((0.024506364f * fTemp275) + ((0.0253913999f * fTemp104) + ((0.0256050304f * fTemp370) + ((0.0256355479f * fTemp402) + ((0.0273445845f * fTemp6) + ((0.0279549547f * fTemp145) + ((0.0281685852f * fTemp146) + ((0.027680289f * fTemp30) + ((0.0237739198f * fTemp134) + ((0.0204779208f * fTemp306) + ((0.0170293283f * fTemp108) + ((0.0101321451f * fTemp354) + ((0.00674459059f * fTemp374) + ((0.00390636921f * fTemp142) + ((0.00241096225f * fTemp85) + ((0.00561540574f * fTemp282) + ((0.00897244178f * fTemp359) + ((0.0116275521f * fTemp148) + ((0.0131534776f * fTemp114) + ((0.0120548112f * fTemp147) + ((0.00946073793f * fTemp97) + ((0.00222785119f * fTemp122) + ((0.00982696004f * fTemp418) + ((0.021149328f * fTemp420) + ((0.0324106589f * fTemp421) + ((0.0360423587f * fTemp515) + ((0.0313730277f * fTemp149) + ((0.0179448836f * fTemp65) + ((0.00543229468f * fTemp360) + ((0.0586870946f * fTemp426) + ((0.0751976073f * fTemp17) + ((0.0799890161f * fTemp338) + ((0.065950498f * fTemp427) + ((0.0317392498f * fTemp428) + ((0.0411389507f * fTemp436) + ((0.0441297665f * fTemp438) + ((0.0394909531f * fTemp381) + ((0.0456556901f * fTemp344) + ((0.0555436872f * fTemp111) + ((0.0701925755f * fTemp294) + ((0.0910977498f * fTemp440) + ((0.112796411f * fTemp392) + ((0.124668114f * fTemp441) + ((0.120914333f * fTemp442) + ((0.103457749f * fTemp443) + ((0.076143682f * fTemp522) + ((0.00277718436f * fTemp177) + ((0.068300426f * fTemp178) + ((0.1241493f * fTemp249) + ((0.172368541f * fTemp387) + ((0.208655044f * fTemp446) + ((0.219641715f * fTemp447) + ((0.197759941f * fTemp448) + ((0.149388105f * fTemp77) + ((0.092257455f * fTemp179) + ((0.0496841334f * fTemp180) + ((0.0402844325f * fTemp376) + ((0.0657979101f * fTemp449) + ((0.105533004f * fTemp450) + ((0.133060709f * fTemp451) + ((0.136509299f * fTemp452) + ((0.123813592f * fTemp385) + ((0.103427231f * fTemp121) + ((0.0895718262f * fTemp453) + ((0.0612201318f * fTemp454) + ((0.0242011789f * fTemp455) + ((0.0371715464f * fTemp458) + ((0.074892424f * fTemp459) + ((0.0917691588f * fTemp460) + ((0.0807824954f * fTemp461) + ((0.0523697622f * fTemp462) + ((0.00396740623f * fTemp464) + ((0.0467543565f * fTemp468) + ((0.151829585f * fTemp368) + ((0.195806757f * fTemp181) + ((0.172521129f * fTemp86) + ((0.130710781f * fTemp367) + ((0.122714929f * fTemp141) + ((0.159764394f * fTemp182) + ((0.193121135f * fTemp183) + ((0.162511066f * fTemp184) + ((0.0667745024f * fTemp185) + ((0.28531754f * fTemp189) + ((0.394207597f * fTemp151) + ((0.391552478f * fTemp190) + ((0.324503303f * fTemp191) + ((0.253151029f * fTemp192) + ((0.191534162f * fTemp193) + ((0.0940275267f * fTemp194) + ((0.0121463668f * fTemp474) + ((0.0468764305f * fTemp475) + ((0.0461134687f * fTemp476) + ((0.0207831059f * fTemp198) + ((0.0124210333f * fTemp199) + ((0.00622577593f * fTemp200) + ((0.0025940733f * fTemp58) + ((0.000244148076f * fTemp396) + ((0.00054933317f * fTemp495) + ((0.000701925717f * fTemp234) + (0.000915555283f * fTemp220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.0176702179f * (fTemp110 - fTemp1))))))) : (iSlow21 ? (iSlow25 ? (iSlow27 ? (((0.00296029542f * (fTemp297 + fTemp513)) + ((0.000274666585f * (fTemp398 + (fTemp511 + fTemp212))) + ((0.000396740623f * (fTemp318 - fTemp251)) + ((0.000885036774f * (fTemp265 + (fTemp490 + fTemp262))) + ((0.00369273964f * (fTemp296 + fTemp276)) + ((0.000335703604f * (fTemp305 + (fTemp211 + fTemp208))) + ((0.0035401471f * (fTemp330 - fTemp724)) + ((0.00521866512f * (fTemp285 + (fTemp347 - (fTemp94 + fTemp136)))) + ((0.00405896176f * (fTemp175 + fTemp518)) + ((0.00283822138f * (fTemp292 + (fTemp37 + fTemp279))) + ((0.00442518387f * (fTemp253 + fTemp11)) + ((0.00909451582f * (fTemp246 + fTemp339)) + ((0.00158696249f * (fTemp75 + fTemp34)) + ((0.00598162785f * (fTemp264 - (fTemp95 + fTemp299))) + ((0.00708029419f * (fTemp177 + fTemp286)) + ((0.000640888698f * (fTemp41 - (fTemp372 + (fTemp504 + fTemp122)))) + ((0.00994903408f * (fTemp51 - (fTemp384 + fTemp93))) + ((0.00378429517f * (fTemp312 - (fTemp402 + (fTemp267 - (fTemp522 - fTemp392))))) + ((0.000152592547f * (fTemp307 + (fTemp33 + (fTemp215 + (fTemp241 + (fTemp510 + fTemp391)))))) + ((0.00274666585f * (fTemp69 + (fTemp161 + fTemp293))) + ((0.00430310983f * (fTemp156 - (fTemp82 - fTemp91))) + ((0.00427259132f * (fTemp83 + (fTemp273 - (fTemp474 + fTemp358)))) + ((0.0054933317f * (fTemp88 - (fTemp404 - fTemp20))) + ((0.0025940733f * (fTemp96 - (fTemp36 - fTemp50))) + ((0.000518814661f * (fTemp492 + fTemp101)) + ((0.000427259132f * (fTemp113 + (fTemp209 - fTemp463))) + ((0.000671407208f * (fTemp163 + (fTemp169 + (fTemp491 - fTemp108)))) + ((0.00253303628f * (fTemp452 - fTemp352)) + ((0.0108645894f * (fTemp459 - fTemp166)) + ((0.00543229468f * (fTemp341 - fTemp38)) + ((0.00482192449f * (fTemp73 - (fTemp403 + fTemp148))) + ((0.00180059206f * (fTemp133 - (fTemp39 + fTemp172))) + ((0.000183111057f * (fTemp134 - (fTemp472 + (fTemp222 - (fTemp237 + fTemp238))))) + ((0.0028992584f * (fTemp328 - fTemp295)) + ((0.000213629566f * (fTemp418 + (fTemp214 + (fTemp236 + (fTemp229 + fTemp231))))) + ((3.05185094e-05f * (fTemp219 - (fTemp223 - (fTemp507 - fTemp512)))) + (fTemp725 + ((0.00247199927f * fTemp261) + ((0.00314340647f * fTemp269) + ((0.00408948027f * fTemp291) + (((((((0.00286873989f * fTemp7) + ((0.00329599902f * fTemp8) + ((0.00595110934f * fTemp14) + ((0.00732444227f * fTemp18) + (fTemp726 + ((0.00918607134f * fTemp23) + (fTemp727 + ((0.00131229591f * fTemp256) + ((0.000854518265f * fTemp319) + ((0.00753807183f * fTemp325) + ((0.00680562761f * fTemp311) + (fTemp573 + ((0.00360118411f * fTemp47) + ((0.00848414563f * fTemp321) + ((0.0115359966f * fTemp48) + ((0.0118411817f * fTemp21) + ((0.00689718314f * fTemp54) + ((0.00152592547f * fTemp60) + ((0.00772118289f * fTemp345) + ((0.0100405896f * fTemp2) + ((0.0093691824f * fTemp303) + ((0.00799584948f * fTemp67) + ((0.00643940549f * fTemp155) + ((0.00344859157f * fTemp157) + ((0.00155644398f * fTemp349) + ((0.00540177617f * fTemp43) + ((0.00585955381f * fTemp271) + ((0.00241096225f * fTemp119) + ((0.00570696127f * fTemp357) + ((0.0121158483f * fTemp322) + ((0.00921658985f * fTemp3) + ((0.00372325815f * fTemp519) + ((0.00488296151f * fTemp132) + ((0.00985747855f * fTemp441) + ((0.0115665151f * fTemp442) + ((0.0104983672f * fTemp443) + ((0.00457777642f * fTemp176) + ((0.03234962f * fTemp178) + ((0.035950806f * fTemp249) + ((0.0176091809f * fTemp387) + ((0.0158391073f * fTemp385) + ((0.0221869573f * fTemp373) + ((0.025757622f * fTemp121) + ((0.0230719931f * fTemp453) + ((0.0137028107f * fTemp454) + ((0.0261848811f * fTemp460) + ((0.0263069551f * fTemp461) + ((0.0197454765f * fTemp462) + ((0.0380565822f * fTemp367) + ((0.0638142005f * fTemp141) + ((0.0660115331f * fTemp182) + ((0.0751670897f * fTemp183) + ((0.0542924292f * fTemp184) + ((0.0664082766f * fTemp185) + ((0.0462050252f * fTemp186) + ((0.0440992452f * fTemp187) + ((0.00335703604f * fTemp188) + ((0.0201116987f * fTemp194) + ((0.0770592391f * fTemp195) + ((0.151860103f * fTemp196) + ((0.0700704977f * fTemp469) + ((0.0285653248f * fTemp154) + ((0.0175786614f * fTemp473) + ((0.0416882858f * fTemp199) + ((0.00952177495f * fTemp478) + ((0.0661946461f * fTemp479) + ((0.154332101f * fTemp480) + ((0.0222785119f * fTemp481) + ((0.606280684f * fTemp35) + (fTemp482 + ((0.900265515f * fTemp397) + ((0.429395437f * fTemp483) + ((0.0961638242f * fTemp484) + ((0.0174871068f * fTemp396) + ((0.00381481368f * fTemp485) + ((0.000457777642f * fTemp210) + fTemp728)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00473036896f * fTemp310)) + (0.00518814661f * fTemp304)) + (0.00418103579f * fTemp331)) + (0.00204474013f * fTemp324)) + (0.00109866634f * fTemp277)))))))))))))))))))))))))))))))))))))))))) - (((0.00198370311f * (fTemp160 - fTemp242)) + ((0.000244148076f * (fTemp245 + (fTemp254 - (fTemp260 + (fTemp306 - (fTemp207 - (fTemp213 + (fTemp235 + (fTemp234 + (fTemp233 + (fTemp230 + fTemp232))))))))))) + ((0.00167851802f * (fTemp410 - fTemp255)) + ((0.00396740623f * (fTemp388 - fTemp283)) + ((0.0019531846f * (fTemp146 - fTemp302)) + ((9.15555283e-05f * (fTemp309 + (fTemp46 - (fTemp216 - (fTemp497 + (fTemp501 + (fTemp22 + (fTemp0 - fTemp16)))))))) + ((0.000122074038f * (fTemp270 + (fTemp499 + (fTemp220 - (fTemp227 + (fTemp240 + (fTemp508 + fTemp239))))))) + ((0.00119022187f * (fTemp505 - fTemp284)) + ((0.00469985045f * (fTemp359 - fTemp278)) + ((0.00332651753f * (fTemp370 - fTemp332)) + ((0.00271614734f * (fTemp386 - fTemp337)) + ((0.00827051606f * (fTemp89 - fTemp24)) + ((0.00656147953f * (fTemp80 - fTemp25)) + ((0.00311288796f * (fTemp142 - fTemp31)) + ((0.00201422162f * (fTemp173 - fTemp333)) + ((0.00112918485f * (fTemp45 - (fTemp68 - (fTemp76 - fTemp79)))) + ((0.00302133244f * (fTemp280 + (fTemp168 + (fTemp87 + fTemp366)))) + ((0.00445570238f * (fTemp320 - (fTemp55 - (fTemp4 + fTemp275)))) + ((0.00619525742f * (fTemp327 - fTemp61)) + ((0.0102237007f * (fTemp281 - fTemp62)) + ((0.00250251777f * (fTemp354 - fTemp72)) + ((0.00207525864f * (fTemp383 + fTemp159)) + ((0.00173955504f * (fTemp105 - (fTemp353 - (fTemp206 + fTemp144)))) + ((0.00115970336f * (fTemp247 + fTemp109)) + ((6.10370189e-05f * (fTemp110 + (fTemp218 + (fTemp493 + (fTemp495 + (fTemp496 + (fTemp498 - (fTemp221 - (fTemp503 - (fTemp225 + (fTemp226 - (fTemp506 - fTemp228)))))))))))) + ((0.000305185094f * (fTemp287 + (fTemp224 + fTemp71))) + ((0.00170903653f * (fTemp164 - fTemp117)) + ((0.00305185094f * (fTemp417 + fTemp350)) + ((0.00949125644f * (fTemp408 - fTemp268)) + ((0.0122989593f * (fTemp329 - fTemp272)) + ((0.0117801446f * (fTemp81 + fTemp363)) + ((0.00625629444f * (fTemp107 + fTemp400)) + ((0.00787377544f * (fTemp405 - fTemp120)) + ((0.00854518265f * (fTemp336 - fTemp102)) + ((0.000366222113f * (fTemp502 + fTemp124)) + ((0.00607318338f * (fTemp127 + fTemp56)) + ((0.00357066561f * (fTemp455 + fTemp53)) + ((0.00573747978f * (fTemp150 + (fTemp258 + (fTemp416 + fTemp250)))) + ((0.00610370189f * (fTemp334 + fTemp85)) + ((0.00714133121f * (fTemp66 + fTemp97)) + ((0.00698873866f * (fTemp316 + fTemp259)) + ((0.00640888698f * (fTemp356 + fTemp57)) + ((0.00558488723f * (fTemp335 + fTemp314)) + ((0.00665303506f * (fTemp348 + fTemp59)) + ((0.00738547929f * (fTemp361 + (fTemp90 + fTemp128))) + ((0.00683614612f * (fTemp40 + fTemp32)) + ((0.0115970336f * (fTemp138 + fTemp15)) + ((0.00875881221f * (fTemp415 + fTemp26)) + ((0.00866725668f * (fTemp99 + fTemp380)) + ((0.00054933317f * (fTemp86 + fTemp420)) + ((0.00796533097f * (fTemp106 + fTemp369)) + ((0.025818659f * (fTemp152 + fTemp426)) + ((0.0122379223f * fTemp517) + ((0.00433362834f * fTemp266) + ((0.00137333293f * fTemp252) + ((0.000610370189f * fTemp323) + ((0.00308236945f * fTemp44) + ((0.00103762932f * fTemp399) + ((0.00762962736f * fTemp165) + ((0.0111392559f * fTemp167) + ((0.00900296029f * fTemp63) + (fTemp729 + ((0.00616473891f * fTemp401) + ((0.00820947904f * fTemp125) + ((0.0157170333f * fTemp123) + ((0.0206610318f * fTemp365) + ((0.0201727357f * fTemp170) + ((0.014679403f * fTemp78) + ((0.00750755332f * fTemp129) + ((0.00140385143f * fTemp27) + ((0.0038758507f * fTemp137) + ((0.00555436872f * fTemp10) + ((0.00631733146f * fTemp115) + ((0.00650044251f * fTemp140) + ((0.00524918362f * fTemp84) + ((0.00320444349f * fTemp104) + ((0.00415051728f * fTemp298) + ((0.00265511032f * fTemp6) + ((0.00216681417f * fTemp145) + ((0.00146488845f * fTemp30) + ((0.00262459181f * fTemp374) + ((0.00366222113f * fTemp326) + ((0.00189214759f * fTemp171) + (fTemp730 + ((0.00497451704f * fTemp288) + ((0.00527970213f * fTemp282) + ((0.00494399853f * fTemp114) + ((0.00552385021f * fTemp131) + ((0.00622577593f * fTemp147) + ((0.00704977568f * fTemp313) + ((0.00546281319f * fTemp13) + ((0.00491348002f * fTemp12) + ((0.00695822015f * fTemp315) + (fTemp710 + ((0.00759910885f * fTemp29) + ((0.00717184972f * fTemp126) + ((0.0071108127f * fTemp5) + ((0.00701925717f * fTemp317) + ((0.00463881344f * fTemp274) + ((0.00424207281f * fTemp351) + ((0.0057985168f * fTemp248) + ((0.00503555406f * fTemp343) + ((0.00476088747f * fTemp64) + ((0.0042115543f * fTemp375) + ((0.00411999878f * fTemp70) + (fTemp731 + ((0.00439466536f * fTemp42) + ((0.004852443f * fTemp514) + ((0.00589007232f * fTemp112) + ((0.00601214636f * fTemp243) + ((0.00634784997f * fTemp49) + ((0.00692770164f * fTemp92) + ((0.00915555283f * fTemp130) + ((0.0103457747f * fTemp378) + ((0.0105594043f * fTemp98) + ((0.00961333048f * fTemp139) + ((0.00927762687f * fTemp289) + ((0.0120242927f * fTemp9) + ((0.0133976256f * fTemp406) + ((0.0134891812f * fTemp382) + ((0.0127262184f * fTemp355) + ((0.00851466414f * fTemp100) + (fTemp732 + ((0.00924710836f * fTemp301) + ((0.0106204413f * fTemp407) + ((0.00830103457f * fTemp52) + ((0.001617481f * fTemp409) + ((0.00653096102f * fTemp411) + (fTemp733 + ((0.0104068117f * fTemp413) + ((0.0115054781f * fTemp414) + ((0.0111697745f * fTemp390) + ((0.00244148076f * fTemp342) + ((0.0141911069f * fTemp149) + ((0.00946073793f * fTemp65) + ((0.00778221991f * fTemp360) + ((0.00811792351f * fTemp377) + ((0.00823999755f * fTemp530) + ((0.0133060701f * fTemp422) + ((0.0167241432f * fTemp423) + ((0.0203558467f * fTemp424) + ((0.0228278451f * fTemp425) + ((0.0264290292f * fTemp17) + ((0.0260322895f * fTemp338) + ((0.021149328f * fTemp427) + ((0.0183721427f * fTemp428) + ((0.0188299213f * fTemp429) + ((0.0189825129f * fTemp430) + ((0.0173039958f * fTemp431) + ((0.0124210333f * fTemp432) + ((0.0116275521f * fTemp433) + ((0.0135502182f * fTemp434) + ((0.0177617725f * fTemp435) + ((0.0227973275f * fTemp436) + ((0.0253303628f * fTemp437) + ((0.028931547f * fTemp438) + ((0.027741326f * fTemp439) + ((0.0237128828f * fTemp381) + ((0.0227362905f * fTemp344) + ((0.0282296222f * fTemp111) + ((0.0257881414f * fTemp294) + ((0.0173650328f * fTemp440) + ((0.00744651631f * fTemp444) + ((0.0159611814f * fTemp445) + ((0.021271402f * fTemp300) + ((0.0262459181f * fTemp116) + ((0.014618366f * fTemp118) + ((0.0101321451f * fTemp446) + ((0.0323801376f * fTemp447) + ((0.0426648781f * fTemp448) + ((0.0404675454f * fTemp77) + ((0.0378124341f * fTemp179) + ((0.0478835404f * fTemp180) + ((0.0575884283f * fTemp376) + ((0.0540482812f * fTemp449) + ((0.0365306549f * fTemp450) + ((0.0155949583f * fTemp451) + ((0.046540726f * fTemp362) + ((0.0634174645f * fTemp456) + ((0.0631427988f * fTemp457) + ((0.05038606f * fTemp364) + ((0.0318613239f * fTemp394) + ((0.0100100711f * fTemp458) + ((0.0249641407f * fTemp464) + ((0.0557268001f * fTemp389) + ((0.0767235309f * fTemp393) + ((0.0901821926f * fTemp465) + ((0.0948820487f * fTemp466) + ((0.100009158f * fTemp467) + ((0.0907925665f * fTemp468) + ((0.0840784907f * fTemp368) + ((0.0466322824f * fTemp181) + ((0.0151676992f * fTemp189) + ((0.0284737702f * fTemp151) + ((0.0385753959f * fTemp190) + ((0.0441908017f * fTemp191) + ((0.0393688791f * fTemp192) + ((0.0384533219f * fTemp193) + ((0.111880854f * fTemp470) + ((0.117831968f * fTemp346) + ((0.121524706f * fTemp471) + ((0.068727687f * fTemp475) + ((0.135166481f * fTemp476) + ((0.0720847175f * fTemp197) + ((0.0486159846f * fTemp198) + (fTemp713 + ((0.0101931822f * fTemp58) + ((0.0788293108f * fTemp477) + ((0.286049992f * fTemp201) + ((0.457930237f * fTemp202) + ((0.472701192f * fTemp203) + ((0.0126956999f * fTemp204) + ((0.01617481f * fTemp486) + ((0.0324716941f * fTemp487) + ((0.0364391021f * fTemp488) + ((0.0299691763f * fTemp489) + ((0.00790429395f * fTemp205) + (0.019348735f * fTemp153)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00363170262f * (fTemp421 - fTemp1)))) : (((0.00338755455f * (fTemp52 - fTemp285)) + ((0.00265511032f * (fTemp100 - fTemp518)) + ((0.00326548051f * (fTemp459 - fTemp347)) + ((0.00561540574f * (fTemp329 - fTemp75)) + ((0.00772118289f * (fTemp463 - fTemp349)) + ((0.00857570115f * (fTemp439 - fTemp293)) + ((0.0067751091f * (fTemp446 - fTemp88)) + ((0.00723288674f * (fTemp444 - fTemp109)) + ((0.00311288796f * (fTemp281 - fTemp71)) + ((0.0019531846f * (fTemp348 - fTemp113)) + ((0.00671407208f * (fTemp103 - fTemp268)) + ((0.00305185094f * (fTemp434 - fTemp166)) + ((0.0120548112f * (fTemp175 - fTemp74)) + ((0.0101931822f * (fTemp111 - fTemp78)) + ((0.000244148076f * (fTemp274 - fTemp247)) + ((0.00424207281f * (fTemp461 - fTemp84)) + ((0.000152592547f * (fTemp6 + (fTemp406 - (fTemp449 + fTemp336)))) + ((0.00366222113f * (fTemp411 - fTemp108)) + ((0.00466933195f * (fTemp383 - fTemp144)) + ((0.000915555283f * fTemp717) + ((0.00531022064f * (fTemp417 + fTemp13)) + ((0.00979644153f * (fTemp118 + fTemp59)) + ((0.000518814661f * (fTemp316 + (fTemp379 + fTemp258))) + ((0.000427259132f * (fTemp429 + fTemp404)) + ((0.00280770287f * (fTemp81 - fTemp327)) + ((0.00317392498f * (fTemp516 - fTemp98)) + ((0.00292977691f * (fTemp380 + (fTemp450 + fTemp377))) + ((0.00109866634f * (fTemp422 + fTemp99)) + ((0.00460829493f * (fTemp465 + fTemp409)) + ((0.00625629444f * (fTemp437 + fTemp36)) + ((0.00592059083f * (fTemp515 + fTemp369)) + ((0.00137333293f * (fTemp423 + fTemp95)) + ((0.00247199927f * (fTemp425 + (fTemp433 + fTemp426))) + ((0.0125125889f * (fTemp479 + fTemp440)) + ((0.00796533097f * (fTemp452 + fTemp445)) + ((0.0133365886f * (fTemp189 + fTemp453)) + ((0.0147099216f * (fTemp219 - fTemp470)) + ((0.00805688649f * fTemp610) + (fTemp718 + ((0.000732444227f * fTemp352) + ((9.15555283e-05f * fTemp402) + ((0.00155644398f * fTemp298) + ((0.00778221991f * fTemp282) + ((0.0134586627f * fTemp12) + ((0.0148625141f * fTemp314) + ((0.000671407208f * fTemp403) + ((0.00112918485f * fTemp26) + ((0.00210577715f * fTemp301) + ((0.00253303628f * fTemp407) + ((0.00427259132f * fTemp410) + ((0.00378429517f * fTemp386) + ((0.00344859157f * fTemp388) + ((0.00601214636f * fTemp418) + ((0.00570696127f * fTemp420) + ((0.00546281319f * fTemp65) + ((0.000854518265f * fTemp89) + ((0.000274666585f * fTemp430) + ((0.00170903653f * fTemp432) + ((0.008087405f * fTemp438) + ((0.00845362712f * fTemp344) + ((0.0123599963f * fTemp294) + ((0.0107730338f * fTemp392) + ((0.00894192327f * fTemp441) + ((0.00921658985f * fTemp442) + ((0.0111087374f * fTemp443) + ((0.0126346629f * fTemp522) + ((0.00961333048f * fTemp176) + ((0.00781273842f * fTemp328) + ((0.00820947904f * fTemp300) + ((0.00891140476f * fTemp116) + ((0.0108951079f * fTemp177) + ((0.011200293f * fTemp178) + ((0.00836207159f * fTemp387) + ((0.00732444227f * fTemp447) + ((0.0090334788f * fTemp448) + ((0.0108645894f * fTemp77) + ((0.00991851557f * fTemp179) + ((0.00759910885f * fTemp451) + ((0.00637836847f * fTemp121) + ((0.0155339213f * fTemp454) + ((0.0105594043f * fTemp455) + ((0.00793481246f * fTemp457) + ((0.00863673817f * fTemp364) + ((0.00555436872f * fTemp394) + ((0.0106814783f * fTemp464) + ((0.0101016266f * fTemp466) + ((0.0168156996f * fTemp467) + ((0.0193182174f * fTemp468) + ((0.0190740693f * fTemp368) + ((0.0229194015f * fTemp181) + ((0.0293282885f * fTemp86) + ((0.0325022116f * fTemp367) + ((0.0282601397f * fTemp141) + ((0.0223700684f * fTemp182) + ((0.0209662169f * fTemp183) + ((0.0214239936f * fTemp184) + ((0.0187383648f * fTemp185) + ((0.00473036896f * fTemp188) + ((0.0219428092f * fTemp151) + ((0.0302743614f * fTemp190) + ((0.0324716941f * fTemp191) + ((0.0279244371f * fTemp192) + ((0.0189519953f * fTemp193) + ((0.0170293283f * fTemp194) + ((0.0252998453f * fTemp195) + ((0.0309457686f * fTemp196) + ((0.02252266f * fTemp469) + ((0.00228888821f * fTemp472) + ((0.0123905148f * fTemp476) + ((0.0271004364f * fTemp197) + ((0.0334788039f * fTemp198) + ((0.0301828068f * fTemp199) + ((0.0227362905f * fTemp200) + ((0.0137333293f * fTemp58) + ((0.0102542192f * fTemp477) + ((0.0187688842f * fTemp480) + ((0.0351573229f * fTemp481) + ((0.0458082817f * fTemp201) + ((0.0448011719f * fTemp202) + ((0.0340891741f * fTemp203) + ((0.0280770287f * fTemp204) + ((0.0197149571f * fTemp482) + ((0.021332439f * fTemp488) + ((0.0568865016f * fTemp153) + ((0.0567644276f * fTemp205) + ((0.0570390932f * fTemp206) + ((0.0723288655f * fTemp207) + ((0.0787377581f * fTemp208) + ((0.0583513901f * fTemp135) + ((0.0430005789f * fTemp210) + ((0.0947904885f * fTemp211) + ((0.0975066349f * fTemp212) + ((0.0828882754f * fTemp213) + ((0.0673543513f * fTemp214) + ((0.0756859034f * fTemp215) + ((0.0685750917f * fTemp216) + ((0.0503250211f * fTemp217) + ((0.0212408826f * fTemp220) + ((0.00924710836f * fTemp222) + ((0.0385143608f * fTemp223) + ((0.0849635303f * fTemp224) + ((0.0583819076f * fTemp22) + ((0.108432263f * fTemp512) + ((0.199041724f * fTemp225) + (((((((((0.380901515f * fTemp229) + (0.768883348f * fTemp230)) + (0.382091731f * fTemp231)) + (0.272530288f * fTemp234)) + (0.274208814f * fTemp235)) + (0.20789209f * fTemp240)) + (0.184972689f * fTemp391)) + (0.0686056092f * fTemp16)) + (0.166417435f * fTemp226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00482192449f * (fTemp513 + (fTemp302 + (fTemp284 + (fTemp324 + (fTemp311 + (fTemp157 - fTemp591))))))) + ((0.00469985045f * (fTemp242 + (fTemp321 + fTemp251))) + ((0.00454725791f * (fTemp244 + (fTemp262 + fTemp245))) + ((0.0045167394f * (fTemp398 + (fTemp330 - (fTemp187 + fTemp460)))) + ((0.00491348002f * (fTemp254 + (fTemp296 + (fTemp318 + fTemp277)))) + ((0.00500503555f * (fTemp260 - (fTemp360 - fTemp309))) + ((0.00506607257f * (fTemp97 + fTemp265)) + ((0.00512710959f * (fTemp255 + (fTemp283 + (fTemp72 + fTemp280)))) + ((0.00521866512f * (fTemp269 + (fTemp47 - (fTemp393 + fTemp85)))) + ((0.00503555406f * (fTemp291 + (fTemp140 + fTemp272))) + ((0.004852443f * (fTemp297 - (fTemp413 + fTemp359))) + ((0.00497451704f * (fTemp305 + (fTemp270 + (fTemp353 + fTemp45)))) + ((0.00476088747f * (fTemp292 + (fTemp317 + fTemp110))) + ((0.00320444349f * (fTemp304 - (fTemp456 + fTemp435))) + ((0.00274666585f * (fTemp332 + (fTemp102 - (fTemp152 - fTemp92)))) + ((0.00314340647f * (fTemp7 + (fTemp333 + (fTemp134 + fTemp163)))) + ((0.0051576281f * (fTemp261 + (fTemp325 + (fTemp44 + fTemp37)))) + ((0.00350962859f * (fTemp306 + fTemp11)) + ((0.00332651753f * (fTemp14 + (fTemp23 - (fTemp458 - fTemp54)))) + ((0.00329599902f * (fTemp18 - (fTemp138 - fTemp148))) + ((0.00262459181f * (fTemp31 - (fTemp373 - fTemp312))) + ((0.00509659108f * (fTemp319 + (fTemp41 + (fTemp315 - fTemp173)))) + ((0.0054933317f * (fTemp320 + fTemp34)) + ((0.00616473891f * (fTemp147 + fTemp279)) + ((0.00668355357f * (fTemp264 + fTemp253)) + ((0.00494399853f * (fTemp340 - (fTemp462 - fTemp350))) + ((0.00573747978f * (fTemp266 + (fTemp487 + fTemp76))) + ((0.00436414685f * (fTemp48 - (fTemp412 + (fTemp397 + fTemp436)))) + ((0.00418103579f * (fTemp156 + fTemp21)) + ((0.00384533219f * (fTemp51 + (fTemp53 + fTemp2))) + ((0.0022583697f * (fTemp60 + (fTemp299 + fTemp70))) + ((0.00372325815f * (fTemp171 + fTemp55)) + ((0.00457777642f * (fTemp246 - (fTemp250 - fTemp399))) + ((0.00238044374f * (fTemp372 + fTemp155)) + ((0.00656147953f * (fTemp79 - (fTemp218 - fTemp125))) + ((0.00650044251f * (fTemp91 - (fTemp122 + fTemp39))) + ((0.00640888698f * (fTemp401 + fTemp96)) + ((0.00604266487f * (fTemp160 - (fTemp227 + fTemp180))) + ((0.00680562761f * (fTemp323 + fTemp105)) + ((0.00402844325f * (fTemp287 - (fTemp106 + fTemp66))) + ((0.00103762932f * (fTemp117 - (fTemp3 + (fTemp376 + fTemp94)))) + ((0.000976592302f * (fTemp30 + fTemp161)) + ((0.00173955504f * (fTemp119 + (fTemp120 + (fTemp366 - fTemp719)))) + ((0.00445570238f * (fTemp164 + (fTemp275 - (fTemp390 + (fTemp385 + fTemp415))))) + ((0.00186162908f * (fTemp322 + (fTemp335 + fTemp168))) + ((0.00106814783f * (fTemp165 + (fTemp384 - fTemp257))) + ((0.00576799829f * (fTemp363 + (fTemp10 - (fTemp342 + (fTemp149 + fTemp421))))) + ((0.00985747855f * (fTemp114 + fTemp400)) + ((0.00122074038f * (fTemp73 - (fTemp338 - fTemp49))) + ((0.00967436749f * (fTemp365 - (fTemp389 - fTemp126))) + ((0.00277718436f * (fTemp112 + fTemp137)) + ((0.00268562883f * (fTemp104 + (fTemp243 - (fTemp408 - fTemp130)))) + ((0.000946073793f * (fTemp42 + fTemp370)) + ((0.00115970336f * (fTemp127 - fTemp358)) + ((0.000335703604f * (fTemp154 + fTemp146)) + ((0.0102237007f * (fTemp374 - (fTemp186 + fTemp249))) + ((0.00219733268f * (fTemp128 + (fTemp15 + fTemp139))) + ((0.000366222113f * (fTemp90 + (fTemp514 + fTemp107))) + ((0.000213629566f * (fTemp382 - fTemp351)) + ((0.000396740623f * (fTemp9 - fTemp82)) + ((0.00149540696f * (fTemp343 + fTemp248)) + ((0.00198370311f * (fTemp375 - fTemp720)) + ((0.000762962736f * (fTemp136 - (fTemp431 + fTemp428))) + ((0.0019226661f * (fTemp334 - (fTemp17 + fTemp530))) + ((0.00134281442f * (fTemp475 + fTemp32)) + ((0.00146488845f * (fTemp289 + fTemp356)) + ((0.0254219193f * (fTemp485 - fTemp35)) + ((0.0467848741f * (fTemp500 - fTemp489)) + ((0.0386059135f * (fTemp233 - fTemp239)) + ((0.00518814661f * fTemp276) + (fTemp721 + ((0.00375377666f * fTemp278) + ((0.0028992584f * fTemp310) + ((0.00357066561f * fTemp337) + ((0.00369273964f * fTemp8) + ((0.00335703604f * fTemp19) + ((0.00341807306f * fTemp339) + ((0.00308236945f * fTemp24) + ((0.00271614734f * fTemp25) + ((0.00256355479f * fTemp28) + ((0.00390636921f * fTemp256) + (fTemp722 + ((0.00567644276f * fTemp252) + (fTemp723 + ((0.00216681417f * fTemp33) + ((0.00241096225f * fTemp68) + ((0.00296029542f * fTemp69) + ((0.00442518387f * fTemp61) + ((0.00286873989f * fTemp62) + ((0.00213629566f * fTemp303) + ((0.00189214759f * fTemp67) + ((0.00869777519f * fTemp83) + (fTemp566 + ((0.00735496078f * fTemp271) + ((0.00610370189f * fTemp101) + ((0.00558488723f * fTemp159) + ((0.00564592425f * fTemp46) + ((0.00619525742f * fTemp357) + ((0.00897244178f * fTemp167) + ((0.0116275521f * fTemp63) + ((0.00347911008f * fTemp38) + ((0.00119022187f * fTemp169) + ((0.00399792474f * fTemp20) + ((0.00524918362f * fTemp124) + ((0.00823999755f * fTemp123) + ((0.0104373302f * fTemp170) + ((0.00958281197f * fTemp129) + ((0.00900296029f * fTemp27) + ((0.00854518265f * fTemp50) + ((0.00753807183f * fTemp132) + ((0.00534073915f * fTemp341) + ((0.00234992523f * fTemp273) + ((6.10370189e-05f * fTemp133) + ((0.00708029419f * fTemp115) + ((0.00653096102f * fTemp80) + ((0.0042115543f * fTemp56) + ((0.000122074038f * fTemp145) + ((0.00674459059f * fTemp354) + ((0.0132145146f * fTemp142) + ((0.0141911069f * fTemp326) + ((0.0122379223f * fTemp263) + ((0.00830103457f * fTemp295) + ((0.0103152562f * fTemp131) + ((0.00802636798f * fTemp313) + ((0.00988799706f * fTemp259) + ((0.0093691824f * fTemp290) + ((0.0111392559f * fTemp29) + ((0.0110477004f * fTemp361) + ((0.00738547929f * fTemp5) + ((0.00167851802f * fTemp64) + ((0.00183111057f * fTemp371) + ((0.00164799951f * fTemp405) + ((0.0035401471f * fTemp378) + ((0.00100711081f * fTemp93) + ((0.00140385143f * fTemp355) + ((0.000183111057f * fTemp362) + ((0.0129703665f * fTemp346) + ((0.000640888698f * fTemp471) + ((0.00250251777f * fTemp473) + ((0.00698873866f * fTemp474) + ((0.0111697745f * fTemp483) + ((0.0222785119f * fTemp484) + ((0.0245368816f * fTemp396) + (((0.000701925717f * fTemp490) + ((0.0532242805f * fTemp491) + ((0.0678121299f * fTemp492) + ((0.0213629566f * fTemp209) + ((0.019531846f * fTemp493) + ((0.0365306549f * fTemp495) + ((0.0352183618f * fTemp496) + ((0.0497451723f * fTemp497) + ((0.0641499087f * fTemp498) + (((((((((((0.176763207f * fTemp238) + ((0.222968236f * fTemp237) + (((((fTemp509 + (((0.148228407f * fTemp0) + (0.472609639f * fTemp506)) + (0.913876772f * fTemp507))) + (0.44444105f * fTemp510)) + (0.173894465f * fTemp232)) + (0.392834246f * fTemp511)) + (0.0347911008f * fTemp236)))) + (0.06469924f * fTemp241)) + (0.0701315328f * fTemp228)) + (0.0738853142f * fTemp505)) + (0.142857149f * fTemp504)) + (0.118564412f * fTemp503)) + (0.0130314035f * fTemp502)) + (0.00177007355f * fTemp221)) + (0.0115970336f * fTemp501)) + (0.0694906488f * fTemp499))))))))))) + (0.0199591052f * fTemp486))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00479140598f * (fTemp1 + (fTemp345 - (fTemp267 - (fTemp57 - (fTemp87 + fTemp4))))))))) : (iSlow26 ? (((3.05185094e-05f * (fTemp242 + (fTemp297 + (fTemp421 - fTemp287)))) + ((0.000366222113f * (fTemp244 + (fTemp283 + (fTemp96 + (fTemp137 + (fTemp299 + fTemp146)))))) + ((0.000671407208f * (fTemp398 - (fTemp293 - fTemp278))) + ((0.000885036774f * (fTemp245 - (fTemp338 - fTemp44))) + ((0.000976592302f * (fTemp251 + (fTemp261 + (fTemp311 - (fTemp33 - (fTemp345 - (fTemp76 + (fTemp409 - fTemp136)))))))) + ((0.00103762932f * (fTemp254 + (fTemp255 + (fTemp84 - fTemp163)))) + ((0.00106814783f * (fTemp260 - (fTemp315 - (fTemp384 - fTemp42)))) + ((0.00109866634f * (fTemp265 - (fTemp298 - fTemp63))) + ((0.000793481246f * (fTemp269 + (fTemp358 - fTemp262))) + ((0.000213629566f * (fTemp291 - (fTemp305 + (fTemp292 - (fTemp310 - (fTemp23 + (fTemp333 - (fTemp78 - (fTemp463 - fTemp420))))))))) + ((0.000732444227f * (fTemp105 - fTemp318)) + ((0.000488296151f * (fTemp331 + (fTemp304 + (fTemp25 + (fTemp41 + (fTemp306 + fTemp45)))))) + ((0.00213629566f * (fTemp48 - fTemp14)) + ((0.00119022187f * (fTemp110 - fTemp19)) + ((0.000274666585f * (fTemp31 + (fTemp530 - fTemp69))) + ((0.000610370189f * (fTemp280 - fTemp319)) + ((0.000396740623f * (fTemp279 + (fTemp95 - fTemp383))) + ((0.000854518265f * (fTemp253 + (fTemp94 + fTemp320))) + ((0.00115970336f * (fTemp325 + fTemp264)) + ((0.0012817774f * (fTemp286 + (fTemp405 - fTemp167))) + ((0.000762962736f * (fTemp340 - (fTemp334 - (fTemp9 + (fTemp26 - (fTemp369 + (fTemp443 - fTemp438))))))) + ((0.00057985168f * (fTemp37 + (fTemp243 - fTemp2))) + ((0.00137333293f * (fTemp252 + (fTemp112 - (fTemp410 + (fTemp411 + (fTemp193 + fTemp439)))))) + ((0.00158696249f * (fTemp47 - (fTemp515 + fTemp386))) + ((0.00210577715f * (fTemp51 - (fTemp257 - fTemp46))) + ((0.000823999755f * (fTemp312 - (fTemp92 + fTemp68))) + ((0.000457777642f * (fTemp55 + (fTemp246 - (fTemp106 + fTemp101)))) + ((0.000946073793f * (fTemp38 + fTemp61)) + ((0.00555436872f * (fTemp249 - fTemp347)) + ((0.00360118411f * (fTemp52 - fTemp79)) + ((0.00143436994f * (fTemp30 + fTemp43)) + ((0.00125125889f * (fTemp406 + fTemp91)) + ((0.000335703604f * (fTemp87 - fTemp160)) + ((0.00183111057f * (fTemp109 - (fTemp415 + fTemp390))) + ((0.00238044374f * (fTemp355 + fTemp323)) + ((0.00402844325f * (fTemp353 + (fTemp81 - fTemp70))) + ((0.00405896176f * (fTemp357 - (fTemp393 + fTemp404))) + ((0.00341807306f * (fTemp367 - fTemp322)) + ((0.0109866634f * (fTemp133 - fTemp352)) + ((0.0090334788f * (fTemp274 - fTemp166)) + ((0.00146488845f * (fTemp335 + fTemp74)) + ((0.00491348002f * (fTemp73 + (fTemp275 - fTemp124))) + ((0.00744651631f * (fTemp432 - fTemp125)) + ((0.00857570115f * (fTemp433 - fTemp123)) + ((0.00750755332f * (fTemp435 - fTemp365)) + ((0.00573747978f * (fTemp178 + fTemp247)) + ((0.00292977691f * (fTemp98 - fTemp56)) + ((0.00570696127f * (fTemp351 + fTemp370)) + ((0.00167851802f * (fTemp134 - fTemp20)) + ((0.0132450331f * (fTemp489 - fTemp142)) + ((0.00268562883f * (fTemp138 - fTemp295)) + ((0.0284127332f * (fTemp103 - (fTemp203 + fTemp58))) + ((0.00152592547f * (fTemp89 - fTemp403)) + ((0.00204474013f * (fTemp130 - (fTemp39 + fTemp416))) + ((0.00271614734f * (fTemp378 + (fTemp210 - fTemp417))) + ((0.001617481f * (fTemp188 + fTemp289)) + ((0.0019531846f * (fTemp382 + (fTemp422 - fTemp329))) + ((0.00320444349f * (fTemp379 + (fTemp437 - fTemp342))) + ((0.00369273964f * (fTemp177 + fTemp516)) + ((0.0136417737f * (fTemp191 + fTemp461)) + ((0.00631733146f * (fTemp189 + fTemp462)) + ((0.00112918485f * fTemp266) + ((0.00222785119f * fTemp21) + ((0.00155644398f * fTemp54) + ((0.000518814661f * fTemp83) + ((0.00308236945f * fTemp399) + ((0.00280770287f * fTemp168) + ((0.00448622089f * fTemp169) + (fTemp709 + ((0.00140385143f * fTemp102) + ((0.00534073915f * fTemp129) + ((0.0101016266f * fTemp27) + ((0.0138554033f * fTemp50) + ((0.0162053294f * fTemp132) + ((0.0166325886f * fTemp341) + ((0.0148930326f * fTemp273) + ((0.00753807183f * fTemp53) + ((0.00842310861f * fTemp104) + ((0.00762962736f * fTemp366) + ((0.00531022064f * fTemp171) + ((0.0142826624f * fTemp172) + ((0.0226752535f * fTemp173) + ((0.0295724366f * fTemp267) + ((0.0253303628f * fTemp288) + ((0.0165410321f * fTemp150) + ((0.00558488723f * fTemp85) + ((0.00424207281f * fTemp259) + ((0.0150151066f * fTemp57) + ((0.0233466607f * fTemp13) + ((0.0267647337f * fTemp12) + ((0.0246589556f * fTemp314) + ((0.0183111057f * fTemp59) + ((0.00946073793f * fTemp348) + ((0.0104373302f * fTemp90) + ((0.0118411817f * fTemp316) + ((0.0112308115f * fTemp258) + ((0.00189214759f * fTemp82) + ((0.000915555283f * fTemp93) + ((0.00198370311f * fTemp15) + ((0.00347911008f * fTemp100) + ((0.00457777642f * fTemp99) + ((0.00430310983f * fTemp336) + ((0.00378429517f * fTemp407) + (fTemp714 + ((0.00241096225f * fTemp250) + ((0.000305185094f * fTemp427) + ((0.00164799951f * fTemp428) + ((0.003234962f * fTemp429) + ((0.00460829493f * fTemp430) + ((0.00598162785f * fTemp431) + (fTemp587 + ((0.00561540574f * fTemp436) + ((0.00338755455f * fTemp440) + ((0.00799584948f * fTemp392) + ((0.00827051606f * fTemp441) + ((0.00436414685f * fTemp442) + ((0.00228888821f * fTemp387) + ((0.00317392498f * fTemp376) + ((0.0164189581f * fTemp450) + ((0.0219733268f * fTemp451) + ((0.0253913999f * fTemp452) + ((0.0244758446f * fTemp385) + ((0.0177922919f * fTemp373) + ((0.0025940733f * fTemp456) + ((0.0100405896f * fTemp457) + ((0.0159001444f * fTemp364) + ((0.0198370311f * fTemp394) + ((0.0217291787f * fTemp458) + ((0.0216986611f * fTemp459) + ((0.0191961434f * fTemp460) + ((0.00415051728f * fTemp466) + ((0.0143742179f * fTemp467) + ((0.0252082888f * fTemp468) + ((0.031037325f * fTemp368) + ((0.0283516962f * fTemp181) + ((0.0179448836f * fTemp86) + ((0.00811792351f * fTemp151) + ((0.0117496261f * fTemp192) + ((0.0423596911f * fTemp346) + ((0.0724814609f * fTemp471) + ((0.0910977498f * fTemp472) + ((0.0992461964f * fTemp473) + ((0.0957060456f * fTemp474) + ((0.0734885707f * fTemp475) + ((0.0245979186f * fTemp476) + ((0.0153813288f * fTemp477) + ((0.0387585089f * fTemp478) + ((0.0465712473f * fTemp479) + ((0.0434583575f * fTemp480) + ((0.0311288796f * fTemp481) + ((0.0135196997f * fTemp201) + ((0.00894192327f * fTemp483) + ((0.0469069481f * fTemp484) + ((0.0813318267f * fTemp396) + ((0.106570639f * fTemp485) + ((0.117526777f * fTemp486) + ((0.105563521f * fTemp487) + ((0.0686666444f * fTemp488) + ((0.0629596859f * fTemp490) + ((0.10278634f * fTemp491) + ((0.0972014517f * fTemp492) + ((((((((((((((((((((fTemp508 + (((0.130344555f * fTemp0) + (0.398022413f * fTemp506)) + (0.783898413f * fTemp507))) + (0.777550578f * fTemp510)) + (0.181066319f * fTemp229)) + (0.110049747f * fTemp235)) + (0.177770317f * fTemp236)) + (0.164403215f * fTemp237)) + (0.0766624957f * fTemp238)) + (0.078463085f * fTemp505)) + (0.167241439f * fTemp504)) + (0.211554304f * fTemp503)) + (0.188512832f * fTemp502)) + (0.0892971605f * fTemp22)) + (0.0743736103f * fTemp501)) + (0.147587508f * fTemp500)) + (0.175115213f * fTemp499)) + (0.156498924f * fTemp498)) + (0.112308115f * fTemp497)) + (0.0657368675f * fTemp496)) + (0.016235847f * fTemp495)) + (0.0562456138f * fTemp209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((((6.10370189e-05f * (fTemp277 - fTemp296)) + ((0.000427259132f * (fTemp424 + fTemp309)) + ((0.000640888698f * (fTemp270 - (fTemp285 - (fTemp256 - (fTemp400 - fTemp307))))) + ((0.000701925717f * (fTemp284 + (fTemp332 - (fTemp356 - fTemp339)))) + ((0.000152592547f * (fTemp34 - fTemp330)) + ((0.000183111057f * (fTemp518 + (fTemp272 - fTemp24))) + ((0.00186162908f * (fTemp337 - (fTemp321 + (fTemp281 + fTemp88)))) + ((0.0022583697f * (fTemp8 + fTemp662)) + ((0.00170903653f * (fTemp18 + (fTemp465 + fTemp108))) + ((0.0019226661f * (fTemp62 - (fTemp271 + (fTemp350 + (fTemp372 - (fTemp149 + fTemp40)))))) + ((0.00326548051f * (fTemp303 - (fTemp66 + fTemp402))) + ((0.00592059083f * (fTemp156 - (fTemp121 - fTemp140))) + ((0.00610370189f * (fTemp127 + fTemp157)) + ((0.00207525864f * (fTemp349 + (fTemp119 + (fTemp6 - (fTemp301 - fTemp49))))) + ((0.00100711081f * (fTemp159 + (fTemp122 + fTemp145))) + ((0.00122074038f * (fTemp360 + fTemp71)) + ((9.15555283e-05f * (fTemp164 - (fTemp401 + (fTemp377 + fTemp514)))) + ((0.00256355479f * (fTemp32 - fTemp268)) + ((0.00134281442f * (fTemp317 - (fTemp4 + (fTemp423 - fTemp412)))) + ((0.0061342204f * (fTemp362 - fTemp128)) + ((0.00650044251f * (fTemp343 + (fTemp135 - fTemp470))) + ((0.00250251777f * (fTemp294 - fTemp139)) + ((0.00177007355f * (fTemp65 - fTemp380)) + ((0.00149540696f * (fTemp413 + fTemp388)) + ((0.0102237007f * (fTemp444 - (fTemp190 + fTemp449))) + ((0.0404370241f * (fTemp184 + fTemp183)) + ((0.00131229591f * fTemp7) + ((0.00234992523f * fTemp11) + ((0.00433362834f * fTemp67) + ((0.00509659108f * fTemp155) + ((0.0058290353f * fTemp72) + ((0.00497451704f * fTemp75) + ((0.00283822138f * fTemp117) + ((0.00274666585f * fTemp161) + ((0.00653096102f * fTemp3) + ((0.00915555283f * fTemp519) + ((0.0111087374f * fTemp165) + ((0.00521866512f * fTemp363) + ((0.00439466536f * fTemp170) + ((0.00396740623f * fTemp10) + ((0.00659199804f * fTemp115) + ((0.00723288674f * fTemp80) + ((0.00500503555f * fTemp144) + ((0.00878933072f * fTemp354) + ((0.0119327372f * fTemp374) + ((0.0122379223f * fTemp326) + ((0.00869777519f * fTemp263) + ((0.00506607257f * fTemp282) + ((0.0138859218f * fTemp359) + ((0.0198675506f * fTemp148) + ((0.0225531794f * fTemp114) + ((0.0222785119f * fTemp131) + ((0.019470809f * fTemp147) + ((0.0142521439f * fTemp97) + ((0.00619525742f * fTemp313) + ((0.0121158483f * fTemp290) + ((0.0208136234f * fTemp29) + ((0.0236518458f * fTemp361) + ((0.0195623655f * fTemp126) + ((0.0108645894f * fTemp5) + (fTemp715 + ((0.00634784997f * fTemp248) + ((0.00628681295f * fTemp64) + ((0.00543229468f * fTemp375) + ((0.00244148076f * fTemp371) + ((0.00173955504f * fTemp414) + ((0.00296029542f * fTemp36) + ((0.0028992584f * fTemp426) + ((0.00216681417f * fTemp17) + ((0.00350962859f * fTemp381) + ((0.0054933317f * fTemp344) + ((0.00576799829f * fTemp111) + ((0.004852443f * fTemp522) + ((0.00756859034f * fTemp175) + ((0.00930814538f * fTemp176) + ((0.0102542192f * fTemp328) + ((0.00921658985f * fTemp445) + ((0.00704977568f * fTemp300) + ((0.00372325815f * fTemp116) + ((0.00332651753f * fTemp446) + ((0.0093691824f * fTemp447) + ((0.0135807367f * fTemp448) + ((0.0145878475f * fTemp77) + ((0.011322367f * fTemp179) + ((0.00454725791f * fTemp180) + ((0.00735496078f * fTemp453) + ((0.0168767367f * fTemp454) + ((0.0190435499f * fTemp455) + ((0.0144047365f * fTemp152) + ((0.00384533219f * fTemp464) + ((0.00482192449f * fTemp389) + ((0.0133671071f * fTemp141) + ((0.0296639912f * fTemp182) + ((0.0301828068f * fTemp185) + ((0.0168462172f * fTemp186) + ((((fTemp643 + ((((0.0446180627f * fTemp197) + ((0.103244118f * fTemp198) + ((0.118137151f * fTemp199) + ((0.0832544938f * fTemp200) + ((0.00708029419f * fTemp202) + ((0.0468153954f * fTemp204) + ((0.0551469475f * fTemp35) + ((0.0485549495f * fTemp482) + ((0.0259102155f * fTemp397) + ((0.0489822067f * fTemp153) + ((0.102450639f * fTemp205) + ((0.130863369f * fTemp206) + ((0.121921442f * fTemp207) + ((((((((((fTemp494 + ((((((((((((((((((((((0.418958098f * fTemp230) + (0.706167817f * fTemp231)) + (0.667775512f * fTemp232)) + (0.455183566f * fTemp511)) + (0.219214454f * fTemp233)) + (0.0232856236f * fTemp234)) + (0.0565202795f * fTemp239)) + (0.191076383f * fTemp240)) + (0.285134435f * fTemp391)) + (0.318704784f * fTemp16)) + (0.28846094f * fTemp241)) + (0.217200235f * fTemp228)) + (0.137668997f * fTemp227)) + (0.0903042704f * fTemp226)) + (0.0621967241f * fTemp225)) + (0.011383404f * fTemp512)) + (0.0416882858f * fTemp224)) + (0.140812397f * fTemp223)) + (0.175756097f * fTemp222)) + (0.160405293f * fTemp221)) + (0.105960265f * fTemp220)) + (0.0204168838f * fTemp219))) + (0.0856959745f * fTemp218)) + (0.123966187f * fTemp217)) + (0.141880557f * fTemp216)) + (0.137333289f * fTemp215)) + fTemp716) + (0.0946379006f * fTemp213)) + (0.073397018f * fTemp212)) + (0.0438550971f * fTemp211)) + (0.0769066438f * fTemp208))))))))))))))) + (0.0252693258f * fTemp154)) + (0.0440076925f * fTemp469))) + (0.0396130271f * fTemp195)) + (0.0217902157f * fTemp194)) + (0.00585955381f * fTemp187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000244148076f * (fTemp513 - (fTemp118 - fTemp418)))) + (0.00054933317f * (fTemp1 - (fTemp276 + (fTemp28 - fTemp324)))))) : (((0.00122074038f * (fTemp304 + fTemp1)) + ((0.000854518265f * (fTemp299 + fTemp513)) + ((0.00054933317f * (fTemp242 + (fTemp54 + (fTemp88 - (fTemp519 - (fTemp356 - fTemp402)))))) + ((0.000640888698f * (fTemp244 - (fTemp404 - fTemp246))) + ((0.00152592547f * (fTemp245 - (fTemp91 - (fTemp515 - fTemp273)))) + ((0.00173955504f * (fTemp251 + (fTemp285 + (fTemp90 - (fTemp417 + fTemp343))))) + ((0.00180059206f * fTemp705) + ((0.00201422162f * (fTemp265 - (fTemp450 - fTemp164))) + ((0.0019226661f * (fTemp255 - (fTemp514 + fTemp97))) + ((0.00170903653f * (fTemp261 - (fTemp75 + (fTemp430 + fTemp293)))) + ((0.00158696249f * (fTemp269 + (fTemp284 + (fTemp15 + fTemp21)))) + ((0.00177007355f * (fTemp276 + (fTemp106 + fTemp47))) + ((0.00210577715f * (fTemp283 + (fTemp333 + (fTemp138 + fTemp112)))) + ((0.00231940672f * (fTemp291 - (fTemp132 - (fTemp137 - fTemp341)))) + ((0.00250251777f * (fTemp296 + (fTemp264 - (fTemp410 - fTemp325)))) + ((0.00268562883f * (fTemp277 + (fTemp286 - (fTemp59 - (fTemp429 - fTemp384))))) + ((0.00216681417f * (fTemp305 - (fTemp79 + (fTemp358 + fTemp159)))) + ((0.00167851802f * (fTemp309 + (fTemp256 + fTemp25))) + ((0.00149540696f * (fTemp318 + (fTemp337 + (fTemp38 - fTemp119)))) + ((0.00247199927f * (fTemp110 + fTemp278)) + ((0.000793481246f * (fTemp310 + (fTemp24 + (fTemp319 + (fTemp372 + fTemp146))))) + ((0.00057985168f * (fTemp34 + fTemp518)) + ((0.000732444227f * (fTemp67 + fTemp332)) + ((0.00112918485f * (fTemp7 + (fTemp156 + (fTemp115 + fTemp168)))) + ((0.0012817774f * (fTemp11 + (fTemp12 + fTemp155))) + ((0.000488296151f * (fTemp18 + (fTemp3 - (fTemp381 + fTemp104)))) + ((0.000213629566f * (fTemp19 + (fTemp23 + (fTemp322 + fTemp312)))) + ((0.000122074038f * (fTemp339 + (fTemp307 + (fTemp33 - (fTemp243 - fTemp134))))) + ((0.00222785119f * (fTemp28 - (fTemp99 - fTemp109))) + ((0.00228888821f * (fTemp31 - (fTemp375 - fTemp353))) + ((0.00119022187f * (fTemp262 + (fTemp340 + (fTemp136 + fTemp107)))) + ((0.00183111057f * (fTemp253 - (fTemp27 + (fTemp39 - fTemp127)))) + ((0.000457777642f * (fTemp320 - (fTemp9 - fTemp105))) + ((0.000915555283f * (fTemp266 + (fTemp271 - (fTemp267 + fTemp63)))) + ((0.00134281442f * (fTemp247 + fTemp252)) + ((0.00213629566f * (fTemp321 + (fTemp426 - fTemp403))) + ((0.00204474013f * (fTemp48 - (fTemp274 - fTemp401))) + ((0.00106814783f * (fTemp51 - (fTemp83 - fTemp345))) + ((6.10370189e-05f * (fTemp60 + (fTemp169 + (fTemp336 - fTemp173)))) + ((0.000183111057f * (fTemp69 + (fTemp272 + fTemp350))) + ((0.000946073793f * (fTemp61 - (fTemp362 - fTemp399))) + ((0.00143436994f * (fTemp347 + (fTemp163 - (fTemp516 - fTemp313)))) + ((0.000396740623f * (fTemp405 + fTemp157)) + ((0.00479140598f * (fTemp355 - fTemp101)) + ((0.00766014587f * (fTemp197 - fTemp113)) + ((0.000976592302f * (fTemp44 - (fTemp126 + fTemp314))) + ((0.00131229591f * (fTemp316 + fTemp268)) + ((0.00714133121f * (fTemp295 - fTemp165)) + ((0.00280770287f * (fTemp400 - (fTemp394 - fTemp335))) + ((0.00695822015f * (fTemp413 - fTemp125)) + ((0.00189214759f * (fTemp260 + (fTemp324 + (fTemp172 + (fTemp373 - fTemp288))))) + ((0.00115970336f * (fTemp366 - fTemp80)) + ((0.00814844202f * (fTemp414 - fTemp108)) + ((0.0139774773f * (fTemp469 - fTemp144)) + ((0.0133365886f * (fTemp392 - fTemp374)) + ((0.00265511032f * (fTemp383 - fTemp334)) + ((0.00531022064f * (fTemp440 - fTemp40)) + ((0.00708029419f * (fTemp439 - fTemp65)) + ((0.00457777642f * (fTemp208 + fTemp522)) + ((0.0657368675f * (fTemp505 + fTemp480)) + ((0.0570390932f * (fTemp497 + fTemp481)) + ((0.00564592425f * fTemp645) + ((0.00109866634f * fTemp398) + ((0.00274666585f * fTemp297) + ((0.00292977691f * fTemp302) + ((0.00155644398f * fTemp270) + ((0.00164799951f * fTemp8) + ((0.000823999755f * fTemp14) + ((0.00378429517f * fTemp323) + ((0.00408948027f * fTemp46) + ((0.0022583697f * fTemp74) + ((0.00238044374f * fTemp10) + ((0.00665303506f * fTemp263) + ((0.00482192449f * fTemp171) + ((0.00363170262f * fTemp259) + ((0.00335703604f * fTemp13) + ((0.00283822138f * fTemp406) + ((0.00500503555f * fTemp382) + ((0.003234962f * fTemp379) + ((0.00534073915f * fTemp281) + ((0.00738547929f * fTemp4) + ((0.00308236945f * fTemp412) + ((0.0077517014f * fTemp390) + ((0.00659199804f * fTemp415) + ((0.00369273964f * fTemp122) + ((0.00723288674f * fTemp418) + ((0.00955229346f * fTemp420) + ((0.0105594043f * fTemp421) + ((0.00811792351f * fTemp369) + ((0.00726340525f * fTemp377) + ((0.012939848f * fTemp530) + ((0.0148319956f * fTemp95) + ((0.0105288858f * fTemp94) + ((0.00943021942f * fTemp17) + ((0.014679403f * fTemp338) + ((0.0142521439f * fTemp427) + ((0.00888088625f * fTemp428) + ((0.00552385021f * fTemp434) + ((0.0144047365f * fTemp435) + ((0.019531846f * fTemp436) + ((0.0187688842f * fTemp437) + ((0.0138248848f * fTemp438) + ((0.0166631062f * fTemp441) + ((0.0160222184f * fTemp442) + ((0.0121463668f * fTemp443) + ((0.0120853297f * fTemp300) + ((0.0213934761f * fTemp116) + ((0.0239265114f * fTemp118) + ((0.0173650328f * fTemp177) + ((0.0051576281f * fTemp178) + ((0.0163274035f * fTemp179) + ((0.0248725861f * fTemp180) + ((0.0226752535f * fTemp376) + ((0.0111697745f * fTemp449) + ((0.0154118473f * fTemp121) + ((0.0249336231f * fTemp453) + ((0.0252693258f * fTemp454) + ((0.0186162908f * fTemp455) + ((0.00994903408f * fTemp152) + ((0.0181890316f * fTemp458) + ((0.0304879919f * fTemp459) + ((0.0313119926f * fTemp460) + ((0.0248115491f * fTemp461) + ((0.0146488845f * fTemp462) + ((0.0199591052f * fTemp466) + ((0.0348216183f * fTemp467) + ((0.0314951017f * fTemp368) + ((0.0165105145f * fTemp181) + ((0.0189519953f * fTemp185) + ((0.0404065065f * fTemp186) + ((0.0466017649f * fTemp187) + ((0.0299996957f * fTemp188) + ((0.00762962736f * fTemp193) + ((0.0232245866f * fTemp194) + ((0.0311899167f * fTemp195) + ((0.0286568813f * fTemp196) + ((0.0661946461f * fTemp474) + ((0.0777306408f * fTemp475) + ((0.0558793917f * fTemp476) + ((0.0102542192f * fTemp478) + ((0.043794062f * fTemp479) + ((0.0215765871f * fTemp201) + ((0.037446212f * fTemp397) + ((0.0831018984f * fTemp483) + ((0.0861537531f * fTemp484) + ((0.0562150963f * fTemp396) + ((0.0285958443f * fTemp485) + ((0.0184331797f * fTemp486) + ((0.0123905148f * fTemp135) + ((0.0132145146f * fTemp210) + ((0.0409863591f * fTemp211) + ((0.0120242927f * fTemp212) + ((0.0288094729f * fTemp215) + ((0.0532547981f * fTemp216) + ((0.0058290353f * fTemp217) + ((0.228431046f * fTemp498) + ((0.218726158f * fTemp499) + ((0.0578325763f * fTemp500) + ((0.0287789553f * fTemp221) + ((0.151036099f * fTemp502) + ((0.342875451f * fTemp503) + (((((((((((((((0.0573137626f * fTemp0) + (0.250862151f * fTemp506)) + (0.619830906f * fTemp507)) + (0.751792967f * fTemp508)) + (0.179235205f * fTemp510)) + (0.36890775f * fTemp232)) + (0.572222054f * fTemp511)) + (0.254768521f * fTemp233)) + (0.0770897567f * fTemp238)) + (0.177983955f * fTemp239)) + (0.0408948027f * fTemp240)) + (0.116824858f * fTemp241)) + (0.392895281f * fTemp228)) + (0.171483502f * fTemp227)) + (0.382641077f * fTemp504))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00244148076f * (fTemp78 - fTemp292)) + ((0.00296029542f * (fTemp408 - fTemp330)) + ((0.00299081393f * (fTemp189 - fTemp331)) + ((0.00103762932f * (fTemp463 - fTemp279)) + ((0.0019531846f * (fTemp411 - fTemp311)) + ((0.000305185094f * (fTemp317 - fTemp37)) + ((0.000427259132f * (fTemp41 - (fTemp445 + fTemp248))) + ((0.000671407208f * (fTemp45 - (fTemp128 - fTemp72))) + ((0.000152592547f * (fTemp327 - fTemp68)) + ((0.000518814661f * fTemp706) + ((0.00198370311f * (fTemp349 + (fTemp50 + (fTemp433 - fTemp326)))) + ((0.0038758507f * (fTemp42 + fTemp96)) + ((0.000885036774f * (fTemp160 - (fTemp30 + fTemp370))) + ((0.000762962736f * (fTemp287 - (fTemp130 - fTemp103))) + ((0.00466933195f * (fTemp86 + fTemp71)) + ((0.00256355479f * (fTemp98 - fTemp357)) + ((0.00570696127f * (fTemp149 + fTemp167)) + ((0.00503555406f * (fTemp102 + (fTemp465 + fTemp49))) + ((0.00595110934f * (fTemp123 + fTemp20)) + ((0.00320444349f * (fTemp361 + fTemp170)) + ((0.00637836847f * (fTemp342 + fTemp275)) + ((0.00360118411f * (fTemp53 + (fTemp282 - (fTemp416 + (fTemp487 + fTemp77))))) + ((0.00344859157f * (fTemp150 + fTemp257)) + ((0.000366222113f * (fTemp258 + fTemp145)) + ((0.00262459181f * (fTemp306 + (fTemp64 - (fTemp490 + fTemp89)))) + ((0.00589007232f * (fTemp289 + fTemp142)) + ((0.00433362834f * (fTemp348 - fTemp57)) + ((0.00277718436f * (fTemp92 + fTemp82)) + ((3.05185094e-05f * (fTemp409 - fTemp378)) + ((0.00381481368f * (fTemp100 + fTemp93)) + ((0.00512710959f * fTemp707) + ((0.00573747978f * (fTemp249 - fTemp301)) + ((0.0057985168f * (fTemp184 - fTemp250)) + ((0.00494399853f * (fTemp432 + fTemp388)) + ((0.0201727357f * (fTemp482 + fTemp364)) + ((0.0242316965f * (fTemp214 + fTemp367)) + ((0.0310983621f * (fTemp213 - fTemp473)) + ((0.0379345082f * (fTemp191 - fTemp468)) + ((0.000274666585f * fTemp280) + ((0.000335703604f * fTemp62) + (fTemp708 + ((0.008087405f * fTemp117) + (fTemp162 + ((0.00347911008f * fTemp352) + ((0.00967436749f * fTemp166) + ((0.00927762687f * fTemp363) + ((0.00186162908f * fTemp73) + (fTemp709 + ((0.00674459059f * fTemp124) + ((0.00454725791f * fTemp365) + ((0.00207525864f * fTemp129) + ((9.15555283e-05f * fTemp133) + ((0.00390636921f * fTemp140) + ((0.00622577593f * fTemp56) + ((0.00729392376f * fTemp84) + ((0.00332651753f * fTemp298) + (fTemp580 + ((0.0164189581f * fTemp354) + ((0.00418103579f * fTemp85) + ((0.00317392498f * fTemp359) + ((0.00448622089f * fTemp148) + ((0.00692770164f * fTemp114) + ((0.00778221991f * fTemp131) + ((0.00628681295f * fTemp315) + (fTemp710 + ((0.0061342204f * fTemp29) + ((0.00286873989f * fTemp351) + ((0.00241096225f * fTemp70) + ((0.00350962859f * fTemp371) + ((0.00616473891f * fTemp32) + (fTemp711 + ((0.00314340647f * fTemp81) + ((0.00326548051f * fTemp407) + ((0.001617481f * fTemp52) + ((0.00463881344f * fTemp386) + (fTemp575 + ((0.00897244178f * fTemp329) + ((0.0028992584f * fTemp360) + ((0.00341807306f * fTemp422) + ((0.00555436872f * fTemp423) + ((0.00521866512f * fTemp424) + ((0.00302133244f * fTemp425) + ((0.00424207281f * fTemp431) + (fTemp712 + ((0.00949125644f * fTemp111) + ((0.0042115543f * fTemp294) + ((0.00540177617f * fTemp175) + ((0.0134281442f * fTemp176) + ((0.0152592547f * fTemp328) + ((0.00982696004f * fTemp444) + ((0.0108340709f * fTemp387) + ((0.0113528855f * fTemp446) + ((0.009704886f * fTemp447) + ((0.00543229468f * fTemp448) + ((0.0108035523f * fTemp451) + ((0.0129703665f * fTemp452) + ((0.00866725668f * fTemp385) + ((0.0145878475f * fTemp456) + ((0.0240180679f * fTemp457) + ((0.0201422162f * fTemp464) + ((0.0326853245f * fTemp389) + ((0.0272835474f * fTemp393) + ((0.0346385092f * fTemp141) + ((0.0338145085f * fTemp182) + ((0.0238959938f * fTemp183) + ((0.0357982107f * fTemp151) + ((0.0486770235f * fTemp190) + ((0.014557329f * fTemp192) + ((0.00958281197f * fTemp154) + ((0.0321054719f * fTemp470) + ((0.0434278399f * fTemp346) + ((0.0355540626f * fTemp471) + ((0.00823999755f * fTemp472) + ((0.0389416181f * fTemp198) + ((0.0584124289f * fTemp199) + (fTemp713 + ((0.0336924344f * fTemp58) + ((0.0155034028f * fTemp477) + ((0.02252266f * fTemp202) + ((0.0569475405f * fTemp203) + ((0.0704672411f * fTemp204) + ((0.0592059083f * fTemp35) + ((0.0343333222f * fTemp488) + ((0.0742515326f * fTemp489) + ((0.0857875273f * fTemp153) + ((0.0592364259f * fTemp205) + ((0.025696585f * fTemp206) + ((0.00546281319f * fTemp207) + ((0.0289620664f * fTemp491) + ((0.054811243f * fTemp492) + (((((((((((((((((((((((fTemp656 + (0.694265544f * fTemp229)) + (0.415448457f * fTemp231)) + (0.128604993f * fTemp234)) + (0.212775052f * fTemp235)) + (0.184026614f * fTemp236)) + (0.0684530139f * fTemp237)) + (0.205664232f * fTemp391)) + (0.20355846f * fTemp16)) + (0.38398388f * fTemp226)) + (0.708121002f * fTemp225)) + (0.455427706f * fTemp512)) + (0.0103457747f * fTemp22)) + (0.101260416f * fTemp224)) + (0.100161746f * fTemp223)) + (0.0148930326f * fTemp222)) + (0.0209967345f * fTemp220)) + (0.100741602f * fTemp219)) + (0.0792260543f * fTemp501)) + (0.13675344f * fTemp496)) + (0.219946891f * fTemp495)) + (0.187170014f * fTemp493)) + (0.0952787846f * fTemp218)) + (0.0369579159f * fTemp209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow22 ? (iSlow24 ? ((((0.000732444227f * (fTemp242 - (fTemp398 - (fTemp131 + (fTemp317 + (fTemp107 - (fTemp301 - (fTemp490 - fTemp81)))))))) + ((0.000122074038f * (fTemp244 - (fTemp31 - (fTemp325 + (fTemp274 + fTemp605))))) + ((0.00231940672f * (fTemp304 - fTemp254)) + ((0.000244148076f * (fTemp261 + (fTemp130 - fTemp361))) + ((0.00057985168f * (fTemp360 + fTemp269)) + ((0.000305185094f * (fTemp276 + (fTemp504 + fTemp176))) + ((0.0028992584f * (fTemp288 - fTemp270)) + ((0.000152592547f * (fTemp292 - (fTemp71 + (fTemp210 - (fTemp496 + (fTemp220 + fTemp497)))))) + ((0.00112918485f * (fTemp128 + fTemp330)) + ((0.0022583697f * (fTemp57 + fTemp278)) + ((0.00234992523f * (fTemp285 - (fTemp99 - fTemp103))) + ((0.00198370311f * (fTemp310 - (fTemp42 - fTemp6))) + ((0.00167851802f * (fTemp75 + fTemp518)) + ((0.00143436994f * (fTemp378 + fTemp332)) + ((0.00146488845f * (fTemp7 + (fTemp312 - (fTemp290 - fTemp114)))) + ((0.00378429517f * (fTemp144 + fTemp11)) + ((0.00402844325f * (fTemp55 + fTemp14)) + ((0.00125125889f * (fTemp339 - (fTemp420 - fTemp358))) + ((0.000213629566f * (fTemp23 + (fTemp215 + fTemp12))) + ((0.000854518265f * (fTemp135 + fTemp319)) + ((0.00473036896f * (fTemp279 + (fTemp272 + fTemp164))) + ((0.00607318338f * (fTemp253 + (fTemp271 + (fTemp179 - fTemp87)))) + ((0.00335703604f * (fTemp440 + fTemp286)) + ((0.00616473891f * (fTemp83 - fTemp340)) + ((0.000183111057f * (fTemp280 - (fTemp273 + (fTemp207 - (fTemp222 + (fTemp502 + fTemp224)))))) + ((0.00204474013f * (fTemp54 + (fTemp127 - (fTemp329 - fTemp138)))) + ((0.00103762932f * (fTemp328 + fTemp60)) + ((0.00122074038f * (fTemp68 - (fTemp206 - fTemp64))) + ((0.0051576281f * (fTemp170 + fTemp293)) + ((0.00314340647f * (fTemp76 + (fTemp30 + (fTemp172 + fTemp372)))) + ((0.00109866634f * (fTemp258 - fTemp46)) + ((0.00247199927f * (fTemp259 - fTemp3)) + ((0.000671407208f * fTemp696) + ((0.00222785119f * (fTemp243 - fTemp137)) + ((0.00244148076f * (fTemp53 + (fTemp334 + fTemp366))) + ((0.0025940733f * (fTemp104 - (fTemp338 - fTemp145))) + ((0.00296029542f * (fTemp150 + fTemp134)) + ((0.00253303628f * (fTemp173 + (fTemp49 + fTemp343))) + ((0.00216681417f * (fTemp416 + fTemp359)) + ((0.00189214759f * (fTemp98 + fTemp148)) + ((0.000274666585f * (fTemp147 + (fTemp126 + fTemp619))) + ((0.000915555283f * (fTemp388 - fTemp351)) + ((0.00134281442f * (fTemp516 - fTemp514)) + ((0.0038758507f * (fTemp93 - (fTemp429 - (fTemp183 + fTemp455)))) + ((0.00601214636f * (fTemp89 - fTemp250)) + ((0.00820947904f * (fTemp184 - fTemp451)) + (((0.00183111057f * fTemp331) + ((0.0019531846f * fTemp337) + ((0.00283822138f * fTemp8) + (fTemp697 + ((0.00268562883f * fTemp34) + ((0.00552385021f * fTemp264) + (fTemp698 + ((0.00900296029f * fTemp266) + ((0.00964384899f * fTemp252) + ((0.00811792351f * fTemp47) + ((0.00595110934f * fTemp321) + ((0.00436414685f * fTemp48) + ((0.00280770287f * fTemp51) + (fTemp699 + ((0.00573747978f * fTemp61) + ((0.00735496078f * fTemp345) + ((0.00857570115f * fTemp246) + ((0.00955229346f * fTemp2) + ((0.0101626636f * fTemp62) + ((0.0103152562f * fTemp303) + ((0.00976592302f * fTemp67) + ((0.00827051606f * fTemp155) + ((0.00610370189f * fTemp347) + ((0.00396740623f * fTemp156) + ((0.00369273964f * fTemp349) + ((0.00643940549f * fTemp43) + ((0.00564592425f * fTemp88) + ((0.00524918362f * fTemp91) + ((0.00500503555f * fTemp96) + ((0.00445570238f * fTemp101) + ((0.0115054781f * fTemp350) + ((0.0142826624f * fTemp399) + ((0.0153813288f * fTemp353) + ((0.0136112552f * fTemp357) + ((0.00946073793f * fTemp268) + ((0.00454725791f * fTemp400) + ((0.00912503432f * fTemp401) + ((0.0111697745f * fTemp38) + ((0.01126133f * fTemp168) + ((0.0106814783f * fTemp169) + (fTemp700 + ((0.00717184972f * fTemp50) + ((0.00491348002f * fTemp132) + ((0.00173955504f * fTemp275) + ((0.00286873989f * fTemp146) + (fTemp701 + ((0.00332651753f * fTemp108) + ((0.00439466536f * fTemp354) + ((0.00411999878f * fTemp142) + ((0.00329599902f * fTemp263) + ((0.0035401471f * fTemp295) + ((0.00256355479f * fTemp267) + ((0.00274666585f * fTemp85) + ((0.00277718436f * fTemp248) + ((0.00521866512f * fTemp9) + ((0.00106814783f * fTemp281) + ((0.00317392498f * fTemp410) + ((0.00366222113f * fTemp386) + ((0.00784325693f * fTemp342) + ((0.0109866634f * fTemp36) + ((0.0131839961f * fTemp39) + ((0.0118411817f * fTemp122) + ((0.00637836847f * fTemp418) + ((0.00375377666f * fTemp106) + ((0.00793481246f * fTemp377) + ((0.011322367f * fTemp530) + ((0.0119327372f * fTemp95) + ((0.00967436749f * fTemp94) + ((0.0201727357f * fTemp300) + ((0.0477614664f * fTemp116) + ((0.0587786511f * fTemp118) + ((0.0393078402f * fTemp177) + ((0.00418103579f * fTemp77) + ((0.0182805881f * fTemp152) + ((0.0396740623f * fTemp362) + ((0.0482497625f * fTemp456) + ((0.0408948027f * fTemp457) + ((0.0141300699f * fTemp364) + ((0.0424817652f * fTemp463) + ((0.0739158317f * fTemp464) + ((0.0568865016f * fTemp389) + ((0.00781273842f * fTemp393) + ((0.0263374746f * fTemp185) + ((0.0609454624f * fTemp186) + ((0.0868556798f * fTemp187) + ((0.0846278295f * fTemp188) + ((0.077822201f * fTemp189) + ((0.0271004364f * fTemp151) + ((0.0711691678f * fTemp195) + (fTemp682 + ((0.105533004f * fTemp469) + ((0.0233771782f * fTemp154) + ((0.00952177495f * fTemp472) + ((0.0693990886f * fTemp473) + ((0.0613727234f * fTemp474) + (fTemp532 + ((0.286080509f * fTemp478) + ((0.364665657f * fTemp479) + ((0.276436657f * fTemp480) + ((0.0625324249f * fTemp204) + ((0.764854908f * fTemp35) + (fTemp482 + ((0.690847516f * fTemp397) + ((0.268898576f * fTemp483) + ((0.0667439774f * fTemp484) + ((0.0077517014f * fTemp485) + (0.0261238441f * fTemp396))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000946073793f * fTemp513)))))))))))))))))))))))))))))))))))))))))))))))) + (0.000793481246f * (fTemp1 - (fTemp25 + (fTemp15 - fTemp33))))) - ((0.00155644398f * (fTemp245 - (fTemp159 - (fTemp59 + fTemp589)))) + ((0.00210577715f * (fTemp251 + (fTemp384 - fTemp370))) + ((0.00219733268f * (fTemp260 + (fTemp247 - fTemp341))) + ((0.00158696249f * (fTemp265 - (fTemp163 + (fTemp355 - fTemp70)))) + ((0.000701925717f * (fTemp283 + (fTemp404 - fTemp84))) + ((0.00363170262f * (fTemp297 - (fTemp171 - fTemp277))) + ((0.00344859157f * (fTemp305 - (fTemp21 + (fTemp326 + fTemp120)))) + ((0.00238044374f * (fTemp318 - (fTemp19 + (fTemp69 + (fTemp157 + (fTemp79 + (fTemp289 + fTemp40))))))) + ((0.00170903653f * (fTemp284 - (fTemp402 + fTemp72))) + ((0.000885036774f * (fTemp324 + (fTemp323 + (fTemp29 + (fTemp427 + fTemp405))))) + ((0.00054933317f * (fTemp24 - (fTemp5 - fTemp28))) + ((3.05185094e-05f * (fTemp333 + (fTemp262 - (fTemp105 - (fTemp327 - (fTemp409 + (fTemp445 + (fTemp217 - (fTemp218 - (fTemp500 + (fTemp219 + (fTemp391 + (fTemp237 + (fTemp236 + (fTemp231 + (fTemp230 + fTemp561)))))))))))))))) + ((9.15555283e-05f * (fTemp256 + (fTemp287 + (fTemp209 - (fTemp212 + (fTemp216 + (fTemp498 + (fTemp22 + (fTemp225 + (fTemp226 + (fTemp227 + (fTemp228 + (fTemp16 + fTemp702))))))))))))) + ((0.000396740623f * (fTemp109 - fTemp160)) + ((0.000518814661f * (fTemp110 - (fTemp208 - fTemp56))) + ((0.000762962736f * (fTemp113 - (fTemp322 - (fTemp314 - fTemp97)))) + ((0.000976592302f * (fTemp117 + (fTemp299 - fTemp298))) + ((0.00100711081f * (fTemp65 + fTemp161)) + ((0.000335703604f * (fTemp119 - (fTemp505 - fTemp375))) + ((0.00823999755f * (fTemp363 - fTemp44)) + ((0.00802636798f * (fTemp111 + fTemp165)) + ((0.00842310861f * (fTemp376 + fTemp166)) + ((0.00894192327f * (fTemp450 - fTemp73)) + ((6.10370189e-05f * (fTemp365 - (fTemp492 - (fTemp211 - (fTemp495 + (fTemp499 + (fTemp501 + (fTemp223 + (fTemp241 + (fTemp238 + (fTemp235 + (fTemp234 + (fTemp233 + (fTemp511 + (fTemp0 + fTemp232))))))))))))))) + ((0.00796533097f * (fTemp454 - fTemp78)) + ((0.00885036774f * (fTemp175 - fTemp129)) + ((0.00164799951f * (fTemp133 - fTemp703)) + ((0.00207525864f * (fTemp371 + fTemp115)) + ((0.00137333293f * (fTemp140 - (fTemp92 + fTemp13))) + ((0.00140385143f * (fTemp100 - fTemp257)) + ((0.00463881344f * (fTemp52 - fTemp374)) + ((0.00186162908f * (fTemp80 + (fTemp26 - fTemp313))) + ((0.00241096225f * (fTemp428 - fTemp282)) + ((0.0019226661f * (fTemp348 - (fTemp139 - fTemp315))) + ((0.00152592547f * (fTemp415 - fTemp90)) + ((0.000366222113f * (fTemp136 - (fTemp491 - fTemp422))) + ((0.00265511032f * (fTemp407 - fTemp32)) + ((0.00537125766f * (fTemp439 - fTemp406)) + ((0.00390636921f * (fTemp383 - fTemp382)) + ((0.0042115543f * (fTemp444 + fTemp411)) + ((0.00497451704f * (fTemp205 - fTemp417)) + ((0.00943021942f * (fTemp431 + fTemp369)) + ((0.0067751091f * (fTemp182 + fTemp430)) + ((0.0283822138f * (fTemp394 + fTemp442)) + ((0.00531022064f * fTemp608) + ((0.000640888698f * fTemp255) + ((((((((((0.00708029419f * fTemp352) + ((0.00726340525f * fTemp167) + ((0.004852443f * fTemp63) + ((0.00558488723f * fTemp102) + ((0.0137028107f * fTemp20) + ((0.0164189581f * fTemp124) + ((0.0134281442f * fTemp125) + ((0.00695822015f * fTemp123) + ((0.00213629566f * fTemp10) + ((0.0012817774f * fTemp356) + ((0.00119022187f * fTemp380) + ((0.00308236945f * fTemp336) + ((0.00228888821f * fTemp379) + ((0.00393688772f * fTemp408) + ((0.00650044251f * fTemp4) + ((0.00866725668f * fTemp412) + ((0.0107730338f * fTemp413) + ((0.00939970091f * fTemp414) + ((0.00589007232f * fTemp390) + ((0.0074159978f * fTemp421) + (fTemp704 + ((0.00433362834f * fTemp149) + ((0.008087405f * fTemp423) + ((0.0139469588f * fTemp424) + ((0.0160222184f * fTemp425) + ((0.0127872555f * fTemp426) + ((0.00704977568f * fTemp17) + ((0.0104983672f * fTemp432) + ((0.0137943663f * fTemp433) + ((0.0189825129f * fTemp434) + ((0.022644734f * fTemp435) + ((0.0196234025f * fTemp436) + ((0.0133060701f * fTemp437) + ((0.00628681295f * fTemp438) + ((0.00988799706f * fTemp381) + ((0.0126041444f * fTemp344) + ((0.00350962859f * fTemp392) + ((0.0155949583f * fTemp441) + ((0.0309457686f * fTemp443) + ((0.0232551042f * fTemp522) + ((0.00653096102f * fTemp178) + ((0.0543839857f * fTemp249) + ((0.0792260543f * fTemp387) + ((0.0681478307f * fTemp446) + ((0.0392773226f * fTemp447) + ((0.00985747855f * fTemp448) + ((0.000427259132f * fTemp180) + ((0.0122684408f * fTemp449) + ((0.00863673817f * fTemp452) + (fTemp531 + ((0.0156559963f * fTemp373) + ((0.0179448836f * fTemp121) + ((0.012939848f * fTemp453) + ((0.0817590877f * fTemp458) + ((0.119602039f * fTemp459) + ((0.127994627f * fTemp460) + ((0.0935392305f * fTemp461) + ((0.0285042878f * fTemp462) + ((0.0338145085f * fTemp465) + ((0.0607318357f * fTemp466) + ((0.0643330216f * fTemp467) + ((0.0670796856f * fTemp468) + ((0.0740379021f * fTemp368) + ((0.0790429413f * fTemp181) + ((0.0684530139f * fTemp86) + ((0.0478530228f * fTemp367) + ((0.0247199927f * fTemp141) + ((0.0306711029f * fTemp190) + ((0.0982390791f * fTemp191) + ((0.126529738f * fTemp192) + ((0.129032254f * fTemp193) + ((0.0506607257f * fTemp194) + ((0.0943632349f * fTemp470) + ((0.146488845f * fTemp346) + ((0.116641745f * fTemp471) + ((0.0231940672f * fTemp475) + ((0.0966826379f * fTemp476) + ((0.174657434f * fTemp197) + ((0.19721061f * fTemp198) + ((0.180547506f * fTemp199) + ((0.136021003f * fTemp200) + ((0.0261543635f * fTemp58) + ((0.110599078f * fTemp481) + ((0.588244259f * fTemp201) + ((0.870479465f * fTemp202) + ((0.646168411f * fTemp203) + ((0.0166325886f * fTemp486) + ((0.031037325f * fTemp487) + ((0.0331431031f * fTemp488) + ((0.0139164403f * fTemp153) + (0.0253608823f * fTemp489))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00476088747f * fTemp45)) + (0.00762962736f * fTemp41)) + (0.00790429395f * fTemp37)) + (0.00320444349f * fTemp311)) + (0.003234962f * fTemp309)) + (0.00372325815f * fTemp302)) + (0.00311288796f * fTemp296)) + (0.00201422162f * fTemp291))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.0022583697f * (fTemp244 + (fTemp104 + (fTemp530 + fTemp59)))) + ((0.00430310983f * (fTemp398 + (fTemp274 + fTemp317))) + ((0.00460829493f * (fTemp343 + fTemp251)) + ((0.000366222113f * (fTemp260 + (fTemp170 + (fTemp13 - (fTemp40 - (fTemp240 + fTemp206)))))) + ((0.00283822138f * (fTemp302 + (fTemp348 + fTemp259))) + ((0.00183111057f * (fTemp318 + (fTemp22 + fTemp263))) + ((0.000793481246f * (fTemp284 + (fTemp21 + (fTemp408 + fTemp119)))) + ((0.00738547929f * (fTemp332 - fTemp285)) + ((0.00268562883f * (fTemp366 - fTemp304)) + ((0.00253303628f * (fTemp107 + fTemp310)) + ((0.00210577715f * (fTemp8 + (fTemp84 + (fTemp414 + fTemp361)))) + ((0.00143436994f * (fTemp72 - fTemp18)) + ((0.000122074038f * (fTemp24 + (fTemp28 + (fTemp280 + (fTemp156 - (fTemp519 - (fTemp63 + (fTemp74 + (fTemp210 - (fTemp213 - (fTemp217 - (fTemp220 - (fTemp221 - (fTemp235 + (fTemp233 - (fTemp229 + fTemp511)))))))))))))))) + ((0.000457777642f * (fTemp25 + (fTemp45 - (fTemp266 - (fTemp69 + (fTemp164 + (fTemp353 + (fTemp365 + (fTemp173 - (fTemp449 - (fTemp228 - fTemp227))))))))))) + ((0.00103762932f * (fTemp262 + (fTemp60 + (fTemp293 + (fTemp71 + (fTemp169 + fTemp688)))))) + ((0.00155644398f * (fTemp287 + fTemp34)) + ((0.00140385143f * (fTemp279 + (fTemp404 + fTemp171))) + ((0.001617481f * (fTemp264 + (fTemp27 + (fTemp57 + fTemp140)))) + ((0.00167851802f * (fTemp349 + fTemp286)) + ((0.00100711081f * (fTemp311 + (fTemp51 + (fTemp312 + (fTemp314 + fTemp326))))) + ((0.00109866634f * (fTemp30 + fTemp54)) + ((0.00119022187f * (fTemp33 + (fTemp147 + fTemp115))) + ((0.00057985168f * (fTemp61 - (fTemp352 - (fTemp400 + (fTemp73 + (fTemp374 + (fTemp226 - fTemp92))))))) + ((0.00131229591f * (fTemp345 + (fTemp137 + fTemp689))) + ((0.000732444227f * (fTemp62 + (fTemp32 + fTemp20))) + ((0.00173955504f * (fTemp75 + (fTemp329 + fTemp49))) + ((0.00149540696f * (fTemp46 + (fTemp247 + fTemp168))) + ((0.00180059206f * (fTemp110 + (fTemp288 + (fTemp243 + (fTemp420 - fTemp406))))) + ((0.000427259132f * (fTemp289 + fTemp117)) + ((0.000610370189f * (fTemp161 - (fTemp165 - (fTemp124 - (fTemp225 - fTemp413))))) + ((0.000152592547f * (fTemp272 + (fTemp9 - (fTemp89 - (fTemp495 - (fTemp239 - (fTemp234 - fTemp237))))))) + ((0.00134281442f * (fTemp80 + fTemp401)) + ((0.00170903653f * (fTemp6 + fTemp38)) + ((0.000518814661f * (fTemp125 + fTemp120)) + ((0.00054933317f * (fTemp11 + (fTemp102 - fTemp159))) + ((0.00234992523f * (fTemp50 - (fTemp81 - fTemp257))) + ((0.00271614734f * (fTemp301 + fTemp341)) + ((0.00204474013f * (fTemp150 + fTemp53)) + ((0.00317392498f * (fTemp370 + (fTemp426 + fTemp5))) + ((0.00308236945f * (fTemp298 + (fTemp388 + fTemp313))) + ((0.00158696249f * (fTemp282 + fTemp144)) + ((0.000976592302f * (fTemp68 + (fTemp134 + fTemp129))) + ((0.000701925717f * (fTemp512 + fTemp172)) + ((0.00216681417f * (fTemp415 + fTemp85)) + ((0.00231940672f * (fTemp390 + fTemp97)) + ((3.05185094e-05f * (fTemp12 - (fTemp211 - (fTemp212 - (fTemp215 + (fTemp496 + (fTemp500 + (fTemp0 + fTemp219)))))))) + ((0.00241096225f * (fTemp126 + fTemp290)) + ((0.00466933195f * (fTemp52 + fTemp316)) + ((0.00454725791f * fTemp690) + ((0.00207525864f * (fTemp336 + fTemp334)) + ((0.0083925901f * (fTemp250 + fTemp130)) + ((0.000244148076f * (fTemp516 - (fTemp485 - (fTemp216 + (fTemp236 + fTemp218))))) + ((0.00399792474f * (fTemp396 + fTemp416)) + ((0.000183111057f * (fTemp486 + (fTemp488 - (fTemp222 + fTemp489)))) + ((0.00115970336f * fTemp308) + ((0.00280770287f * fTemp254) + ((0.00595110934f * fTemp277) + ((0.00708029419f * fTemp305) + ((0.00592059083f * fTemp309) + ((0.00375377666f * fTemp270) + ((0.00634784997f * fTemp7) + ((0.00424207281f * fTemp337) + ((0.00152592547f * fTemp319) + ((0.000671407208f * fTemp340) + ((0.00164799951f * fTemp246) + ((0.00137333293f * fTemp2) + ((0.00186162908f * fTemp79) + ((0.000946073793f * fTemp323) + ((0.000762962736f * fTemp163) + ((0.00262459181f * fTemp132) + ((0.00228888821f * fTemp273) + ((0.00189214759f * fTemp133) + ((0.00122074038f * fTemp10) + ((0.00201422162f * fTemp56) + ((0.00213629566f * fTemp275) + ((0.00350962859f * fTemp402) + ((0.00344859157f * fTemp358) + ((0.00265511032f * fTemp315) + ((0.0051576281f * fTemp128) + ((0.00518814661f * fTemp90) + ((0.00347911008f * fTemp351) + ((0.0019226661f * fTemp82) + ((0.00112918485f * fTemp403) + ((0.00384533219f * fTemp127) + ((0.0042115543f * fTemp64) + ((0.00439466536f * fTemp375) + ((0.00527970213f * fTemp70) + ((0.00680562761f * fTemp371) + ((0.00781273842f * fTemp42) + ((0.00766014587f * fTemp514) + ((0.00585955381f * fTemp136) + (fTemp691 + ((0.0019531846f * fTemp112) + ((0.00381481368f * fTemp356) + ((0.00717184972f * fTemp405) + ((0.006469924f * fTemp378) + ((0.00292977691f * fTemp98) + ((0.00238044374f * fTemp26) + ((0.00408948027f * fTemp380) + ((0.00506607257f * fTemp100) + ((0.00411999878f * fTemp99) + ((0.00402844325f * fTemp281) + ((0.003234962f * fTemp138) + ((0.00732444227f * fTemp66) + ((0.0077517014f * fTemp4) + ((0.00692770164f * fTemp87) + ((0.00805688649f * fTemp383) + ((0.0114139225f * fTemp409) + ((0.0128482925f * fTemp410) + ((0.0093691824f * fTemp386) + ((0.00787377544f * fTemp417) + ((0.0101931822f * fTemp342) + ((0.0106814783f * fTemp36) + ((0.0111392559f * fTemp39) + ((0.011322367f * fTemp122) + ((0.00817896053f * fTemp418) + ((0.00247199927f * fTemp515) + ((0.004852443f * fTemp149) + ((0.0120242927f * fTemp95) + ((0.0115665151f * fTemp94) + ((0.00918607134f * fTemp429) + ((0.0139469588f * fTemp430) + ((0.00857570115f * fTemp431) + ((0.00943021942f * fTemp111) + ((0.0298165847f * fTemp294) + ((0.0388805829f * fTemp440) + ((0.0352183618f * fTemp392) + ((0.0221564379f * fTemp441) + ((0.0130314035f * fTemp442) + ((0.00537125766f * fTemp443) + ((0.0390636921f * fTemp116) + ((0.0555436872f * fTemp118) + ((0.0411389507f * fTemp177) + ((0.011383404f * fTemp178) + ((0.00854518265f * fTemp447) + ((0.00390636921f * fTemp448) + ((0.0319528803f * fTemp450) + ((0.0516678356f * fTemp451) + ((0.0631122813f * fTemp452) + ((0.0684224963f * fTemp385) + ((0.0579241328f * fTemp373) + ((0.0215155501f * fTemp121) + ((0.0326853245f * fTemp394) + ((0.0792870894f * fTemp458) + ((0.085665457f * fTemp459) + ((0.052064579f * fTemp460) + ((0.0152287362f * fTemp461) + ((0.0138248848f * fTemp181) + ((0.0361949541f * fTemp86) + ((0.04031495f * fTemp367) + ((0.0458082817f * fTemp141) + ((0.076967679f * fTemp182) + ((0.107303083f * fTemp183) + ((0.0716574639f * fTemp184) + ((0.0057985168f * fTemp185) + ((0.014435255f * fTemp192) + ((0.128482923f * fTemp193) + ((0.188299209f * fTemp194) + ((0.167058319f * fTemp195) + ((0.0522476882f * fTemp196) + ((0.0334482864f * fTemp197) + ((0.118259221f * fTemp198) + ((0.173223063f * fTemp199) + ((0.153599665f * fTemp200) + ((0.00668355357f * fTemp58) + ((0.00683614612f * fTemp479) + ((0.143040255f * fTemp480) + ((0.0321359895f * fTemp481) + ((0.638752401f * fTemp35) + (fTemp482 + ((0.767448962f * fTemp397) + ((0.319193095f * fTemp483) + ((0.00619525742f * fTemp503) + (0.0608233884f * fTemp484)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00219733268f * (fTemp513 + (fTemp265 - (fTemp29 + (fTemp300 - fTemp407))))) + ((0.000305185094f * (fTemp242 - (fTemp256 + (fTemp48 + (fTemp83 + (fTemp91 + (fTemp109 + (fTemp322 + fTemp399)))))))) + ((0.00521866512f * (fTemp261 - fTemp245)) + ((0.00106814783f * (fTemp297 - (fTemp157 + (fTemp425 + fTemp299)))) + ((0.000274666585f * (fTemp324 + (fTemp333 + (fTemp101 - (fTemp44 + (fTemp350 + (fTemp3 + (fTemp363 - (fTemp391 + fTemp437))))))))) + ((0.00625629444f * (fTemp17 - fTemp518)) + ((0.00146488845f * (fTemp339 - (fTemp253 + (fTemp325 + (fTemp108 - (fTemp412 + fTemp15)))))) + ((0.000213629566f * (fTemp31 + (fTemp47 - (fTemp55 + (fTemp88 + (fTemp268 + (fTemp148 + (fTemp490 + fTemp153)))))))) + ((0.000335703604f * (fTemp320 - (fTemp131 + fTemp692))) + ((0.000396740623f * (fTemp252 - (fTemp357 + (fTemp167 - (fTemp327 - (fTemp384 - (fTemp522 + (fTemp241 - fTemp208)))))))) + ((9.15555283e-05f * (fTemp303 + (fTemp271 - (fTemp96 - (fTemp105 + (fTemp166 - (fTemp114 + (fTemp207 + (fTemp135 - (fTemp491 - (fTemp492 + fTemp693))))))))))) + ((0.0012817774f * (fTemp155 - (fTemp267 + fTemp354))) + ((0.000823999755f * (fTemp347 - (fTemp103 + (fTemp359 + fTemp694)))) + ((0.000488296151f * (fTemp76 + (fTemp160 - (fTemp123 + (fTemp78 + (fTemp223 + fTemp142)))))) + ((0.000640888698f * (fTemp14 + (fTemp23 - (fTemp37 + (fTemp41 - (fTemp224 - fTemp113)))))) + ((0.00198370311f * (fTemp369 - fTemp295)) + ((0.00125125889f * (fTemp411 - fTemp379)) + ((0.000885036774f * (fTemp505 - fTemp438)) + ((6.10370189e-05f * (fTemp487 + (fTemp209 - (fTemp493 + (fTemp497 - (fTemp498 - (fTemp499 - (fTemp232 - (fTemp506 - fTemp230))))))))) + (((((((((((((0.00177007355f * fTemp19) + ((0.000854518265f * fTemp67) + ((0.00335703604f * fTemp382) + ((0.00329599902f * fTemp355) + (fTemp653 + ((0.00378429517f * fTemp65) + ((0.00762962736f * fTemp360) + ((0.00939970091f * fTemp106) + ((0.00604266487f * fTemp377) + ((0.0132450331f * fTemp422) + ((0.0169377737f * fTemp423) + ((0.00921658985f * fTemp424) + ((0.0166020691f * fTemp338) + ((0.0163579211f * fTemp427) + ((0.00463881344f * fTemp428) + ((0.0028992584f * fTemp432) + ((0.0175481439f * fTemp433) + ((0.0281991027f * fTemp434) + ((0.0272835474f * fTemp435) + ((0.0139164403f * fTemp436) + ((0.00991851557f * fTemp439) + ((0.0163884405f * fTemp381) + ((0.0104678487f * fTemp344) + ((0.00665303506f * fTemp175) + ((0.0140079958f * fTemp176) + ((0.025696585f * fTemp328) + ((0.0359202847f * fTemp444) + ((0.0285653248f * fTemp445) + ((0.0136722922f * fTemp249) + ((0.021210365f * fTemp387) + ((0.00842310861f * fTemp446) + ((0.0292977691f * fTemp77) + ((0.0616168715f * fTemp179) + ((0.0665913895f * fTemp180) + ((0.0406811722f * fTemp376) + (fTemp695 + ((0.0618610196f * fTemp454) + ((0.0794702023f * fTemp455) + ((0.0789513811f * fTemp152) + ((0.0782799795f * fTemp362) + ((0.0791039765f * fTemp456) + ((0.0664693117f * fTemp457) + ((0.0261543635f * fTemp364) + ((0.0183416251f * fTemp462) + ((0.0538041331f * fTemp463) + ((0.0772728696f * fTemp464) + ((0.0781579018f * fTemp389) + ((0.0827661976f * fTemp393) + ((0.096499525f * fTemp465) + ((0.111636706f * fTemp466) + ((0.102694787f * fTemp467) + ((0.0688497573f * fTemp468) + ((0.0257881414f * fTemp368) + ((0.0232856236f * fTemp186) + ((0.0335093252f * fTemp187) + ((0.0415356904f * fTemp188) + ((0.0741599798f * fTemp189) + ((0.119266339f * fTemp151) + ((0.154545739f * fTemp190) + ((0.105410933f * fTemp191) + ((0.0905484185f * fTemp469) + ((0.169133574f * fTemp154) + ((0.157719657f * fTemp470) + ((0.0888393819f * fTemp346) + ((0.0422681347f * fTemp471) + ((0.0438550971f * fTemp472) + ((0.101718195f * fTemp473) + ((0.145268112f * fTemp474) + ((0.146824554f * fTemp475) + ((0.0860622004f * fTemp476) + ((0.124515519f * fTemp477) + ((0.150486767f * fTemp478) + ((0.360423595f * fTemp201) + ((0.804223776f * fTemp202) + ((0.746879458f * fTemp203) + ((0.008087405f * fTemp502) + (0.137485892f * fTemp204))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00976592302f * fTemp278)) + (0.00906399731f * fTemp331)) + (0.00598162785f * fTemp330)) + (0.00256355479f * fTemp292)) + (0.0045167394f * fTemp296)) + (0.00650044251f * fTemp291)) + (0.00729392376f * fTemp283)) + (0.00704977568f * fTemp276)) + (0.00622577593f * fTemp269)) + (0.00393688772f * fTemp255)) + (0.00326548051f * fTemp1))))))))))))))))))))))) : (iSlow23 ? (((0.00311288796f * (fTemp327 + fTemp1)) + ((0.00622577593f * (fTemp99 + fTemp513)) + ((0.00723288674f * (fTemp417 + fTemp244)) + ((0.00338755455f * (fTemp245 + (fTemp365 + (fTemp263 + (fTemp392 + fTemp348))))) + ((0.00198370311f * (fTemp251 + (fTemp19 - (fTemp107 - fTemp91)))) + ((0.000854518265f * (fTemp254 - (fTemp42 - fTemp171))) + ((0.00427259132f * (fTemp126 - fTemp265)) + ((0.00228888821f * (fTemp271 - fTemp276)) + ((0.00277718436f * (fTemp150 + fTemp283)) + ((0.00573747978f * (fTemp64 + fTemp302)) + ((0.00189214759f * (fTemp305 - (fTemp139 - fTemp160))) + ((0.000610370189f * (fTemp309 + (fTemp388 + fTemp274))) + ((0.00057985168f * (fTemp324 - (fTemp403 + (fTemp496 + fTemp420)))) + ((0.001617481f * (fTemp330 + (fTemp109 + fTemp156))) + ((0.00137333293f * (fTemp331 + (fTemp304 - (fTemp138 - fTemp25)))) + ((0.00100711081f * (fTemp278 + (fTemp28 + (fTemp67 + (fTemp287 + (fTemp218 + fTemp98)))))) + ((0.000915555283f * (fTemp285 + (fTemp31 + (fTemp333 + (fTemp71 + (fTemp108 + (fTemp351 + fTemp354))))))) + ((0.00210577715f * (fTemp310 + (fTemp164 + (fTemp299 + fTemp10)))) + ((0.0028992584f * (fTemp332 + (fTemp124 - (fTemp418 - fTemp142)))) + ((0.00280770287f * (fTemp7 + (fTemp402 + fTemp133))) + ((0.00283822138f * (fTemp44 + fTemp337)) + ((0.00296029542f * (fTemp60 + fTemp11)) + ((0.00234992523f * (fTemp18 + (fTemp264 + (fTemp56 + (fTemp146 + fTemp358))))) + ((0.00183111057f * (fTemp339 + (fTemp80 + (fTemp215 + fTemp366)))) + ((0.00180059206f * (fTemp23 + (fTemp69 - (fTemp127 - fTemp76)))) + ((0.00164799951f * (fTemp24 + (fTemp2 + (fTemp306 + fTemp298)))) + ((0.00109866634f * (fTemp303 + fTemp256)) + ((0.00155644398f * (fTemp6 + fTemp319)) + ((0.00204474013f * (fTemp92 + fTemp34)) + ((0.00231940672f * (fTemp279 + (fTemp286 - (fTemp437 - fTemp137)))) + ((0.00244148076f * (fTemp253 + (fTemp102 + fTemp167))) + ((0.00241096225f * (fTemp325 - (fTemp411 - fTemp282))) + ((0.00238044374f * (fTemp311 + (fTemp247 + (fTemp343 + fTemp134)))) + ((0.00219733268f * (fTemp340 + (fTemp275 + fTemp252))) + ((0.00167851802f * (fTemp37 + (fTemp101 + (fTemp378 - fTemp32)))) + ((0.00186162908f * (fTemp83 + fTemp45)) + ((0.00265511032f * (fTemp280 + (fTemp312 + (fTemp353 + (fTemp30 + fTemp20))))) + ((0.00286873989f * (fTemp266 + (fTemp72 + (fTemp372 + fTemp169)))) + ((0.00146488845f * (fTemp110 + fTemp47)) + ((0.000701925717f * (fTemp495 + fTemp321)) + ((0.000488296151f * (fTemp82 + fTemp21)) + ((0.00134281442f * (fTemp51 + (fTemp61 + (fTemp62 + (fTemp113 + (fTemp173 + fTemp257)))))) + ((0.00222785119f * (fTemp322 + fTemp54)) + ((0.00302133244f * (fTemp33 + (fTemp63 + fTemp79))) + ((0.00247199927f * (fTemp68 + (fTemp316 + fTemp84))) + ((0.00177007355f * (fTemp246 + (fTemp96 + (fTemp323 + (fTemp46 + (fTemp374 + fTemp117)))))) + ((0.000885036774f * (fTemp314 + fTemp155)) + ((0.0022583697f * (fTemp88 + fTemp157)) + ((0.00253303628f * (fTemp85 + fTemp349)) + ((0.0019531846f * (fTemp159 + (fTemp161 + (fTemp166 - (fTemp386 - fTemp145))))) + ((0.00170903653f * (fTemp105 + (fTemp119 + (fTemp163 - (fTemp404 - fTemp13))))) + ((0.003234962f * (fTemp350 + (fTemp148 + fTemp170))) + ((0.00213629566f * (fTemp357 + (fTemp295 + fTemp3))) + ((0.00201422162f * (fTemp268 + (fTemp272 + (fTemp352 + (fTemp165 + (fTemp363 + (fTemp115 + (fTemp406 + fTemp140)))))))) + ((0.00378429517f * (fTemp87 + fTemp74)) + ((0.00408948027f * (fTemp400 + fTemp683)) + ((0.00262459181f * (fTemp370 + fTemp73)) + ((0.00207525864f * (fTemp293 + (fTemp43 + (fTemp59 + fTemp519)))) + ((0.00335703604f * (fTemp57 + fTemp123)) + ((0.00341807306f * (fTemp78 - (fTemp112 - fTemp273))) + ((0.00454725791f * (fTemp50 - (fTemp176 + fTemp342))) + ((0.00411999878f * (fTemp341 + (fTemp198 + fTemp259))) + ((0.000366222113f * (fTemp172 - (fTemp248 - (fTemp481 + (fTemp501 + fTemp202))))) + ((0.00256355479f * (fTemp103 - (fTemp383 - fTemp359))) + ((0.00430310983f * (fTemp329 + fTemp313)) + ((0.00344859157f * (fTemp408 + fTemp29)) + ((0.00350962859f * (fTemp384 + fTemp361)) + ((0.00689718314f * (fTemp375 + fTemp317)) + ((0.000335703604f * (fTemp40 - (fTemp441 - fTemp684))) + ((0.000274666585f * (fTemp130 - (fTemp430 + (fTemp219 - fTemp153)))) + ((0.00610370189f * (fTemp217 + fTemp461)) + ((0.000244148076f * (fTemp224 - fTemp478)) + ((0.000213629566f * (fTemp479 - (fTemp212 - fTemp488))) + ((0.000457777642f * (fTemp499 - fTemp498)) + ((6.10370189e-05f * (fTemp482 - (fTemp484 - (fTemp205 + (fTemp208 - (fTemp210 - fTemp625)))))) + ((0.00784325693f * fTemp242) + ((0.00540177617f * fTemp398) + ((0.00680562761f * fTemp291) + ((0.0083925901f * fTemp296) + ((0.0077517014f * fTemp297) + ((0.00357066561f * fTemp277) + ((0.00268562883f * fTemp518) + ((0.00292977691f * fTemp8) + ((0.00274666585f * fTemp14) + ((0.00131229591f * fTemp262) + ((0.00149540696f * fTemp41) + ((0.00308236945f * fTemp320) + ((0.00314340647f * fTemp307) + ((0.00115970336f * fTemp347) + ((0.00320444349f * fTemp75) + ((0.00369273964f * fTemp38) + ((0.00326548051f * fTemp168) + ((0.00250251777f * fTemp120) + ((0.00329599902f * fTemp125) + ((0.00424207281f * fTemp27) + ((0.0045167394f * fTemp132) + ((0.00152592547f * fTemp53) + ((0.00140385143f * fTemp104) + (fTemp681 + ((0.00363170262f * fTemp326) + ((0.00317392498f * fTemp267) + ((0.00299081393f * fTemp288) + ((0.0042115543f * fTemp114) + ((0.00500503555f * fTemp131) + ((0.00503555406f * fTemp147) + ((0.00439466536f * fTemp97) + ((0.000732444227f * fTemp12) + ((0.00402844325f * fTemp290) + ((0.0057985168f * fTemp5) + ((0.00674459059f * fTemp128) + ((0.00488296151f * fTemp90) + ((0.00494399853f * fTemp70) + ((0.0012817774f * fTemp371) + ((0.00552385021f * fTemp355) + ((0.00460829493f * fTemp15) + ((0.00442518387f * fTemp26) + ((0.00787377544f * fTemp380) + ((0.00955229346f * fTemp100) + ((0.00576799829f * fTemp52) + ((0.00631733146f * fTemp66) + ((0.00683614612f * fTemp250) + ((0.00695822015f * fTemp4) + ((0.0074159978f * fTemp416) + ((0.00982696004f * fTemp65) + (fTemp597 + ((0.0054933317f * fTemp426) + ((0.0256050304f * fTemp17) + ((0.0337839909f * fTemp338) + ((0.0297555476f * fTemp427) + ((0.0162053294f * fTemp428) + ((0.0071108127f * fTemp429) + ((0.0334482864f * fTemp438) + ((0.0500198379f * fTemp439) + ((0.0357066579f * fTemp381) + ((0.00598162785f * fTemp344) + ((0.0279854741f * fTemp328) + ((0.0469374694f * fTemp444) + ((0.0576494634f * fTemp445) + ((0.0623798333f * fTemp300) + ((0.0520035401f * fTemp116) + ((0.0159611814f * fTemp118) + ((0.0306711029f * fTemp179) + ((0.0762657523f * fTemp180) + ((0.0822168663f * fTemp376) + ((0.0485244319f * fTemp449) + ((0.0117801446f * fTemp450) + ((0.0163579211f * fTemp456) + ((0.0380565822f * fTemp457) + ((0.0416882858f * fTemp364) + ((0.0472426526f * fTemp394) + ((0.0781273842f * fTemp458) + ((0.107333601f * fTemp459) + ((0.0175786614f * fTemp467) + ((0.132267222f * fTemp468) + ((0.191473126f * fTemp368) + ((0.16980499f * fTemp181) + ((0.0545670949f * fTemp86) + ((0.0435193963f * fTemp151) + ((0.126926482f * fTemp190) + ((0.180547506f * fTemp191) + ((0.161839649f * fTemp192) + ((0.0168156996f * fTemp193) + ((0.0155339213f * fTemp196) + ((0.151432842f * fTemp469) + ((0.0420545079f * fTemp154) + ((0.647846937f * fTemp473) + (fTemp474 + ((0.764305532f * fTemp475) + ((0.317178875f * fTemp476) + ((0.0600604266f * fTemp197) + ((0.000305185094f * fTemp200) + ((0.00054933317f * fTemp497) + fTemp685)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.000183111057f * (fTemp270 - (fTemp48 + (fTemp477 + (fTemp204 + (fTemp206 + (fTemp502 - fTemp221))))))) + ((9.15555283e-05f * (fTemp284 + (fTemp336 + (fTemp199 + (fTemp58 - (fTemp201 + (fTemp203 - (fTemp135 + (fTemp503 + (fTemp505 - fTemp686)))))))))) + ((0.00125125889f * (fTemp516 - fTemp292)) + ((0.00143436994f * (fTemp335 - fTemp55)) + ((0.00158696249f * (fTemp81 - fTemp345)) + ((0.00305185094f * (fTemp281 - fTemp399)) + ((0.00375377666f * (fTemp89 - fTemp129)) + ((0.000793481246f * (fTemp136 - fTemp258)) + ((3.05185094e-05f * (fTemp356 + (fTemp397 - (fTemp396 - (fTemp207 - (fTemp490 - (fTemp491 + (fTemp209 + (fTemp225 + (fTemp239 - (fTemp238 + (fTemp511 + (fTemp232 + fTemp687))))))))))))) + ((0.00457777642f * (fTemp93 + fTemp289)) + ((0.00463881344f * (fTemp379 - fTemp382)) + ((0.000152592547f * (fTemp407 - (fTemp489 + (fTemp211 - (fTemp223 - (fTemp504 - fTemp22)))))) + ((0.0273445845f * (fTemp77 + fTemp294)) + ((0.0713522732f * (fTemp389 - fTemp460)) + ((0.000122074038f * (fTemp35 - (fTemp483 - (fTemp485 - (fTemp226 + fTemp512))))) + (((((((0.00122074038f * fTemp514) + ((0.00512710959f * fTemp243) + ((0.00524918362f * fTemp334) + ((0.0035401471f * fTemp49) + ((0.00106814783f * fTemp405) + ((0.00173955504f * fTemp9) + ((0.00506607257f * fTemp301) + ((0.00759910885f * fTemp409) + ((0.00643940549f * fTemp410) + ((0.00811792351f * fTemp412) + ((0.0124210333f * fTemp413) + ((0.014557329f * fTemp414) + ((0.0110782189f * fTemp390) + ((0.0025940733f * fTemp415) + ((0.0176702179f * fTemp36) + ((0.0214850307f * fTemp39) + ((0.0135502182f * fTemp122) + ((0.0101321451f * fTemp421) + ((0.0209051799f * fTemp369) + ((0.021149328f * fTemp515) + ((0.009704886f * fTemp149) + ((0.00720236823f * fTemp106) + ((0.0222479943f * fTemp377) + ((0.0330210291f * fTemp530) + ((0.0315256193f * fTemp95) + ((0.0176091809f * fTemp94) + ((0.00271614734f * fTemp422) + ((0.0140690329f * fTemp423) + ((0.0205389578f * fTemp424) + ((0.014496292f * fTemp425) + ((0.00570696127f * fTemp431) + ((0.0116885891f * fTemp432) + ((0.019287698f * fTemp433) + ((0.0303048808f * fTemp434) + ((0.0399487279f * fTemp435) + ((0.0324411765f * fTemp436) + ((0.0195013285f * fTemp111) + ((0.0142826624f * fTemp440) + ((0.0332651772f * fTemp442) + ((0.0661336109f * fTemp443) + ((0.0712607205f * fTemp522) + ((0.0449537635f * fTemp175) + ((0.0287179183f * fTemp177) + ((0.0665303543f * fTemp178) + ((0.0836207196f * fTemp249) + ((0.0820947886f * fTemp387) + ((0.0801416039f * fTemp446) + ((0.0798669383f * fTemp447) + ((0.0670186505f * fTemp448) + ((0.0207831059f * fTemp451) + ((0.0550859086f * fTemp452) + ((0.0773644224f * fTemp385) + ((0.0777306408f * fTemp373) + ((0.0818811581f * fTemp121) + ((0.0949430838f * fTemp453) + ((0.109500416f * fTemp454) + ((0.100131229f * fTemp455) + ((0.0664387941f * fTemp152) + ((0.0230719931f * fTemp362) + ((0.0221564379f * fTemp462) + ((0.032227546f * fTemp463) + ((0.0401623584f * fTemp464) + ((0.113956116f * fTemp393) + ((0.148747221f * fTemp465) + ((0.100924708f * fTemp466) + ((0.0874660462f * fTemp367) + ((0.164036989f * fTemp141) + ((0.149662778f * fTemp182) + ((0.0796838254f * fTemp183) + ((0.0344553962f * fTemp184) + ((0.0371105075f * fTemp185) + ((0.0935087129f * fTemp186) + ((0.135593742f * fTemp187) + ((0.135410622f * fTemp188) + ((0.0746787935f * fTemp189) + ((0.113620408f * fTemp194) + ((0.140354618f * fTemp195) + ((0.347025961f * fTemp470) + ((0.785241246f * fTemp346) + ((0.725211322f * fTemp471) + ((0.119083226f * fTemp472) + ((0.000640888698f * fTemp214) + ((0.00793481246f * fTemp216) + ((0.000396740623f * fTemp500) + (0.000823999755f * fTemp493))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000427259132f * fTemp318)) + (0.00656147953f * fTemp269)) + (0.00836207159f * fTemp261)) + (0.00729392376f * fTemp255)) + (0.00119022187f * fTemp260)))))))))))))))))) : (((0.0119937742f * (fTemp255 + fTemp242)) + ((0.0117801446f * (fTemp244 + (fTemp33 + (fTemp116 - fTemp328)))) + ((0.0113528855f * (fTemp245 - (fTemp70 + fTemp272))) + ((0.0140079958f * (fTemp276 + (fTemp283 - (fTemp176 + fTemp138)))) + ((0.0117496261f * (fTemp297 + (fTemp309 + (fTemp449 - fTemp165)))) + ((0.0111392559f * (fTemp302 - (fTemp98 - fTemp305))) + ((0.0109561449f * (fTemp307 + fTemp277)) + ((0.0138248848f * (fTemp318 - (fTemp371 - fTemp69))) + ((0.0183721427f * fTemp673) + ((0.0186468102f * (fTemp345 + fTemp18)) + ((0.012817774f * (fTemp68 + fTemp23)) + ((0.0117191076f * (fTemp333 - (fTemp421 + fTemp136))) + ((0.00946073793f * (fTemp325 + (fTemp280 + (fTemp54 + (fTemp399 + fTemp312))))) + ((0.00747703481f * (fTemp43 - (fTemp247 + (fTemp418 + fTemp351)))) + ((0.00454725791f * (fTemp88 - (fTemp363 + (fTemp95 + fTemp316)))) + ((0.00238044374f * (fTemp96 - (fTemp146 + (fTemp97 - fTemp142)))) + ((0.00244148076f * (fTemp101 - (fTemp147 + fTemp171))) + ((0.000274666585f * (fTemp129 + (fTemp211 + (fTemp212 + (fTemp214 + (fTemp493 + (fTemp219 + fTemp495))))))) + ((0.000457777642f * (fTemp288 - fTemp173)) + ((0.000396740623f * (fTemp217 - fTemp150)) + ((0.0122074038f * (fTemp486 - fTemp100)) + ((0.000244148076f * (fTemp178 + (fTemp498 + (fTemp499 + (fTemp500 + (fTemp501 + (fTemp220 + (fTemp221 + (fTemp223 + fTemp222))))))))) + ((0.000122074038f * (fTemp135 + (fTemp504 + (fTemp227 + (fTemp239 + (fTemp238 + (fTemp234 + (fTemp511 + fTemp674)))))))) + ((6.10370189e-05f * (fTemp505 + fTemp675)) + ((9.15555283e-05f * (fTemp512 + (fTemp225 + (fTemp237 + (fTemp236 + (fTemp233 + fTemp235)))))) + ((0.000152592547f * (fTemp502 + (fTemp503 + (fTemp226 + (fTemp228 + (fTemp241 + (fTemp240 + fTemp391))))))) + ((0.000183111057f * (fTemp16 + fTemp22)) + ((0.000213629566f * (fTemp496 + (fTemp224 + fTemp497))) + ((0.000366222113f * (fTemp215 + fTemp210)) + ((((0.0116275521f * fTemp398) + ((0.011200293f * fTemp251) + ((0.0112308115f * fTemp254) + ((0.0114139225f * fTemp260) + ((((((0.0127872555f * fTemp270) + ((0.0147404401f * fTemp284) + ((0.0176396985f * fTemp292) + ((0.0192571804f * fTemp330) + ((0.0201422162f * fTemp331) + ((0.0201116987f * fTemp278) + ((0.0195623655f * fTemp285) + ((0.0188909583f * fTemp304) + ((0.017975403f * fTemp518) + ((0.0177922919f * fTemp332) + ((0.0178228095f * fTemp7) + ((0.017853329f * fTemp337) + ((0.0179448836f * fTemp8) + ((0.0183111057f * fTemp11) + ((0.0187383648f * fTemp14) + ((0.0174260698f * fTemp19) + ((0.0152287362f * fTemp339) + ((0.0106814783f * fTemp24) + ((0.00930814538f * fTemp28) + ((0.0101931822f * fTemp31) + ((0.0132755516f * fTemp256) + ((0.014618366f * fTemp262) + ((0.0157780703f * fTemp319) + ((0.0173039958f * fTemp34) + ((0.0177617725f * fTemp279) + ((0.0165105145f * fTemp253) + ((0.0134891812f * fTemp264) + ((0.0107119968f * fTemp286) + ((0.00943021942f * fTemp311) + ((0.00772118289f * fTemp37) + ((0.0176702179f * fTemp266) + ((0.0205389578f * fTemp252) + ((0.0215460677f * fTemp47) + ((0.0203253273f * fTemp321) + ((0.0173345134f * fTemp48) + ((0.0109256264f * fTemp51) + ((0.0100711081f * fTemp60) + ((0.0152592547f * fTemp55) + ((0.0170293283f * fTemp61) + ((0.019348735f * fTemp246) + ((0.0119632557f * fTemp303) + ((0.00668355357f * fTemp155) + ((0.00537125766f * fTemp347) + ((0.00503555406f * fTemp156) + ((0.00585955381f * fTemp157) + ((0.0103457747f * fTemp75) + ((0.0123905148f * fTemp79) + ((0.012878811f * fTemp349) + ((0.0116885891f * fTemp293) + ((0.00973540451f * fTemp83) + ((0.00592059083f * fTemp271) + ((0.00329599902f * fTemp91) + ((0.00274666585f * fTemp76) + ((0.00277718436f * fTemp159) + ((0.00213629566f * fTemp160) + ((0.0019226661f * fTemp105) + ((0.00476088747f * fTemp46) + ((0.00430310983f * fTemp110) + ((0.00326548051f * fTemp71) + ((0.00854518265f * fTemp161) + ((0.0101626636f * fTemp119) + ((0.0137638478f * fTemp164) + ((0.0151676992f * fTemp44) + ((((0.0111697745f * fTemp63) + ((0.0148014771f * fTemp74) + ((0.0142216254f * fTemp400) + ((0.00958281197f * fTemp401) + ((0.00457777642f * fTemp125) + ((0.00656147953f * fTemp123) + ((0.00674459059f * fTemp365) + ((0.00540177617f * fTemp170) + ((0.00320444349f * fTemp78) + ((0.00183111057f * fTemp374) + ((0.000793481246f * fTemp326) + ((0.00057985168f * fTemp103) + ((0.00100711081f * fTemp267) + ((0.00296029542f * fTemp300) + ((0.0166020691f * fTemp118) + ((0.0169072542f * fTemp177) + ((0.0171514023f * fTemp152) + ((0.0271919928f * fTemp362) + ((0.0382091738f * fTemp456) + ((0.0249336231f * fTemp457) + ((0.00897244178f * fTemp364) + ((0.0238349568f * fTemp393) + ((0.0428785048f * fTemp465) + ((0.0279549547f * fTemp466) + ((0.0432752483f * fTemp185) + ((0.0657673851f * fTemp186) + ((0.0787682757f * fTemp187) + ((0.0573747978f * fTemp188) + ((0.0825220495f * fTemp189) + ((0.0614642799f * fTemp151) + ((0.0561540574f * fTemp190) + ((0.0423902087f * fTemp191) + ((0.0222479943f * fTemp192) + ((0.0987579003f * fTemp154) + ((0.142155215f * fTemp470) + ((0.142551959f * fTemp346) + ((0.0275276955f * fTemp471) + ((0.128147215f * fTemp58) + ((0.0869472325f * fTemp477) + ((0.114902191f * fTemp478) + ((0.0509353913f * fTemp482) + ((0.566667676f * fTemp397) + (fTemp483 + ((0.95461899f * fTemp484) + ((0.481673628f * fTemp396) + ((0.115970336f * fTemp485) + ((0.000610370189f * fTemp490) + ((0.000915555283f * fTemp491) + ((0.000976592302f * fTemp492) + ((0.000640888698f * fTemp209) + ((0.000335703604f * fTemp218) + (0.000427259132f * fTemp216)))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00204474013f * fTemp353)) + (0.0140690329f * fTemp350))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.0135196997f * fTemp291)) + (0.0134586627f * fTemp269)) + (0.0126651814f * fTemp261)) + (0.0115970336f * fTemp265)))))) + (0.0122379223f * fTemp513)) + (0.0126956999f * fTemp1))))))))))))))))))))))))))))))) - ((0.0126346629f * (fTemp301 - fTemp296)) + ((0.0159611814f * (fTemp381 - fTemp324)) + ((0.00952177495f * (fTemp127 - fTemp25)) + ((0.00921658985f * (fTemp82 - fTemp340)) + ((0.00631733146f * (fTemp290 - fTemp41)) + ((0.00659199804f * (fTemp122 - fTemp45)) + ((0.0136112552f * (fTemp388 - fTemp320)) + ((0.0137333293f * (fTemp99 - fTemp21)) + ((0.0155339213f * (fTemp416 - fTemp62)) + ((0.00888088625f * (fTemp268 - fTemp67)) + ((0.00769066438f * (fTemp39 - fTemp72)) + ((0.0028992584f * fTemp676) + ((0.00439466536f * (fTemp115 - fTemp323)) + ((0.00338755455f * (fTemp140 - fTemp287)) + ((0.00436414685f * (fTemp5 - fTemp113)) + ((0.00650044251f * (fTemp29 - fTemp117)) + ((0.0119327372f * (fTemp342 - fTemp163)) + ((0.00424207281f * (fTemp317 + fTemp357)) + ((0.0100405896f * fTemp677) + ((0.00375377666f * (fTemp275 - fTemp167)) + ((0.0019531846f * (fTemp6 - fTemp38)) + ((0.00790429395f * (fTemp121 + fTemp168)) + ((0.000305185094f * (fTemp124 - (fTemp213 + fTemp354))) + ((0.00589007232f * (fTemp334 + fTemp50)) + ((0.00823999755f * (fTemp327 + fTemp273)) + ((0.00796533097f * (fTemp9 + fTemp133)) + ((0.00405896176f * (fTemp90 + fTemp84)) + ((0.00186162908f * (fTemp13 + fTemp402)) + ((3.05185094e-05f * (fTemp298 - fTemp564)) + ((0.000701925717f * (fTemp257 + (fTemp306 + fTemp657))) + ((0.00137333293f * fTemp678) + ((0.00247199927f * (fTemp313 + fTemp295)) + ((0.000854518265f * (fTemp450 + fTemp282)) + ((0.00735496078f * (fTemp445 + fTemp343)) + ((0.0138554033f * (fTemp514 + (fTemp422 + fTemp281))) + ((0.00701925717f * (fTemp32 + fTemp243)) + ((0.00863673817f * fTemp679) + ((0.0083925901f * (fTemp207 + fTemp289)) + ((0.0087282937f * (fTemp26 + fTemp384)) + ((0.0135502182f * (fTemp516 + (fTemp424 + fTemp81))) + ((0.0136417737f * (fTemp407 + (fTemp423 + fTemp386))) + ((0.0189214759f * (fTemp415 + fTemp412)) + ((0.0195928831f * (fTemp488 + fTemp294)) + ((0.0051576281f * (fTemp184 + fTemp453)) + ((0.0122684408f * fTemp322) + ((0.0112918485f * fTemp3) + ((0.0104983672f * fTemp519) + ((0.0108645894f * fTemp352) + ((0.0173650328f * fTemp169) + ((0.0235908087f * fTemp73) + ((0.0234382153f * fTemp120) + ((0.0172429588f * fTemp102) + ((0.008087405f * fTemp20) + ((0.00311288796f * fTemp27) + ((0.00756859034f * fTemp132) + ((0.00799584948f * fTemp341) + ((0.00653096102f * fTemp137) + ((0.00546281319f * fTemp10) + ((0.00369273964f * fTemp80) + ((0.00357066561f * fTemp56) + ((0.00308236945f * fTemp53) + ((0.00271614734f * fTemp104) + ((0.00280770287f * fTemp366) + ((0.00262459181f * fTemp370) + ((0.000885036774f * fTemp358) + ((0.00180059206f * fTemp30) + ((0.00143436994f * fTemp372) + ((0.00103762932f * fTemp134) + (fTemp680 + (fTemp681 + ((0.00164799951f * fTemp172) + ((0.000732444227f * fTemp85) + ((0.00219733268f * fTemp131) + ((0.00234992523f * fTemp259) + ((0.00198370311f * fTemp57) + ((0.001617481f * fTemp12) + ((0.00167851802f * fTemp314) + ((0.00216681417f * fTemp59) + ((0.0035401471f * fTemp348) + ((0.00512710959f * fTemp315) + ((0.00576799829f * fTemp361) + ((0.00494399853f * fTemp126) + ((0.0042115543f * fTemp128) + ((0.00527970213f * fTemp258) + ((0.00628681295f * fTemp274) + ((0.0106204413f * fTemp403) + ((0.01126133f * fTemp404) + ((0.0106509598f * fTemp107) + ((0.00814844202f * fTemp248) + ((0.00759910885f * fTemp64) + ((0.0090334788f * fTemp375) + ((0.0149845881f * fTemp42) + ((0.00836207159f * fTemp112) + ((0.00625629444f * fTemp49) + ((0.00698873866f * fTemp40) + ((0.0074159978f * fTemp92) + ((0.0093691824f * fTemp405) + ((0.0104068117f * fTemp130) + ((0.011444441f * fTemp378) + ((0.00985747855f * fTemp139) + ((0.0077517014f * fTemp93) + ((0.00906399731f * fTemp406) + ((0.00964384899f * fTemp382) + ((0.00924710836f * fTemp355) + ((0.00881984923f * fTemp15) + ((0.0101016266f * fTemp380) + ((0.0138859218f * fTemp336) + ((0.0127262184f * fTemp379) + ((0.0139774773f * fTemp408) + ((0.0147709586f * fTemp52) + ((0.0153813288f * fTemp66) + ((0.0153202917f * fTemp250) + ((0.0141300699f * fTemp4) + ((0.0133365886f * fTemp87) + ((0.0139164403f * fTemp383) + ((0.0143742179f * fTemp409) + ((0.0139469588f * fTemp410) + ((0.0156865139f * fTemp411) + ((0.0226142164f * fTemp413) + ((0.0237434004f * fTemp414) + ((0.0218817722f * fTemp390) + ((0.0133976256f * fTemp417) + ((0.00955229346f * fTemp36) + ((0.00894192327f * fTemp420) + ((0.0151371807f * fTemp369) + ((0.0187078472f * fTemp515) + ((0.0199285876f * fTemp149) + ((0.018097477f * fTemp329) + ((0.0169988107f * fTemp65) + ((0.0157170333f * fTemp360) + ((0.0115359966f * fTemp106) + ((0.00558488723f * fTemp377) + ((0.00265511032f * fTemp530) + ((0.00750755332f * fTemp94) + ((0.0116580706f * fTemp89) + ((0.016052736f * fTemp425) + ((0.0184331797f * fTemp426) + ((0.0198370311f * fTemp17) + ((0.0218207352f * fTemp338) + ((0.0230719931f * fTemp427) + ((0.0238044374f * fTemp428) + ((0.0228888821f * fTemp429) + ((0.0229804385f * fTemp430) + ((0.0283822138f * fTemp431) + ((0.0332651772f * fTemp432) + ((0.0414746553f * fTemp433) + ((0.0486770235f * fTemp434) + ((0.0498062074f * fTemp435) + ((0.0440992452f * fTemp436) + ((0.0371715464f * fTemp437) + ((0.030793177f * fTemp438) + ((0.0209967345f * fTemp439) + ((0.0205694754f * fTemp344) + ((0.0227362905f * fTemp111) + ((0.0223700684f * fTemp440) + ((0.029114658f * fTemp392) + ((0.0375682861f * fTemp441) + ((0.0451979116f * fTemp442) + ((0.0479140617f * fTemp443) + ((0.0420545079f * fTemp522) + ((0.0280465111f * fTemp175) + ((0.0143436994f * fTemp444) + ((0.024567401f * fTemp249) + ((0.042298656f * fTemp387) + ((0.0440382101f * fTemp446) + ((0.0404370241f * fTemp447) + ((0.0424817652f * fTemp448) + ((0.0474562831f * fTemp77) + ((0.0489211716f * fTemp179) + ((0.0363780633f * fTemp180) + ((0.014496292f * fTemp376) + ((0.0391857661f * fTemp451) + ((0.0701315328f * fTemp452) + ((0.0643330216f * fTemp385) + ((0.032898955f * fTemp373) + ((0.00729392376f * fTemp454) + ((0.00268562883f * fTemp455) + ((0.0234992523f * fTemp394) + ((0.0468459129f * fTemp458) + ((0.0685445741f * fTemp459) + ((0.0892666429f * fTemp460) + ((0.106387526f * fTemp461) + ((0.11548204f * fTemp462) + ((0.104983672f * fTemp463) + ((0.0765404254f * fTemp464) + ((0.0255134739f * fTemp389) + ((0.0252082888f * fTemp467) + ((0.0712607205f * fTemp468) + ((0.113650933f * fTemp368) + ((0.107791379f * fTemp181) + ((0.101290934f * fTemp86) + ((0.0719321296f * fTemp367) + ((0.070223093f * fTemp141) + ((0.0557268001f * fTemp182) + ((0.0354625098f * fTemp183) + ((0.0226752535f * fTemp193) + ((0.0922269374f * fTemp194) + ((0.15158543f * fTemp195) + (fTemp682 + ((0.0405896194f * fTemp469) + ((0.0442518406f * fTemp472) + ((0.136295661f * fTemp473) + ((0.124393448f * fTemp474) + ((0.0941190869f * fTemp475) + ((0.0700094625f * fTemp476) + ((0.120609149f * fTemp197) + ((0.191381574f * fTemp198) + ((0.0903653055f * fTemp199) + ((0.0400097668f * fTemp200) + ((0.0170903653f * fTemp479) + ((0.068727687f * fTemp480) + ((0.0662556812f * fTemp481) + (fTemp599 + ((0.0196234025f * fTemp202) + ((0.117740408f * fTemp203) + ((0.171636105f * fTemp204) + ((0.232856229f * fTemp35) + ((0.00149540696f * fTemp487) + ((0.0334788039f * fTemp489) + ((0.036896877f * fTemp153) + ((0.0310983621f * fTemp205) + ((0.00155644398f * fTemp208) + (0.0203558467f * fTemp206)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow3 ? (iSlow13 ? (iSlow17 ? (iSlow19 ? (((0.00149540696f * (fTemp513 + (fTemp253 - (fTemp459 + fTemp27)))) + ((0.000976592302f * (fTemp242 + (fTemp264 + (fTemp61 - (fTemp83 + (fTemp107 + (fTemp243 + (fTemp232 + fTemp480)))))))) + ((0.000396740623f * (fTemp244 + (fTemp255 + (fTemp258 + fTemp277)))) + ((0.00119022187f * (fTemp511 + fTemp261)) + ((0.00170903653f * (fTemp269 + (fTemp276 - (fTemp53 + (fTemp290 - fTemp13))))) + ((0.000640888698f * (fTemp291 + (fTemp80 + fTemp55))) + ((3.05185094e-05f * (fTemp296 + (fTemp263 - fTemp56))) + ((0.00213629566f * (fTemp295 + fTemp309)) + ((0.00308236945f * (fTemp292 - (fTemp231 - fTemp146))) + ((0.00372325815f * (fTemp331 + (fTemp119 + fTemp21))) + ((0.00430310983f * (fTemp278 - (fTemp23 + (fTemp96 + (fTemp299 - (fTemp420 - fTemp93)))))) + ((0.00463881344f * (fTemp285 + (fTemp262 - (fTemp449 + fTemp399)))) + ((0.00460829493f * (fTemp310 - (fTemp343 - fTemp172))) + ((0.00457777642f * (fTemp332 - (fTemp496 - fTemp337))) + ((0.00369273964f * (fTemp8 + (fTemp426 + (fTemp239 + fTemp385)))) + ((0.00210577715f * (fTemp11 + (fTemp33 + (fTemp322 + (fTemp87 + fTemp12))))) + ((0.00326548051f * (fTemp333 + (fTemp307 + fTemp34))) + ((0.00433362834f * (fTemp60 + fTemp256)) + ((0.00424207281f * (fTemp26 + fTemp319)) + ((0.00216681417f * (fTemp314 + fTemp279)) + ((0.00158696249f * (fTemp381 - fTemp325)) + ((0.00189214759f * (fTemp41 - fTemp37)) + ((0.00637836847f * (fTemp156 + fTemp266)) + ((0.00399792474f * (fTemp252 - (fTemp144 + fTemp91))) + ((0.00222785119f * (fTemp47 - (fTemp365 - fTemp352))) + ((0.00518814661f * (fTemp54 - (fTemp508 + fTemp516))) + ((0.000671407208f * (fTemp69 + (fTemp39 + fTemp4))) + ((0.00479140598f * (fTemp67 - (fTemp354 - (fTemp530 - fTemp515)))) + ((0.00601214636f * (fTemp157 - (fTemp510 - fTemp110))) + ((0.00512710959f * (fTemp219 + fTemp72)) + ((0.00244148076f * (fTemp267 + fTemp79)) + ((0.00122074038f * (fTemp349 + (fTemp133 + (fTemp351 - fTemp275)))) + ((0.00204474013f * (fTemp452 + fTemp160)) + ((0.00454725791f * (fTemp384 + fTemp46)) + ((0.0087282937f * fTemp662) + ((0.00622577593f * (fTemp377 - fTemp44)) + ((0.00253303628f * (fTemp357 - (fTemp359 + fTemp78))) + ((0.0038758507f * (fTemp272 + (fTemp171 - fTemp142))) + ((0.00112918485f * (fTemp519 + (fTemp82 + fTemp57))) + ((0.00256355479f * (fTemp166 + (fTemp380 + fTemp120))) + ((0.00268562883f * (fTemp52 - fTemp170)) + ((0.00164799951f * (fTemp59 + fTemp247)) + ((0.00155644398f * (fTemp10 + (fTemp122 + fTemp288))) + ((0.000335703604f * (fTemp140 - (fTemp316 - fTemp259))) + ((0.00497451704f * (fTemp328 + fTemp145)) + ((0.000823999755f * (fTemp403 - fTemp372)) + ((0.00436414685f * (fTemp173 - (fTemp336 + fTemp335))) + ((0.00924710836f * (fTemp235 - fTemp70)) + ((9.15555283e-05f * (fTemp36 + fTemp32)) + ((0.00146488845f * (fTemp439 - fTemp9)) + ((0.00103762932f * (fTemp406 - (fTemp81 - (fTemp360 - fTemp416)))) + ((0.00845362712f * (fTemp373 - fTemp301)) + ((0.000885036774f * (fTemp348 + fTemp3)) + ((0.0145878475f * (fTemp210 - fTemp294)) + ((0.014557329f * (fTemp121 - fTemp177)) + ((0.0173345134f * (fTemp488 - fTemp197)) + ((0.00625629444f * (fTemp234 + fTemp227)) + ((0.0124820704f * (fTemp504 + fTemp215)) + ((0.0102237007f * (fTemp501 - fTemp206)) + ((0.00125125889f * fTemp305) + (fTemp663 + ((0.00347911008f * fTemp284) + ((0.00320444349f * fTemp330) + ((0.00469985045f * fTemp304) + ((0.00473036896f * fTemp7) + ((0.000305185094f * fTemp14) + ((0.0057985168f * fTemp45) + ((0.00820947904f * fTemp280) + ((0.00827051606f * fTemp320) + ((0.00250251777f * fTemp48) + ((0.00500503555f * fTemp312) + ((0.00183111057f * fTemp246) + ((0.00234992523f * fTemp2) + ((0.00564592425f * fTemp155) + ((0.00619525742f * fTemp347) + ((0.00311288796f * fTemp109) + ((0.00344859157f * fTemp323) + ((0.00744651631f * fTemp287) + ((0.00442518387f * fTemp268) + ((0.00299081393f * fTemp165) + ((0.00262459181f * fTemp102) + ((0.000610370189f * fTemp273) + (fTemp664 + ((0.00357066561f * fTemp358) + ((0.00616473891f * fTemp257) + ((0.0061342204f * fTemp6) + ((0.000915555283f * fTemp274) + ((0.00277718436f * fTemp355) + (fTemp665 + ((0.00384533219f * fTemp408) + ((0.000762962736f * fTemp383) + ((0.000183111057f * fTemp342) + ((0.0035401471f * fTemp418) + ((0.00759910885f * fTemp94) + ((0.0105594043f * fTemp89) + ((0.0132755516f * fTemp422) + ((0.0134586627f * fTemp423) + (fTemp666 + ((0.00415051728f * fTemp176) + ((0.0122684408f * fTemp447) + ((0.00552385021f * fTemp448) + ((0.0170293283f * fTemp450) + ((0.0115665151f * fTemp451) + ((0.017853329f * fTemp453) + ((0.0271614734f * fTemp454) + ((0.0377513953f * fTemp455) + ((0.046967987f * fTemp152) + ((0.0486770235f * fTemp362) + ((0.0490432456f * fTemp456) + ((0.0411389507f * fTemp457) + ((0.0348216183f * fTemp364) + ((0.0263985116f * fTemp394) + ((0.021271402f * fTemp465) + ((0.0395519882f * fTemp466) + ((0.011383404f * fTemp467) + (fTemp667 + ((0.0615558326f * fTemp185) + ((0.087160863f * fTemp186) + ((0.0790124238f * fTemp187) + ((0.0654927194f * fTemp188) + ((0.079317607f * fTemp189) + ((0.0928678215f * fTemp151) + ((0.090578936f * fTemp190) + ((0.0805383474f * fTemp191) + ((0.040192876f * fTemp192) + ((0.0354319885f * fTemp469) + ((0.0857875273f * fTemp154) + ((0.0593584999f * fTemp470) + ((0.0054933317f * fTemp346) + ((0.0392162837f * fTemp478) + ((0.0185552537f * fTemp479) + ((0.141239658f * fTemp482) + ((0.717856407f * fTemp397) + (fTemp483 + ((0.840388179f * fTemp484) + ((0.411175877f * fTemp396) + ((0.108401746f * fTemp485) + ((0.0269173253f * fTemp486) + ((0.0242622159f * fTemp487) + ((0.00546281319f * fTemp489) + ((0.0307321399f * fTemp211) + ((0.0402844325f * fTemp212) + ((0.0401318409f * fTemp213) + ((0.0297250282f * fTemp214) + ((0.00610370189f * fTemp497) + ((0.013061922f * fTemp498) + ((0.0152897732f * fTemp499) + ((0.0140385143f * fTemp500) + ((0.0265816227f * fTemp505) + ((0.0342417695f * fTemp512) + ((0.0320749544f * fTemp225) + ((0.0213019196f * fTemp226) + ((0.00985747855f * fTemp238) + ((0.0117191076f * fTemp236) + (0.0123905148f * fTemp237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.000122074038f * (fTemp398 + (fTemp28 - (fTemp286 + (fTemp125 + (fTemp404 - (fTemp417 + fTemp100))))))) + ((0.00134281442f * (fTemp254 - (fTemp283 + (fTemp124 + fTemp363)))) + ((0.00106814783f * (fTemp353 + fTemp260)) + ((0.000244148076f * (fTemp297 + (fTemp169 - fTemp159))) + ((0.000152592547f * (fTemp302 + (fTemp167 - fTemp293))) + ((0.00338755455f * fTemp668) + ((0.00332651753f * (fTemp311 - fTemp324)) + ((0.00448622089f * (fTemp175 - fTemp518)) + ((0.00366222113f * (fTemp438 + fTemp24)) + ((0.00207525864f * (fTemp25 + (fTemp43 - (fTemp382 - fTemp127)))) + ((0.00180059206f * (fTemp92 - fTemp31)) + ((0.00302133244f * (fTemp19 - (fTemp62 - (fTemp168 + (fTemp209 + fTemp108))))) + ((0.00381481368f * (fTemp340 + (fTemp164 - fTemp75))) + ((0.00177007355f * (fTemp90 - fTemp321)) + ((0.00476088747f * (fTemp361 - fTemp51)) + ((0.00115970336f * (fTemp123 - fTemp68)) + ((0.00137333293f * (fTemp446 - fTemp345)) + ((0.00378429517f * (fTemp506 - fTemp303)) + ((0.0028992584f * (fTemp271 + (fTemp65 - fTemp421))) + ((0.00350962859f * (fTemp88 - (fTemp233 + fTemp103))) + ((0.00292977691f * (fTemp415 - fTemp105)) + ((0.00836207159f * (fTemp149 - fTemp71)) + ((0.00814844202f * (fTemp138 - fTemp117)) + ((0.00662251655f * (fTemp350 - fTemp161)) + ((0.00393688772f * (fTemp148 + fTemp74)) + ((0.0058290353f * (fTemp5 + fTemp400)) + ((0.00167851802f * (fTemp220 - fTemp73)) + ((0.0022583697f * (fTemp112 - fTemp20)) + ((0.00201422162f * (fTemp129 + (fTemp326 - fTemp402))) + ((0.00100711081f * (fTemp50 - (fTemp115 - (fTemp313 - fTemp150)))) + ((0.00057985168f * (fTemp132 + (fTemp250 + fTemp40))) + ((0.00054933317f * (fTemp84 + (fTemp369 - fTemp370))) + ((0.0051576281f * (fTemp444 - fTemp298)) + ((0.000946073793f * (fTemp282 - fTemp30)) + ((0.004852443f * (fTemp317 + fTemp374)) + ((0.000274666585f * (fTemp334 - fTemp85)) + ((0.00466933195f * (fTemp114 + (fTemp0 - fTemp106))) + ((0.000213629566f * (fTemp315 - (fTemp66 + fTemp49))) + ((0.00576799829f * (fTemp476 + fTemp126)) + ((0.00640888698f * (fTemp390 + fTemp64)) + ((0.00534073915f * (fTemp503 + fTemp356)) + ((0.00811792351f * (fTemp228 + fTemp130)) + ((0.00897244178f * (fTemp281 + fTemp378)) + ((0.0025940733f * (fTemp344 - fTemp407)) + ((0.00509659108f * (fTemp240 - fTemp95)) + ((0.0140690329f * (fTemp442 - (fTemp458 - fTemp387))) + ((0.0259712525f * (fTemp135 + fTemp77)) + ((0.000701925717f * fTemp245) + ((0.00109866634f * fTemp251) + ((0.000457777642f * fTemp265) + ((0.00143436994f * fTemp18) + ((0.00405896176f * fTemp339) + ((0.00363170262f * fTemp101) + ((0.0019531846f * fTemp76) + ((6.10370189e-05f * fTemp163) + ((0.0019226661f * fTemp63) + ((0.00668355357f * fTemp401) + ((0.00561540574f * fTemp38) + ((0.001617481f * fTemp104) + ((0.000732444227f * fTemp366) + ((0.00241096225f * fTemp306) + ((0.00491348002f * fTemp131) + ((0.00427259132f * fTemp147) + ((0.00271614734f * fTemp97) + ((0.00341807306f * fTemp128) + ((0.00314340647f * fTemp248) + ((0.00802636798f * fTemp375) + ((0.00976592302f * fTemp371) + ((0.00955229346f * fTemp42) + ((0.00863673817f * fTemp514) + ((0.00686666463f * fTemp136) + ((0.00329599902f * fTemp327) + ((0.00674459059f * fTemp405) + ((0.009704886f * fTemp98) + ((0.00927762687f * fTemp139) + ((0.00723288674f * fTemp289) + ((0.00231940672f * fTemp99) + ((0.00671407208f * fTemp379) + ((0.00396740623f * fTemp409) + ((0.0100100711f * fTemp410) + ((0.0140079958f * fTemp386) + ((0.0153813288f * fTemp388) + ((0.0159306619f * fTemp411) + ((0.016052736f * fTemp412) + ((0.014435255f * fTemp413) + ((0.0108951079f * fTemp414) + ((0.00698873866f * fTemp329) + ((0.00494399853f * fTemp17) + ((0.0148930326f * fTemp338) + ((0.0236823633f * fTemp427) + ((0.0289620664f * fTemp428) + ((0.0262764376f * fTemp429) + ((0.0193182174f * fTemp430) + ((0.0103457747f * fTemp431) + ((0.00305185094f * fTemp432) + ((0.00238044374f * fTemp433) + ((0.00885036774f * fTemp434) + ((0.0138859218f * fTemp435) + ((0.0139469588f * fTemp436) + ((0.00943021942f * fTemp437) + ((0.00933866389f * fTemp111) + ((0.0149540696f * fTemp440) + ((0.0110477004f * fTemp392) + ((0.00891140476f * fTemp441) + ((0.0162053294f * fTemp443) + ((0.0143436994f * fTemp522) + ((0.0109561449f * fTemp445) + ((0.0151066622f * fTemp300) + ((0.0189214759f * fTemp116) + ((0.0154118473f * fTemp118) + ((0.0167241432f * fTemp178) + (fTemp669 + ((0.0618610196f * fTemp179) + ((0.0722678304f * fTemp180) + ((0.0451979116f * fTemp376) + ((0.0226142164f * fTemp460) + ((0.0486159846f * fTemp461) + ((0.0749839768f * fTemp462) + ((0.0904568657f * fTemp463) + ((0.0921048597f * fTemp464) + (fTemp670 + ((0.022461623f * fTemp393) + ((0.0453199856f * fTemp468) + ((0.109042637f * fTemp368) + ((0.147038177f * fTemp181) + ((0.153447062f * fTemp86) + ((0.129978329f * fTemp367) + ((0.103274636f * fTemp141) + ((0.0696432367f * fTemp182) + ((0.0227973275f * fTemp183) + ((0.0155339213f * fTemp193) + ((0.0595416129f * fTemp194) + ((0.0739158317f * fTemp195) + ((0.0296334736f * fTemp196) + ((0.0906704888f * fTemp471) + ((0.142368853f * fTemp472) + ((0.156620994f * fTemp473) + ((0.115298927f * fTemp474) + (fTemp671 + ((0.0929593816f * fTemp198) + ((0.108767971f * fTemp199) + ((0.111514635f * fTemp200) + ((0.0289010294f * fTemp58) + ((0.00997955259f * fTemp477) + ((0.0214850307f * fTemp481) + ((0.110477008f * fTemp201) + ((0.271523178f * fTemp202) + ((0.495132297f * fTemp203) + ((0.584582031f * fTemp204) + ((0.398907423f * fTemp35) + ((0.00286873989f * fTemp153) + ((0.00735496078f * fTemp205) + ((0.0133976256f * fTemp207) + (fTemp672 + ((0.0292367321f * fTemp490) + ((0.0267036967f * fTemp491) + ((0.0177312549f * fTemp492) + ((0.00650044251f * fTemp216) + ((0.021332439f * fTemp217) + ((0.0281380657f * fTemp218) + ((0.025757622f * fTemp493) + ((0.0166325886f * fTemp495) + ((0.00982696004f * fTemp221) + ((0.0191351064f * fTemp222) + ((0.0273751039f * fTemp223) + ((0.0319833979f * fTemp224) + (fTemp594 + ((0.0207831059f * fTemp502) + ((0.0170598477f * fTemp241) + ((0.0187078472f * fTemp16) + ((0.0137333293f * fTemp391) + ((0.00488296151f * fTemp230) + ((0.00411999878f * fTemp507) + (0.00598162785f * fTemp229)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00186162908f * (fTemp134 - fTemp1)))) : (((0.00448622089f * (fTemp8 + fTemp513)) + ((0.00247199927f * (fTemp398 + (fTemp365 + fTemp297))) + ((0.00213629566f * (fTemp251 + fTemp245)) + ((0.00198370311f * fTemp658) + ((0.00231940672f * (fTemp261 + (fTemp41 - (fTemp323 + (fTemp224 + fTemp46))))) + ((0.00326548051f * (fTemp276 - (fTemp129 - (fTemp220 + fTemp217)))) + ((0.00350962859f * (fTemp291 + fTemp283)) + ((0.00140385143f * (fTemp124 + fTemp302)) + ((0.00109866634f * (fTemp270 + (fTemp113 + fTemp31))) + ((0.00650044251f * (fTemp292 - (fTemp218 + fTemp263))) + ((0.00744651631f * (fTemp304 - (fTemp341 + fTemp50))) + ((0.00708029419f * (fTemp310 - (fTemp6 - fTemp69))) + ((0.00729392376f * (fTemp332 + (fTemp349 - (fTemp98 + fTemp259)))) + ((0.00567644276f * (fTemp337 - (fTemp38 - fTemp18))) + ((0.00396740623f * (fTemp11 - (fTemp22 + fTemp122))) + ((0.00170903653f * (fTemp25 - (fTemp421 + (fTemp230 - fTemp512)))) + ((0.000183111057f * (fTemp256 - (fTemp454 - fTemp262))) + ((0.00262459181f * (fTemp325 + (fTemp33 - (fTemp423 - fTemp123)))) + ((0.00296029542f * (fTemp311 + (fTemp451 - fTemp370))) + ((0.00393688772f * (fTemp340 + (fTemp266 - (fTemp144 - fTemp83)))) + ((0.00204474013f * (fTemp157 - fTemp280)) + ((0.000823999755f * (fTemp60 + fTemp312)) + ((0.009704886f * (fTemp55 - (fTemp515 + fTemp127))) + ((0.00781273842f * (fTemp2 + (fTemp225 - fTemp140))) + ((0.00503555406f * (fTemp62 - (fTemp39 + fTemp160))) + ((0.000915555283f * (fTemp88 + fTemp156)) + ((0.00372325815f * (fTemp161 + fTemp72)) + ((0.00701925717f * (fTemp219 + fTemp79)) + ((0.00616473891f * (fTemp293 - (fTemp314 + fTemp173))) + ((0.000396740623f * (fTemp221 - fTemp71)) + ((0.00787377544f * (fTemp163 - (fTemp382 + fTemp132))) + ((0.0093691824f * (fTemp350 - (fTemp42 + fTemp29))) + ((0.0038758507f * (fTemp399 - fTemp620)) + ((0.0113528855f * (fTemp118 - fTemp268)) + ((0.0143742179f * (fTemp177 - fTemp165)) + ((0.00143436994f * (fTemp498 + fTemp170)) + ((0.00335703604f * (fTemp511 - fTemp150)) + ((0.00653096102f * (fTemp249 - fTemp258)) + ((0.00982696004f * (fTemp184 - fTemp514)) + ((0.0121768853f * (fTemp226 - fTemp336)) + ((0.0119022187f * (fTemp216 - fTemp81)) + ((0.0163579211f * (fTemp215 - fTemp4)) + ((0.0102237007f * (fTemp501 - fTemp106)) + ((0.0316476934f * (fTemp185 - fTemp433)) + (((0.00378429517f * fTemp242) + ((0.00305185094f * fTemp244) + ((0.00216681417f * fTemp260) + ((0.00280770287f * fTemp269) + ((0.00317392498f * fTemp296) + ((0.000457777642f * fTemp277) + ((9.15555283e-05f * fTemp305) + ((0.00311288796f * fTemp284) + ((0.00823999755f * fTemp330) + ((0.00918607134f * fTemp331) + ((0.00912503432f * fTemp278) + ((0.00833155308f * fTemp285) + ((0.0058290353f * fTemp339) + ((0.000732444227f * fTemp333) + ((0.00131229591f * fTemp319) + ((0.00366222113f * fTemp34) + ((0.00704977568f * fTemp253) + ((0.00604266487f * fTemp264) + ((0.00402844325f * fTemp286) + ((0.0139164403f * fTemp47) + ((0.0148319956f * fTemp321) + ((0.0124515519f * fTemp48) + ((0.00817896053f * fTemp21) + ((0.00430310983f * fTemp51) + ((0.00177007355f * fTemp54) + ((0.00137333293f * fTemp307) + ((0.00454725791f * fTemp68) + ((0.0116580706f * fTemp61) + ((0.0119937742f * fTemp345) + ((0.00112918485f * fTemp67) + ((0.000305185094f * fTemp155) + ((0.000274666585f * fTemp347) + ((0.0019226661f * fTemp43) + ((0.000427259132f * fTemp101) + ((0.00238044374f * fTemp117) + ((0.00561540574f * fTemp119) + ((0.0101931822f * fTemp164) + ((0.0112308115f * fTemp44) + ((0.0107730338f * fTemp63) + ((0.0108645894f * fTemp74) + ((0.00228888821f * fTemp125) + ((0.00173955504f * fTemp300) + ((0.00631733146f * fTemp116) + ((0.0136112552f * fTemp178) + ((0.00427259132f * fTemp450) + ((0.0235602893f * fTemp455) + ((0.0301828068f * fTemp152) + ((0.0255439933f * fTemp362) + ((0.0195013285f * fTemp456) + ((0.0174260698f * fTemp457) + ((0.0143436994f * fTemp364) + ((0.00668355357f * fTemp394) + ((0.0258491784f * fTemp393) + ((0.0529496148f * fTemp465) + ((0.0426038392f * fTemp466) + ((0.0442518406f * fTemp186) + ((0.0433362834f * fTemp187) + ((0.0490737632f * fTemp188) + ((0.0646382049f * fTemp189) + ((0.0842310861f * fTemp151) + ((0.0742515326f * fTemp190) + ((0.0491042808f * fTemp191) + ((0.0184636991f * fTemp192) + ((0.102175973f * fTemp470) + ((0.103762932f * fTemp346) + ((0.0356151015f * fTemp471) + ((0.0811181962f * fTemp479) + ((0.0627460554f * fTemp480) + ((0.0427564308f * fTemp481) + ((0.0328684337f * fTemp201) + ((0.0831324235f * fTemp202) + ((0.0134586627f * fTemp203) + ((0.0442823581f * fTemp397) + ((0.66917938f * fTemp483) + (fTemp484 + ((0.813684523f * fTemp396) + ((0.377513975f * fTemp485) + ((0.109500416f * fTemp486) + ((0.0287179183f * fTemp487) + ((0.0117801446f * fTemp488) + ((0.0022583697f * fTemp212) + ((0.00994903408f * fTemp213) + ((0.0154118473f * fTemp214) + ((0.0109561449f * fTemp500) + ((0.0129093295f * fTemp227) + ((0.00943021942f * fTemp228) + ((0.00274666585f * fTemp241) + ((0.000488296151f * fTemp237) + ((0.00552385021f * fTemp236) + ((0.00103762932f * fTemp232) + (0.00802636798f * fTemp235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.004852443f * fTemp1)))))))))))))))))))))))))))))))))))))))))))))) - ((0.000366222113f * (fTemp45 - fTemp309)) + ((0.00201422162f * (fTemp287 - fTemp318)) + ((0.00463881344f * (fTemp334 - fTemp324)) + ((0.00717184972f * (fTemp504 - fTemp518)) + ((0.00680562761f * (fTemp172 - fTemp7)) + ((0.0045167394f * (fTemp211 - fTemp14)) + ((0.00637836847f * (fTemp289 - fTemp19)) + (((0.00436414685f * (fTemp506 - fTemp23)) + ((0.00283822138f * (fTemp229 - fTemp24)) + ((0.00122074038f * (fTemp89 - fTemp28)) + ((0.00601214636f * (fTemp13 - fTemp279)) + ((0.00411999878f * (fTemp108 - fTemp37)) + ((0.00964384899f * (fTemp384 - fTemp252)) + ((0.0105594043f * (fTemp391 - fTemp246)) + ((0.00268562883f * (fTemp282 - fTemp303)) + ((0.0054933317f * (fTemp32 - fTemp75)) + ((0.000854518265f * (fTemp420 - fTemp271)) + ((0.00125125889f * (fTemp95 - fTemp91)) + ((0.0012817774f * (fTemp76 - fTemp96)) + ((0.00857570115f * (fTemp371 + fTemp3)) + ((0.0115665151f * (fTemp360 + fTemp166)) + ((0.00381481368f * (fTemp363 + (fTemp505 + fTemp135))) + ((0.00537125766f * (fTemp372 - fTemp167)) + ((0.0067751091f * (fTemp131 - fTemp400)) + ((0.000946073793f * (fTemp222 - fTemp401)) + ((0.00665303506f * fTemp659) + ((0.00057985168f * (fTemp231 + fTemp78)) + ((0.00573747978f * (fTemp356 + fTemp27)) + ((0.00674459059f * (fTemp497 + fTemp273)) + ((0.00540177617f * (fTemp243 + fTemp10)) + ((0.00692770164f * (fTemp56 + (fTemp405 + fTemp112))) + ((0.00479140598f * (fTemp84 + (fTemp16 + fTemp49))) + ((0.00277718436f * (fTemp104 + (fTemp490 + fTemp85))) + ((0.00302133244f * (fTemp359 + fTemp358)) + ((0.00439466536f * (fTemp288 + fTemp298)) + ((0.00598162785f * (fTemp257 - (fTemp233 - fTemp467))) + ((0.006469924f * (fTemp492 + fTemp30)) + ((0.00119022187f * (fTemp445 + fTemp374)) + ((0.00555436872f * (fTemp507 + fTemp103)) + ((0.00534073915f * (fTemp92 + fTemp114)) + ((0.0077517014f * (fTemp378 + fTemp97)) + ((0.00766014587f * (fTemp406 + fTemp313)) + ((0.00659199804f * (fTemp139 + fTemp57)) + ((0.00576799829f * (fTemp40 + fTemp12)) + ((0.00805688649f * (fTemp348 + (fTemp342 + fTemp70))) + ((0.00933866389f * (fTemp248 + fTemp361)) + ((0.00897244178f * (fTemp5 + (fTemp15 + fTemp343))) + ((0.00845362712f * (fTemp64 + fTemp317)) + ((0.00796533097f * (fTemp128 - (fTemp234 + fTemp499))) + ((0.008087405f * (fTemp375 + fTemp82)) + ((0.00851466414f * (fTemp209 + fTemp335)) + ((0.0122379223f * (fTemp417 + fTemp413)) + ((0.0186773278f * (fTemp376 + fTemp442)) + ((0.0083925901f * (fTemp387 + fTemp328)) + ((0.00762962736f * (fTemp503 + fTemp449)) + ((0.0387585089f * (fTemp472 - fTemp154)) + ((0.00183111057f * (fTemp197 + fTemp476)) + ((0.00408948027f * (fTemp510 + fTemp491)) + ((0.0074159978f * fTemp651) + ((0.000640888698f * fTemp320) + ((0.00347911008f * fTemp159) + ((0.00494399853f * fTemp105) + ((0.0035401471f * fTemp109) + ((0.00265511032f * fTemp110) + ((0.00329599902f * fTemp353) + ((0.0090334788f * fTemp357) + ((0.0110477004f * fTemp272) + ((0.00952177495f * fTemp322) + ((0.00949125644f * fTemp519) + ((0.0124210333f * fTemp352) + ((0.012878811f * fTemp168) + ((0.0184331797f * fTemp169) + ((0.0189825129f * fTemp73) + ((0.0139469588f * fTemp120) + ((0.00115970336f * fTemp20) + ((0.00640888698f * fTemp133) + ((0.00625629444f * fTemp247) + ((0.00592059083f * fTemp137) + ((0.00585955381f * fTemp115) + ((0.00698873866f * fTemp80) + ((0.0028992584f * fTemp275) + ((0.00320444349f * fTemp366) + ((0.00241096225f * fTemp402) + ((0.00732444227f * fTemp145) + ((0.00714133121f * fTemp146) + ((0.00418103579f * fTemp134) + ((0.00256355479f * fTemp354) + (fTemp660 + ((0.00405896176f * fTemp326) + ((0.00506607257f * fTemp267) + ((0.00747703481f * fTemp147) + ((0.00695822015f * fTemp59) + ((0.00894192327f * fTemp315) + ((0.00939970091f * fTemp290) + ((0.00924710836f * fTemp126) + ((0.00750755332f * fTemp90) + ((0.00689718314f * fTemp316) + ((0.00671407208f * fTemp274) + ((0.00735496078f * fTemp351) + ((0.00885036774f * fTemp403) + ((0.00946073793f * fTemp404) + ((0.00979644153f * fTemp107) + ((0.00961333048f * fTemp136) + ((0.00476088747f * fTemp327) + ((0.00482192449f * fTemp299) + ((0.00778221991f * fTemp130) + ((0.00726340525f * fTemp9) + ((0.00836207159f * fTemp355) + ((0.0102542192f * fTemp26) + ((0.0112918485f * fTemp380) + ((0.0121158483f * fTemp100) + ((0.0123599963f * fTemp99) + ((0.0126956999f * fTemp379) + (fTemp661 + ((0.0134281442f * fTemp281) + ((0.012939848f * fTemp138) + ((0.0126041444f * fTemp516) + ((0.0110171819f * fTemp407) + ((0.0107425153f * fTemp408) + ((0.0120853297f * fTemp52) + ((0.0141911069f * fTemp66) + ((0.0158085879f * fTemp250) + ((0.0167851802f * fTemp87) + ((0.0169377737f * fTemp383) + ((0.0165715516f * fTemp409) + ((0.0153508103f * fTemp410) + ((0.014618366f * fTemp386) + ((0.014496292f * fTemp388) + ((0.014557329f * fTemp411) + ((0.0137943663f * fTemp412) + ((0.0115970336f * fTemp414) + ((0.0135807367f * fTemp390) + ((0.01617481f * fTemp415) + ((0.0159611814f * fTemp416) + ((0.00589007232f * fTemp36) + ((0.00207525864f * fTemp418) + ((0.00570696127f * fTemp369) + ((0.0119632557f * fTemp149) + ((0.0120548112f * fTemp329) + ((0.0122684408f * fTemp65) + (fTemp630 + ((0.00390636921f * fTemp530) + ((0.000671407208f * fTemp94) + ((0.00134281442f * fTemp422) + ((0.00546281319f * fTemp424) + ((0.00875881221f * fTemp425) + ((0.0118411817f * fTemp426) + ((0.0125431074f * fTemp17) + ((0.0140385143f * fTemp338) + ((0.0148014771f * fTemp427) + ((0.0172429588f * fTemp428) + ((0.0173955504f * fTemp429) + ((0.0173345134f * fTemp430) + ((0.0200811792f * fTemp431) + ((0.0266121402f * fTemp432) + ((0.0311899167f * fTemp434) + ((0.025757622f * fTemp435) + ((0.022766808f * fTemp436) + ((0.0246589556f * fTemp437) + ((0.025940733f * fTemp438) + ((0.0226142164f * fTemp439) + ((0.0173650328f * fTemp381) + ((0.0160832554f * fTemp344) + ((0.0189214759f * fTemp111) + ((0.0235908087f * fTemp294) + ((0.0231940672f * fTemp440) + ((0.0181279946f * fTemp392) + ((0.0135502182f * fTemp441) + ((0.0281075481f * fTemp443) + ((0.0359813236f * fTemp522) + ((0.0314340666f * fTemp175) + ((0.0202642903f * fTemp176) + ((0.00344859157f * fTemp444) + ((0.0245979186f * fTemp446) + ((0.0365306549f * fTemp447) + ((0.0345469527f * fTemp448) + ((0.024323253f * fTemp77) + ((0.0168767367f * fTemp179) + ((0.0191351064f * fTemp180) + ((0.0162663665f * fTemp452) + ((0.0431531742f * fTemp385) + ((0.0630207211f * fTemp373) + ((0.0599688701f * fTemp121) + ((0.0339060649f * fTemp453) + ((0.00881984923f * fTemp458) + ((0.0293282885f * fTemp459) + ((0.0510879867f * fTemp460) + ((0.0734275356f * fTemp461) + ((0.0838648677f * fTemp462) + ((0.0802941993f * fTemp463) + ((0.0571001321f * fTemp464) + ((0.021149328f * fTemp389) + ((0.0561235398f * fTemp468) + ((0.0878017545f * fTemp368) + ((0.0912808627f * fTemp181) + ((0.0768761262f * fTemp86) + ((0.0617389455f * fTemp367) + ((0.0558793917f * fTemp141) + ((0.0457472466f * fTemp182) + ((0.0199896246f * fTemp183) + ((0.0148930326f * fTemp193) + ((0.0402844325f * fTemp194) + ((0.0737632364f * fTemp195) + ((0.0824610144f * fTemp196) + ((0.0475173183f * fTemp469) + ((0.0916165635f * fTemp473) + ((0.0947294533f * fTemp474) + ((0.0454115421f * fTemp475) + ((0.0302133244f * fTemp198) + ((0.0494094677f * fTemp199) + ((0.0806909427f * fTemp200) + ((0.127536848f * fTemp58) + ((0.0868556798f * fTemp477) + ((0.0218512528f * fTemp478) + ((0.23007904f * fTemp204) + ((0.445631266f * fTemp35) + ((0.431592762f * fTemp482) + ((0.00469985045f * fTemp489) + ((0.0216376241f * fTemp153) + ((0.0282601397f * fTemp205) + ((0.0267036967f * fTemp206) + ((0.017975403f * fTemp207) + ((0.00878933072f * fTemp208) + ((0.00827051606f * fTemp210) + ((0.0140079958f * fTemp493) + ((0.0166020691f * fTemp495) + ((0.0137333293f * fTemp496) + ((0.00155644398f * fTemp223) + ((0.00610370189f * fTemp502) + ((0.0126651814f * fTemp240) + ((0.0106814783f * fTemp239) + ((0.00558488723f * fTemp238) + ((0.00149540696f * fTemp0) + (0.00521866512f * fTemp508))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00222785119f * (fTemp53 - fTemp254)))))))))))) : (iSlow18 ? (((0.000183111057f * (fTemp265 - (fTemp8 + (fTemp41 - (fTemp252 - (fTemp345 - (fTemp124 - fTemp96))))))) + ((0.000244148076f * (fTemp255 - (fTemp337 - (fTemp133 + (fTemp342 + fTemp412))))) + ((0.000152592547f * (fTemp261 + (fTemp302 + (fTemp277 + (fTemp273 - (fTemp49 + (fTemp381 - fTemp413))))))) + ((6.10370189e-05f * (fTemp297 - (fTemp318 - (fTemp292 - (fTemp321 - (fTemp446 - fTemp54)))))) + ((0.000122074038f * (fTemp305 - (fTemp284 + (fTemp324 + (fTemp11 + (fTemp18 + (fTemp312 + (fTemp109 + fTemp648)))))))) + ((0.000335703604f * (fTemp330 - (fTemp25 - (fTemp266 + (fTemp88 + (fTemp341 - (fTemp145 - fTemp588))))))) + ((0.000885036774f * (fTemp279 - (fTemp349 + (fTemp274 + (fTemp351 + (fTemp64 - (fTemp411 + fTemp130))))))) + ((0.00146488845f * (fTemp264 - (fTemp102 - fTemp649))) + ((0.00125125889f * (fTemp286 + (fTemp134 + (fTemp173 + (fTemp497 + fTemp301))))) + ((0.000793481246f * (fTemp325 - (fTemp399 + (fTemp290 - fTemp370)))) + ((0.00100711081f * (fTemp368 - fTemp307)) + ((0.000640888698f * (fTemp2 - (fTemp169 + (fTemp146 - fTemp123)))) + ((0.00122074038f * (fTemp378 - fTemp76)) + ((0.00131229591f * (fTemp253 + (fTemp80 - (fTemp403 + fTemp650)))) + ((0.0022583697f * (fTemp477 - fTemp160)) + ((0.00201422162f * (fTemp369 + fTemp323)) + ((0.00347911008f * (fTemp95 + fTemp46)) + ((0.00326548051f * (fTemp110 - (fTemp164 - fTemp651))) + ((0.00311288796f * (fTemp94 - fTemp350)) + ((0.00119022187f * (fTemp353 + (fTemp50 + (fTemp9 + (fTemp407 - (fTemp364 - fTemp386)))))) + ((0.00280770287f * (fTemp89 + fTemp322)) + ((0.00473036896f * (fTemp460 + fTemp519)) + ((0.00210577715f * (fTemp63 - (fTemp59 - fTemp313))) + ((0.00186162908f * (fTemp38 + (fTemp99 + fTemp56))) + ((0.00173955504f * (fTemp140 - fTemp120)) + ((0.000671407208f * (fTemp125 + (fTemp250 + fTemp408))) + ((0.00906399731f * (fTemp480 - fTemp363)) + ((0.000732444227f * (fTemp170 + (fTemp414 + fTemp128))) + ((0.00106814783f * (fTemp78 + (fTemp122 - fTemp343))) + ((0.00143436994f * (fTemp129 + (fTemp98 + (fTemp455 + fTemp388)))) + ((0.000762962736f * (fTemp132 + (fTemp366 - (fTemp116 - fTemp417)))) + ((0.000823999755f * (fTemp115 - (fTemp112 + (fTemp40 - (fTemp406 + fTemp405))))) + ((0.000976592302f * (fTemp275 - (fTemp389 - fTemp138))) + ((0.00152592547f * (fTemp84 + (fTemp139 + (fTemp468 + fTemp81)))) + ((0.00158696249f * (fTemp289 + fTemp144)) + ((0.00222785119f * (fTemp393 + fTemp142)) + ((0.00271614734f * (fTemp427 + fTemp263)) + ((0.00198370311f * fTemp652) + ((0.000854518265f * (fTemp13 - (fTemp42 + (fTemp243 + (fTemp383 + fTemp92))))) + ((0.00302133244f * (fTemp420 + (fTemp338 + (fTemp449 + fTemp429)))) + ((0.00265511032f * (fTemp450 + fTemp422)) + ((0.00219733268f * (fTemp249 + fTemp425)) + ((0.00350962859f * (fTemp461 + fTemp434)) + ((0.0116885891f * (fTemp481 - fTemp478)) + ((0.00546281319f * fTemp3) + ((0.00561540574f * fTemp74) + ((0.00585955381f * fTemp400) + ((0.00402844325f * fTemp401) + ((0.00253303628f * fTemp172) + ((0.001617481f * fTemp97) + ((0.00140385143f * fTemp5) + ((0.00213629566f * fTemp380) + ((0.000915555283f * fTemp281) + (fTemp653 + ((0.00320444349f * fTemp377) + ((0.00369273964f * fTemp530) + ((0.00247199927f * fTemp424) + ((0.00262459181f * fTemp428) + ((0.00384533219f * fTemp430) + ((0.00570696127f * fTemp432) + ((0.00521866512f * fTemp433) + ((0.00189214759f * fTemp435) + ((0.00170903653f * fTemp438) + ((0.00363170262f * fTemp440) + ((0.000946073793f * fTemp175) + ((0.00338755455f * fTemp376) + ((0.00482192449f * fTemp451) + (fTemp654 + ((0.00833155308f * fTemp385) + ((0.00335703604f * fTemp373) + ((0.0058290353f * fTemp152) + ((0.00308236945f * fTemp362) + ((0.00625629444f * fTemp459) + ((0.00518814661f * fTemp465) + ((0.00277718436f * fTemp185) + ((0.00875881221f * fTemp186) + ((0.00766014587f * fTemp187) + ((0.0109561449f * fTemp191) + ((0.0127262184f * fTemp192) + ((0.0213934761f * fTemp472) + ((0.0373851731f * fTemp473) + ((0.0395825058f * fTemp474) + ((0.0198980682f * fTemp475) + ((0.0187078472f * fTemp200) + ((0.0228278451f * fTemp58) + ((0.00601214636f * fTemp201) + ((0.00698873866f * fTemp484) + ((0.0251472518f * fTemp396) + ((0.0446180627f * fTemp485) + ((0.0528580584f * fTemp486) + ((0.046540726f * fTemp487) + ((0.0297860652f * fTemp488) + ((0.0114139225f * fTemp489) + ((0.0524613187f * fTemp490) + ((0.0805688649f * fTemp491) + ((0.0627155378f * fTemp492) + (((((((((((((((((((((((((0.0628681332f * fTemp0) + (0.26206243f * fTemp506)) + (0.656971931f * fTemp507)) + (0.825647771f * fTemp508)) + (0.348948628f * fTemp510)) + (0.28858304f * fTemp511)) + (0.35834834f * fTemp233)) + (0.157628104f * fTemp234)) + (0.0238044374f * fTemp235)) + (0.00955229346f * fTemp236)) + (0.034272287f * fTemp237)) + (0.0387890264f * fTemp241)) + (0.0880459026f * fTemp228)) + (0.0482802838f * fTemp227)) + (0.0842310861f * fTemp504)) + (0.144199952f * fTemp503)) + (0.142765582f * fTemp502)) + (0.0415051728f * fTemp22)) + (0.00750755332f * fTemp220)) + (0.0262154005f * fTemp219)) + (0.0498062074f * fTemp501)) + (0.0707419068f * fTemp500)) + (0.0876186416f * fTemp499)) + (0.0513931699f * fTemp498)) + (0.0226142164f * fTemp209)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.000396740623f * (fTemp242 - (fTemp278 - (fTemp31 + (fTemp60 - (fTemp43 + (fTemp90 + (fTemp522 + fTemp410)))))))) + ((0.000518814661f * (fTemp244 + (fTemp23 + (fTemp333 - (fTemp515 + fTemp298))))) + ((0.00057985168f * (fTemp398 + (fTemp245 + (fTemp256 - (fTemp246 + (fTemp365 + (fTemp53 + (fTemp104 + (fTemp442 - (fTemp493 - fTemp177)))))))))) + ((0.000488296151f * (fTemp251 - (fTemp331 - (fTemp32 + (fTemp149 + fTemp409))))) + ((3.05185094e-05f * (fTemp260 + (fTemp269 + (fTemp296 - (fTemp270 + (fTemp51 + (fTemp293 - (fTemp36 - fTemp131)))))))) + ((9.15555283e-05f * (fTemp276 + (fTemp283 + (fTemp291 - (fTemp309 + (fTemp285 - (fTemp14 + (fTemp280 - (fTemp21 + (fTemp62 + (fTemp103 - (fTemp327 - (fTemp118 + fTemp65))))))))))))) + ((0.000213629566f * (fTemp304 + (fTemp319 - (fTemp340 + (fTemp320 + (fTemp91 - (fTemp71 + (fTemp136 - (fTemp443 + fTemp4))))))))) + ((0.000366222113f * (fTemp310 + (fTemp518 - (fTemp268 + (fTemp247 + (fTemp137 - (fTemp334 + fTemp514))))))) + ((0.000457777642f * (fTemp339 + (fTemp262 - (fTemp311 + (fTemp10 + (fTemp52 + fTemp372)))))) + ((0.000427259132f * (fTemp24 - (fTemp83 + (fTemp272 + (fTemp168 + (fTemp299 + fTemp402)))))) + ((0.000305185094f * (fTemp28 + (fTemp45 - (fTemp271 + (fTemp358 + (fTemp29 + (fTemp328 + fTemp39))))))) + ((0.00177007355f * (fTemp105 + fTemp33)) + ((0.0025940733f * (fTemp68 + (fTemp119 + (fTemp447 - fTemp423)))) + ((0.00149540696f * (fTemp61 - (fTemp27 + (fTemp57 + (fTemp93 + fTemp126))))) + ((0.000610370189f * (fTemp303 - (fTemp257 - (fTemp258 - (fTemp344 + fTemp66))))) + ((0.00112918485f * (fTemp67 - (fTemp361 + (fTemp355 - fTemp82)))) + ((0.00137333293f * (fTemp155 - (fTemp357 - (fTemp73 + (fTemp404 - (fTemp516 - fTemp107)))))) + ((0.00164799951f * (fTemp347 - (fTemp306 + (fTemp108 + (fTemp441 + (fTemp387 - fTemp444)))))) + ((0.0019531846f * (fTemp156 + (fTemp188 + fTemp113))) + ((0.00228888821f * (fTemp157 - (fTemp106 + fTemp326))) + ((0.00244148076f * (fTemp184 + fTemp72)) + ((0.00305185094f * (fTemp69 + (fTemp161 - (fTemp392 + fTemp294)))) + ((0.00180059206f * (fTemp79 - (fTemp287 + (fTemp354 - (fTemp150 - (fTemp15 + (fTemp111 + fTemp379))))))) + ((0.000701925717f * (fTemp101 + (fTemp20 - (fTemp147 + (fTemp382 + fTemp356))))) + ((0.00183111057f * (fTemp159 + (fTemp315 - (fTemp436 + fTemp100)))) + ((0.00393688772f * (fTemp44 + (fTemp183 - fTemp467))) + ((0.00381481368f * (fTemp167 - (fTemp394 + (fTemp471 - fTemp193)))) + ((0.00238044374f * (fTemp75 - (fTemp437 - fTemp348))) + ((0.00204474013f * (fTemp86 - fTemp374)) + ((0.00103762932f * (fTemp267 + (fTemp375 - (fTemp181 + fTemp176)))) + ((0.00109866634f * (fTemp85 + (fTemp463 - fTemp317))) + ((0.00115970336f * (fTemp314 - (fTemp416 + (fTemp462 + fTemp360)))) + ((0.00134281442f * (fTemp371 - (fTemp180 + fTemp390))) + ((0.00054933317f * (fTemp335 + (fTemp329 + fTemp87))) + ((0.00241096225f * (fTemp179 - fTemp384)) + ((0.00250251777f * (fTemp464 - fTemp26)) + ((0.00207525864f * (fTemp202 - fTemp418)) + ((0.00231940672f * (fTemp300 - fTemp426)) + ((0.00283822138f * (fTemp445 - fTemp17)) + ((0.004852443f * (fTemp448 - fTemp431)) + ((0.00671407208f * (fTemp196 - fTemp458)) + ((0.00555436872f * (fTemp367 - fTemp466)) + ((0.0169682913f * (fTemp35 + fTemp151)) + ((0.00567644276f * (fTemp346 + fTemp190)) + (((0.00299081393f * fTemp117) + ((0.00256355479f * fTemp163) + ((0.00668355357f * fTemp165) + ((0.0104068117f * fTemp166) + ((0.00167851802f * fTemp288) + (fTemp655 + ((0.00509659108f * fTemp77) + ((0.00427259132f * fTemp121) + ((0.00915555283f * fTemp453) + ((0.006469924f * fTemp454) + ((0.00216681417f * fTemp456) + ((0.00405896176f * fTemp457) + ((0.00564592425f * fTemp141) + ((0.00390636921f * fTemp182) + ((0.014679403f * fTemp189) + ((0.0205084383f * fTemp194) + ((0.0202032533f * fTemp195) + ((0.0028992584f * fTemp154) + ((0.00729392376f * fTemp470) + ((0.0117496261f * fTemp476) + ((0.0361033976f * fTemp197) + ((0.0358592495f * fTemp198) + ((0.00912503432f * fTemp199) + ((0.00445570238f * fTemp479) + ((0.0087282937f * fTemp203) + ((0.0138859218f * fTemp204) + ((0.0202337727f * fTemp482) + ((0.0173345134f * fTemp397) + ((0.00851466414f * fTemp483) + ((0.0154118473f * fTemp153) + ((0.0494399853f * fTemp205) + ((0.0787987933f * fTemp206) + ((0.0870082676f * fTemp207) + ((0.0612201318f * fTemp208) + ((0.00543229468f * fTemp135) + ((0.0150151066f * fTemp210) + ((0.0324716941f * fTemp211) + ((0.0357371755f * fTemp212) + ((0.0336313993f * fTemp213) + ((0.0489516892f * fTemp214) + ((0.0694906488f * fTemp215) + ((0.0724204257f * fTemp216) + ((0.0484328754f * fTemp217) + ((((((((((((((((((((0.492812902f * fTemp229) + fTemp656) + (0.770653427f * fTemp231)) + (0.166081727f * fTemp232)) + (0.0734275356f * fTemp238)) + (0.161168247f * fTemp239)) + (0.177678764f * fTemp240)) + (0.119327374f * fTemp391)) + (0.0459303558f * fTemp16)) + (0.0473647267f * fTemp226)) + (0.131656855f * fTemp225)) + (0.116916411f * fTemp512)) + (0.0328073986f * fTemp505)) + (0.0820032358f * fTemp224)) + (0.142185733f * fTemp223)) + (0.102084413f * fTemp222)) + (0.0385753959f * fTemp221)) + (0.0178228095f * fTemp496)) + (0.00375377666f * fTemp495)) + (0.019531846f * fTemp218))))))))))))))))))))))))))))))))))))))))))))) + (0.00268562883f * fTemp55)))))))))))))))))))))))))))))))))))))))))))))) + (0.000274666585f * (fTemp1 + (fTemp513 + (fTemp254 + (fTemp332 + (fTemp7 + (fTemp19 - (fTemp34 - (fTemp352 - (fTemp6 - (fTemp30 + (fTemp282 - fTemp657)))))))))))))) : (((0.00207525864f * (fTemp334 - fTemp297)) + ((9.15555283e-05f * (fTemp292 + (fTemp285 - (fTemp343 + (fTemp81 - (fTemp490 + (fTemp214 + (fTemp225 + fTemp215)))))))) + ((0.000518814661f * (fTemp330 - (fTemp170 - fTemp21))) + ((0.00280770287f * (fTemp337 + (fTemp96 + (fTemp101 + (fTemp99 + fTemp150))))) + ((0.00326548051f * (fTemp8 + (fTemp132 + fTemp246))) + ((0.000793481246f * (fTemp14 - (fTemp274 - fTemp399))) + ((0.000946073793f * (fTemp256 + (fTemp135 + fTemp449))) + ((0.00152592547f * (fTemp319 + (fTemp252 + (fTemp137 + (fTemp114 + (fTemp138 + fTemp128)))))) + ((0.003234962f * (fTemp134 + fTemp279)) + ((0.00439466536f * (fTemp253 + (fTemp266 + (fTemp362 + fTemp118)))) + ((0.00473036896f * (fTemp157 + fTemp264)) + ((0.0067751091f * (fTemp272 - fTemp37)) + ((0.00671407208f * (fTemp320 + fTemp280)) + ((0.000457777642f * (fTemp221 - fTemp47)) + ((0.0019226661f * (fTemp54 + (fTemp358 + (fTemp136 + fTemp298)))) + ((0.00204474013f * (fTemp259 + fTemp312)) + ((0.00216681417f * (fTemp60 + (fTemp33 + (fTemp400 + (fTemp53 + (fTemp336 + fTemp402)))))) + ((0.00213629566f * (fTemp307 + (fTemp247 + fTemp350))) + ((0.00271614734f * (fTemp271 + fTemp69)) + ((0.00317392498f * (fTemp55 + (fTemp426 + fTemp103))) + ((0.00350962859f * (fTemp61 + (fTemp46 + (fTemp341 + (fTemp15 + fTemp273))))) + ((0.00344859157f * (fTemp372 + fTemp2)) + ((0.00396740623f * (fTemp65 + fTemp62)) + ((0.00402844325f * (fTemp347 + (fTemp173 + fTemp44))) + ((0.00454725791f * (fTemp171 + fTemp72)) + ((0.00366222113f * (fTemp117 + fTemp75)) + ((0.00186162908f * (fTemp109 + fTemp293)) + ((0.00283822138f * (fTemp91 + (fTemp73 + fTemp76))) + ((0.00332651753f * (fTemp287 + fTemp636)) + ((0.00314340647f * (fTemp359 + fTemp113)) + ((0.000915555283f * (fTemp353 + (fTemp463 - fTemp383))) + ((0.00500503555f * (fTemp425 + fTemp268)) + ((0.00436414685f * (fTemp519 + (fTemp378 + (fTemp451 - fTemp444)))) + ((0.00268562883f * (fTemp352 + (fTemp27 + (fTemp107 - (fTemp95 - fTemp100))))) + ((0.00155644398f * (fTemp208 + fTemp165)) + ((0.0012817774f * (fTemp166 + (fTemp335 + fTemp57))) + ((0.00125125889f * (fTemp289 + fTemp74)) + ((0.00302133244f * (fTemp401 + (fTemp514 + fTemp38))) + ((0.00210577715f * (fTemp129 + fTemp168)) + ((0.00164799951f * (fTemp169 + (fTemp384 - fTemp123))) + ((0.00408948027f * (fTemp355 + fTemp124)) + ((0.00299081393f * (fTemp50 + (fTemp360 - fTemp250))) + ((0.00137333293f * (fTemp90 + fTemp115)) + ((0.00149540696f * (fTemp290 + fTemp80)) + ((0.00311288796f * (fTemp306 + fTemp145)) + ((0.0035401471f * (fTemp30 - (fTemp66 - fTemp282))) + ((0.0025940733f * (fTemp405 + fTemp142)) + ((0.00234992523f * (fTemp267 + (fTemp148 + (fTemp403 + fTemp313)))) + ((0.00177007355f * (fTemp315 + fTemp97)) + ((0.000122074038f * (fTemp13 + (fTemp385 + (fTemp227 - fTemp492)))) + ((0.00054933317f * (fTemp317 + (fTemp316 - (fTemp351 - (fTemp217 + (fTemp220 + fTemp493)))))) + ((0.00305185094f * (fTemp404 + (fTemp382 + fTemp130))) + ((0.000701925717f * (fTemp522 + fTemp248)) + ((0.00390636921f * (fTemp440 + fTemp92)) + ((0.00106814783f * (fTemp423 + fTemp26)) + ((0.00122074038f * (fTemp474 - fTemp407)) + ((0.000396740623f * (fTemp411 + (fTemp506 + fTemp222))) + ((0.0108035523f * (fTemp415 + fTemp414)) + ((0.00546281319f * (fTemp392 + fTemp417)) + ((0.0122684408f * (fTemp188 - fTemp381)) + ((0.0183721427f * (fTemp447 - fTemp344)) + ((0.00698873866f * (fTemp446 - fTemp294)) + ((0.0513931699f * (fTemp187 - fTemp464)) + ((0.000823999755f * fTemp331) + ((0.000732444227f * fTemp278) + ((0.000854518265f * fTemp333) + ((0.00347911008f * fTemp45) + ((0.00445570238f * fTemp303) + ((0.00457777642f * fTemp67) + ((0.00427259132f * fTemp155) + ((0.00424207281f * fTemp156) + ((0.00250251777f * fTemp323) + ((0.00384533219f * fTemp110) + ((0.00415051728f * fTemp161) + ((0.0045167394f * fTemp119) + ((0.00503555406f * fTemp163) + ((0.00494399853f * fTemp164) + ((0.00708029419f * fTemp322) + ((0.00601214636f * fTemp3) + ((0.00537125766f * fTemp120) + ((0.00726340525f * fTemp102) + ((0.00692770164f * fTemp20) + ((0.00253303628f * fTemp104) + ((0.00244148076f * fTemp370) + ((0.00238044374f * fTemp257) + ((0.00274666585f * fTemp6) + ((0.00375377666f * fTemp144) + ((0.0038758507f * fTemp354) + ((0.00378429517f * fTemp295) + ((0.00463881344f * fTemp172) + ((0.00170903653f * fTemp348) + ((0.00369273964f * fTemp70) + ((0.00497451704f * fTemp371) + ((0.00491348002f * fTemp42) + ((0.0028992584f * fTemp40) + ((0.00418103579f * fTemp327) + ((0.0051576281f * fTemp98) + ((0.00433362834f * fTemp139) + ((0.00198370311f * fTemp281) + ((0.00469985045f * fTemp412) + ((0.00875881221f * fTemp413) + ((0.0115665151f * fTemp390) + (fTemp644 + ((0.00405896176f * fTemp39) + ((0.00720236823f * fTemp122) + ((0.00717184972f * fTemp418) + ((0.00573747978f * fTemp421) + ((0.00701925717f * fTemp369) + ((0.00732444227f * fTemp515) + ((0.00787377544f * fTemp149) + ((0.00476088747f * fTemp329) + ((0.00363170262f * fTemp106) + ((0.00561540574f * fTemp377) + ((0.00430310983f * fTemp530) + ((0.00659199804f * fTemp424) + ((0.00778221991f * fTemp431) + ((0.0108645894f * fTemp432) + ((0.00506607257f * fTemp433) + ((0.0426343568f * fTemp175) + ((0.0688497573f * fTemp176) + ((0.0444349498f * fTemp328) + ((0.00360118411f * fTemp177) + ((0.0147099216f * fTemp448) + ((0.00762962736f * fTemp450) + ((0.0058290353f * fTemp373) + ((0.00833155308f * fTemp121) + ((0.0160222184f * fTemp453) + ((0.0232856236f * fTemp454) + ((0.0274666585f * fTemp455) + ((0.0195013285f * fTemp152) + ((0.0423902087f * fTemp460) + ((0.0762657523f * fTemp461) + ((0.0538346507f * fTemp462) + ((0.0101931822f * fTemp181) + ((0.0174260698f * fTemp86) + ((0.022705771f * fTemp367) + ((0.0582598336f * fTemp184) + ((0.0829493105f * fTemp185) + ((0.0756248683f * fTemp186) + ((0.0953093022f * fTemp193) + ((0.13241981f * fTemp194) + ((0.125492111f * fTemp195) + ((0.0155949583f * fTemp196) + ((0.0237434004f * fTemp471) + ((0.0792565718f * fTemp472) + ((0.206762895f * fTemp58) + ((0.376049072f * fTemp477) + ((0.33710745f * fTemp478) + ((0.0974455997f * fTemp202) + ((0.820856333f * fTemp203) + (fTemp204 + ((0.59163183f * fTemp35) + ((0.170537427f * fTemp482) + ((0.0333567299f * fTemp397) + ((0.00393688772f * fTemp484) + (0.0241706595f * fTemp483)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00140385143f * (fTemp513 - (fTemp375 + fTemp10))) + ((0.0022583697f * (fTemp398 - (fTemp83 + (fTemp288 + (fTemp452 + fTemp301))))) + ((0.00277718436f * (fTemp245 - (fTemp88 + (fTemp263 + fTemp159)))) + ((0.00241096225f * (fTemp254 - (fTemp79 - (fTemp489 - fTemp160)))) + ((0.00131229591f * (fTemp260 + fTemp645)) + ((0.000335703604f * (fTemp265 - (fTemp31 - (fTemp258 + (fTemp153 + (fTemp498 - (fTemp507 + fTemp224))))))) + ((0.000152592547f * (fTemp255 - (fTemp314 - (fTemp64 - (fTemp22 - (fTemp241 + (fTemp232 + fTemp236))))))) + ((0.00057985168f * (fTemp261 + (fTemp270 - (fTemp82 - fTemp28)))) + ((0.00143436994f * (fTemp269 - (fTemp7 + (fTemp51 + (fTemp167 + (fTemp380 + fTemp32)))))) + ((0.00219733268f * (fTemp276 - (fTemp34 + (fTemp473 + fTemp342)))) + ((0.00256355479f * (fTemp283 - (fTemp43 - fTemp291))) + ((0.00231940672f * (fTemp296 - (fTemp68 - (fTemp434 - fTemp326)))) + ((0.00189214759f * (fTemp302 - (fTemp275 + fTemp84))) + ((0.00146488845f * (fTemp277 - (fTemp363 - fTemp325))) + ((0.00100711081f * (fTemp305 + (fTemp518 - (fTemp131 + fTemp78)))) + ((0.000640888698f * (fTemp309 - (fTemp125 - fTemp48))) + ((0.000366222113f * (fTemp318 - (fTemp516 - (fTemp230 - fTemp223)))) + ((0.000213629566f * (fTemp284 + (fTemp406 - (fTemp206 + (fTemp226 - (fTemp16 - (fTemp508 - fTemp235))))))) + ((3.05185094e-05f * (fTemp324 + (fTemp211 - (fTemp212 + (fTemp496 - (fTemp500 + (fTemp228 + (fTemp511 - fTemp238)))))))) + ((0.000671407208f * (fTemp304 - (fTemp29 - (fTemp504 - fTemp218)))) + ((0.00115970336f * (fTemp310 - fTemp646)) + ((6.10370189e-05f * (fTemp332 - (fTemp209 + (fTemp210 + (fTemp213 - (fTemp239 + (fTemp237 + (fTemp510 + fTemp233)))))))) + ((0.00247199927f * (fTemp9 - fTemp11)) + ((0.00112918485f * (fTemp18 - (fTemp207 + fTemp262))) + ((0.00262459181f * (fTemp19 - (fTemp366 + fTemp357))) + ((0.00338755455f * (fTemp339 - (fTemp345 + (fTemp374 + fTemp146)))) + ((0.00341807306f * (fTemp23 + (fTemp441 - fTemp85))) + ((0.00286873989f * (fTemp24 - (fTemp286 + (fTemp356 + fTemp133)))) + ((0.00183111057f * (fTemp25 - (fTemp349 - (fTemp93 - fTemp56)))) + ((0.00622577593f * (fTemp311 + (fTemp422 - fTemp420))) + ((0.0019531846f * (fTemp41 - (fTemp127 + fTemp105))) + ((0.00296029542f * (fTemp17 - fTemp71)) + ((0.00173955504f * (fTemp365 - (fTemp243 + (fTemp36 + fTemp379)))) + ((0.00167851802f * (fTemp388 - fTemp140)) + ((0.000305185094f * (fTemp12 - (fTemp216 + (fTemp495 + (fTemp501 + (fTemp0 - fTemp231)))))) + ((0.00109866634f * (fTemp386 - fTemp59)) + ((0.000274666585f * (fTemp361 + (fTemp491 + fTemp5))) + ((0.000488296151f * (fTemp126 + (fTemp505 - fTemp219))) + ((0.00201422162f * (fTemp408 - fTemp49)) + ((0.000762962736f * (fTemp409 - (fTemp77 - fTemp410))) + ((0.082064271f * (fTemp467 + fTemp465)) + ((0.000183111057f * (fTemp502 + (fTemp391 + (fTemp234 + fTemp240)))) + ((0.000244148076f * (fTemp205 + (fTemp497 + (fTemp499 + (fTemp229 + fTemp512))))) + ((((((0.00857570115f * fTemp340) + (((0.00335703604f * fTemp52) + ((0.00222785119f * fTemp4) + ((0.0101321451f * fTemp94) + ((0.0114749596f * fTemp89) + ((0.0106204413f * fTemp338) + ((0.0149235511f * fTemp427) + ((0.0198065136f * fTemp428) + ((0.0151371807f * fTemp429) + ((0.00674459059f * fTemp430) + ((0.0116275521f * fTemp435) + ((0.0126041444f * fTemp436) + ((0.0150761437f * fTemp437) + ((0.00714133121f * fTemp438) + ((0.0115359966f * fTemp439) + ((0.0126956999f * fTemp111) + ((0.0178838465f * fTemp442) + ((0.0256355479f * fTemp443) + ((0.0405590981f * fTemp445) + ((0.0396435447f * fTemp300) + ((0.0141300699f * fTemp116) + ((0.0172734763f * fTemp178) + (fTemp540 + ((0.0140690329f * fTemp387) + ((0.0135502182f * fTemp179) + ((0.0153202917f * fTemp180) + ((0.00686666463f * fTemp376) + ((0.0200811792f * fTemp456) + ((0.0588702038f * fTemp457) + ((0.0925016031f * fTemp364) + ((0.101565599f * fTemp394) + ((0.0762047172f * fTemp458) + ((0.0189519953f * fTemp459) + ((0.0754112378f * fTemp389) + ((0.0874965638f * fTemp393) + ((0.0851771608f * fTemp466) + ((0.0610065013f * fTemp468) + ((0.0270088818f * fTemp368) + ((0.00817896053f * fTemp141) + ((0.0152592547f * fTemp182) + ((0.0123294778f * fTemp183) + ((0.0380870998f * fTemp189) + ((0.0874660462f * fTemp151) + ((0.130680263f * fTemp190) + ((0.128452405f * fTemp191) + ((0.0487380587f * fTemp192) + ((0.110446483f * fTemp469) + ((0.193365276f * fTemp154) + ((0.167332992f * fTemp470) + ((0.0507522821f * fTemp346) + ((0.0862147883f * fTemp475) + ((0.091830194f * fTemp476) + ((0.238044381f * fTemp197) + ((0.231452376f * fTemp198) + ((0.190832242f * fTemp199) + ((0.0219733268f * fTemp200) + ((0.075075537f * fTemp479) + ((0.522843122f * fTemp480) + ((0.871761203f * fTemp481) + ((0.636402488f * fTemp201) + ((0.0177617725f * fTemp396) + ((0.0307321399f * fTemp485) + ((0.0311288796f * fTemp486) + ((0.0230109561f * fTemp487) + ((0.000610370189f * fTemp503) + (0.0110477004f * fTemp488))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + fTemp647)) + (0.00292977691f * fTemp251)) + (0.00180059206f * fTemp244)) + (0.00158696249f * fTemp242)) + (0.00134281442f * fTemp1)))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow14 ? (iSlow16 ? (((9.15555283e-05f * (fTemp244 + (fTemp217 + (fTemp218 - (fTemp495 + (fTemp505 + (fTemp239 + (fTemp235 + fTemp632)))))))) + ((0.00149540696f * (fTemp276 - (fTemp170 + fTemp309))) + ((0.00057985168f * (fTemp324 + (fTemp292 + (fTemp264 - (fTemp212 + fTemp48))))) + ((0.000457777642f * (fTemp88 + fTemp330)) + ((0.00497451704f * (fTemp522 - fTemp25)) + ((0.000213629566f * (fTemp333 - (fTemp215 + fTemp96))) + ((0.00332651753f * (fTemp34 - (fTemp316 + fTemp165))) + ((0.00268562883f * (fTemp279 - (fTemp66 + fTemp127))) + ((0.00180059206f * (fTemp253 - (fTemp61 + (fTemp169 + (fTemp49 + fTemp112))))) + ((0.00198370311f * (fTemp266 - (fTemp243 + fTemp303))) + ((0.00604266487f * (fTemp300 - fTemp21)) + ((0.00106814783f * (fTemp70 - fTemp43)) + ((0.000762962736f * (fTemp435 - fTemp44)) + ((0.000366222113f * (fTemp371 - fTemp167)) + ((0.0042115543f * (fTemp400 + (fTemp151 - fTemp348))) + ((0.00100711081f * (fTemp38 - (fTemp57 + fTemp137))) + ((0.00204474013f * (fTemp445 - fTemp421)) + ((0.00573747978f * (fTemp434 - fTemp369)) + ((0.00454725791f * (fTemp444 - fTemp106)) + ((6.10370189e-05f * (fTemp493 - (fTemp500 + (fTemp222 + (fTemp223 + (fTemp502 + (fTemp503 + (fTemp504 + (fTemp512 - (fTemp16 - (fTemp234 + (fTemp231 + (fTemp229 + (fTemp507 + fTemp508)))))))))))))) + (((((0.00326548051f * fTemp262) + ((0.00622577593f * fTemp252) + ((0.00778221991f * fTemp47) + ((0.00506607257f * fTemp321) + ((0.00436414685f * fTemp74) + (fTemp633 + ((0.00396740623f * fTemp39) + ((0.00552385021f * fTemp122) + ((0.00488296151f * fTemp418) + ((0.00628681295f * fTemp530) + ((0.0067751091f * fTemp95) + ((0.00369273964f * fTemp94) + ((0.00756859034f * fTemp431) + ((0.00939970091f * fTemp432) + ((0.00900296029f * fTemp433) + ((0.00781273842f * fTemp381) + ((0.0148014771f * fTemp344) + ((0.0227973275f * fTemp111) + ((0.0267647337f * fTemp294) + ((0.0221259203f * fTemp440) + ((0.0153508103f * fTemp392) + ((0.00793481246f * fTemp441) + ((0.0100100711f * fTemp176) + ((0.00753807183f * fTemp328) + ((0.012878811f * fTemp116) + ((0.0196539201f * fTemp118) + ((0.0199285876f * fTemp177) + ((0.0165715516f * fTemp178) + ((0.00704977568f * fTemp249) + ((0.0345774703f * fTemp376) + ((0.0576189458f * fTemp449) + ((0.0544145033f * fTemp450) + (fTemp624 + ((0.0280770287f * fTemp453) + ((0.0419324338f * fTemp454) + ((0.0318308063f * fTemp455) + ((0.00689718314f * fTemp152) + ((0.0113528855f * fTemp457) + ((0.0331736207f * fTemp364) + ((0.0190435499f * fTemp394) + ((0.0121158483f * fTemp389) + ((0.0539567247f * fTemp393) + ((0.0946379006f * fTemp465) + ((0.120914333f * fTemp466) + ((0.110782191f * fTemp467) + ((0.0657673851f * fTemp468) + ((0.0126956999f * fTemp141) + ((0.0741904974f * fTemp182) + ((0.0998870805f * fTemp183) + ((0.0992461964f * fTemp184) + ((0.0840174556f * fTemp185) + ((0.0859401226f * fTemp186) + ((0.0791955292f * fTemp187) + ((0.0643024966f * fTemp188) + ((0.0437025055f * fTemp189) + ((0.0477004312f * fTemp154) + ((0.115451522f * fTemp470) + ((0.164006472f * fTemp346) + ((0.168065429f * fTemp471) + ((0.0569475405f * fTemp472) + ((0.0739768669f * fTemp197) + ((0.137241736f * fTemp198) + ((0.144383073f * fTemp199) + ((0.0609149449f * fTemp200) + ((0.0997650102f * fTemp478) + ((0.102572709f * fTemp479) + ((0.120303966f * fTemp480) + ((0.0705893114f * fTemp481) + ((0.0643940568f * fTemp201) + ((0.0390942097f * fTemp202) + ((0.0217596982f * fTemp203) + ((0.0951261967f * fTemp483) + ((0.419354826f * fTemp484) + ((0.677297294f * fTemp396) + ((0.521103561f * fTemp485) + ((0.0189825129f * fTemp208) + ((0.0310983621f * fTemp135) + ((0.0313425101f * fTemp490) + ((0.0117496261f * fTemp492) + (0.0234687347f * fTemp491)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000823999755f * fTemp291)) + (0.00125125889f * fTemp269)) + (0.000885036774f * fTemp261)))))))))))))))))))))) - ((0.000183111057f * (fTemp513 - (fTemp398 + (fTemp331 - (fTemp499 + fTemp81))))) + ((3.05185094e-05f * (fTemp242 + (fTemp251 - (fTemp265 + (fTemp268 - (fTemp211 + (fTemp216 - (fTemp219 - (fTemp221 + (fTemp224 + (fTemp22 + (fTemp226 - (fTemp228 - (fTemp391 + (fTemp240 + (fTemp232 + fTemp554)))))))))))))))) + ((0.000274666585f * (fTemp497 + fTemp254)) + ((0.000244148076f * (fTemp260 - (fTemp318 - (fTemp498 + fTemp496)))) + ((0.000427259132f * (fTemp298 - fTemp255)) + ((0.00140385143f * (fTemp80 - fTemp283)) + ((0.000305185094f * (fTemp296 + (fTemp278 - (fTemp36 - fTemp402)))) + ((0.00167851802f * (fTemp452 + fTemp297)) + ((0.00271614734f * (fTemp307 + fTemp302)) + ((0.00302133244f * (fTemp45 + fTemp277)) + ((0.00250251777f * (fTemp305 + (fTemp12 + fTemp332))) + ((0.000488296151f * (fTemp270 - (fTemp284 + (fTemp91 - fTemp14)))) + ((0.00109866634f * (fTemp285 + (fTemp248 + fTemp365))) + ((0.00213629566f * (fTemp304 + (fTemp341 + fTemp20))) + ((0.0028992584f * (fTemp310 + (fTemp363 + (fTemp282 - (fTemp439 - fTemp436))))) + ((0.00305185094f * (fTemp172 + fTemp518)) + ((0.00177007355f * (fTemp7 - (fTemp377 + fTemp420))) + ((0.00119022187f * (fTemp115 + fTemp337)) + ((0.000854518265f * (fTemp8 + (fTemp350 + (fTemp3 + (fTemp213 + fTemp514))))) + ((0.000396740623f * (fTemp18 + (fTemp19 - (fTemp343 - fTemp271)))) + ((0.00247199927f * (fTemp409 + fTemp23)) + ((0.00439466536f * (fTemp113 + fTemp28)) + ((0.00219733268f * (fTemp105 - fTemp256)) + ((0.00347911008f * (fTemp134 - fTemp319)) + ((0.001617481f * (fTemp408 + fTemp286)) + ((0.00445570238f * (fTemp325 + (fTemp281 + fTemp384))) + (((0.00296029542f * (fTemp280 + (fTemp5 + fTemp85))) + ((0.00164799951f * (fTemp320 + (fTemp275 + fTemp124))) + ((0.00411999878f * fTemp634) + ((0.00186162908f * (fTemp33 + (fTemp163 + (fTemp390 + fTemp519)))) + ((0.00152592547f * (fTemp68 + (fTemp345 + (fTemp353 + fTemp109)))) + ((0.00173955504f * (fTemp104 + fTemp69)) + ((0.00189214759f * (fTemp55 + (fTemp53 + fTemp635))) + ((0.00112918485f * (fTemp125 + fTemp246)) + ((0.000976592302f * (fTemp257 + fTemp2)) + ((0.00134281442f * (fTemp62 + (fTemp83 + (fTemp84 - (fTemp64 - fTemp147))))) + ((0.00317392498f * (fTemp155 + fTemp636)) + ((0.00314340647f * (fTemp314 + fTemp347)) + ((0.00283822138f * (fTemp156 + (fTemp75 + (fTemp30 + (fTemp359 + (fTemp342 + fTemp317)))))) + ((0.00256355479f * (fTemp157 + (fTemp76 + (fTemp413 + fTemp119)))) + ((0.00265511032f * (fTemp72 - (fTemp63 - (fTemp138 + fTemp148)))) + ((0.00274666585f * (fTemp79 + (fTemp144 - fTemp401))) + ((0.00207525864f * (fTemp349 + (fTemp415 + fTemp145))) + ((0.00146488845f * (fTemp293 + (fTemp335 + fTemp101))) + ((0.003234962f * (fTemp159 + (fTemp372 - (fTemp209 + fTemp430)))) + ((0.00311288796f * (fTemp160 + (fTemp150 + (fTemp429 + fTemp410)))) + ((0.00170903653f * (fTemp13 + fTemp323)) + ((0.0025940733f * (fTemp46 + (fTemp352 + (fTemp102 + fTemp73)))) + ((0.00350962859f * (fTemp110 + (fTemp103 + (fTemp412 + fTemp4)))) + ((0.00430310983f * (fTemp71 - (fTemp121 - fTemp26))) + ((0.00338755455f * (fTemp161 + (fTemp90 + fTemp288))) + ((0.00115970336f * (fTemp136 + fTemp164)) + ((0.00143436994f * (fTemp140 + fTemp399)) + ((0.000946073793f * (fTemp357 + (fTemp123 + (fTemp516 + fTemp10)))) + ((0.00054933317f * (fTemp168 - fTemp272)) + ((0.00372325815f * (fTemp59 + fTemp166)) + ((0.0019226661f * (fTemp78 + (fTemp40 + fTemp273))) + ((0.00234992523f * (fTemp114 + fTemp50)) + ((0.00228888821f * (fTemp354 + fTemp132)) + ((0.00158696249f * (fTemp133 + (fTemp180 + fTemp6))) + ((0.0012817774f * (fTemp56 + fTemp247)) + ((0.000671407208f * (fTemp370 + fTemp637)) + ((0.00231940672f * (fTemp27 - (fTemp442 - fTemp52))) + ((0.00244148076f * (fTemp327 + fTemp146)) + ((0.0035401471f * (fTemp477 + fTemp306)) + ((0.00277718436f * (fTemp383 + fTemp326)) + ((0.00320444349f * (fTemp263 + (fTemp171 + (fTemp128 + fTemp173)))) + ((0.00335703604f * (fTemp274 + fTemp295)) + ((0.000640888698f * (fTemp259 + (fTemp214 - fTemp210))) + ((0.00473036896f * (fTemp386 + fTemp315)) + ((0.00527970213f * (fTemp100 + fTemp29)) + ((0.00460829493f * fTemp638) + ((0.00210577715f * (fTemp414 + fTemp92)) + ((0.00601214636f * (fTemp9 + fTemp405)) + ((0.00787377544f * (fTemp368 + fTemp139)) + ((0.00720236823f * (fTemp336 + fTemp289)) + ((0.00949125644f * fTemp639) + ((0.00891140476f * (fTemp387 - fTemp175)) + ((0.000122074038f * (fTemp236 + fTemp238)) + ((0.000610370189f * fTemp11) + ((0.00103762932f * fTemp339) + ((0.00405896176f * fTemp24) + ((0.00241096225f * fTemp31) + ((0.00674459059f * fTemp311) + ((0.00717184972f * fTemp340) + ((0.00567644276f * fTemp37) + ((0.00384533219f * fTemp41) + ((0.00885036774f * fTemp51) + ((0.0083925901f * fTemp54) + ((0.00625629444f * fTemp312) + ((0.00262459181f * fTemp67) + ((0.00408948027f * fTemp287) + ((0.00280770287f * fTemp120) + ((0.00222785119f * fTemp129) + ((0.00122074038f * fTemp366) + ((0.00216681417f * fTemp374) + ((0.00238044374f * fTemp142) + ((0.00357066561f * fTemp267) + ((0.000915555283f * fTemp97) + ((0.00521866512f * fTemp290) + ((0.00469985045f * fTemp361) + ((0.00366222113f * fTemp126) + ((0.00329599902f * fTemp258) + (fTemp640 + ((0.00418103579f * fTemp82) + ((0.00457777642f * fTemp403) + ((0.0038758507f * fTemp107) + ((0.000335703604f * fTemp42) + ((0.00183111057f * fTemp32) + ((0.00433362834f * fTemp356) + ((0.00750755332f * fTemp130) + ((0.00845362712f * fTemp378) + ((0.00851466414f * fTemp98) + ((0.00659199804f * fTemp93) + ((0.00610370189f * fTemp406) + ((0.00662251655f * fTemp382) + ((0.006469924f * fTemp355) + ((0.00546281319f * fTemp15) + ((0.00643940549f * fTemp99) + ((0.00692770164f * fTemp379) + ((0.00595110934f * fTemp301) + ((0.00308236945f * fTemp250) + ((0.00344859157f * fTemp87) + ((0.0054933317f * fTemp388) + ((0.00463881344f * fTemp411) + ((0.00299081393f * fTemp416) + (fTemp641 + ((0.00866725668f * fTemp515) + ((0.0112308115f * fTemp149) + ((0.0124210333f * fTemp329) + ((0.0118717002f * fTemp65) + ((0.00946073793f * fTemp360) + ((0.000793481246f * fTemp89) + ((0.00466933195f * fTemp422) + ((0.00607318338f * fTemp423) + ((0.00766014587f * fTemp424) + ((0.0123905148f * fTemp426) + ((0.0151676992f * fTemp17) + ((0.0168462172f * fTemp338) + ((0.0147404401f * fTemp427) + ((0.00427259132f * fTemp437) + ((0.00292977691f * fTemp438) + ((0.0294198431f * fTemp446) + ((0.0416577645f * fTemp447) + ((0.0456862077f * fTemp448) + ((0.043794062f * fTemp77) + ((0.0314035453f * fTemp179) + ((0.0172429588f * fTemp385) + ((0.0157780703f * fTemp373) + ((0.0220038462f * fTemp362) + ((0.0177617725f * fTemp456) + ((0.00564592425f * fTemp458) + ((0.0246589556f * fTemp459) + ((0.0245979186f * fTemp460) + ((0.0254524369f * fTemp461) + ((0.0249031037f * fTemp462) + ((0.0242011789f * fTemp463) + ((0.0137333293f * fTemp464) + ((0.0645771697f * fTemp181) + ((0.0832239762f * fTemp86) + ((0.0451063588f * fTemp367) + ((0.0280159917f * fTemp190) + ((0.0240180679f * fTemp191) + (fTemp642 + ((0.0537430942f * fTemp193) + ((0.0579241328f * fTemp194) + ((0.0454725809f * fTemp195) + (fTemp643 + ((0.00503555406f * fTemp469) + ((0.0822779015f * fTemp473) + ((0.165807068f * fTemp474) + ((0.147465438f * fTemp475) + ((0.0425122827f * fTemp476) + ((0.00823999755f * fTemp58) + ((0.0134281442f * fTemp204) + ((0.0993377492f * fTemp35) + ((0.115573592f * fTemp482) + ((0.122470781f * fTemp397) + ((0.105075225f * fTemp486) + ((0.789117098f * fTemp487) + ((1.00003052f * fTemp488) + ((0.624042511f * fTemp489) + ((0.191625714f * fTemp153) + ((0.0365611762f * fTemp205) + ((0.00201422162f * fTemp207) + (0.0200506616f * fTemp206)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000152592547f * (fTemp1 - (fTemp245 + (fTemp322 - (fTemp358 + (fTemp237 - fTemp443)))))))))))))))))))))))))))))))))) : ((((0.000457777642f * (fTemp399 - fTemp513)) + ((0.00241096225f * (fTemp140 - fTemp398)) + ((0.00234992523f * (fTemp411 - fTemp251)) + ((0.00112918485f * (fTemp265 + (fTemp276 + (fTemp303 + fTemp286)))) + ((0.00228888821f * (fTemp255 - (fTemp305 - (fTemp516 + fTemp45)))) + ((0.0025940733f * (fTemp261 - (fTemp2 - (fTemp422 + fTemp347)))) + ((0.00231940672f * (fTemp269 - (fTemp278 - (fTemp403 - fTemp41)))) + ((0.00274666585f * (fTemp107 - fTemp297)) + ((0.00189214759f * (fTemp264 - fTemp309)) + ((0.00247199927f * (fTemp436 - fTemp285)) + ((0.00119022187f * (fTemp407 - fTemp518)) + ((0.00054933317f * (fTemp7 - (fTemp62 - (fTemp207 + fTemp83)))) + ((0.000823999755f * (fTemp8 - (fTemp370 - fTemp333))) + ((0.000213629566f * (fTemp30 - fTemp11)) + ((0.00854518265f * (fTemp417 - fTemp19)) + ((0.0051576281f * (fTemp413 - fTemp28)) + ((0.00457777642f * (fTemp335 + fTemp256)) + ((0.00784325693f * fTemp628) + ((0.00506607257f * (fTemp279 + (fTemp76 - fTemp48))) + ((0.00280770287f * (fTemp315 + fTemp253)) + ((0.00503555406f * (fTemp514 + fTemp320)) + ((0.00335703604f * (fTemp295 + fTemp266)) + ((0.00115970336f * (fTemp313 + fTemp252)) + ((0.00592059083f * (fTemp180 - fTemp54)) + ((0.00204474013f * (fTemp67 + (fTemp122 - fTemp129))) + ((0.00250251777f * (fTemp5 + fTemp155)) + ((0.00595110934f * (fTemp9 + fTemp88)) + ((0.0061342204f * (fTemp405 + fTemp96)) + ((0.000946073793f * (fTemp134 + fTemp105)) + ((0.00488296151f * (fTemp26 - fTemp46)) + ((0.00735496078f * (fTemp93 - fTemp287)) + ((0.00799584948f * (fTemp414 - fTemp119)) + ((0.00732444227f * (fTemp130 - fTemp164)) + ((0.00558488723f * (fTemp341 + fTemp101)) + ((0.00338755455f * (fTemp426 - fTemp167)) + ((0.00637836847f * (fTemp168 - fTemp63)) + ((0.0012817774f * (fTemp408 - fTemp38)) + ((0.00778221991f * (fTemp289 + fTemp20)) + ((0.00305185094f * (fTemp53 + fTemp50)) + ((0.00460829493f * (fTemp132 - (fTemp427 - fTemp32))) + ((0.00341807306f * (fTemp137 + (fTemp193 + fTemp172))) + ((0.0019226661f * (fTemp348 - fTemp358)) + ((0.000976592302f * (fTemp150 - fTemp145)) + ((9.15555283e-05f * (fTemp142 + (fTemp492 + (fTemp211 + (fTemp216 + (fTemp218 + (fTemp493 + (fTemp497 + (fTemp498 + (fTemp499 + (fTemp228 + fTemp504))))))))))) + ((0.00381481368f * (fTemp39 + fTemp171)) + ((0.00213629566f * (fTemp379 + fTemp282)) + ((0.00155644398f * (fTemp147 + (fTemp97 - (fTemp376 - fTemp351)))) + ((0.000610370189f * (fTemp386 - fTemp13)) + ((0.000274666585f * (fTemp490 - fTemp314)) + ((0.000762962736f * (fTemp435 + fTemp59)) + ((0.003234962f * (fTemp290 + (fTemp248 + fTemp317))) + ((0.00311288796f * (fTemp412 + fTemp127)) + ((0.00500503555f * (fTemp451 + fTemp42)) + ((0.00454725791f * (fTemp40 + (fTemp424 + fTemp406))) + ((0.00540177617f * (fTemp100 - (fTemp387 - fTemp530))) + ((0.00402844325f * (fTemp243 + fTemp353)) + ((0.00140385143f * (fTemp118 + fTemp52)) + ((0.00314340647f * (fTemp515 - fTemp87)) + ((0.00347911008f * (fTemp327 + fTemp90)) + ((0.0139164403f * (fTemp461 - fTemp457)) + ((0.000122074038f * (fTemp491 + (fTemp215 + (fTemp495 + (fTemp496 + (fTemp500 + (fTemp219 + (fTemp222 + (fTemp223 + (fTemp503 + fTemp224)))))))))) + ((0.000152592547f * (fTemp212 + (fTemp213 + (fTemp214 + (fTemp220 + (fTemp221 + (fTemp502 + fTemp22))))))) + ((0.00357066561f * fTemp621) + ((0.00833155308f * fTemp596) + ((0.00424207281f * fTemp271) + ((0.006469924f * fTemp91) + ((0.00433362834f * fTemp159) + ((0.00308236945f * fTemp160) + ((0.00769066438f * fTemp357) + ((0.0108035523f * fTemp268) + ((0.0122074038f * fTemp272) + ((0.0109866634f * fTemp322) + ((0.0132450331f * fTemp169) + ((0.0170598477f * fTemp73) + ((0.0169072542f * fTemp120) + ((0.0134281442f * fTemp102) + ((0.00527970213f * fTemp133) + ((0.00253303628f * fTemp10) + ((0.00320444349f * fTemp56) + ((0.00378429517f * fTemp84) + ((0.00390636921f * fTemp275) + ((0.000244148076f * fTemp366) + ((0.00109866634f * fTemp326) + ((0.00222785119f * fTemp263) + ((0.00277718436f * fTemp173) + ((0.00177007355f * fTemp103) + ((0.00219733268f * fTemp148) + ((0.00299081393f * fTemp29) + ((0.00207525864f * fTemp126) + ((0.00350962859f * fTemp128) + ((0.00216681417f * fTemp258) + ((0.00238044374f * fTemp64) + (fTemp629 + ((0.00509659108f * fTemp136) + ((0.00384533219f * fTemp112) + ((0.00436414685f * fTemp49) + ((0.00375377666f * fTemp92) + ((0.0035401471f * fTemp299) + ((0.00750755332f * fTemp378) + ((0.00762962736f * fTemp98) + ((0.00396740623f * fTemp382) + ((0.00430310983f * fTemp384) + ((0.00531022064f * fTemp380) + ((0.00418103579f * fTemp99) + ((0.00360118411f * fTemp281) + ((0.00366222113f * fTemp138) + ((0.00134281442f * fTemp81) + ((0.0104678487f * fTemp390) + ((0.0111697745f * fTemp415) + ((0.009704886f * fTemp416) + ((0.00744651631f * fTemp342) + ((0.00561540574f * fTemp36) + ((0.000885036774f * fTemp369) + ((0.00479140598f * fTemp149) + ((0.00622577593f * fTemp329) + ((0.00805688649f * fTemp65) + ((0.0087282937f * fTemp360) + (fTemp630 + ((0.00411999878f * fTemp95) + ((0.0042115543f * fTemp94) + ((0.00393688772f * fTemp89) + ((0.00292977691f * fTemp423) + ((0.00463881344f * fTemp425) + ((0.00555436872f * fTemp175) + ((0.0143436994f * fTemp176) + ((0.0266426597f * fTemp328) + ((0.0294198431f * fTemp444) + ((0.024323253f * fTemp445) + ((0.0216681417f * fTemp300) + ((0.0163579211f * fTemp116) + ((0.0114139225f * fTemp446) + ((0.0207525864f * fTemp447) + ((0.0202642903f * fTemp448) + ((0.0190130323f * fTemp77) + ((0.0154118473f * fTemp179) + ((0.0093691824f * fTemp452) + ((0.0138248848f * fTemp385) + ((0.0197149571f * fTemp373) + ((0.0313119926f * fTemp121) + ((0.0399792492f * fTemp453) + ((0.0479140617f * fTemp454) + ((0.0486159846f * fTemp455) + ((0.0403759889f * fTemp152) + ((0.0220954008f * fTemp362) + ((0.00619525742f * fTemp456) + ((0.0653401315f * fTemp462) + ((0.07849361f * fTemp463) + ((0.0378124341f * fTemp464) + ((0.0140995514f * fTemp141) + ((0.0397961363f * fTemp182) + ((0.0545365773f * fTemp183) + ((0.0476699136f * fTemp184) + ((0.0599688701f * fTemp185) + ((0.0578325763f * fTemp186) + ((0.0518204309f * fTemp187) + ((0.00952177495f * fTemp188) + ((0.0883510858f * fTemp194) + ((0.117038481f * fTemp195) + ((0.0577715375f * fTemp196) + ((0.0257271044f * fTemp478) + ((0.0761131644f * fTemp479) + ((0.172643214f * fTemp203) + ((0.813074112f * fTemp204) + (fTemp35 + ((0.627094328f * fTemp482) + ((0.235847041f * fTemp397) + ((0.0650654659f * fTemp483) + ((0.0191045869f * fTemp484) + ((0.000183111057f * fTemp501) + (0.00057985168f * fTemp135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000488296151f * (fTemp1 - (fTemp522 - fTemp259)))) - ((0.00137333293f * (fTemp242 + (fTemp270 + (fTemp421 - fTemp85)))) + ((0.0019531846f * (fTemp244 - (fTemp115 - fTemp331))) + ((0.00262459181f * (fTemp245 - (fTemp336 - fTemp277))) + ((0.001617481f * (fTemp254 + (fTemp349 - (fTemp388 - fTemp402)))) + ((0.000427259132f * (fTemp146 + fTemp260)) + ((0.000366222113f * (fTemp324 + fTemp283)) + ((0.00170903653f * (fTemp291 + (fTemp310 + (fTemp409 - fTemp124)))) + ((0.00244148076f * (fTemp296 + (fTemp31 - (fTemp359 + (fTemp361 + (fTemp375 - (fTemp4 - fTemp301))))))) + ((0.00103762932f * (fTemp318 - (fTemp157 + fTemp337))) + ((0.000518814661f * (fTemp72 + fTemp284)) + ((0.00146488845f * (fTemp330 + (fTemp338 + fTemp6))) + ((0.0022583697f * (fTemp304 - (fTemp43 + fTemp156))) + ((0.000396740623f * (fTemp410 + fTemp332)) + ((0.00589007232f * (fTemp117 + fTemp18)) + ((0.00921658985f * (fTemp74 - fTemp319)) + ((0.00152592547f * (fTemp325 + (fTemp363 + (fTemp450 - fTemp274)))) + ((0.00772118289f * (fTemp340 - (fTemp139 + fTemp3))) + ((0.00494399853f * (fTemp68 - fTemp280)) + ((0.00100711081f * (fTemp47 + (fTemp205 - fTemp352))) + ((0.00317392498f * (fTemp321 - (fTemp316 - fTemp125))) + ((0.00476088747f * (fTemp78 + fTemp60)) + ((0.00469985045f * (fTemp345 + fTemp307)) + ((0.00482192449f * (fTemp69 + fTemp33)) + ((0.00442518387f * (fTemp61 - (fTemp247 + (fTemp356 + fTemp334)))) + ((0.00180059206f * (fTemp75 - (fTemp82 + fTemp131))) + ((0.000732444227f * (fTemp293 - (fTemp27 + (fTemp372 + (fTemp208 + fTemp288))))) + ((0.0067751091f * (fTemp170 + fTemp161)) + ((0.00271614734f * (fTemp350 - (fTemp343 + fTemp404))) + ((0.00405896176f * (fTemp449 - fTemp519)) + ((0.000640888698f * (fTemp165 + (fTemp250 - fTemp306))) + ((0.0074159978f * (fTemp365 + fTemp401)) + ((0.00573747978f * (fTemp428 - fTemp273)) + ((0.00186162908f * (fTemp257 - fTemp80)) + ((0.00158696249f * (fTemp420 - fTemp104)) + ((0.00201422162f * (fTemp298 - (fTemp17 + fTemp114))) + ((3.05185094e-05f * (fTemp108 + (fTemp206 + (fTemp512 - (fTemp225 + (fTemp241 + (fTemp391 + (fTemp239 + (fTemp235 + (fTemp234 + (fTemp233 + (fTemp232 + (fTemp231 + (fTemp230 + (fTemp229 + (fTemp0 + fTemp510)))))))))))))))) + ((0.000671407208f * (fTemp374 + fTemp144)) + ((0.000915555283f * (fTemp354 - (fTemp66 + fTemp267))) + ((6.10370189e-05f * (fTemp57 - (fTemp396 + (fTemp209 + (fTemp210 + (fTemp217 + (fTemp505 + (fTemp226 + (fTemp227 + (fTemp16 + (fTemp240 + (fTemp238 + (fTemp236 + fTemp237))))))))))))) + ((0.00296029542f * (fTemp383 - fTemp70)) + ((0.0131839961f * (fTemp381 + fTemp439)) + ((0.00283822138f * fTemp302) + ((0.000793481246f * fTemp292) + ((0.00265511032f * fTemp14) + ((0.00988799706f * fTemp339) + ((0.00985747855f * fTemp23) + ((0.00878933072f * fTemp24) + ((0.00717184972f * fTemp25) + ((0.00534073915f * fTemp311) + ((0.00650044251f * fTemp37) + ((0.00610370189f * fTemp21) + ((0.00634784997f * fTemp51) + ((0.00521866512f * fTemp312) + ((0.00445570238f * fTemp55) + ((0.00415051728f * fTemp246) + ((0.00210577715f * fTemp79) + (fTemp631 + ((0.00302133244f * fTemp323) + ((0.00674459059f * fTemp110) + ((0.00680562761f * fTemp71) + ((0.00601214636f * fTemp113) + ((0.00543229468f * fTemp44) + ((0.00106814783f * fTemp166) + ((0.0101931822f * fTemp400) + ((0.00625629444f * fTemp123) + ((0.000854518265f * fTemp12) + ((0.0102847377f * fTemp429) + ((0.0163274035f * fTemp430) + ((0.016296884f * fTemp431) + ((0.0149235511f * fTemp432) + ((0.0127872555f * fTemp433) + ((0.00653096102f * fTemp434) + ((0.00183111057f * fTemp437) + ((0.00817896053f * fTemp438) + ((0.0121768853f * fTemp344) + ((0.0127262184f * fTemp111) + ((0.0150761437f * fTemp294) + ((0.0199285876f * fTemp440) + ((0.0224005859f * fTemp392) + ((0.0189825129f * fTemp441) + ((0.013000885f * fTemp442) + ((0.00759910885f * fTemp443) + ((0.014557329f * fTemp177) + ((0.0207831059f * fTemp178) + ((0.0184942167f * fTemp249) + ((0.036896877f * fTemp364) + ((0.0648823529f * fTemp394) + ((0.0864284188f * fTemp458) + ((0.0810266435f * fTemp459) + ((0.0429700613f * fTemp460) + ((0.0226752535f * fTemp389) + ((0.0712912381f * fTemp393) + ((0.0985442698f * fTemp465) + ((0.0992156714f * fTemp466) + ((0.094576858f * fTemp467) + ((0.0958281234f * fTemp468) + ((0.0980254561f * fTemp368) + ((0.0766319782f * fTemp181) + ((0.0516983569f * fTemp86) + ((0.0202948097f * fTemp367) + ((0.0240180679f * fTemp189) + ((0.0398571752f * fTemp151) + ((0.0627460554f * fTemp190) + ((0.0792565718f * fTemp191) + ((0.0628681332f * fTemp192) + ((0.0275276955f * fTemp469) + ((0.0869777501f * fTemp154) + ((0.116458632f * fTemp470) + ((0.103061005f * fTemp346) + ((0.0585039817f * fTemp471) + ((0.017853329f * fTemp472) + ((0.0330515467f * fTemp473) + ((0.054933317f * fTemp474) + ((0.132816553f * fTemp475) + ((0.14831996f * fTemp476) + ((0.093081452f * fTemp197) + ((0.087588124f * fTemp198) + ((0.0657368675f * fTemp199) + ((0.106418043f * fTemp200) + ((0.114932708f * fTemp58) + ((0.127994627f * fTemp477) + ((0.170110166f * fTemp480) + ((0.433423877f * fTemp481) + ((0.599932849f * fTemp201) + ((0.398999006f * fTemp202) + ((0.0222785119f * fTemp485) + ((0.0318002887f * fTemp486) + ((0.0325937681f * fTemp487) + ((0.0245979186f * fTemp488) + ((0.00439466536f * fTemp153) + (0.0124820704f * fTemp489))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (iSlow15 ? (((0.00610370189f * (fTemp243 - fTemp251)) + ((0.00299081393f * (fTemp150 - fTemp269)) + ((0.00570696127f * (fTemp101 - fTemp283)) + ((0.00561540574f * (fTemp414 - fTemp305)) + ((0.00607318338f * (fTemp114 - fTemp309)) + ((0.0101016266f * (fTemp342 - fTemp518)) + ((0.00735496078f * (fTemp70 - fTemp8)) + ((0.0122379223f * (fTemp381 - fTemp19)) + ((0.0125431074f * (fTemp301 - fTemp23)) + ((9.15555283e-05f * (fTemp256 - (fTemp20 + (fTemp218 + (fTemp233 + fTemp512))))) + ((0.000274666585f * (fTemp319 - (fTemp501 + (fTemp230 + fTemp239)))) + ((0.00109866634f * (fTemp108 + fTemp279)) + ((0.00567644276f * (fTemp76 - fTemp264)) + ((0.00384533219f * (fTemp275 - fTemp340)) + ((0.000396740623f * (fTemp490 + fTemp45)) + ((0.00482192449f * (fTemp313 + fTemp280)) + ((6.10370189e-05f * (fTemp266 + (fTemp156 + (fTemp366 - (fTemp221 + (fTemp504 + (fTemp237 + (fTemp510 + fTemp234)))))))) + ((0.00589007232f * (fTemp132 - fTemp60)) + ((0.00500503555f * (fTemp263 - fTemp33)) + ((0.0067751091f * (fTemp403 - fTemp345)) + ((0.0054933317f * (fTemp109 - fTemp303)) + ((0.00112918485f * (fTemp468 - fTemp155)) + ((0.000366222113f * (fTemp347 + (fTemp146 - (fTemp210 + (fTemp216 + (fTemp499 + fTemp618)))))) + ((0.00180059206f * (fTemp402 + fTemp88)) + ((0.00662251655f * (fTemp131 + fTemp357)) + ((0.00122074038f * (fTemp356 + fTemp519)) + ((0.00494399853f * (fTemp126 - fTemp63)) + ((0.00991851557f * (fTemp32 - fTemp74)) + ((0.0130314035f * (fTemp416 - fTemp401)) + ((0.00149540696f * (fTemp6 + fTemp168)) + ((0.0178228095f * (fTemp442 + fTemp73)) + ((0.000488296151f * (fTemp56 - fTemp619)) + ((0.000427259132f * (fTemp104 - (fTemp500 + fTemp106))) + ((0.0012817774f * (fTemp257 + fTemp298)) + ((0.000915555283f * (fTemp30 + (fTemp288 - fTemp172))) + ((0.00439466536f * fTemp620) + ((0.00338755455f * (fTemp87 - fTemp144)) + ((0.00564592425f * (fTemp147 - fTemp354)) + ((0.00292977691f * (fTemp359 + fTemp326)) + ((0.00329599902f * (fTemp29 - fTemp103)) + ((0.011200293f * (fTemp329 + fTemp57)) + ((0.00881984923f * (fTemp314 + (fTemp450 + fTemp327))) + ((0.00466933195f * (fTemp299 + fTemp290)) + ((0.0151676992f * (fTemp81 + fTemp316)) + ((0.0187383648f * (fTemp386 + fTemp258)) + ((0.0190130323f * (fTemp328 + fTemp274)) + ((0.0108340709f * (fTemp107 + (fTemp375 + (fTemp39 + fTemp26)))) + ((0.0145878475f * (fTemp379 + fTemp127)) + ((0.0108035523f * (fTemp415 + fTemp382)) + ((0.0116885891f * fTemp621) + ((0.0117496261f * (fTemp122 + fTemp516)) + ((0.0203253273f * (fTemp66 + fTemp408)) + ((0.00704977568f * (fTemp489 + fTemp4)) + ((0.0122684408f * (fTemp65 + fTemp409)) + ((0.006469924f * (fTemp360 + fTemp413)) + ((0.00256355479f * fTemp31) + ((0.00164799951f * fTemp333) + ((0.00152592547f * fTemp34) + ((0.00509659108f * fTemp320) + ((0.00378429517f * fTemp91) + ((0.00534073915f * fTemp96) + ((0.00692770164f * fTemp159) + ((0.000976592302f * fTemp71) + ((0.00219733268f * fTemp113) + ((0.00140385143f * fTemp353) + ((0.00912503432f * fTemp268) + ((0.00173955504f * fTemp3) + ((0.00445570238f * fTemp352) + ((0.00854518265f * fTemp165) + ((0.0100711081f * fTemp166) + ((0.00698873866f * fTemp363) + ((0.00137333293f * fTemp167) + ((0.0120853297f * fTemp169) + (fTemp622 + ((0.00772118289f * fTemp102) + ((0.00335703604f * fTemp27) + ((0.00460829493f * fTemp50) + ((0.00860621966f * fTemp341) + ((0.0119937742f * fTemp273) + ((0.0135807367f * fTemp133) + ((0.0115054781f * fTemp247) + ((0.00183111057f * fTemp53) + ((0.000946073793f * fTemp145) + ((0.00296029542f * fTemp372) + ((0.00476088747f * fTemp134) + ((0.00216681417f * fTemp171) + ((0.00372325815f * fTemp85) + ((0.00305185094f * fTemp282) + ((0.00427259132f * fTemp97) + ((0.00802636798f * fTemp259) + ((0.0122074038f * fTemp13) + ((0.0111697745f * fTemp12) + ((0.00708029419f * fTemp59) + ((0.00350962859f * fTemp361) + ((0.00695822015f * fTemp5) + ((0.00790429395f * fTemp317) + ((0.00878933072f * fTemp128) + ((0.0111087374f * fTemp90) + ((0.0153813288f * fTemp351) + ((0.0103152562f * fTemp82) + ((0.0170903653f * fTemp248) + ((0.0175176244f * fTemp343) + ((0.0148625141f * fTemp64) + ((0.00527970213f * fTemp371) + ((0.00585955381f * fTemp42) + ((0.00766014587f * fTemp136) + ((0.00665303506f * fTemp112) + ((0.00656147953f * fTemp334) + ((0.00823999755f * fTemp49) + ((0.0110782189f * fTemp40) + ((0.0107425153f * fTemp92) + ((0.00155644398f * fTemp405) + ((0.0118106632f * fTemp378) + ((0.0143436994f * fTemp98) + ((0.0126651814f * fTemp139) + ((0.00885036774f * fTemp289) + ((0.00732444227f * fTemp93) + ((0.00946073793f * fTemp406) + ((0.0112918485f * fTemp384) + ((0.0104373302f * fTemp380) + ((0.0110171819f * fTemp100) + ((0.0126041444f * fTemp99) + ((0.0143131809f * fTemp336) + ((0.00994903408f * fTemp281) + ((0.0182500686f * fTemp407) + ((0.0225531794f * fTemp52) + ((0.0141300699f * fTemp250) + ((0.00576799829f * fTemp383) + ((0.0172734763f * fTemp410) + ((0.0169682913f * fTemp388) + ((0.0133671071f * fTemp411) + ((0.00918607134f * fTemp412) + ((0.00759910885f * fTemp390) + ((0.0121768853f * fTemp417) + ((0.00933866389f * fTemp36) + ((0.00204474013f * fTemp530) + ((0.0102237007f * fTemp95) + ((0.016235847f * fTemp94) + ((0.0158391073f * fTemp89) + ((0.01126133f * fTemp422) + ((0.00488296151f * fTemp423) + ((0.00054933317f * fTemp424) + ((0.001617481f * fTemp425) + (fTemp586 + ((0.0124210333f * fTemp17) + ((0.0185857732f * fTemp338) + ((0.0244758446f * fTemp427) + ((0.0236213263f * fTemp428) + ((0.0146488845f * fTemp429) + ((0.00411999878f * fTemp430) + ((0.0119327372f * fTemp432) + ((0.0252998453f * fTemp433) + ((0.0353099145f * fTemp434) + ((0.0335093252f * fTemp435) + ((0.0272225104f * fTemp436) + ((0.0257881414f * fTemp437) + ((0.0259102155f * fTemp438) + ((0.0223090313f * fTemp439) + ((0.00320444349f * fTemp344) + ((0.00671407208f * fTemp294) + ((0.0142216254f * fTemp440) + ((0.0184331797f * fTemp392) + ((0.0175481439f * fTemp441) + ((0.0209662169f * fTemp443) + ((0.025940733f * fTemp522) + ((0.0284432508f * fTemp175) + ((0.0255745109f * fTemp176) + (fTemp623 + ((0.000640888698f * fTemp300) + ((0.00244148076f * fTemp446) + ((0.0304879919f * fTemp447) + ((0.0492263548f * fTemp448) + ((0.0507522821f * fTemp77) + ((0.027619252f * fTemp179) + ((0.00106814783f * fTemp180) + (fTemp624 + ((0.0409558415f * fTemp452) + ((0.0406811722f * fTemp385) + ((0.0268562883f * fTemp373) + ((0.0189825129f * fTemp121) + ((0.0133060701f * fTemp453) + ((0.0174871068f * fTemp454) + ((0.0177007355f * fTemp455) + ((0.0149235511f * fTemp152) + ((0.00222785119f * fTemp459) + ((0.0263985116f * fTemp460) + ((0.0609759837f * fTemp461) + ((0.100405894f * fTemp462) + ((0.118961148f * fTemp463) + ((0.109927669f * fTemp464) + ((0.0626850203f * fTemp389) + ((0.00399792474f * fTemp393) + ((0.0435499139f * fTemp368) + ((0.0787682757f * fTemp181) + ((0.0934476778f * fTemp86) + ((0.0949125662f * fTemp367) + ((0.0865199715f * fTemp141) + ((0.07104709f * fTemp182) + ((0.0487990975f * fTemp183) + ((0.0227362905f * fTemp184) + ((0.00448622089f * fTemp193) + ((0.0352793969f * fTemp194) + ((0.0892361253f * fTemp195) + ((0.103152566f * fTemp196) + ((0.0707113892f * fTemp469) + ((0.0847804174f * fTemp473) + ((0.112216562f * fTemp474) + ((0.117679372f * fTemp475) + ((0.0370799899f * fTemp476) + ((0.0452589504f * fTemp199) + ((0.0638752431f * fTemp200) + ((0.0741599798f * fTemp58) + ((0.0480666533f * fTemp477) + ((0.0182195511f * fTemp478) + ((0.168401137f * fTemp204) + ((0.536851108f * fTemp35) + ((0.690969586f * fTemp482) + ((0.325510412f * fTemp397) + ((0.027558215f * fTemp153) + ((0.0360118411f * fTemp205) + ((0.0325937681f * fTemp206) + ((0.0220648833f * fTemp207) + ((0.00271614734f * fTemp135) + (0.00976592302f * fTemp208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00778221991f * (fTemp513 - (fTemp418 - fTemp110))) + ((0.00643940549f * (fTemp242 - (fTemp130 + fTemp348))) + ((0.00524918362f * (fTemp270 + fTemp245)) + ((0.00714133121f * (fTemp254 + (fTemp54 - (fTemp514 + (fTemp445 + fTemp335))))) + ((0.00756859034f * (fTemp421 + fTemp260)) + ((0.0061342204f * (fTemp296 + (fTemp325 - (fTemp315 + fTemp137)))) + ((0.00442518387f * (fTemp277 - (fTemp295 - fTemp124))) + ((0.0042115543f * (fTemp311 + fTemp318)) + ((0.00744651631f * (fTemp116 + fTemp278)) + ((0.00799584948f * (fTemp285 - (fTemp272 - fTemp337))) + ((0.00927762687f * (fTemp304 + (fTemp350 - fTemp105))) + ((0.00924710836f * (fTemp79 + fTemp332)) + ((0.00814844202f * (fTemp24 - (fTemp9 - fTemp170))) + ((0.00268562883f * (fTemp515 + fTemp25)) + ((0.00131229591f * (fTemp197 - fTemp28)) + ((0.00189214759f * (fTemp253 - (fTemp431 + fTemp358))) + ((0.00726340525f * (fTemp286 + (fTemp46 + fTemp252))) + ((0.00469985045f * (fTemp37 + (fTemp399 - (fTemp149 + fTemp322)))) + ((0.00381481368f * (fTemp41 + (fTemp68 + (fTemp479 - fTemp84)))) + ((0.000213629566f * (fTemp271 + (fTemp502 + fTemp211))) + ((0.0090334788f * (fTemp365 - fTemp160)) + ((0.000305185094f * (fTemp117 + (fTemp111 + (fTemp498 + fTemp625)))) + ((0.00473036896f * (fTemp78 + fTemp161)) + ((0.00827051606f * (fTemp349 + fTemp51)) + ((0.000152592547f * (fTemp129 + (fTemp227 + (fTemp229 + fTemp228)))) + ((0.000457777642f * (fTemp215 + fTemp10)) + ((0.000885036774f * (fTemp142 - fTemp370)) + ((0.00723288674f * (fTemp472 - fTemp404)) + ((0.00964384899f * (fTemp481 - fTemp138)) + ((0.000244148076f * (fTemp420 + (fTemp491 + (fTemp217 + (fTemp219 - (fTemp505 - (fTemp232 + fTemp241))))))) + ((0.000122074038f * (fTemp497 + (fTemp223 + fTemp626))) + ((0.000183111057f * (fTemp511 + fTemp238)) + ((0.000335703604f * (fTemp212 + (fTemp240 + fTemp22))) + ((3.05185094e-05f * (fTemp493 + (fTemp496 + (fTemp220 - (fTemp222 - (fTemp226 + fTemp543)))))) + (((((0.00689718314f * fTemp265) + ((0.00512710959f * fTemp255) + ((0.00344859157f * fTemp261) + ((0.00405896176f * fTemp276) + ((0.00659199804f * fTemp291) + ((0.00479140598f * fTemp297) + ((0.0038758507f * fTemp302) + ((0.00430310983f * fTemp284) + ((0.00604266487f * fTemp324) + ((0.00781273842f * fTemp292) + ((0.0083925901f * fTemp330) + ((0.00787377544f * fTemp331) + ((0.0102542192f * fTemp310) + ((0.00851466414f * fTemp7) + ((0.00668355357f * fTemp11) + ((0.00701925717f * fTemp14) + ((0.00915555283f * fTemp18) + ((0.0139469588f * fTemp339) + ((0.000518814661f * fTemp262) + ((0.0125736259f * fTemp47) + ((0.0139164403f * fTemp321) + ((0.0123294778f * fTemp48) + ((0.00988799706f * fTemp21) + ((0.00637836847f * fTemp312) + ((0.00558488723f * fTemp307) + ((0.00277718436f * fTemp69) + ((0.00286873989f * fTemp55) + ((0.00463881344f * fTemp61) + ((0.00836207159f * fTemp246) + ((0.00848414563f * fTemp2) + ((0.0074159978f * fTemp62) + ((0.00341807306f * fTemp67) + ((0.00213629566f * fTemp157) + ((0.0051576281f * fTemp72) + ((0.00817896053f * fTemp75) + ((0.00598162785f * fTemp293) + ((0.00396740623f * fTemp83) + ((0.00207525864f * fTemp43) + ((0.00143436994f * fTemp323) + ((0.00360118411f * fTemp287) + ((0.00842310861f * fTemp119) + ((0.0111392559f * fTemp163) + ((0.0123599963f * fTemp164) + ((0.0120242927f * fTemp44) + ((0.012939848f * fTemp400) + ((0.00830103457f * fTemp38) + ((0.00631733146f * fTemp125) + ((0.00796533097f * fTemp123) + ((0.00518814661f * fTemp115) + ((0.00634784997f * fTemp80) + ((0.00402844325f * fTemp140) + ((0.00454725791f * fTemp374) + ((0.00302133244f * fTemp173) + ((0.00167851802f * fTemp267) + ((0.00857570115f * fTemp369) + ((0.0025940733f * fTemp377) + ((0.0127262184f * fTemp118) + ((0.0171208847f * fTemp177) + ((0.0214850307f * fTemp178) + ((0.0253303628f * fTemp249) + ((0.0165105145f * fTemp387) + ((0.0128482925f * fTemp376) + (fTemp627 + ((0.000762962736f * fTemp362) + ((0.0180059206f * fTemp456) + ((0.0333262123f * fTemp457) + ((0.0361033976f * fTemp364) + ((0.0292062145f * fTemp394) + ((0.0145268105f * fTemp458) + ((0.0476699136f * fTemp465) + ((0.0592669472f * fTemp466) + ((0.041871395f * fTemp467) + ((0.0077517014f * fTemp185) + ((0.0311288796f * fTemp186) + ((0.0477919877f * fTemp187) + ((0.0397656187f * fTemp188) + ((0.0524918362f * fTemp189) + ((0.0730307922f * fTemp151) + ((0.0959501937f * fTemp190) + ((0.0721762776f * fTemp191) + ((0.0476393923f * fTemp192) + ((0.0368358418f * fTemp154) + ((0.105044708f * fTemp470) + ((0.133884698f * fTemp346) + ((0.0758384988f * fTemp471) + ((0.000793481246f * fTemp198) + ((0.012817774f * fTemp480) + ((0.0929593816f * fTemp201) + ((0.166112244f * fTemp202) + ((0.130863369f * fTemp203) + ((0.42835781f * fTemp483) + ((1.00003052f * fTemp484) + ((0.993408024f * fTemp396) + ((0.544175565f * fTemp485) + ((0.170995206f * fTemp486) + ((0.0449842848f * fTemp487) + ((0.0139774773f * fTemp488) + ((0.000610370189f * fTemp209) + (0.00057985168f * fTemp492))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00503555406f * fTemp398)) + (0.00546281319f * fTemp244)) + (0.00900296029f * fTemp1))))))))))))))))))))))))))))))))))))) : (((0.00146488845f * (fTemp255 - (fTemp126 - fTemp137))) + ((0.000244148076f * (fTemp261 + (fTemp302 - (fTemp248 + fTemp109)))) + ((0.00119022187f * (fTemp277 + (fTemp487 + fTemp84))) + ((0.00164799951f * (fTemp305 + (fTemp256 + (fTemp314 - (fTemp498 - fTemp290))))) + ((0.00183111057f * (fTemp309 - (fTemp220 + fTemp148))) + ((0.00125125889f * (fTemp318 + (fTemp133 - (fTemp415 - fTemp247)))) + ((3.05185094e-05f * (fTemp284 + (fTemp243 + fTemp64))) + ((0.00634784997f * (fTemp426 - fTemp330)) + ((0.00268562883f * (fTemp31 - (fTemp88 + (fTemp49 + fTemp359)))) + ((0.00265511032f * (fTemp333 + (fTemp124 - (fTemp366 - (fTemp514 + (fTemp65 - fTemp9)))))) + ((0.00912503432f * (fTemp175 - fTemp264)) + ((0.00735496078f * (fTemp414 - fTemp325)) + ((0.000671407208f * (fTemp340 + (fTemp238 + fTemp497))) + ((0.00439466536f * (fTemp37 + (fTemp223 - fTemp320))) + ((0.00585955381f * (fTemp490 + fTemp41)) + ((0.00436414685f * (fTemp45 + (fTemp229 - fTemp95))) + ((0.00054933317f * (fTemp12 + fTemp280)) + ((0.00686666463f * (fTemp407 - fTemp21)) + ((0.00219733268f * (fTemp448 - fTemp307)) + ((0.0102237007f * (fTemp425 - fTemp303)) + ((0.00274666585f * (fTemp80 - fTemp347)) + ((0.00271614734f * (fTemp315 + fTemp260)) + ((0.00863673817f * (fTemp383 - fTemp349)) + ((0.00415051728f * (fTemp73 - fTemp43)) + ((0.00369273964f * (fTemp217 - fTemp96)) + ((9.15555283e-05f * (fTemp112 - fTemp105)) + ((0.00366222113f * (fTemp100 - fTemp110)) + ((0.0213019196f * (fTemp430 - fTemp350)) + ((0.00787377544f * (fTemp428 + fTemp322)) + ((0.00918607134f * fTemp608) + ((0.00402844325f * (fTemp510 + fTemp165)) + ((0.003234962f * (fTemp222 - fTemp167)) + ((0.00460829493f * fTemp609) + ((0.000823999755f * (fTemp106 + fTemp132)) + ((0.00143436994f * (fTemp273 + fTemp341)) + ((0.00244148076f * (fTemp274 + fTemp115)) + ((0.00497451704f * (fTemp411 - fTemp146)) + ((0.00476088747f * (fTemp224 - fTemp288)) + ((0.00347911008f * (fTemp403 + fTemp351)) + ((0.000274666585f * (fTemp232 + fTemp405)) + ((0.00866725668f * (fTemp438 + fTemp413)) + ((0.00457777642f * fTemp610) + ((0.0307321399f * (fTemp466 - fTemp456)) + ((0.0028992584f * (fTemp239 + fTemp199)) + ((0.00250251777f * (fTemp508 + fTemp241)) + ((0.00100711081f * fTemp605) + ((0.00112918485f * fTemp251) + (((0.00238044374f * fTemp265) + ((0.00930814538f * fTemp3) + ((0.00695822015f * fTemp352) + ((0.000854518265f * fTemp166) + ((0.0118411817f * fTemp120) + ((0.0136417737f * fTemp102) + ((0.00952177495f * fTemp20) + ((0.000183111057f * fTemp317) + ((0.00131229591f * fTemp258) + ((0.00213629566f * fTemp107) + ((0.00210577715f * fTemp375) + ((0.000946073793f * fTemp136) + ((0.00204474013f * fTemp355) + ((0.00625629444f * fTemp15) + ((0.00799584948f * fTemp384) + ((0.00720236823f * fTemp26) + ((0.00332651753f * fTemp99) + ((0.00299081393f * fTemp336) + ((0.009704886f * fTemp408) + ((0.00985747855f * fTemp52) + ((0.00729392376f * fTemp250) + ((0.00790429395f * fTemp4) + ((0.0077517014f * fTemp87) + ((0.00704977568f * fTemp412) + (fTemp611 + ((0.0103152562f * fTemp421) + ((0.0110477004f * fTemp369) + ((0.00570696127f * fTemp515) + ((0.0038758507f * fTemp423) + ((0.00656147953f * fTemp17) + ((0.00637836847f * fTemp427) + ((0.0141605884f * fTemp429) + ((0.025696585f * fTemp431) + ((0.0283516962f * fTemp432) + ((0.0260628071f * fTemp433) + ((0.0256050304f * fTemp434) + ((0.024445327f * fTemp435) + ((0.024567401f * fTemp436) + ((0.0153813288f * fTemp437) + ((0.006469924f * fTemp344) + ((0.0111697745f * fTemp111) + ((0.0153508103f * fTemp294) + ((0.0195928831f * fTemp440) + ((0.030915251f * fTemp392) + ((0.0386364348f * fTemp441) + ((0.041993469f * fTemp442) + ((0.0315256193f * fTemp443) + ((0.0223395489f * fTemp522) + ((0.000885036774f * fTemp176) + ((0.00167851802f * fTemp177) + ((0.0135502182f * fTemp178) + ((0.0324716941f * fTemp249) + ((0.0361339152f * fTemp387) + ((0.0304269549f * fTemp446) + (fTemp612 + ((0.024506364f * fTemp449) + ((0.0517288744f * fTemp450) + ((0.0740684196f * fTemp451) + ((0.0671407208f * fTemp452) + ((0.0534684286f * fTemp385) + ((0.0331736207f * fTemp373) + ((0.0173955504f * fTemp121) + ((0.0264290292f * fTemp394) + ((0.0511185043f * fTemp458) + ((0.0842616037f * fTemp459) + ((0.101596117f * fTemp460) + ((0.106997892f * fTemp461) + ((0.0798669383f * fTemp462) + ((0.0377513953f * fTemp463) + ((0.0574968718f * fTemp467) + ((0.0794091597f * fTemp468) + ((0.0884426385f * fTemp368) + ((0.116977446f * fTemp181) + ((0.135105446f * fTemp86) + ((0.138584554f * fTemp367) + ((0.101565599f * fTemp141) + ((0.0643635392f * fTemp182) + ((0.0351878405f * fTemp183) + ((0.0104373302f * fTemp184) + ((0.0836817548f * fTemp191) + ((0.174077585f * fTemp192) + ((0.232245862f * fTemp193) + ((0.182744831f * fTemp194) + ((0.0887478292f * fTemp195) + ((0.0782189369f * fTemp471) + ((0.181737721f * fTemp472) + ((0.259620965f * fTemp473) + ((0.207434312f * fTemp474) + ((0.106540114f * fTemp475) + ((0.0548722818f * fTemp476) + ((0.0384533219f * fTemp197) + ((0.0443433933f * fTemp198) + ((0.00643940549f * fTemp200) + ((0.0275276955f * fTemp477) + ((0.0263374746f * fTemp481) + ((0.174657434f * fTemp201) + ((0.350749224f * fTemp202) + ((0.505966365f * fTemp203) + ((0.467390984f * fTemp204) + ((0.219367042f * fTemp35) + ((0.0187078472f * fTemp488) + ((0.0319223627f * fTemp489) + ((0.0318308063f * fTemp153) + (fTemp613 + ((0.0152592547f * fTemp206) + ((0.00796533097f * fTemp207) + ((0.00619525742f * fTemp135) + ((0.00149540696f * fTemp492) + ((0.00527970213f * fTemp218) + ((0.0025940733f * fTemp496) + ((0.00378429517f * fTemp16) + ((0.00360118411f * fTemp230) + (0.00207525864f * fTemp231))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00231940672f * fTemp254))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.0035401471f * (fTemp171 + fTemp513)) + ((0.00302133244f * (fTemp244 - (fTemp348 + (fTemp360 - fTemp289)))) + ((0.00201422162f * (fTemp98 + fTemp398)) + ((0.00262459181f * (fTemp276 + (fTemp422 - fTemp140))) + ((0.00256355479f * (fTemp296 + (fTemp402 - (fTemp386 + fTemp379)))) + ((0.00180059206f * (fTemp77 - fTemp270)) + ((0.0019226661f * (fTemp324 + (fTemp104 - fTemp56))) + ((0.0042115543f * (fTemp292 - (fTemp240 + fTemp495))) + ((0.00155644398f * (fTemp227 + fTemp518)) + ((0.000701925717f * (fTemp332 - (fTemp228 + fTemp301))) + ((0.00106814783f * (fTemp7 + (fTemp323 - (fTemp127 - fTemp363)))) + ((0.00305185094f * (fTemp337 + (fTemp139 + fTemp33))) + ((0.000305185094f * (fTemp25 - (fTemp507 + fTemp275))) + ((0.00177007355f * (fTemp156 - fTemp28)) + ((6.10370189e-05f * (fTemp262 - (fTemp13 - fTemp57))) + ((0.00442518387f * (fTemp34 - (fTemp391 - fTemp122))) + ((0.00811792351f * (fTemp253 + (fTemp180 - fTemp424))) + ((0.00384533219f * (fTemp39 + fTemp311)) + ((0.00430310983f * (fTemp51 - (fTemp22 + fTemp390))) + ((0.00277718436f * (fTemp406 + fTemp54)) + ((0.00173955504f * (fTemp161 + fTemp60)) + ((0.00427259132f * (fTemp89 + fTemp68)) + ((0.00814844202f * (fTemp357 + fTemp67)) + ((0.00292977691f * (fTemp271 - (fTemp404 - fTemp172))) + ((0.00372325815f * (fTemp101 - (fTemp388 + fTemp82))) + ((0.00283822138f * (fTemp173 + fTemp76)) + ((0.00469985045f * (fTemp145 + fTemp287)) + ((0.00473036896f * (fTemp85 + fTemp71)) + ((0.00308236945f * (fTemp113 - (fTemp502 - fTemp93))) + ((0.00158696249f * (fTemp117 + (fTemp376 + (fTemp511 + fTemp504)))) + ((0.00454725791f * (fTemp119 + (fTemp234 + fTemp219))) + ((0.00845362712f * (fTemp118 + fTemp163)) + ((0.00109866634f * (fTemp268 + (fTemp378 - (fTemp149 - fTemp418)))) + ((0.00433362834f * (fTemp32 - fTemp272)) + ((0.00524918362f * (fTemp169 - (fTemp493 - fTemp263))) + ((0.00778221991f * (fTemp179 + fTemp129)) + ((0.00189214759f * (fTemp237 - fTemp10)) + ((0.000762962736f * (fTemp53 - (fTemp128 - (fTemp334 - (fTemp216 - fTemp382))))) + ((0.00411999878f * (fTemp6 + (fTemp530 - fTemp42))) + ((0.0051576281f * (fTemp417 + fTemp30)) + ((0.00448622089f * (fTemp295 + fTemp134)) + ((0.00860621966f * (fTemp364 + fTemp374)) + ((0.00393688772f * (fTemp282 - (fTemp491 + fTemp70))) + ((0.000915555283f * (fTemp5 + fTemp97)) + ((0.000213629566f * (fTemp259 - (fTemp29 + (fTemp356 + fTemp335)))) + ((0.00253303628f * (fTemp215 - fTemp59)) + ((0.000732444227f * (fTemp343 - fTemp90)) + ((0.000610370189f * (fTemp209 - fTemp316)) + ((0.00488296151f * (fTemp235 - fTemp371)) + ((0.00491348002f * (fTemp40 - (fTemp338 + fTemp380))) + ((0.000457777642f * (fTemp130 + (fTemp329 + fTemp281))) + ((0.00122074038f * (fTemp453 - fTemp516)) + ((0.00601214636f * (fTemp213 - fTemp409)) + ((0.00381481368f * (fTemp226 + fTemp416)) + ((0.00326548051f * (fTemp377 + fTemp36)) + ((0.00329599902f * (fTemp233 - fTemp439)) + ((0.00573747978f * (fTemp500 - fTemp208)) + ((0.00396740623f * (fTemp499 + (fTemp236 + fTemp505))) + ((0.00341807306f * fTemp242) + ((0.000518814661f * fTemp245) + ((0.0012817774f * fTemp269) + ((0.00350962859f * fTemp283) + ((0.00115970336f * fTemp297) + ((0.00753807183f * fTemp331) + ((0.00762962736f * fTemp278) + ((0.00665303506f * fTemp285) + ((0.00500503555f * fTemp304) + ((0.00317392498f * fTemp310) + (fTemp614 + ((0.0093691824f * fTemp11) + ((0.0116885891f * fTemp14) + ((0.0124515519f * fTemp18) + ((0.0118106632f * fTemp19) + ((0.00958281197f * fTemp339) + ((0.00650044251f * fTemp23) + ((0.00314340647f * fTemp24) + ((0.00222785119f * fTemp319) + ((0.00640888698f * fTemp279) + ((0.00915555283f * fTemp286) + ((0.00897244178f * fTemp266) + ((0.0123599963f * fTemp252) + ((0.0135807367f * fTemp47) + ((0.0126956999f * fTemp321) + ((0.00991851557f * fTemp48) + ((0.00198370311f * fTemp312) + ((0.0057985168f * fTemp69) + ((0.00793481246f * fTemp55) + ((0.0103762932f * fTemp61) + ((0.0126651814f * fTemp345) + ((0.0139164403f * fTemp246) + ((0.0134586627f * fTemp2) + ((0.0122074038f * fTemp62) + ((0.00531022064f * fTemp155) + ((0.00320444349f * fTemp157) + ((0.00610370189f * fTemp72) + ((0.00869777519f * fTemp75) + ((0.00961333048f * fTemp79) + ((0.00717184972f * fTemp293) + ((0.00555436872f * fTemp83) + ((0.00311288796f * fTemp91) + ((0.001617481f * fTemp159) + ((0.000396740623f * fTemp160) + ((0.00216681417f * fTemp46) + ((0.0136112552f * fTemp164) + ((0.018097477f * fTemp44) + ((0.0202642903f * fTemp399) + ((0.0156254768f * fTemp353) + ((0.00546281319f * fTemp63) + ((0.00842310861f * fTemp74) + ((0.0105899228f * fTemp400) + ((0.0122379223f * fTemp401) + ((0.012878811f * fTemp38) + ((0.011383404f * fTemp168) + ((0.00967436749f * fTemp123) + ((0.0119632557f * fTemp365) + ((0.0117191076f * fTemp170) + ((0.0103457747f * fTemp78) + ((0.0045167394f * fTemp27) + ((0.00152592547f * fTemp50) + ((0.00286873989f * fTemp370) + (fTemp615 + ((0.00280770287f * fTemp298) + ((0.00479140598f * fTemp372) + ((0.00463881344f * fTemp306) + ((0.00540177617f * fTemp108) + ((0.00674459059f * fTemp144) + ((0.00805688649f * fTemp354) + ((0.00781273842f * fTemp142) + ((0.00659199804f * fTemp326) + ((0.00424207281f * fTemp267) + (fTemp616 + ((0.000793481246f * fTemp114) + ((0.000640888698f * fTemp131) + ((0.000976592302f * fTemp147) + ((0.000427259132f * fTemp313) + ((0.00103762932f * fTemp361) + ((0.0019531846f * fTemp327) + ((0.000335703604f * fTemp299) + ((0.00057985168f * fTemp138) + ((0.00335703604f * fTemp342) + ((0.00466933195f * fTemp94) + ((0.0129703665f * fTemp328) + ((0.0263985116f * fTemp444) + ((0.0309457686f * fTemp445) + ((0.0246284381f * fTemp300) + ((0.0134281442f * fTemp116) + ((0.0158085879f * fTemp454) + ((0.0254829563f * fTemp455) + ((0.0325022116f * fTemp152) + ((0.0285042878f * fTemp362) + ((0.0204168838f * fTemp457) + ((0.0185857732f * fTemp464) + ((0.0618915372f * fTemp389) + ((0.0628986508f * fTemp393) + ((0.0249031037f * fTemp465) + ((0.0334788039f * fTemp185) + ((0.0843531638f * fTemp186) + ((0.12839137f * fTemp187) + ((0.168126464f * fTemp188) + ((0.162480548f * fTemp189) + ((0.100955233f * fTemp151) + ((0.0191656239f * fTemp190) + ((0.0635395348f * fTemp196) + ((0.179387793f * fTemp469) + ((0.257423639f * fTemp154) + ((0.185186312f * fTemp470) + ((0.0855433792f * fTemp346) + ((0.0297860652f * fTemp58) + ((0.0252388082f * fTemp479) + ((0.0650349408f * fTemp480) + ((0.269081712f * fTemp482) + ((0.765312672f * fTemp397) + (fTemp617 + ((0.826868474f * fTemp484) + ((0.408459723f * fTemp396) + ((0.118533894f * fTemp485) + ((0.0230414756f * fTemp486) + ((0.00234992523f * fTemp210) + ((0.00399792474f * fTemp211) + ((0.00543229468f * fTemp212) + ((0.00506607257f * fTemp214) + ((0.00598162785f * fTemp501) + ((0.00552385021f * fTemp512) + (((0.00338755455f * fTemp0) + (0.00186162908f * fTemp506)) + (0.00534073915f * fTemp225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00344859157f * (fTemp1 + (fTemp291 + (fTemp257 + (fTemp103 - (fTemp81 - fTemp92))))))))))) : (iSlow4 ? (iSlow10 ? (iSlow12 ? (((0.000244148076f * (fTemp1 + (fTemp34 + (fTemp286 - (fTemp214 - (fTemp223 + (fTemp22 - fTemp224))))))) + ((0.00131229591f * (fTemp244 - (fTemp97 + fTemp255))) + ((0.000793481246f * (fTemp398 + (fTemp262 - (fTemp51 + (fTemp210 - fTemp72))))) + ((0.000976592302f * (fTemp88 - fTemp251)) + ((0.000183111057f * (fTemp261 - (fTemp510 - fTemp496))) + ((0.00189214759f * (fTemp269 + (fTemp258 + fTemp302))) + ((0.00476088747f * (fTemp283 + (fTemp83 + fTemp61))) + ((0.00506607257f * (fTemp331 + fTemp291)) + ((0.00433362834f * (fTemp383 + fTemp296)) + ((0.000762962736f * (fTemp277 + (fTemp352 - (fTemp118 - fTemp131)))) + ((0.00247199927f * (fTemp445 - fTemp270)) + ((0.00286873989f * (fTemp126 - fTemp284)) + ((0.000488296151f * (fTemp292 - (fTemp437 + (fTemp208 - (fTemp229 - fTemp504))))) + ((0.00299081393f * (fTemp330 - (fTemp57 - fTemp80))) + ((0.004852443f * (fTemp416 + fTemp310)) + ((0.00317392498f * (fTemp298 - fTemp337)) + ((0.00616473891f * (fTemp243 - fTemp8)) + ((0.00173955504f * (fTemp62 - fTemp19)) + ((0.00265511032f * (fTemp373 + fTemp339)) + ((0.00756859034f * (fTemp24 - (fTemp201 - fTemp530))) + ((0.00717184972f * (fTemp104 + fTemp25)) + ((0.00213629566f * (fTemp115 + fTemp333)) + ((0.00115970336f * (fTemp325 + (fTemp391 + fTemp374))) + ((0.0022583697f * (fTemp2 + fTemp311)) + ((0.0038758507f * (fTemp340 - (fTemp443 - fTemp361))) + ((0.00567644276f * (fTemp321 + fTemp602)) + ((0.000518814661f * (fTemp21 + (fTemp225 + fTemp353))) + ((0.000885036774f * (fTemp60 - (fTemp492 - (fTemp231 - fTemp228)))) + ((0.00491348002f * (fTemp457 + fTemp69)) + ((0.00497451704f * (fTemp372 + fTemp55)) + ((0.00183111057f * (fTemp155 + (fTemp136 + fTemp295))) + ((0.00152592547f * (fTemp156 + (fTemp316 - fTemp74))) + ((0.000915555283f * (fTemp10 + fTemp157)) + ((0.00216681417f * (fTemp511 + fTemp79)) + ((0.00436414685f * (fTemp411 + fTemp293)) + ((0.00375377666f * (fTemp112 + fTemp76)) + ((0.00390636921f * (fTemp82 + fTemp287)) + ((0.00668355357f * (fTemp440 - fTemp117)) + ((0.00680562761f * (fTemp342 - fTemp161)) + ((0.00488296151f * (fTemp29 - fTemp399)) + ((0.00430310983f * (fTemp30 + fTemp400)) + ((0.00766014587f * (fTemp401 + (fTemp420 + fTemp93))) + ((0.00979644153f * (fTemp36 + fTemp169)) + ((0.00787377544f * (fTemp377 + fTemp73)) + ((0.00494399853f * (fTemp306 + fTemp120)) + ((0.00134281442f * (fTemp341 + fTemp132)) + ((0.00125125889f * (fTemp273 - (fTemp232 - fTemp491))) + ((0.000427259132f * (fTemp133 + (fTemp505 + fTemp215))) + ((6.10370189e-05f * (fTemp247 - (fTemp218 + (fTemp501 - fTemp498)))) + ((9.15555283e-05f * (fTemp137 - (fTemp497 + (fTemp222 - fTemp500)))) + ((0.00552385021f * (fTemp84 + (fTemp388 - fTemp603))) + ((0.00521866512f * (fTemp403 + fTemp402)) + ((0.00408948027f * (fTemp413 + fTemp358)) + ((0.00256355479f * (fTemp301 + fTemp6)) + ((0.00283822138f * (fTemp145 + (fTemp289 + fTemp351))) + ((0.00384533219f * (fTemp294 + fTemp108)) + ((0.00277718436f * (fTemp144 - (fTemp436 - fTemp138))) + ((0.00177007355f * (fTemp354 + (fTemp173 + (fTemp274 + fTemp128)))) + ((0.000701925717f * (fTemp142 - (fTemp226 + fTemp490))) + ((0.0019226661f * (fTemp5 + fTemp171)) + ((0.00320444349f * (fTemp85 + (fTemp70 - fTemp13))) + ((0.00329599902f * (fTemp375 + fTemp359)) + ((0.00292977691f * (fTemp64 + fTemp148)) + ((0.000366222113f * (fTemp92 + fTemp59)) + ((0.00500503555f * (fTemp87 + fTemp290)) + ((0.00653096102f * (fTemp4 + fTemp404)) + ((0.00595110934f * (fTemp248 + (fTemp386 + fTemp406))) + ((0.00140385143f * (fTemp514 - (fTemp240 - fTemp299))) + ((0.000854518265f * (fTemp241 + fTemp40)) + ((0.000122074038f * (fTemp327 + (fTemp506 - fTemp499))) + ((0.00155644398f * (fTemp239 - fTemp139)) + ((0.000274666585f * (fTemp379 + (fTemp508 + fTemp493))) + ((0.0051576281f * (fTemp515 + fTemp250)) + ((0.00888088625f * (fTemp149 + (fTemp207 + fTemp329))) + ((0.0152592547f * (fTemp453 - fTemp432)) + ((0.0266426597f * (fTemp454 - fTemp439)) + ((0.00363170262f * fTemp276) + ((0.00631733146f * fTemp278) + ((0.00643940549f * fTemp285) + ((0.0035401471f * fTemp518) + ((0.00204474013f * fTemp332) + ((0.0061342204f * fTemp23) + ((0.00564592425f * fTemp28) + ((0.00366222113f * fTemp31) + ((0.00570696127f * fTemp37) + ((0.00930814538f * fTemp45) + ((0.0103762932f * fTemp280) + ((0.0111697745f * fTemp320) + ((0.0108951079f * fTemp266) + ((0.0101016266f * fTemp252) + ((0.00302133244f * fTemp48) + ((0.00238044374f * fTemp307) + ((0.00360118411f * fTemp33) + ((0.00442518387f * fTemp68) + ((0.00396740623f * fTemp345) + ((0.00164799951f * fTemp67) + ((0.00167851802f * fTemp347) + ((0.00402844325f * fTemp43) + ((0.0025940733f * fTemp271) + ((0.0105594043f * fTemp160) + ((0.0140690329f * fTemp105) + ((0.0162663665f * fTemp109) + ((0.0167241432f * fTemp323) + ((0.0145878475f * fTemp46) + ((0.00982696004f * fTemp110) + ((0.0067751091f * fTemp357) + ((0.012939848f * fTemp268) + ((0.0165105145f * fTemp272) + ((0.0151066622f * fTemp3) + ((0.0090334788f * fTemp519) + ((0.00976592302f * fTemp38) + ((0.0103457747f * fTemp168) + ((0.00411999878f * fTemp140) + ((0.00469985045f * fTemp56) + ((0.00634784997f * fTemp275) + ((0.00698873866f * fTemp53) + ((0.00683614612f * fTemp366) + ((0.00607318338f * fTemp370) + ((0.00344859157f * fTemp146) + ((0.00531022064f * fTemp134) + ((0.00103762932f * fTemp326) + ((0.00219733268f * fTemp267) + ((0.00314340647f * fTemp150) + ((0.00372325815f * fTemp282) + ((0.00463881344f * fTemp315) + ((0.00158696249f * fTemp317) + ((0.00210577715f * fTemp90) + ((0.0074159978f * fTemp107) + ((0.00747703481f * fTemp127) + ((0.00262459181f * fTemp42) + ((0.00234992523f * fTemp335) + ((0.00637836847f * fTemp334) + ((0.00543229468f * fTemp49) + ((0.00503555406f * fTemp410) + ((0.00585955381f * fTemp414) + ((0.00561540574f * fTemp390) + ((0.00598162785f * fTemp415) + ((0.00524918362f * fTemp417) + ((0.0140079958f * fTemp39) + ((0.0134586627f * fTemp122) + ((0.0123599963f * fTemp418) + ((0.00512710959f * fTemp421) + ((0.00405896176f * fTemp369) + ((0.00659199804f * fTemp65) + ((0.0054933317f * fTemp106) + ((0.00534073915f * fTemp95) + ((0.00280770287f * fTemp94) + ((0.0187383648f * fTemp522) + ((0.0488601327f * fTemp175) + (fTemp604 + ((0.0477309488f * fTemp328) + ((0.0191351064f * fTemp444) + ((0.021149328f * fTemp447) + ((0.0597857609f * fTemp448) + ((0.0726950914f * fTemp77) + ((0.0397656187f * fTemp179) + ((0.00784325693f * fTemp121) + ((0.0377819166f * fTemp455) + ((0.0455030985f * fTemp152) + ((0.0414136164f * fTemp362) + ((0.0268562883f * fTemp456) + ((0.0134281442f * fTemp463) + ((0.0445265062f * fTemp464) + ((0.0606707968f * fTemp389) + ((0.0498672463f * fTemp393) + ((0.0215155501f * fTemp465) + ((0.0140995514f * fTemp186) + ((0.0265816227f * fTemp187) + ((0.0599688701f * fTemp188) + ((0.0644856095f * fTemp189) + ((0.0754417554f * fTemp151) + ((0.0758995339f * fTemp190) + ((0.0410168767f * fTemp191) + ((0.0422376171f * fTemp192) + ((0.01617481f * fTemp346) + ((0.0878627896f * fTemp471) + ((0.154332101f * fTemp472) + ((0.120059818f * fTemp473) + ((0.0376293212f * fTemp474) + ((0.00997955259f * fTemp481) + ((0.0112308115f * fTemp35) + ((0.140171513f * fTemp482) + ((0.0859401226f * fTemp397) + ((0.331431001f * fTemp487) + ((0.799157679f * fTemp488) + (fTemp489 + ((0.808801532f * fTemp153) + ((0.403302103f * fTemp205) + ((0.0986663401f * fTemp206) + ((0.00143436994f * fTemp135) + ((0.000823999755f * fTemp209) + ((0.0149540696f * fTemp234) + (0.000732444227f * fTemp211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00146488845f * (fTemp26 - fTemp242)) + ((0.000152592547f * (fTemp245 + (fTemp27 + fTemp264))) + ((0.001617481f * (fTemp254 - (fTemp103 - fTemp324))) + ((0.00207525864f * (fTemp260 + (fTemp265 + (fTemp238 + fTemp259)))) + ((0.00311288796f * (fTemp318 - fTemp297)) + ((0.00149540696f * (fTemp309 - (fTemp480 + fTemp303))) + ((0.00573747978f * (fTemp300 - fTemp304)) + ((0.000305185094f * (fTemp7 - (fTemp217 + fTemp605))) + ((0.00814844202f * (fTemp165 + fTemp14)) + ((0.00112918485f * (fTemp313 - fTemp256)) + ((0.000457777642f * (fTemp147 - fTemp319)) + ((3.05185094e-05f * (fTemp279 + (fTemp96 + (fTemp380 + (fTemp495 + (fTemp220 - (fTemp0 - fTemp507))))))) + ((0.000213629566f * (fTemp253 - (fTemp219 - fTemp216))) + ((0.00750755332f * (fTemp193 - fTemp41)) + ((0.00830103457f * (fTemp63 - fTemp47)) + ((0.00119022187f * (fTemp54 - (fTemp75 - (fTemp20 - fTemp606)))) + ((0.000396740623f * (fTemp312 + (fTemp516 + fTemp607))) + ((0.003234962f * (fTemp365 - fTemp246)) + ((0.00335703604f * (fTemp236 - fTemp349)) + ((0.00137333293f * (fTemp78 - fTemp101)) + ((0.00701925717f * (fTemp119 - fTemp159)) + ((0.00186162908f * (fTemp71 - (fTemp102 + (fTemp172 + (fTemp356 + fTemp114))))) + ((0.00518814661f * (fTemp116 + fTemp113)) + ((0.0176702179f * (fTemp462 - fTemp322)) + ((0.0028992584f * (fTemp124 + (fTemp99 + fTemp12))) + ((0.00378429517f * (fTemp123 - (fTemp409 - (fTemp233 - fTemp412)))) + ((0.00241096225f * (fTemp170 - (fTemp288 + (fTemp237 + fTemp66)))) + ((0.00057985168f * (fTemp230 - fTemp50)) + ((0.00250251777f * (fTemp130 - fTemp257)) + ((0.00296029542f * (fTemp408 - fTemp348)) + ((0.00457777642f * (fTemp98 - fTemp343)) + ((0.00326548051f * (fTemp81 - fTemp371)) + ((0.000671407208f * (fTemp405 - (fTemp227 + fTemp213))) + ((0.00790429395f * (fTemp429 - fTemp9)) + ((0.00537125766f * (fTemp430 + fTemp15)) + ((0.00473036896f * (fTemp177 - fTemp281)) + ((0.00897244178f * (fTemp427 + fTemp426)) + ((0.00347911008f * (fTemp355 - fTemp32)) + ((0.000335703604f * fTemp305) + ((0.00820947904f * fTemp11) + ((0.00589007232f * fTemp18) + ((0.00738547929f * fTemp163) + ((0.00842310861f * fTemp164) + ((0.00885036774f * fTemp44) + ((0.008087405f * fTemp350) + ((0.0142216254f * fTemp166) + ((0.0167851802f * fTemp363) + ((0.0143742179f * fTemp167) + ((0.00381481368f * fTemp125) + ((0.00100711081f * fTemp129) + ((0.0042115543f * fTemp384) + ((0.00180059206f * fTemp100) + ((0.00341807306f * fTemp336) + ((0.00466933195f * fTemp407) + ((0.00122074038f * fTemp52) + ((0.00796533097f * fTemp422) + ((0.00827051606f * fTemp423) + ((0.00689718314f * fTemp424) + ((0.00601214636f * fTemp425) + ((0.00692770164f * fTemp338) + ((0.00662251655f * fTemp428) + ((0.0130314035f * fTemp431) + ((0.0191656239f * fTemp433) + ((0.0179448836f * fTemp434) + ((0.00927762687f * fTemp435) + ((0.0186773278f * fTemp438) + ((0.035828732f * fTemp381) + ((0.0266121402f * fTemp344) + ((0.0109866634f * fTemp111) + ((0.011200293f * fTemp392) + ((0.0187688842f * fTemp441) + ((0.0132145146f * fTemp442) + ((0.028931547f * fTemp178) + ((0.0460524298f * fTemp249) + ((0.0475478396f * fTemp387) + ((0.01803644f * fTemp446) + ((0.0111392559f * fTemp180) + ((0.0682393909f * fTemp376) + ((0.0966826379f * fTemp449) + ((0.0978118256f * fTemp450) + ((0.0681478307f * fTemp451) + ((0.0321665108f * fTemp452) + ((0.0102542192f * fTemp385) + ((0.0182805881f * fTemp364) + ((0.0377208777f * fTemp394) + ((0.051759392f * fTemp458) + ((0.0575273894f * fTemp459) + ((0.0542924292f * fTemp460) + ((0.04242073f * fTemp461) + ((0.0204474013f * fTemp466) + ((0.0557878353f * fTemp467) + ((0.0792565718f * fTemp468) + ((0.0935087129f * fTemp368) + ((0.0959196761f * fTemp181) + ((0.109927669f * fTemp86) + ((0.123325296f * fTemp367) + ((0.130436108f * fTemp141) + ((0.133243814f * fTemp182) + ((0.0987884179f * fTemp183) + ((0.0635090172f * fTemp184) + ((0.0200811792f * fTemp185) + ((0.0101321451f * fTemp194) + ((0.0190740693f * fTemp195) + ((0.046967987f * fTemp196) + ((0.0413525812f * fTemp469) + ((0.0562150963f * fTemp154) + ((0.013061922f * fTemp470) + ((0.0674153864f * fTemp475) + ((0.110629596f * fTemp476) + ((0.107058935f * fTemp197) + ((0.0522171706f * fTemp198) + ((0.0178228095f * fTemp199) + ((0.0448622108f * fTemp200) + ((0.135532707f * fTemp58) + ((0.189245284f * fTemp477) + ((0.168248549f * fTemp478) + ((0.110324413f * fTemp479) + ((0.164922029f * fTemp202) + ((0.15491195f * fTemp203) + ((0.133671075f * fTemp204) + ((0.0474257655f * fTemp483) + ((0.49296549f * fTemp484) + ((0.657032967f * fTemp396) + ((0.630176723f * fTemp485) + ((0.248786896f * fTemp486) + ((0.00054933317f * fTemp512) + ((0.0105288858f * fTemp235) + (0.00106814783f * fTemp16)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00109866634f * (fTemp314 - fTemp513)))) : (((0.000152592547f * (fTemp398 + (fTemp75 - (fTemp76 + fTemp588)))) + ((0.000274666585f * (fTemp245 + (fTemp318 - (fTemp33 - (fTemp160 - (fTemp126 - fTemp358)))))) + ((0.000488296151f * (fTemp251 + (fTemp297 + (fTemp311 - (fTemp247 + (fTemp335 + (fTemp77 - fTemp412))))))) + ((0.00103762932f * (fTemp260 + (fTemp278 - (fTemp81 + (fTemp118 - fTemp39))))) + ((0.00106814783f * (fTemp265 - (fTemp337 + (fTemp17 - fTemp258)))) + ((0.000946073793f * (fTemp255 + (fTemp70 + fTemp324))) + ((0.000671407208f * (fTemp261 + (fTemp285 - (fTemp115 - (fTemp446 - fTemp410))))) + ((0.000457777642f * (fTemp269 + (fTemp277 + (fTemp68 + (fTemp378 + fTemp343))))) + ((0.000244148076f * (fTemp276 + (fTemp262 + fTemp310))) + ((0.000122074038f * (fTemp291 + (fTemp309 + (fTemp270 + (fTemp37 - (fTemp48 + (fTemp54 - (fTemp2 - (fTemp159 - (fTemp402 + fTemp370)))))))))) + ((0.000305185094f * (fTemp296 + (fTemp168 + fTemp305))) + ((0.00054933317f * (fTemp302 + (fTemp119 - (fTemp73 - (fTemp150 - (fTemp448 - fTemp447)))))) + ((0.000518814661f * (fTemp284 - (fTemp28 - (fTemp136 + fTemp88)))) + ((0.00131229591f * (fTemp292 - (fTemp19 + (fTemp339 + (fTemp405 - (fTemp417 + fTemp93)))))) + ((0.00143436994f * (fTemp330 - (fTemp457 + fTemp281))) + ((0.00134281442f * (fTemp331 + (fTemp79 + (fTemp83 + (fTemp316 + fTemp53))))) + ((0.000640888698f * (fTemp319 + (fTemp64 + fTemp147))) + ((0.00180059206f * (fTemp279 + (fTemp55 + (fTemp293 + (fTemp9 + fTemp129))))) + ((0.00222785119f * (fTemp253 + (fTemp345 - (fTemp365 + (fTemp40 + fTemp131))))) + ((0.00164799951f * (fTemp286 + (fTemp50 - (fTemp441 - fTemp128)))) + ((0.00152592547f * (fTemp320 + (fTemp399 + (fTemp268 - (fTemp272 + (fTemp211 - fTemp413)))))) + ((0.00146488845f * (fTemp266 - (fTemp327 + (fTemp421 - fTemp418)))) + ((0.00311288796f * (fTemp167 - fTemp67)) + ((0.00189214759f * (fTemp349 - (fTemp409 - fTemp341))) + ((0.000915555283f * (fTemp43 + (fTemp105 - (fTemp137 - (fTemp298 - fTemp10))))) + ((0.000610370189f * (fTemp271 + (fTemp104 - (fTemp387 - fTemp5)))) + ((0.00491348002f * (fTemp436 + fTemp164)) + ((0.0019531846f * (fTemp15 + fTemp401)) + ((0.000701925717f * (fTemp38 + (fTemp98 - (fTemp392 - fTemp139)))) + ((0.00140385143f * (fTemp273 + fTemp589)) + ((0.000396740623f * (fTemp133 - (fTemp134 - (fTemp13 + (fTemp127 - (fTemp379 + fTemp130)))))) + ((0.00207525864f * (fTemp84 + fTemp590)) + ((0.00350962859f * (fTemp145 - (fTemp89 + fTemp59))) + ((0.00561540574f * (fTemp428 + fTemp267)) + ((0.00698873866f * (fTemp180 + fTemp259)) + ((0.00253303628f * (fTemp427 - fTemp12)) + ((0.00167851802f * (fTemp27 - (fTemp423 + fTemp356))) + ((0.00219733268f * (fTemp61 - (fTemp157 - (fTemp179 + fTemp406)))) + ((0.0012817774f * (fTemp317 + (fTemp42 - (fTemp424 + fTemp301)))) + ((0.00115970336f * (fTemp514 - (fTemp426 + fTemp425))) + ((0.00158696249f * (fTemp438 - fTemp407)) + ((0.003234962f * (fTemp437 - fTemp250)) + ((0.00314340647f * fTemp591) + ((0.00881984923f * fTemp592) + ((0.0110477004f * (fTemp451 - fTemp443)) + ((0.00845362712f * (fTemp460 - fTemp445)) + (((0.00216681417f * fTemp264) + ((0.00100711081f * fTemp252) + ((0.00155644398f * fTemp246) + (fTemp526 + ((0.00332651753f * fTemp357) + ((0.0057985168f * fTemp63) + ((0.00186162908f * fTemp132) + (fTemp593 + ((0.00204474013f * fTemp275) + ((0.00347911008f * fTemp146) + ((0.00320444349f * fTemp171) + ((0.00500503555f * fTemp172) + ((0.00634784997f * fTemp103) + ((0.00372325815f * fTemp288) + ((0.00415051728f * fTemp97) + ((0.00686666463f * fTemp313) + ((0.00424207281f * fTemp57) + ((0.00244148076f * fTemp380) + ((0.00231940672f * fTemp100) + ((0.00170903653f * fTemp99) + ((0.00445570238f * fTemp390) + ((0.0045167394f * fTemp415) + ((0.00787377544f * fTemp429) + ((0.00918607134f * fTemp430) + ((0.00985747855f * fTemp431) + ((0.00979644153f * fTemp432) + ((0.00753807183f * fTemp434) + ((0.00631733146f * fTemp435) + ((0.0108645894f * fTemp376) + ((0.0117801446f * fTemp449) + ((0.0111087374f * fTemp450) + ((0.0108951079f * fTemp452) + ((0.0074159978f * fTemp385) + ((0.00442518387f * fTemp394) + ((0.0051576281f * fTemp458) + ((0.00662251655f * fTemp459) + ((0.00680562761f * fTemp462) + ((0.00555436872f * fTemp463) + ((0.00827051606f * fTemp464) + ((0.0137943663f * fTemp389) + ((0.0161442924f * fTemp393) + ((0.0122074038f * fTemp465) + ((0.00802636798f * fTemp466) + ((0.0123294778f * fTemp467) + ((0.024323253f * fTemp468) + ((0.0314340666f * fTemp368) + (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((0.0789819062f * fTemp0) + (0.237556085f * fTemp506)) + (0.574419379f * fTemp507)) + (0.950773656f * fTemp508)) + (0.926389337f * fTemp510)) + (0.240913108f * fTemp229)) + (0.072542496f * fTemp511)) + (0.317209393f * fTemp233)) + (0.059602648f * fTemp234)) + (0.0784020498f * fTemp240)) + (0.122989595f * fTemp391)) + (0.126346633f * fTemp16)) + (0.0756248683f * fTemp241)) + (0.209601119f * fTemp504)) + (0.299050868f * fTemp503)) + (0.214880824f * fTemp502)) + fTemp594) + (0.0188299213f * fTemp499)) + (0.036774803f * fTemp498)) + (0.0535294674f * fTemp497)) + (0.0751976073f * fTemp496)) + (0.0921659023f * fTemp495)) + (0.0905484185f * fTemp493)) + (0.0464491732f * fTemp218)) + (0.0201422162f * fTemp210)) + (0.0663167238f * fTemp209)) + (0.117221594f * fTemp492)) + (0.139927372f * fTemp491)) + (0.109561451f * fTemp490)) + (0.0334482864f * fTemp135)) + (0.0149845881f * fTemp153)) + (0.018097477f * fTemp489)) + (0.016296884f * fTemp487)) + (0.0207525864f * fTemp486)) + (0.0284432508f * fTemp485)) + (0.0444044322f * fTemp396)) + (0.0655842796f * fTemp484)) + (0.0731223524f * fTemp483)) + (0.0509964302f * fTemp397)) + (0.0136722922f * fTemp482)) + (0.0240180679f * fTemp480)) + (0.0503250211f * fTemp479)) + (0.0529190972f * fTemp478)) + (0.0362865068f * fTemp477)) + (0.0174260698f * fTemp58)) + (0.00695822015f * fTemp200)) + (0.00509659108f * fTemp199)) + (0.00723288674f * fTemp198)) + (0.00915555283f * fTemp197)) + (0.0125125889f * fTemp476)) + (0.02438429f * fTemp475)) + (0.0454725809f * fTemp474)) + (0.0657063499f * fTemp473)) + (0.0724509433f * fTemp472)) + (0.0612201318f * fTemp471)) + (0.0389416181f * fTemp346)) + (0.0176702179f * fTemp470)) + (0.00592059083f * fTemp154)) + (0.0227973275f * fTemp181)))))))))))))))))))))))))))))))))))))))))))))))) + (0.000823999755f * fTemp254)))))))))))))))))))))))))))))))))))))))))))))))) - (((0.000213629566f * (fTemp513 - (fTemp340 + (fTemp96 - (fTemp80 - (fTemp366 - (fTemp373 - fTemp342))))))) + ((6.10370189e-05f * (fTemp242 + (fTemp170 - fTemp244))) + ((9.15555283e-05f * (fTemp321 - fTemp283)) + ((0.000366222113f * (fTemp332 + (fTemp46 - fTemp47))) + ((0.00112918485f * (fTemp8 - (fTemp404 - fTemp361))) + ((0.00109866634f * (fTemp11 + (fTemp14 + (fTemp138 - fTemp371)))) + ((0.00122074038f * (fTemp18 - (fTemp34 + (fTemp69 + (fTemp109 - fTemp72))))) + ((0.00119022187f * (fTemp23 - (fTemp280 + (fTemp351 + fTemp372)))) + ((0.000976592302f * (fTemp24 - (fTemp274 + fTemp325))) + ((0.000732444227f * (fTemp25 - (fTemp45 + (fTemp323 + (fTemp295 + (fTemp336 + fTemp107)))))) + ((0.000335703604f * (fTemp31 - (fTemp41 + (fTemp91 + (fTemp248 + (fTemp420 + fTemp36)))))) + ((0.000183111057f * (fTemp333 - fTemp595)) + ((3.05185094e-05f * (fTemp256 + (fTemp21 - (fTemp51 + (fTemp169 - (fTemp338 - fTemp386)))))) + ((0.000793481246f * (fTemp60 + (fTemp307 - (fTemp375 - fTemp363)))) + ((0.00149540696f * (fTemp62 + (fTemp120 - (fTemp56 - (fTemp177 + fTemp299))))) + ((0.00262459181f * (fTemp303 - (fTemp30 + (fTemp364 - fTemp66)))) + ((0.00283822138f * (fTemp287 + fTemp347)) + ((0.00265511032f * (fTemp49 + fTemp156)) + ((0.001617481f * (fTemp110 - (fTemp350 + (fTemp122 + fTemp90)))) + ((0.00338755455f * (fTemp85 + fTemp161)) + ((0.00396740623f * fTemp596) + ((0.00344859157f * (fTemp94 - fTemp44)) + ((0.00381481368f * (fTemp4 + fTemp322)) + ((0.00576799829f * (fTemp111 + fTemp352)) + ((0.00564592425f * (fTemp142 + fTemp165)) + ((0.00405896176f * (fTemp166 + (fTemp515 + fTemp326))) + ((0.00598162785f * (fTemp442 - fTemp74)) + ((0.00411999878f * (fTemp187 - fTemp400)) + ((0.00506607257f * (fTemp144 + fTemp124)) + ((0.00137333293f * (fTemp112 - fTemp78)) + ((0.0019226661f * (fTemp306 - fTemp257)) + ((0.00292977691f * (fTemp348 - fTemp6)) + ((0.00183111057f * (fTemp92 + fTemp263)) + ((0.00610370189f * (fTemp220 - fTemp173)) + ((0.00448622089f * (fTemp149 + fTemp114)) + ((0.00256355479f * (fTemp315 - (fTemp86 - fTemp334))) + ((0.0022583697f * (fTemp290 - (fTemp26 + fTemp382))) + ((0.000854518265f * (fTemp516 - fTemp289)) + ((0.004852443f * (fTemp65 + (fTemp205 + fTemp186))) + ((0.00234992523f * (fTemp530 + (fTemp116 + fTemp381))) + ((0.009704886f * (fTemp188 + fTemp176)) + ((0.0150456252f * (fTemp500 - fTemp488)) + ((0.000762962736f * fTemp7) + ((0.00305185094f * fTemp155) + ((0.00433362834f * fTemp71) + ((0.00570696127f * fTemp113) + ((0.00567644276f * fTemp117) + ((0.00476088747f * fTemp3) + ((0.00527970213f * fTemp519) + ((0.00277718436f * fTemp102) + ((0.00408948027f * fTemp20) + ((0.00524918362f * fTemp125) + ((0.00418103579f * fTemp123) + ((0.00341807306f * fTemp108) + ((0.00628681295f * fTemp354) + ((0.00650044251f * fTemp374) + ((0.00659199804f * fTemp282) + ((0.00762962736f * fTemp359) + ((0.00643940549f * fTemp148) + ((0.00369273964f * fTemp314) + ((0.00177007355f * fTemp29) + ((0.00210577715f * fTemp243) + ((0.00250251777f * fTemp32) + ((0.00201422162f * fTemp408) + ((0.00228888821f * fTemp52) + ((0.0038758507f * fTemp87) + ((0.00317392498f * fTemp383) + ((0.00308236945f * fTemp369) + ((0.00466933195f * fTemp329) + (fTemp597 + (fTemp598 + ((0.00274666585f * fTemp95) + ((0.00268562883f * fTemp422) + ((0.00463881344f * fTemp344) + ((0.00494399853f * fTemp294) + ((0.0025940733f * fTemp440) + ((0.0133365886f * fTemp522) + ((0.0120548112f * fTemp175) + ((0.00885036774f * fTemp328) + ((0.0093691824f * fTemp444) + ((0.0054933317f * fTemp300) + ((0.00241096225f * fTemp178) + ((0.00213629566f * fTemp249) + ((0.00976592302f * fTemp121) + ((0.0177922919f * fTemp453) + ((0.0209967345f * fTemp454) + ((0.0187688842f * fTemp455) + ((0.0143436994f * fTemp152) + ((0.0104373302f * fTemp362) + ((0.00625629444f * fTemp456) + ((0.0142216254f * fTemp367) + ((0.0185857732f * fTemp141) + ((0.0166325886f * fTemp182) + ((0.01617481f * fTemp183) + ((0.0157170333f * fTemp184) + ((0.0107119968f * fTemp185) + ((0.0141605884f * fTemp189) + ((0.0139774773f * fTemp151) + ((0.0172124393f * fTemp190) + ((0.0325632505f * fTemp191) + ((0.0522782058f * fTemp192) + ((0.0599688701f * fTemp193) + ((0.0502945036f * fTemp194) + ((0.0299996957f * fTemp195) + ((0.0114139225f * fTemp196) + ((0.00894192327f * fTemp481) + (fTemp599 + ((0.0394909531f * fTemp202) + ((0.0412610248f * fTemp203) + ((0.0364391021f * fTemp204) + ((0.0187078472f * fTemp35) + ((0.0380565822f * fTemp206) + ((0.0598162785f * fTemp207) + (fTemp600 + ((0.0214239936f * fTemp212) + ((0.0748619065f * fTemp213) + ((0.141636401f * fTemp214) + ((0.158970922f * fTemp215) + ((0.110995822f * fTemp216) + ((0.0302743614f * fTemp217) + ((0.0361339152f * fTemp501) + (((((((((((((((((((0.665273011f * fTemp230) + fTemp601) + (0.573229134f * fTemp232)) + (0.31083101f * fTemp235)) + (0.483016461f * fTemp236)) + (0.376018554f * fTemp237)) + (0.186071351f * fTemp238)) + (0.0280159917f * fTemp239)) + (0.037446212f * fTemp228)) + (0.171300396f * fTemp227)) + (0.237220377f * fTemp226)) + (0.253547788f * fTemp225)) + (0.190374464f * fTemp512)) + (0.00479140598f * fTemp505)) + (0.138279364f * fTemp224)) + (0.204840243f * fTemp223)) + (0.154332101f * fTemp222)) + (0.0570390932f * fTemp221)) + (0.0203253273f * fTemp219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000427259132f * (fTemp1 + (fTemp312 - fTemp304)))))) : (iSlow11 ? (((0.000640888698f * (fTemp255 + (fTemp220 + fTemp79))) + ((0.000732444227f * (fTemp269 - (fTemp131 - fTemp257))) + ((6.10370189e-05f * (fTemp276 - (fTemp110 + (fTemp66 - (fTemp217 - (fTemp498 - (fTemp223 - (fTemp512 - (fTemp233 + fTemp239))))))))) + ((0.00115970336f * (fTemp57 - fTemp318)) + ((0.000946073793f * (fTemp278 - (fTemp335 + fTemp247))) + ((0.00140385143f * (fTemp310 - (fTemp361 + (fTemp439 + fTemp384)))) + ((0.00378429517f * (fTemp96 + fTemp7)) + ((0.00598162785f * (fTemp156 + fTemp11)) + ((0.00268562883f * (fTemp136 + fTemp18)) + ((0.000976592302f * (fTemp19 - (fTemp20 - (fTemp13 + fTemp374)))) + ((0.00589007232f * (fTemp253 + fTemp34)) + ((0.0051576281f * (fTemp252 + fTemp264)) + ((0.00402844325f * fTemp576) + ((0.00488296151f * (fTemp320 + (fTemp157 + (fTemp350 + (fTemp514 - fTemp140))))) + ((0.00329599902f * (fTemp72 + fTemp48)) + ((0.00357066561f * (fTemp21 + (fTemp163 - (fTemp411 - fTemp164)))) + ((0.00207525864f * (fTemp312 + (fTemp378 + fTemp354))) + ((0.00253303628f * (fTemp400 + fTemp33)) + ((0.006469924f * (fTemp303 + (fTemp369 + fTemp356))) + ((0.00653096102f * (fTemp443 + fTemp155)) + ((0.00524918362f * (fTemp299 + fTemp91)) + ((0.00183111057f * (fTemp101 + (fTemp74 - (fTemp403 + fTemp126)))) + ((0.00167851802f * (fTemp518 + (fTemp40 + fTemp70))) + ((0.00100711081f * (fTemp133 + fTemp3)) + ((0.000213629566f * (fTemp63 + (fTemp404 + (fTemp100 - (fTemp205 - (fTemp240 + fTemp499)))))) + ((0.00338755455f * (fTemp401 + (fTemp306 - fTemp10))) + ((0.00250251777f * (fTemp30 - (fTemp343 + fTemp82))) + ((0.00234992523f * fTemp577) + ((0.00369273964f * (fTemp416 + fTemp108)) + ((0.00143436994f * (fTemp171 + (fTemp392 - fTemp29))) + ((0.00186162908f * (fTemp282 - (fTemp112 - (fTemp17 - fTemp106)))) + ((0.00439466536f * (fTemp327 - (fTemp382 - fTemp130))) + ((0.00512710959f * (fTemp448 - fTemp122)) + ((0.000427259132f * (fTemp211 + fTemp387)) + ((0.0112918485f * (fTemp484 + fTemp447)) + ((0.000396740623f * (fTemp228 + fTemp135)) + ((0.000274666585f * (fTemp495 + (fTemp391 + fTemp226))) + ((0.00521866512f * fTemp337) + ((0.00631733146f * fTemp8) + ((0.00469985045f * fTemp14) + ((0.00210577715f * fTemp333) + ((0.00393688772f * fTemp256) + ((0.00509659108f * fTemp262) + ((0.00561540574f * fTemp319) + ((0.00601214636f * fTemp279) + (fTemp578 + ((0.0038758507f * fTemp47) + ((0.003234962f * fTemp321) + ((0.0028992584f * fTemp54) + ((0.00347911008f * fTemp68) + ((0.00473036896f * fTemp69) + ((0.00567644276f * fTemp55) + ((0.00662251655f * fTemp61) + ((0.00714133121f * fTemp345) + ((0.00732444227f * fTemp246) + ((0.00701925717f * fTemp2) + ((0.00659199804f * fTemp62) + ((0.00634784997f * fTemp67) + ((0.00643940549f * fTemp347) + ((0.00390636921f * fTemp293) + ((0.00650044251f * fTemp83) + ((0.00811792351f * fTemp43) + ((0.0067751091f * fTemp88) + ((0.00305185094f * fTemp119) + ((0.00381481368f * fTemp44) + (fTemp567 + ((0.0113528855f * fTemp353) + ((0.0147404401f * fTemp357) + ((0.0157475509f * fTemp268) + ((0.0136112552f * fTemp272) + ((0.008087405f * fTemp322) + ((0.00424207281f * fTemp38) + ((0.0057985168f * fTemp168) + ((0.00750755332f * fTemp169) + ((0.00930814538f * fTemp73) + ((0.00878933072f * fTemp120) + ((0.00384533219f * fTemp129) + ((0.00769066438f * fTemp27) + ((0.00976592302f * fTemp50) + ((0.00881984923f * fTemp132) + ((0.00637836847f * fTemp341) + ((0.00335703604f * fTemp273) + (fTemp579 + (fTemp580 + ((0.00314340647f * fTemp146) + ((0.00286873989f * fTemp134) + (fTemp528 + ((0.00152592547f * fTemp359) + ((0.000701925717f * fTemp148) + ((0.00555436872f * fTemp42) + ((0.00265511032f * fTemp92) + ((0.00607318338f * fTemp405) + ((0.0042115543f * fTemp408) + ((0.00341807306f * fTemp52) + ((0.00280770287f * fTemp412) + ((0.00823999755f * fTemp413) + ((0.0108340709f * fTemp414) + ((0.00991851557f * fTemp390) + ((0.00674459059f * fTemp415) + ((0.00546281319f * fTemp421) + ((0.00708029419f * fTemp515) + ((0.00820947904f * fTemp149) + ((0.00817896053f * fTemp329) + ((0.00552385021f * fTemp65) + ((0.00430310983f * fTemp338) + ((0.011383404f * fTemp441) + ((0.011444441f * fTemp442) + ((0.0116580706f * fTemp522) + ((0.022461623f * fTemp175) + ((0.0411999896f * fTemp176) + ((0.046967987f * fTemp328) + ((0.0284127332f * fTemp444) + ((0.0115054781f * fTemp446) + ((0.0119937742f * fTemp452) + ((0.0235908087f * fTemp385) + ((0.0289010294f * fTemp373) + ((0.0343333222f * fTemp121) + ((0.0299996957f * fTemp453) + ((0.0308236945f * fTemp454) + ((0.0229804385f * fTemp455) + ((0.00665303506f * fTemp152) + ((0.021088291f * fTemp459) + ((0.0452589504f * fTemp460) + ((0.0574663542f * fTemp461) + ((0.045289468f * fTemp462) + ((0.0139469588f * fTemp463) + ((0.0174260698f * fTemp367) + ((0.0788598284f * fTemp141) + ((0.0626545027f * fTemp182) + ((0.0409253202f * fTemp183) + ((0.00927762687f * fTemp184) + ((0.0436109491f * fTemp185) + ((0.0664387941f * fTemp186) + ((0.0769981965f * fTemp187) + ((0.0560319833f * fTemp188) + ((0.040192876f * fTemp193) + ((0.176854759f * fTemp194) + ((0.155980095f * fTemp195) + ((0.110019229f * fTemp196) + ((0.119754635f * fTemp475) + ((0.112125002f * fTemp476) + ((0.0619220547f * fTemp197) + ((0.0221869573f * fTemp58) + ((0.140018925f * fTemp477) + ((0.112949006f * fTemp478) + ((0.571733773f * fTemp203) + (fTemp204 + ((0.893093646f * fTemp35) + ((0.45072788f * fTemp482) + ((0.124301888f * fTemp397) + ((0.000488296151f * fTemp206) + (0.028931547f * fTemp483)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.00146488845f * (fTemp513 - (fTemp104 + fTemp285))) + ((0.000854518265f * (fTemp242 + (fTemp283 - (fTemp360 + fTemp263)))) + ((0.000305185094f * (fTemp244 + (fTemp339 - (fTemp210 + (fTemp213 + (fTemp16 + fTemp227)))))) + ((9.15555283e-05f * (fTemp398 - (fTemp497 + (fTemp235 + (fTemp234 + (fTemp0 + fTemp229)))))) + ((0.000335703604f * (fTemp245 + (fTemp284 + (fTemp36 - fTemp334)))) + ((0.000885036774f * (fTemp251 - (fTemp207 + fTemp275))) + ((0.00125125889f * (fTemp254 + (fTemp23 + (fTemp59 - fTemp295)))) + ((0.00103762932f * (fTemp260 - (fTemp336 + fTemp261))) + ((0.000244148076f * (fTemp265 + (fTemp90 - fTemp331))) + ((0.00155644398f * (fTemp291 - (fTemp75 + fTemp304))) + ((0.00170903653f * (fTemp296 - (fTemp60 - fTemp297))) + ((0.00177007355f * (fTemp302 - (fTemp342 + (fTemp505 + fTemp420)))) + ((0.00299081393f * (fTemp159 + fTemp305)) + ((0.00308236945f * (fTemp309 - (fTemp145 + (fTemp144 - (fTemp189 + fTemp93))))) + ((0.000122074038f * (fTemp324 + (fTemp31 - (fTemp113 + (fTemp150 + (fTemp259 + (fTemp407 - (fTemp491 - (fTemp209 + fTemp581))))))))) + ((0.000183111057f * (fTemp292 + (fTemp366 - (fTemp114 + (fTemp218 + (fTemp241 + fTemp493)))))) + ((0.000152592547f * (fTemp330 - (fTemp46 - (fTemp103 + (fTemp380 - (fTemp214 + (fTemp500 + (fTemp221 + (fTemp22 + (fTemp507 + fTemp503)))))))))) + ((0.00244148076f * (fTemp418 - fTemp332)) + ((0.00180059206f * (fTemp24 - (fTemp107 - fTemp370))) + ((0.00164799951f * (fTemp28 + (fTemp147 + fTemp78))) + ((0.00317392498f * (fTemp56 - fTemp286)) + ((3.05185094e-05f * (fTemp325 + (fTemp490 - (fTemp216 + (fTemp496 + (fTemp225 - (fTemp238 - (fTemp236 + (fTemp511 + fTemp535))))))))) + ((0.00119022187f * (fTemp313 - fTemp280)) + ((0.00344859157f * (fTemp64 - fTemp51)) + ((0.00173955504f * (fTemp351 - fTemp307)) + ((0.00149540696f * (fTemp15 - fTemp349)) + ((0.00790429395f * (fTemp94 - fTemp271)) + ((0.000610370189f * (fTemp76 + (fTemp98 - fTemp326))) + ((0.00231940672f * (fTemp109 + (fTemp451 + fTemp289))) + ((0.00054933317f * (fTemp323 + (fTemp71 - (fTemp99 - fTemp267)))) + ((0.00057985168f * (fTemp287 + (fTemp288 - (fTemp32 + fTemp582)))) + ((0.00109866634f * (fTemp243 - fTemp117)) + ((0.00228888821f * (fTemp137 - fTemp161)) + ((0.0107425153f * (fTemp386 + fTemp165)) + ((0.00537125766f * (fTemp406 - fTemp102)) + ((0.00845362712f * (fTemp489 + fTemp124)) + ((0.00778221991f * (fTemp383 + fTemp170)) + ((0.00445570238f * (fTemp422 + fTemp115)) + ((0.00494399853f * (fTemp530 + fTemp80)) + ((0.00131229591f * (fTemp84 + (fTemp274 - fTemp85))) + ((0.00201422162f * (fTemp402 + (fTemp139 - fTemp127))) + ((0.001617481f * (fTemp5 + fTemp358)) + ((0.000457777642f * (fTemp298 - (fTemp142 + (fTemp224 + fTemp212)))) + ((0.00122074038f * (fTemp315 - fTemp172)) + ((0.00204474013f * (fTemp153 + fTemp97)) + ((0.000366222113f * (fTemp12 + (fTemp248 - fTemp583))) + ((0.000823999755f * (fTemp348 - (fTemp208 + fTemp49))) + ((0.00106814783f * (fTemp290 + (fTemp317 - (fTemp379 - fTemp26)))) + ((0.000518814661f * (fTemp128 - (fTemp502 - fTemp258))) + ((0.000671407208f * (fTemp316 - (fTemp438 - fTemp301))) + ((0.0357676931f * (fTemp486 + fTemp111)) + ((((0.0022583697f * fTemp270) + ((0.00216681417f * fTemp25) + ((0.00460829493f * fTemp311) + ((0.00888088625f * fTemp340) + ((0.0106814783f * fTemp37) + ((0.00885036774f * fTemp41) + ((0.00433362834f * fTemp160) + (fTemp584 + ((0.00506607257f * fTemp519) + ((0.00939970091f * fTemp352) + ((0.00988799706f * fTemp166) + ((0.00640888698f * fTemp363) + ((0.00271614734f * fTemp167) + ((0.0140079958f * fTemp125) + ((0.0158085879f * fTemp123) + ((0.0130924406f * fTemp365) + ((0.00112918485f * fTemp314) + ((0.00137333293f * fTemp375) + ((0.00457777642f * fTemp9) + ((0.00247199927f * fTemp355) + ((0.00366222113f * fTemp281) + ((0.00619525742f * fTemp138) + ((0.00689718314f * fTemp516) + ((0.00363170262f * fTemp81) + ((0.00497451704f * fTemp250) + ((0.00759910885f * fTemp4) + ((0.00766014587f * fTemp87) + ((0.00784325693f * fTemp409) + ((0.00985747855f * fTemp410) + (fTemp585 + ((0.00283822138f * fTemp39) + ((0.0035401471f * fTemp377) + ((0.00695822015f * fTemp95) + ((0.0071108127f * fTemp89) + ((0.00558488723f * fTemp423) + ((0.00964384899f * fTemp424) + ((0.0110477004f * fTemp425) + (fTemp586 + ((0.00296029542f * fTemp427) + ((0.0168767367f * fTemp428) + ((0.0267952513f * fTemp429) + ((0.0299386587f * fTemp430) + ((0.0250556972f * fTemp431) + ((0.0164494775f * fTemp432) + ((0.00952177495f * fTemp433) + (fTemp587 + ((0.015991699f * fTemp435) + ((0.0172124393f * fTemp436) + ((0.0114139225f * fTemp437) + ((0.0140995514f * fTemp381) + ((0.029114658f * fTemp344) + ((0.0329294726f * fTemp294) + ((0.019287698f * fTemp440) + ((0.00671407208f * fTemp445) + ((0.0345774703f * fTemp300) + ((0.0429700613f * fTemp116) + ((0.0402233973f * fTemp118) + ((0.0423596911f * fTemp177) + ((0.0371410251f * fTemp178) + ((0.0211798456f * fTemp249) + ((0.0108035523f * fTemp77) + ((0.0254829563f * fTemp179) + ((0.0383617654f * fTemp180) + ((0.0375988036f * fTemp376) + ((0.0314340666f * fTemp449) + ((0.0193182174f * fTemp450) + ((0.025940733f * fTemp362) + ((0.0574968718f * fTemp456) + ((0.0777306408f * fTemp457) + ((0.0809350908f * fTemp364) + ((0.0537125766f * fTemp394) + ((0.0180059206f * fTemp458) + ((0.022705771f * fTemp464) + ((0.0688192397f * fTemp389) + ((0.101046786f * fTemp393) + ((0.127750486f * fTemp465) + ((0.112918489f * fTemp466) + ((0.0959501937f * fTemp467) + ((0.0690939054f * fTemp468) + ((0.0567033924f * fTemp368) + ((0.0523392446f * fTemp181) + ((0.0215765871f * fTemp86) + ((0.0628070906f * fTemp151) + ((0.112216562f * fTemp190) + ((0.133854181f * fTemp191) + ((0.0657368675f * fTemp192) + ((0.0599688701f * fTemp469) + ((0.13562426f * fTemp154) + ((0.155583367f * fTemp470) + ((0.090762049f * fTemp346) + ((0.0737632364f * fTemp471) + ((0.12637715f * fTemp472) + ((0.0907010138f * fTemp473) + ((0.0548417605f * fTemp474) + ((0.151432842f * fTemp198) + ((0.17069003f * fTemp199) + ((0.123966187f * fTemp200) + ((0.0741599798f * fTemp479) + ((0.439283431f * fTemp480) + ((0.662373722f * fTemp481) + ((0.623493135f * fTemp201) + ((0.126010925f * fTemp202) + ((0.0119022187f * fTemp396) + ((0.0295724366f * fTemp485) + ((0.0196234025f * fTemp488) + (0.0305490289f * fTemp487)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00241096225f * fTemp277)) + (0.0019226661f * fTemp1)))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.001617481f * (fTemp1 + (fTemp101 + fTemp269))) + ((0.00167851802f * (fTemp513 + (fTemp56 - fTemp270))) + ((0.00149540696f * (fTemp242 - (fTemp102 + (fTemp424 - fTemp146)))) + ((0.000915555283f * (fTemp244 + (fTemp247 + (fTemp491 + fTemp147)))) + ((0.00198370311f * (fTemp26 - fTemp251)) + ((0.000793481246f * (fTemp97 - fTemp265)) + ((0.000396740623f * (fTemp382 + fTemp255)) + ((0.00137333293f * (fTemp108 + fTemp276)) + ((0.000610370189f * (fTemp306 + fTemp283)) + ((0.000457777642f * (fTemp505 - fTemp291)) + ((0.00140385143f * (fTemp284 - (fTemp90 - (fTemp420 - fTemp405)))) + ((0.00302133244f * (fTemp324 - (fTemp379 - fTemp374))) + ((0.00265511032f * (fTemp310 + (fTemp177 - fTemp258))) + ((0.0028992584f * (fTemp166 + fTemp332)) + ((9.15555283e-05f * (fTemp339 - (fTemp32 - (fTemp211 + (fTemp503 + fTemp561))))) + ((0.00335703604f * (fTemp262 + (fTemp15 - fTemp322))) + ((0.00701925717f * (fTemp34 - (fTemp381 - fTemp79))) + ((0.00793481246f * (fTemp253 - (fTemp207 + fTemp407))) + ((0.0019226661f * (fTemp21 + fTemp45)) + ((0.00943021942f * (fTemp62 + fTemp47)) + ((0.00122074038f * (fTemp27 + fTemp51)) + ((0.000885036774f * (fTemp54 - (fTemp93 - fTemp312))) + ((0.00134281442f * (fTemp60 - fTemp562)) + ((0.00399792474f * (fTemp366 + fTemp33)) + ((0.0105899228f * (fTemp124 + fTemp55)) + ((0.014435255f * fTemp563) + ((0.0125736259f * (fTemp118 + fTemp2)) + ((0.00222785119f * (fTemp145 + fTemp347)) + ((0.00787377544f * (fTemp293 - (fTemp335 - fTemp46))) + ((0.00189214759f * (fTemp96 - (fTemp98 - fTemp148))) + ((0.00247199927f * (fTemp129 + fTemp76)) + ((0.00448622089f * (fTemp159 - (fTemp274 - fTemp298))) + ((0.00415051728f * (fTemp115 - fTemp352)) + ((0.000854518265f * (fTemp30 + fTemp50)) + ((0.000823999755f * (fTemp132 - (fTemp12 - (fTemp492 - fTemp406)))) + ((0.000305185094f * (fTemp133 - (fTemp13 + (fTemp299 - (fTemp380 + fTemp544))))) + ((0.00228888821f * (fTemp422 + fTemp137)) + ((0.00347911008f * (fTemp53 - (fTemp425 - fTemp359))) + ((0.00213629566f * (fTemp353 - (fTemp475 + fTemp128))) + ((0.00201422162f * (fTemp355 + fTemp142)) + ((0.0035401471f * (fTemp94 + fTemp172)) + ((0.00494399853f * (fTemp103 + (fTemp150 - (fTemp360 + fTemp329)))) + ((0.00497451704f * (fTemp288 + fTemp267)) + ((0.000518814661f * (fTemp209 + fTemp313)) + ((0.000946073793f * (fTemp40 + (fTemp423 - fTemp356))) + ((0.00552385021f * (fTemp300 - fTemp39)) + ((0.000152592547f * (fTemp369 + (fTemp226 + (fTemp240 + (fTemp239 + (fTemp236 + (fTemp232 + fTemp235))))))) + ((6.10370189e-05f * (fTemp487 + (fTemp225 + fTemp564))) + ((0.000183111057f * (fTemp213 + (fTemp496 + (fTemp498 + (fTemp500 + (fTemp22 + (fTemp504 + (fTemp227 + (fTemp234 + (fTemp511 + fTemp233)))))))))) + ((0.000274666585f * (fTemp214 + fTemp565)) + ((0.00131229591f * fTemp261) + ((0.00433362834f * fTemp292) + ((0.00537125766f * fTemp331) + ((0.00509659108f * fTemp278) + ((0.00430310983f * fTemp285) + ((0.00238044374f * fTemp518) + ((0.00396740623f * fTemp7) + ((0.00531022064f * fTemp337) + ((0.00665303506f * fTemp11) + ((0.00604266487f * fTemp14) + ((0.00442518387f * fTemp18) + ((0.00231940672f * fTemp19) + ((0.00143436994f * fTemp256) + ((0.00521866512f * fTemp319) + ((0.008087405f * fTemp279) + ((0.00634784997f * fTemp264) + ((0.00698873866f * fTemp280) + ((0.0132145146f * fTemp266) + ((0.0123294778f * fTemp252) + ((0.00598162785f * fTemp321) + ((0.00241096225f * fTemp307) + ((0.00589007232f * fTemp68) + ((0.00811792351f * fTemp69) + ((0.013000885f * fTemp61) + ((0.00210577715f * fTemp155) + ((0.00445570238f * fTemp157) + ((0.00573747978f * fTemp72) + ((0.00656147953f * fTemp75) + ((0.00744651631f * fTemp349) + ((0.00830103457f * fTemp83) + (fTemp566 + ((0.00704977568f * fTemp271) + ((0.00503555406f * fTemp88) + ((0.00659199804f * fTemp160) + ((0.00918607134f * fTemp109) + ((0.00897244178f * fTemp323) + ((0.00695822015f * fTemp287) + ((0.00955229346f * fTemp113) + ((0.012817774f * fTemp117) + ((0.0170903653f * fTemp161) + ((0.0243537705f * fTemp163) + ((0.024445327f * fTemp164) + ((0.0213019196f * fTemp44) + ((0.0148319956f * fTemp350) + (fTemp567 + ((0.00833155308f * fTemp363) + ((0.0136417737f * fTemp167) + ((0.0173650328f * fTemp63) + ((0.0177312549f * fTemp74) + ((0.0147099216f * fTemp400) + ((0.00848414563f * fTemp401) + ((0.0054933317f * fTemp20) + ((0.0129703665f * fTemp125) + ((0.0126651814f * fTemp123) + ((0.0108645894f * fTemp365) + ((0.00799584948f * fTemp170) + ((0.00491348002f * fTemp78) + ((0.000701925717f * fTemp341) + ((0.00369273964f * fTemp10) + ((0.00253303628f * fTemp140) + ((0.0019531846f * fTemp84) + ((0.00280770287f * fTemp275) + ((0.00393688772f * fTemp104) + (fTemp568 + ((0.00463881344f * fTemp402) + ((0.00479140598f * fTemp358) + ((0.00381481368f * fTemp257) + ((0.00317392498f * fTemp6) + ((0.000427259132f * fTemp372) + ((0.00250251777f * fTemp144) + ((0.00332651753f * fTemp354) + ((0.00109866634f * fTemp263) + ((0.0022583697f * fTemp171) + ((0.00506607257f * fTemp85) + ((0.00473036896f * fTemp282) + ((0.00106814783f * fTemp114) + (fTemp569 + ((0.00054933317f * fTemp327) + ((0.003234962f * fTemp384) + ((0.00146488845f * fTemp421) + ((0.00262459181f * fTemp95) + ((0.0038758507f * fTemp89) + ((0.0143742179f * fTemp116) + ((0.00271614734f * fTemp362) + ((0.0134281442f * fTemp456) + ((0.027558215f * fTemp457) + ((0.0381481387f * fTemp364) + ((0.0308847316f * fTemp394) + ((0.00796533097f * fTemp458) + ((0.0740989447f * fTemp465) + ((0.0536515415f * fTemp466) + ((0.00885036774f * fTemp467) + ((0.0156865139f * fTemp185) + ((0.0409253202f * fTemp186) + ((0.0607318357f * fTemp187) + ((0.0825525671f * fTemp188) + ((0.113315225f * fTemp189) + ((0.099276714f * fTemp151) + ((0.0780968666f * fTemp190) + ((0.0349131748f * fTemp191) + ((0.0534073934f * fTemp469) + ((0.13788262f * fTemp154) + ((0.114566483f * fTemp470) + ((0.0435804315f * fTemp346) + ((0.00622577593f * fTemp476) + ((0.0891445652f * fTemp478) + ((0.177068397f * fTemp479) + ((0.254463345f * fTemp480) + ((0.218726158f * fTemp481) + ((0.0154423658f * fTemp201) + ((0.215521708f * fTemp482) + ((0.74132514f * fTemp397) + (fTemp483 + ((0.847987294f * fTemp484) + ((0.437482834f * fTemp396) + ((0.12625508f * fTemp485) + ((0.000671407208f * fTemp490) + (0.0220954008f * fTemp486)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((3.05185094e-05f * (fTemp398 - (fTemp506 + fTemp530))) + ((0.00219733268f * (fTemp254 + (fTemp378 + fTemp348))) + ((0.00177007355f * (fTemp23 + fTemp260)) + ((0.0025940733f * (fTemp297 + (fTemp248 + fTemp315))) + ((0.00320444349f * (fTemp302 + (fTemp305 + (fTemp317 - fTemp91)))) + ((0.00338755455f * (fTemp277 - (fTemp304 + (fTemp48 - (fTemp334 - fTemp67))))) + ((0.00268562883f * (fTemp268 + fTemp309)) + ((0.000213629566f * (fTemp318 - (fTemp259 - (fTemp418 - (fTemp493 + (fTemp495 + (fTemp497 + (fTemp501 + (fTemp219 + (fTemp502 + fTemp571)))))))))) + ((0.00518814661f * (fTemp243 - fTemp330)) + ((0.00628681295f * (fTemp351 - fTemp8)) + ((0.00314340647f * (fTemp24 + (fTemp290 - fTemp156))) + ((0.00350962859f * (fTemp25 - (fTemp80 - fTemp311))) + ((0.000244148076f * (fTemp333 - (fTemp210 + (fTemp221 + (fTemp223 + (fTemp228 + fTemp224)))))) + ((0.00326548051f * (fTemp343 - fTemp286)) + ((0.000335703604f * (fTemp325 + (fTemp38 - (fTemp273 + (fTemp134 + fTemp572))))) + ((0.0112308115f * (fTemp178 - fTemp320)) + ((0.00592059083f * (fTemp375 - fTemp303)) + ((0.00857570115f * (fTemp136 - fTemp105)) + ((0.00738547929f * (fTemp403 - fTemp110)) + ((0.00781273842f * (fTemp412 - fTemp71)) + ((0.0213934761f * (fTemp432 - fTemp119)) + ((0.00360118411f * (fTemp122 + fTemp3)) + ((0.00173955504f * (fTemp165 + (fTemp208 + fTemp59))) + ((0.00119022187f * (fTemp100 - fTemp326)) + ((0.00460829493f * (fTemp64 - fTemp173)) + ((0.000122074038f * (fTemp57 - (fTemp135 + (fTemp212 + (fTemp512 + (fTemp238 + (fTemp237 + (fTemp231 + (fTemp229 + fTemp230))))))))) + ((0.00125125889f * (fTemp9 + fTemp314)) + ((0.00405896176f * (fTemp107 + fTemp361)) + ((0.00112918485f * (fTemp139 - fTemp92)) + ((0.00256355479f * (fTemp377 + fTemp336)) + ((0.00720236823f * (fTemp81 + fTemp516)) + ((0.0191961434f * (fTemp442 + fTemp438)) + ((0.0491958372f * (fTemp196 - fTemp393)) + ((0.037446212f * (fTemp153 + fTemp197)) + ((((0.00305185094f * fTemp28) + ((0.00186162908f * fTemp31) + (fTemp573 + ((0.00482192449f * fTemp37) + ((0.00234992523f * fTemp41) + ((0.00100711081f * fTemp357) + ((0.00329599902f * fTemp272) + ((0.0045167394f * fTemp519) + ((0.00949125644f * fTemp168) + ((0.0152592547f * fTemp169) + ((0.0147709586f * fTemp73) + ((0.00909451582f * fTemp120) + ((0.00366222113f * fTemp29) + ((0.00418103579f * fTemp126) + ((0.00390636921f * fTemp5) + ((0.00152592547f * fTemp316) + ((0.00756859034f * fTemp82) + ((0.00595110934f * fTemp404) + ((0.00299081393f * fTemp127) + ((0.00717184972f * fTemp70) + ((0.00790429395f * fTemp371) + ((0.00845362712f * fTemp42) + ((0.00878933072f * fTemp514) + (fTemp574 + ((0.00155644398f * fTemp49) + ((0.00183111057f * fTemp130) + ((0.000640888698f * fTemp289) + ((0.00216681417f * fTemp99) + ((0.00454725791f * fTemp301) + ((0.00619525742f * fTemp281) + ((0.00735496078f * fTemp138) + ((0.00900296029f * fTemp408) + ((0.0101016266f * fTemp52) + ((0.0100405896f * fTemp66) + ((0.00958281197f * fTemp250) + ((0.00924710836f * fTemp4) + ((0.0101931822f * fTemp87) + ((0.0119937742f * fTemp383) + ((0.0130924406f * fTemp409) + ((0.0131839961f * fTemp410) + ((0.01126133f * fTemp386) + ((0.00836207159f * fTemp388) + ((0.00637836847f * fTemp411) + ((0.0131534776f * fTemp413) + ((0.0185552537f * fTemp414) + ((0.0207831059f * fTemp390) + ((0.017914366f * fTemp415) + ((0.0131229591f * fTemp416) + ((0.00875881221f * fTemp417) + ((0.00692770164f * fTemp342) + (fTemp575 + ((0.00180059206f * fTemp515) + ((0.00375377666f * fTemp149) + ((0.00469985045f * fTemp65) + ((0.00411999878f * fTemp106) + ((0.00601214636f * fTemp426) + ((0.0107119968f * fTemp17) + ((0.0144657735f * fTemp338) + ((0.0165410321f * fTemp427) + ((0.0167546626f * fTemp428) + ((0.01617481f * fTemp429) + ((0.0153813288f * fTemp430) + ((0.0169682913f * fTemp431) + ((0.0285653248f * fTemp433) + ((0.0379039906f * fTemp434) + ((0.0429090261f * fTemp435) + ((0.040742211f * fTemp436) + ((0.0318918414f * fTemp437) + ((0.0103457747f * fTemp439) + ((0.009704886f * fTemp344) + ((0.0121158483f * fTemp111) + ((0.0126346629f * fTemp294) + ((0.0128482925f * fTemp440) + ((0.0118717002f * fTemp392) + ((0.0146488845f * fTemp441) + ((0.0276497696f * fTemp443) + ((0.0325022116f * fTemp522) + ((0.0343638435f * fTemp175) + ((0.0262764376f * fTemp176) + ((0.0204168838f * fTemp328) + ((0.0155339213f * fTemp444) + ((0.00863673817f * fTemp445) + ((0.021332439f * fTemp249) + ((0.0238349568f * fTemp387) + ((0.0162663665f * fTemp446) + ((0.016113773f * fTemp447) + ((0.022766808f * fTemp448) + ((0.0343028046f * fTemp77) + ((0.0405285805f * fTemp179) + ((0.0403759889f * fTemp180) + ((0.0289620664f * fTemp376) + ((0.0139774773f * fTemp449) + ((0.0141300699f * fTemp450) + ((0.0351573229f * fTemp451) + ((0.0540177636f * fTemp452) + ((0.0541093163f * fTemp385) + ((0.0364085808f * fTemp373) + ((0.0140995514f * fTemp121) + ((0.00372325815f * fTemp454) + ((0.00686666463f * fTemp455) + ((0.004852443f * fTemp152) + ((0.0315256193f * fTemp459) + ((0.0854518265f * fTemp460) + ((0.13486129f * fTemp461) + ((0.156315804f * fTemp462) + ((0.139866322f * fTemp463) + ((0.0901821926f * fTemp464) + ((0.0150761437f * fTemp389) + ((0.042542804f * fTemp468) + ((0.081667535f * fTemp368) + ((0.0917996764f * fTemp181) + ((0.0952482671f * fTemp86) + ((0.0933256f * fTemp367) + ((0.0890530124f * fTemp141) + ((0.0676290169f * fTemp182) + ((0.0458693206f * fTemp183) + ((0.0183416251f * fTemp184) + ((0.041993469f * fTemp192) + ((0.117923521f * fTemp193) + ((0.14108707f * fTemp194) + ((0.11236915f * fTemp195) + ((0.055238504f * fTemp471) + ((0.108584858f * fTemp472) + ((0.121127963f * fTemp473) + ((0.0617999807f * fTemp474) + ((0.131931514f * fTemp198) + ((0.146458328f * fTemp199) + ((0.175420389f * fTemp200) + ((0.100619525f * fTemp58) + ((0.0486770235f * fTemp477) + ((0.285836369f * fTemp202) + ((0.575518072f * fTemp203) + ((0.592089593f * fTemp204) + ((0.319528788f * fTemp35) + ((0.0219122898f * fTemp488) + ((0.0357371755f * fTemp489) + ((0.0183721427f * fTemp206) + (0.0297555476f * fTemp205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00158696249f * fTemp296)) + (0.00115970336f * fTemp245))))))))))))))))))))))))))))))))))))))) : (iSlow5 ? (iSlow9 ? (((0.000946073793f * (fTemp1 + (fTemp266 - (fTemp68 + (fTemp49 + fTemp128))))) + ((0.000885036774f * (fTemp513 + (fTemp7 + (fTemp252 - (fTemp69 + (fTemp91 - (fTemp105 + (fTemp164 - (fTemp258 + fTemp13))))))))) + ((0.000854518265f * (fTemp242 - (fTemp112 + fTemp259))) + ((0.000823999755f * (fTemp244 + (fTemp265 - (fTemp55 + (fTemp274 + (fTemp87 + fTemp351)))))) + ((0.000732444227f * (fTemp398 + (fTemp31 + (fTemp2 - (fTemp96 - (fTemp399 - (fTemp352 + fTemp552))))))) + ((0.000671407208f * (fTemp245 + (fTemp318 + (fTemp14 - (fTemp61 + (fTemp403 - (fTemp336 - fTemp384))))))) + ((0.000610370189f * (fTemp251 + (fTemp254 + (fTemp324 - (fTemp312 - (fTemp75 - (fTemp166 + (fTemp59 + fTemp142)))))))) + ((0.000701925717f * (fTemp260 + (fTemp284 + (fTemp109 - (fTemp322 + (fTemp97 + fTemp165)))))) + ((0.000976592302f * (fTemp255 + (fTemp333 - (fTemp267 - (fTemp426 - fTemp356))))) + ((0.000915555283f * (fTemp261 - (fTemp60 + (fTemp293 - (fTemp350 - (fTemp131 + (fTemp57 + (fTemp442 - fTemp138)))))))) + ((0.000762962736f * (fTemp269 + (fTemp320 + (fTemp47 + (fTemp160 - (fTemp3 + (fTemp354 + (fTemp313 + (fTemp317 + (fTemp82 + (fTemp243 + (fTemp421 - fTemp409)))))))))))) + ((0.00057985168f * (fTemp276 + (fTemp264 - (fTemp348 - (fTemp432 + fTemp515))))) + ((0.000396740623f * (fTemp283 + (fTemp286 + (fTemp21 - (fTemp345 - (fTemp159 + (fTemp323 - (fTemp404 + fTemp263)))))))) + ((0.000274666585f * (fTemp291 + (fTemp305 + (fTemp330 - (fTemp339 + (fTemp268 + (fTemp120 + (fTemp80 - (fTemp372 + fTemp553))))))))) + ((0.000122074038f * (fTemp296 + (fTemp246 + (fTemp125 - (fTemp365 + (fTemp78 + (fTemp247 - (fTemp84 - (fTemp53 + (fTemp248 + (fTemp149 - (fTemp198 + (fTemp199 + (fTemp477 + (fTemp478 + (fTemp480 + fTemp479)))))))))))))))) + ((9.15555283e-05f * (fTemp297 + (fTemp302 + (fTemp79 - (fTemp76 + (fTemp102 - (fTemp27 + (fTemp50 - (fTemp341 + (fTemp140 - (fTemp56 - (fTemp358 - (fTemp298 + (fTemp134 - (fTemp361 + (fTemp127 - (fTemp99 - (fTemp81 - (fTemp507 + fTemp35))))))))))))))))))) + ((0.000152592547f * (fTemp277 - (fTemp278 - (fTemp18 - (fTemp23 - (fTemp37 - (fTemp119 + (fTemp400 - (fTemp124 - (fTemp170 + (fTemp273 + (fTemp133 + (fTemp306 + (fTemp380 + (fTemp100 - (fTemp200 + (fTemp481 + (fTemp202 + (fTemp204 + fTemp203))))))))))))))))))) + ((0.000427259132f * (fTemp309 - (fTemp349 - (fTemp353 - (fTemp167 + (fTemp5 + (fTemp386 - fTemp410))))))) + ((0.00054933317f * (fTemp270 - (fTemp310 - (fTemp280 + (fTemp48 - (fTemp272 - (fTemp470 - fTemp173))))))) + ((0.000457777642f * (fTemp292 - (fTemp101 + (fTemp366 + (fTemp370 + (fTemp407 + fTemp108)))))) + ((6.10370189e-05f * (fTemp331 + (fTemp357 + (fTemp20 + (fTemp275 - (fTemp381 - (fTemp482 - (fTemp485 - (fTemp217 - (fTemp500 - (fTemp223 + (fTemp224 + (fTemp22 + (fTemp502 + (fTemp503 + (fTemp241 + (fTemp16 + (fTemp229 + (fTemp510 + (fTemp508 + fTemp554)))))))))))))))))))) + ((0.000213629566f * (fTemp332 - (fTemp19 + (fTemp74 + (fTemp38 - (fTemp6 - (fTemp26 - fTemp146))))))) + ((0.00152592547f * (fTemp424 + fTemp8)) + ((3.05185094e-05f * (fTemp24 - (fTemp46 + (fTemp123 + (fTemp129 - (fTemp132 - (fTemp197 + (fTemp484 + (fTemp486 + (fTemp487 + (fTemp488 + (fTemp489 + (fTemp153 + (fTemp205 + (fTemp206 + (fTemp208 + (fTemp490 - (fTemp210 - (fTemp213 - (fTemp218 + (fTemp493 + (fTemp495 - (fTemp498 + (fTemp499 + (fTemp501 + (fTemp219 + (fTemp220 - (fTemp222 + (fTemp504 - (fTemp512 + (fTemp225 + (fTemp226 + (fTemp227 - (fTemp228 + (fTemp391 - (fTemp237 + (fTemp236 + (fTemp235 + (fTemp234 + (fTemp233 - fTemp535)))))))))))))))))))))))))))))))))))))))) + ((0.000244148076f * (fTemp25 + (fTemp311 - (fTemp300 - fTemp30)))) + ((0.000488296151f * (fTemp28 - (fTemp326 + (fTemp427 + fTemp315)))) + ((0.00112918485f * (fTemp256 + (fTemp294 - fTemp405))) + ((0.00115970336f * (fTemp262 + (fTemp34 - (fTemp40 + fTemp555)))) + ((0.00122074038f * (fTemp319 - (fTemp83 + (fTemp359 + (fTemp148 + (fTemp15 + fTemp514)))))) + ((0.00100711081f * (fTemp279 + (fTemp72 - (fTemp161 - (fTemp44 - (fTemp335 + fTemp316)))))) + ((0.000793481246f * (fTemp253 - (fTemp519 + (fTemp103 + (fTemp147 + (fTemp334 + fTemp12)))))) + ((0.000183111057f * (fTemp340 + (fTemp41 + (fTemp51 - (fTemp54 + (fTemp401 + (fTemp137 - (fTemp257 + (fTemp145 - (fTemp29 + (fTemp126 + (fTemp107 - (fTemp201 + fTemp58))))))))))))) + ((0.000640888698f * (fTemp321 - fTemp556)) + ((0.00173955504f * fTemp557) + ((0.00131229591f * (fTemp157 - (fTemp42 + fTemp43))) + ((0.00350962859f * (fTemp522 - fTemp122)) + ((0.00335703604f * (fTemp467 - fTemp360)) + ((0.00381481368f * (fTemp176 - fTemp89)) + ((0.00488296151f * (fTemp362 + fTemp430)) + ((0.00668355357f * (fTemp121 - fTemp434)) + ((0.00332651753f * (fTemp344 - (fTemp182 + fTemp441))) + ((0.00369273964f * (fTemp185 + fTemp328)) + ((0.00155644398f * fTemp156) + ((0.00149540696f * fTemp281) + ((0.00210577715f * fTemp425) + ((0.00375377666f * fTemp429) + ((0.00396740623f * fTemp431) + ((0.00384533219f * fTemp111) + ((0.00341807306f * fTemp175) + ((0.0042115543f * fTemp444) + ((0.00314340647f * fTemp445) + ((0.00814844202f * fTemp446) + ((0.0137028107f * fTemp447) + ((0.0104678487f * fTemp448) + ((0.0154423658f * fTemp453) + ((0.0154728843f * fTemp454) + ((0.0122074038f * fTemp455) + ((0.00473036896f * fTemp152) + ((0.00512710959f * fTemp456) + ((0.00784325693f * fTemp457) + ((0.00753807183f * fTemp364) + ((0.0176091809f * fTemp463) + ((0.0143436994f * fTemp464) + ((0.0061342204f * fTemp389) + ((0.00344859157f * fTemp184) + ((0.0166325886f * fTemp186) + ((0.021332439f * fTemp187) + ((0.01126133f * fTemp188) + ((0.0144657735f * fTemp192) + ((0.120273449f * fTemp193) + ((0.168919951f * fTemp194) + ((0.140965f * fTemp195) + ((0.0722983479f * fTemp196) + ((0.00393688772f * fTemp154) + (0.0210577715f * fTemp469))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((0.000305185094f * (fTemp285 - (fTemp325 + (fTemp45 - (fTemp168 + (fTemp10 + (fTemp402 + (fTemp295 - (fTemp516 - (fTemp394 + fTemp17)))))))))) + ((0.000518814661f * (fTemp304 + (fTemp110 - (fTemp163 - (fTemp423 + fTemp363))))) + ((0.000366222113f * (fTemp518 + (fTemp169 + (fTemp73 - fTemp558)))) + ((0.00143436994f * (fTemp388 - fTemp337)) + ((0.00119022187f * (fTemp136 - fTemp11)) + ((0.00106814783f * (fTemp307 + (fTemp88 + (fTemp288 + (fTemp85 + (fTemp408 + fTemp32)))))) + ((0.00103762932f * (fTemp33 + (fTemp150 + (fTemp299 + fTemp90)))) + ((0.0012817774f * (fTemp475 - fTemp62)) + ((0.00164799951f * (fTemp71 - fTemp303)) + ((0.00167851802f * (fTemp130 - fTemp347)) + ((0.00125125889f * (fTemp271 - (fTemp379 + (fTemp462 + fTemp428)))) + ((0.00109866634f * (fTemp287 + (fTemp282 + (fTemp114 + (fTemp338 + fTemp375))))) + ((0.0019226661f * (fTemp4 + fTemp113)) + ((0.000335703604f * (fTemp63 + (fTemp115 + (fTemp104 + (fTemp290 + (fTemp476 + fTemp343)))))) + ((0.00137333293f * (fTemp70 - (fTemp77 - fTemp329))) + ((0.00286873989f * (fTemp139 + fTemp98)) + ((0.001617481f * (fTemp355 - (fTemp443 + fTemp301))) + ((0.00262459181f * (fTemp414 + fTemp66)) + ((0.00271614734f * (fTemp36 + fTemp250)) + ((0.00265511032f * (fTemp422 + fTemp417)) + ((0.00372325815f * fTemp559) + ((0.0038758507f * (fTemp387 + fTemp392)) + ((0.014679403f * (fTemp461 + fTemp450)) + ((0.00170903653f * fTemp117) + ((0.00140385143f * fTemp371) + ((0.00241096225f * fTemp378) + ((0.00250251777f * fTemp289) + ((0.00222785119f * fTemp93) + ((0.00204474013f * fTemp9) + ((0.0019531846f * fTemp406) + ((0.00186162908f * fTemp382) + ((0.00201422162f * fTemp52) + ((0.0022583697f * fTemp411) + ((0.00274666585f * fTemp412) + ((0.00268562883f * fTemp413) + ((0.00296029542f * fTemp390) + ((0.00302133244f * fTemp415) + ((0.0028992584f * fTemp416) + ((0.00228888821f * fTemp342) + ((0.003234962f * fTemp39) + ((0.00311288796f * fTemp418) + ((0.00213629566f * fTemp420) + ((0.00256355479f * fTemp65) + ((0.00347911008f * fTemp106) + (fTemp560 + ((0.00405896176f * fTemp95) + ((0.00390636921f * fTemp94) + ((0.00674459059f * fTemp435) + ((0.00610370189f * fTemp436) + ((0.00622577593f * fTemp437) + ((0.00631733146f * fTemp438) + ((0.00457777642f * fTemp439) + ((0.00198370311f * fTemp440) + ((0.00604266487f * fTemp116) + ((0.0141911069f * fTemp118) + ((0.0205084383f * fTemp177) + ((0.0216986611f * fTemp178) + ((0.0152287362f * fTemp249) + ((0.00823999755f * fTemp179) + ((0.0122379223f * fTemp180) + ((0.0127567369f * fTemp376) + ((0.0115665151f * fTemp449) + ((0.0189825129f * fTemp451) + ((0.0212408826f * fTemp452) + ((0.0166631062f * fTemp385) + ((0.00576799829f * fTemp373) + ((0.0118411817f * fTemp458) + ((0.0238349568f * fTemp459) + ((0.0250862148f * fTemp460) + ((0.00900296029f * fTemp393) + ((0.00698873866f * fTemp465) + ((0.00637836847f * fTemp466) + ((0.00244148076f * fTemp468) + ((0.0090334788f * fTemp368) + ((0.0151676992f * fTemp181) + ((0.0219428092f * fTemp86) + ((0.012939848f * fTemp367) + ((0.0163884405f * fTemp141) + ((0.00885036774f * fTemp183) + ((0.0188909583f * fTemp189) + ((0.0757469386f * fTemp151) + ((0.103274636f * fTemp190) + ((0.0802636817f * fTemp191) + ((0.00320444349f * fTemp346) + ((0.00567644276f * fTemp471) + ((0.00628681295f * fTemp472) + ((0.00299081393f * fTemp474) + (0.00500503555f * fTemp473))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) : (((0.000122074038f * (fTemp41 - (fTemp357 - fTemp280))) + ((6.10370189e-05f * (fTemp71 - (fTemp168 - (fTemp169 + (fTemp78 + (fTemp27 + (fTemp95 - (fTemp210 + fTemp491)))))))) + ((0.00106814783f * (fTemp363 - fTemp119)) + ((0.00103762932f * (fTemp165 + (fTemp316 + (fTemp248 + fTemp82)))) + ((0.00109866634f * (fTemp149 + fTemp166)) + ((3.05185094e-05f * (fTemp74 + (fTemp129 + (fTemp364 - (fTemp211 + (fTemp214 + (fTemp216 + (fTemp217 + (fTemp218 + (fTemp496 + (fTemp498 + (fTemp499 + (fTemp501 + (fTemp219 + (fTemp222 + (fTemp223 + (fTemp224 + (fTemp503 + (fTemp505 + (fTemp225 + (fTemp226 - (fTemp227 - (fTemp241 + (fTemp16 + (fTemp239 + (fTemp238 + (fTemp235 + (fTemp506 + fTemp231)))))))))))))))))))))))))))) + ((0.001617481f * (fTemp20 + (fTemp414 - (fTemp362 - fTemp176)))) + ((0.00146488845f * (fTemp124 + (fTemp439 + fTemp409))) + ((9.15555283e-05f * (fTemp170 + (fTemp135 - (fTemp209 + fTemp492)))) + ((0.00125125889f * (fTemp274 + (fTemp425 + (fTemp294 + fTemp431)))) + ((0.00158696249f * (fTemp410 + fTemp548)) + ((0.00180059206f * (fTemp416 + fTemp386)) + ((0.00189214759f * (fTemp411 - (fTemp394 - fTemp390))) + ((0.00164799951f * (fTemp412 + (fTemp432 + fTemp430))) + ((0.00201422162f * (fTemp433 + fTemp415)) + ((0.00167851802f * (fTemp121 + fTemp426)) + ((0.00219733268f * (fTemp438 + fTemp17)) + ((0.00280770287f * fTemp549) + ((0.00262459181f * (fTemp428 + (fTemp460 + fTemp434))) + ((0.00274666585f * fTemp550) + ((0.00311288796f * (fTemp188 + fTemp443)) + ((0.00491348002f * (fTemp179 - fTemp387)) + ((0.00524918362f * (fTemp189 - fTemp187)) + ((0.00134281442f * fTemp102) + ((0.00122074038f * fTemp380) + ((0.00186162908f * fTemp388) + ((0.00152592547f * fTemp413) + ((0.00131229591f * fTemp417) + ((0.0022583697f * fTemp338) + ((0.00228888821f * fTemp437) + ((0.00204474013f * fTemp440) + ((0.00253303628f * fTemp441) + ((0.00292977691f * fTemp442) + ((0.00378429517f * fTemp522) + ((0.00170903653f * fTemp116) + ((0.00372325815f * fTemp447) + ((0.00643940549f * fTemp448) + ((0.0058290353f * fTemp77) + ((0.00521866512f * fTemp180) + ((0.00552385021f * fTemp376) + ((0.00381481368f * fTemp449) + ((0.00860621966f * fTemp461) + ((0.0137943663f * fTemp462) + ((0.0159306619f * fTemp463) + ((0.011322367f * fTemp464) + ((0.00317392498f * fTemp389) + ((0.00497451704f * fTemp468) + ((0.0101931822f * fTemp368) + ((0.0115665151f * fTemp181) + ((0.0125125889f * fTemp86) + ((0.0149235511f * fTemp367) + ((0.0157780703f * fTemp141) + ((0.013061922f * fTemp182) + ((0.00308236945f * fTemp183) + ((0.0119937742f * fTemp194) + ((0.0289010294f * fTemp195) + ((0.0251472518f * fTemp196) + ((0.0110782189f * fTemp469) + ((0.0186162908f * fTemp472) + ((0.0190740693f * fTemp473) + ((0.019287698f * fTemp474) + ((0.00350962859f * fTemp476) + ((0.00469985045f * fTemp200) + ((0.00976592302f * fTemp58) + ((0.0122379223f * fTemp477) + ((0.0191656239f * fTemp478) + ((0.00958281197f * fTemp479) + ((0.00973540451f * fTemp480) + ((0.00967436749f * fTemp203) + ((0.0628986508f * fTemp204) + ((0.090578936f * fTemp35) + ((0.0614947975f * fTemp482) + ((0.00433362834f * fTemp153) + (fTemp551 + ((0.00183111057f * fTemp207) + (0.00326548051f * fTemp206)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - ((((0.00054933317f * (fTemp398 + (fTemp23 + (fTemp293 - (fTemp123 + (fTemp366 + (fTemp298 + (fTemp147 + (fTemp57 + (fTemp327 + fTemp49)))))))))) + ((0.00057985168f * (fTemp245 + (fTemp254 + (fTemp319 - (fTemp272 + (fTemp341 + (fTemp104 + (fTemp370 + (fTemp148 + (fTemp334 + (fTemp384 + (fTemp450 + fTemp336)))))))))))) + ((0.000640888698f * (fTemp251 + (fTemp156 - (fTemp105 + (fTemp53 + (fTemp134 + (fTemp103 + (fTemp313 + (fTemp259 + (fTemp348 + (fTemp126 + (fTemp136 + (fTemp243 + (fTemp407 + (fTemp66 + (fTemp208 - fTemp423)))))))))))))))) + ((0.000457777642f * (fTemp260 + (fTemp24 + (fTemp256 - (fTemp76 + (fTemp323 - (fTemp353 - (fTemp63 + (fTemp326 + (fTemp59 + (fTemp70 + (fTemp32 + (fTemp36 + fTemp87))))))))))))) + ((0.000366222113f * (fTemp265 + (fTemp286 - (fTemp287 + (fTemp132 + (fTemp40 - (fTemp475 - fTemp382))))))) + ((0.000244148076f * (fTemp255 - (fTemp45 - (fTemp75 + (fTemp79 - (fTemp268 + (fTemp365 + (fTemp108 + (fTemp85 + (fTemp15 + (fTemp301 + (fTemp456 + fTemp445)))))))))))) + ((0.000274666585f * (fTemp261 + (fTemp305 + (fTemp309 + (fTemp340 + (fTemp320 - (fTemp12 + (fTemp139 + (fTemp344 + fTemp379))))))))) + ((0.000305185094f * (fTemp269 + (fTemp296 + (fTemp270 + (fTemp325 + (fTemp311 + (fTemp54 + (fTemp400 - (fTemp250 + fTemp314))))))))) + ((0.000427259132f * (fTemp276 + (fTemp283 + (fTemp25 + (fTemp31 + (fTemp333 + (fTemp60 + (fTemp96 - (fTemp6 + (fTemp306 + (fTemp142 + (fTemp267 + (fTemp111 + fTemp378))))))))))))) + ((0.000396740623f * (fTemp291 + (fTemp318 + (fTemp28 - (fTemp263 + (fTemp295 + (fTemp282 + (fTemp13 + (fTemp92 - (fTemp122 + (fTemp452 + fTemp444))))))))))) + ((0.000213629566f * (fTemp297 + (fTemp38 - (fTemp50 + (fTemp354 + (fTemp288 + (fTemp424 + fTemp98))))))) + ((0.000183111057f * (fTemp302 + (fTemp277 - (fTemp144 + (fTemp4 + fTemp150))))) + ((0.000671407208f * (fTemp324 + (fTemp339 + (fTemp83 + (fTemp91 + (fTemp399 - (fTemp146 + (fTemp361 + (fTemp5 + (fTemp317 + (fTemp408 + fTemp112))))))))))) + ((0.000854518265f * (fTemp292 + (fTemp330 + (fTemp14 + (fTemp62 - (fTemp115 + (fTemp64 + (fTemp299 + (fTemp516 + (fTemp329 - fTemp420)))))))))) + ((0.000823999755f * (fTemp331 + (fTemp7 + (fTemp69 + (fTemp303 + (fTemp271 + (fTemp88 + (fTemp350 - (fTemp120 + (fTemp273 + (fTemp403 + (fTemp93 + (fTemp65 - fTemp418))))))))))))) + ((0.000732444227f * (fTemp278 + (fTemp285 + (fTemp337 + (fTemp8 + (fTemp48 + (fTemp68 + (fTemp155 + (fTemp347 - (fTemp159 + (fTemp56 + (fTemp173 + fTemp275)))))))))))) + ((0.000762962736f * (fTemp304 + (fTemp11 + (fTemp43 - (fTemp160 - (fTemp117 - (fTemp140 + (fTemp84 + (fTemp372 + (fTemp315 + (fTemp128 + (fTemp404 + (fTemp406 + (fTemp385 + fTemp138)))))))))))))) + ((0.000885036774f * (fTemp310 + (fTemp18 + (fTemp55 + (fTemp44 - (fTemp3 + (fTemp167 + (fTemp90 - (fTemp151 - fTemp381))))))))) + ((0.000915555283f * (fTemp518 + (fTemp332 + (fTemp164 - (fTemp515 + fTemp9))))) + ((0.000793481246f * (fTemp19 + (fTemp266 + (fTemp67 - (fTemp322 + (fTemp80 + (fTemp30 + (fTemp290 + (fTemp107 + (fTemp52 + (fTemp342 + (fTemp453 - fTemp446)))))))))))) + ((0.000701925717f * (fTemp34 + (fTemp279 - (fTemp172 + (fTemp29 + (fTemp335 + (fTemp81 + fTemp130))))))) + ((0.000610370189f * (fTemp253 + (fTemp33 - (fTemp402 + (fTemp358 + (fTemp97 + (fTemp375 + (fTemp457 + fTemp514)))))))) + ((0.000152592547f * (fTemp37 + (fTemp488 - fTemp355))) + ((0.00119022187f * (fTemp47 - (fTemp258 + (fTemp351 + (fTemp360 + fTemp100))))) + ((0.00100711081f * (fTemp321 + (fTemp345 + (fTemp246 + (fTemp161 + (fTemp163 - (fTemp125 + (fTemp247 + (fTemp343 + (fTemp26 + (fTemp118 + fTemp300))))))))))) + ((0.000335703604f * (fTemp51 + (fTemp312 + (fTemp72 + (fTemp349 + (fTemp113 + (fTemp401 - (fTemp73 + (fTemp369 + fTemp374))))))))) + ((0.000976592302f * (fTemp61 - (fTemp352 + (fTemp137 + (fTemp356 + (fTemp383 - (fTemp177 - fTemp530))))))) + ((0.000946073793f * (fTemp2 - (fTemp519 + (fTemp133 + (fTemp10 + (fTemp127 + (fTemp405 - (fTemp94 - fTemp99)))))))) + ((0.00143436994f * (fTemp454 + fTemp422)) + ((0.00238044374f * (fTemp487 - fTemp429)) + ((0.0025940733f * (fTemp455 - fTemp435)) + ((0.00314340647f * (fTemp152 - fTemp175)) + ((0.00216681417f * (fTemp471 - fTemp373)) + (((0.00149540696f * fTemp89) + ((0.00408948027f * fTemp178) + ((0.00573747978f * fTemp249) + ((0.00140385143f * fTemp451) + ((0.0019531846f * fTemp458) + ((0.00115970336f * fTemp459) + ((0.00729392376f * fTemp393) + ((0.0118106632f * fTemp465) + ((0.0108951079f * fTemp466) + ((0.00277718436f * fTemp467) + ((0.00717184972f * fTemp184) + ((0.014618366f * fTemp185) + ((0.0126041444f * fTemp186) + ((0.00885036774f * fTemp190) + ((0.0168767367f * fTemp191) + ((0.0166020691f * fTemp192) + ((0.0045167394f * fTemp193) + ((0.0143131809f * fTemp154) + ((0.0265205856f * fTemp470) + ((0.0197759941f * fTemp346) + ((0.0120242927f * fTemp197) + ((0.0012817774f * fTemp198) + ((0.00604266487f * fTemp199) + ((0.0161442924f * fTemp481) + ((0.0235908087f * fTemp201) + ((0.0286873989f * fTemp202) + ((0.0279854741f * fTemp397) + ((0.106448561f * fTemp483) + ((0.128330335f * fTemp484) + ((0.0896633789f * fTemp396) + ((0.00817896053f * fTemp486) + (0.0366527289f * fTemp485)))))))))))))))))))))))))))))))) + (0.00112918485f * fTemp252))))))))))))))))))))))))))))))))))) + (0.000488296151f * (fTemp513 + (fTemp242 + (fTemp264 + (fTemp21 + (fTemp157 - (fTemp110 + (fTemp257 - (fTemp421 - fTemp371)))))))))) + (0.000518814661f * (fTemp1 + (fTemp244 + (fTemp284 + (fTemp262 + (fTemp307 - (fTemp109 + (fTemp46 + (fTemp145 + (fTemp171 + (fTemp359 + (fTemp114 + (fTemp131 + (fTemp42 + (fTemp281 + fTemp289)))))))))))))))))) : (iSlow6 ? (((0.00115970336f * (fTemp276 - fTemp242)) + ((0.000122074038f * (fTemp265 - (fTemp13 + (fTemp377 + (fTemp17 - (fTemp493 + (fTemp224 + (fTemp502 + fTemp533)))))))) + ((0.000793481246f * (fTemp255 - (fTemp291 + (fTemp28 + (fTemp31 - (fTemp135 - fTemp104)))))) + ((0.000396740623f * (fTemp283 + (fTemp39 + fTemp81))) + ((0.0022583697f * (fTemp339 - fTemp296)) + ((0.00503555406f * (fTemp136 - fTemp305)) + ((0.00399792474f * (fTemp79 - fTemp270)) + ((0.00109866634f * (fTemp264 - fTemp284)) + ((0.00262459181f * (fTemp292 - (fTemp403 - fTemp290))) + ((0.00512710959f * (fTemp331 + fTemp525)) + ((0.00311288796f * (fTemp518 + (fTemp131 + fTemp63))) + ((0.00338755455f * (fTemp332 - (fTemp301 - fTemp288))) + ((0.00390636921f * (fTemp7 + (fTemp29 - fTemp73))) + ((0.00436414685f * (fTemp337 - (fTemp206 - fTemp114))) + ((0.0045167394f * fTemp534) + ((0.00418103579f * (fTemp14 + (fTemp96 + (fTemp514 - fTemp127)))) + ((0.0028992584f * (fTemp68 + fTemp19)) + ((0.000885036774f * (fTemp24 - (fTemp40 + fTemp274))) + ((0.000366222113f * (fTemp333 - (fTemp334 + fTemp56))) + ((0.0106204413f * (fTemp271 - fTemp340)) + ((0.00576799829f * (fTemp67 - fTemp41)) + ((0.00692770164f * (fTemp91 + fTemp47)) + ((0.00344859157f * (fTemp146 + fTemp321)) + ((0.000152592547f * (fTemp48 + (fTemp501 + (fTemp219 + (fTemp391 + fTemp505))))) + ((0.00219733268f * (fTemp151 - fTemp21)) + ((0.00332651753f * (fTemp412 - fTemp51)) + ((0.0154423658f * (fTemp170 + fTemp62)) + ((0.0110477004f * (fTemp77 + fTemp83)) + ((0.000823999755f * (fTemp101 + (fTemp119 + (fTemp315 + (fTemp490 + fTemp336))))) + ((0.00698873866f * (fTemp85 - fTemp160)) + ((0.00317392498f * (fTemp370 - fTemp110)) + ((0.00372325815f * (fTemp50 - fTemp161)) + ((0.0280465111f * (fTemp178 + fTemp350)) + ((0.0130314035f * (fTemp65 - fTemp352)) + ((0.00473036896f * (fTemp335 - fTemp363)) + ((0.00756859034f * (fTemp443 + fTemp123)) + ((0.00314340647f * (fTemp112 - fTemp133)) + ((0.00347911008f * (fTemp10 + (fTemp361 + fTemp80))) + ((0.00177007355f * (fTemp126 - fTemp275)) + ((0.00466933195f * (fTemp402 + (fTemp171 - (fTemp94 + fTemp384)))) + ((0.00393688772f * (fTemp356 + fTemp298)) + ((0.00329599902f * (fTemp36 + fTemp257)) + ((0.000518814661f * (fTemp313 + fTemp173)) + ((0.000335703604f * (fTemp103 + (fTemp216 - fTemp99))) + ((0.00213629566f * (fTemp426 + fTemp147)) + ((0.00589007232f * (fTemp408 - fTemp64)) + ((0.000976592302f * (fTemp425 + fTemp243)) + ((0.00341807306f * (fTemp145 + fTemp6)) + ((0.000610370189f * (fTemp491 - fTemp327)) + ((0.00561540574f * (fTemp342 + fTemp407)) + ((9.15555283e-05f * (fTemp515 + (fTemp209 + (fTemp213 + (fTemp495 + (fTemp22 + (fTemp226 + (fTemp227 + (fTemp240 + fTemp536))))))))) + ((0.0105594043f * (fTemp456 + fTemp344)) + ((0.00228888821f * fTemp537) + ((0.0375377685f * (fTemp474 - fTemp450)) + ((0.000274666585f * (fTemp220 + fTemp215)) + ((0.000183111057f * (fTemp223 + fTemp538)) + (((0.00415051728f * fTemp330) + ((0.00335703604f * fTemp310) + ((0.00448622089f * fTemp8) + ((0.00369273964f * fTemp18) + ((0.00247199927f * fTemp256) + ((0.00595110934f * fTemp319) + ((0.00643940549f * fTemp34) + ((0.00598162785f * fTemp279) + ((0.00424207281f * fTemp253) + ((0.00857570115f * fTemp320) + ((0.0103457747f * fTemp266) + ((0.00958281197f * fTemp252) + ((0.00704977568f * fTemp69) + ((0.0116580706f * fTemp55) + ((0.0158696249f * fTemp61) + ((0.0187078472f * fTemp345) + ((0.0196844395f * fTemp246) + ((0.0186162908f * fTemp2) + ((0.00720236823f * fTemp349) + ((0.00967436749f * fTemp293) + ((0.011322367f * fTemp43) + ((0.0090334788f * fTemp88) + ((0.00769066438f * fTemp163) + ((0.0156865139f * fTemp164) + ((0.0231025126f * fTemp44) + ((0.0283211768f * fTemp399) + ((0.0234076977f * fTemp353) + ((0.0140385143f * fTemp357) + ((0.00360118411f * fTemp268) + ((0.00888088625f * fTemp74) + ((0.014679403f * fTemp400) + ((0.0190435499f * fTemp401) + ((0.0198675506f * fTemp38) + ((0.0164494775f * fTemp168) + ((0.013000885f * fTemp365) + ((0.0155949583f * fTemp78) + ((0.00894192327f * fTemp27) + ((0.00103762932f * fTemp366) + ((0.00460829493f * fTemp358) + ((0.003234962f * fTemp30) + ((0.00253303628f * fTemp372) + ((0.00155644398f * fTemp374) + ((0.0074159978f * fTemp326) + ((0.00689718314f * fTemp295) + ((0.00744651631f * fTemp282) + ((0.00671407208f * fTemp359) + ((0.00564592425f * fTemp148) + ((0.00222785119f * fTemp42) + ((0.00149540696f * fTemp299) + ((0.00430310983f * fTemp405) + ((0.00274666585f * fTemp98) + ((0.004852443f * fTemp289) + ((0.00170903653f * fTemp9) + ((0.00540177617f * fTemp414) + ((0.00527970213f * fTemp390) + ((0.00625629444f * fTemp415) + ((0.00686666463f * fTemp416) + ((0.00708029419f * fTemp417) + ((0.00695822015f * fTemp149) + ((0.0115665151f * fTemp329) + (fTemp539 + ((0.00604266487f * fTemp106) + ((0.0108645894f * fTemp435) + ((0.0174260698f * fTemp436) + ((0.0167546626f * fTemp437) + ((0.0133976256f * fTemp438) + ((0.0147404401f * fTemp439) + ((0.0182195511f * fTemp381) + ((0.0230109561f * fTemp522) + ((0.0310678426f * fTemp175) + ((0.0311288796f * fTemp176) + ((0.025757622f * fTemp328) + ((0.0209051799f * fTemp444) + ((0.0093691824f * fTemp445) + ((0.00143436994f * fTemp177) + (fTemp540 + ((0.0318308063f * fTemp179) + ((0.0229194015f * fTemp180) + ((0.0115970336f * fTemp453) + ((0.0410473943f * fTemp454) + ((0.0601519831f * fTemp455) + ((0.0667745024f * fTemp152) + ((0.0491958372f * fTemp362) + ((0.0928678215f * fTemp463) + ((0.0915250108f * fTemp464) + ((0.0438550971f * fTemp389) + ((0.0420239866f * fTemp183) + ((0.0726035312f * fTemp184) + ((0.0948210061f * fTemp185) + ((0.112796411f * fTemp186) + ((0.109530933f * fTemp187) + ((0.11035493f * fTemp188) + ((0.0534684286f * fTemp189) + ((0.00778221991f * fTemp195) + ((0.0514542088f * fTemp196) + ((0.0397045799f * fTemp469) + ((0.0111087374f * fTemp154) + ((0.0335703604f * fTemp473) + ((0.0695211664f * fTemp200) + (fTemp541 + ((0.231299788f * fTemp477) + ((0.173406169f * fTemp478) + ((0.0860011578f * fTemp479) + ((0.47386089f * fTemp35) + ((0.951384008f * fTemp482) + (fTemp397 + ((0.669362485f * fTemp483) + ((0.272713393f * fTemp484) + ((0.0138248848f * fTemp485) + (0.0664693117f * fTemp396)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00125125889f * fTemp261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((((((0.0035401471f * (fTemp54 + fTemp297)) + ((0.00445570238f * (fTemp418 + fTemp302)) + ((0.00491348002f * (fTemp277 + (fTemp272 - fTemp285))) + ((0.00277718436f * (fTemp318 + (fTemp66 - fTemp130))) + ((0.000762962736f * (fTemp380 - fTemp324)) + ((0.00537125766f * (fTemp423 - fTemp278)) + ((0.00408948027f * (fTemp530 - fTemp304)) + ((0.00164799951f * (fTemp53 - fTemp23)) + ((3.05185094e-05f * (fTemp25 - (fTemp212 + (fTemp496 + (fTemp497 + (fTemp499 - (fTemp512 - fTemp543))))))) + ((0.00299081393f * (fTemp287 + fTemp286)) + ((0.000732444227f * (fTemp45 - (fTemp75 - (fTemp59 + (fTemp49 - (fTemp182 - fTemp100)))))) + ((0.00454725791f * (fTemp46 - fTemp280)) + ((0.00326548051f * (fTemp128 + fTemp312)) + ((0.00198370311f * (fTemp307 - (fTemp378 - fTemp354))) + ((0.000213629566f * (fTemp33 - (fTemp214 + (fTemp16 + fTemp221)))) + ((0.0108951079f * (fTemp124 - fTemp303)) + ((0.00173955504f * (fTemp72 + fTemp347)) + ((0.00497451704f * (fTemp300 + fTemp159)) + ((0.00494399853f * (fTemp113 + (fTemp388 + fTemp248))) + ((0.00543229468f * (fTemp117 + (fTemp375 + fTemp343))) + ((0.0077517014f * (fTemp386 + fTemp166)) + ((0.00796533097f * (fTemp121 - fTemp169)) + ((0.000854518265f * (fTemp125 + (fTemp258 - fTemp134))) + ((0.0131534776f * (fTemp205 - fTemp129)) + ((0.00363170262f * (fTemp341 + (fTemp70 + fTemp107))) + ((0.00427259132f * (fTemp273 - (fTemp139 + fTemp115))) + ((0.00146488845f * (fTemp84 - fTemp140)) + ((0.00793481246f * (fTemp410 - fTemp263)) + ((0.0054933317f * (fTemp95 - fTemp150)) + ((0.00134281442f * (fTemp351 - fTemp97)) + ((0.000244148076f * (fTemp259 - fTemp544)) + ((0.000305185094f * (fTemp57 - (fTemp217 + fTemp492))) + ((6.10370189e-05f * (fTemp12 - (fTemp500 + (fTemp503 + (fTemp504 + (fTemp239 + (fTemp238 + (fTemp234 + fTemp545)))))))) + ((0.000427259132f * (fTemp314 - (fTemp208 + fTemp379))) + ((0.00057985168f * (fTemp32 + fTemp348)) + ((0.000457777642f * (fTemp411 + fTemp5)) + ((0.000701925717f * (fTemp393 + fTemp371)) + ((0.00396740623f * (fTemp383 - fTemp93)) + ((0.00601214636f * (fTemp409 + fTemp382)) + ((0.00552385021f * (fTemp338 + fTemp422)) + ((0.0137028107f * (fTemp475 + fTemp111)) + ((0.0622272417f * (fTemp470 - fTemp462)) + ((0.000915555283f * fTemp254) + ((0.000488296151f * fTemp260) + ((0.00479140598f * fTemp309) + ((0.0071108127f * fTemp325) + ((0.00979644153f * fTemp311) + ((0.00918607134f * fTemp37) + ((0.00286873989f * fTemp60) + ((0.00305185094f * fTemp156) + ((0.00302133244f * fTemp157) + ((0.00231940672f * fTemp76) + ((0.00814844202f * fTemp105) + ((0.00799584948f * fTemp109) + ((0.00656147953f * fTemp323) + ((0.00384533219f * fTemp71) + ((0.0100711081f * fTemp322) + ((0.012939848f * fTemp3) + ((0.0138554033f * fTemp519) + ((0.0106509598f * fTemp165) + ((0.0153508103f * fTemp120) + ((0.0211188085f * fTemp102) + ((0.0190740693f * fTemp20) + ((0.00158696249f * fTemp306) + ((0.00366222113f * fTemp108) + ((0.00405896176f * fTemp144) + ((0.00241096225f * fTemp317) + ((0.00283822138f * fTemp90) + ((0.00180059206f * fTemp316) + ((0.00207525864f * fTemp82) + ((0.00308236945f * fTemp404) + ((0.00186162908f * fTemp406) + ((0.00866725668f * fTemp355) + ((0.00772118289f * fTemp15) + (fTemp546 + ((0.00851466414f * fTemp281) + (fTemp547 + ((0.00640888698f * fTemp516) + ((0.00585955381f * fTemp250) + ((0.0057985168f * fTemp4) + ((0.00433362834f * fTemp87) + ((0.00152592547f * fTemp122) + ((0.006469924f * fTemp420) + ((0.00759910885f * fTemp421) + ((0.00482192449f * fTemp369) + ((0.00518814661f * fTemp89) + ((0.00216681417f * fTemp424) + ((0.0125125889f * fTemp427) + ((0.0195623655f * fTemp428) + ((0.0241706595f * fTemp429) + ((0.0245368816f * fTemp430) + ((0.0232245866f * fTemp431) + ((0.0194402914f * fTemp432) + ((0.0131839961f * fTemp433) + ((0.0428174697f * fTemp294) + ((0.0549638346f * fTemp440) + ((0.0458693206f * fTemp392) + ((0.027619252f * fTemp441) + ((0.0104373302f * fTemp442) + ((0.0237128828f * fTemp116) + ((0.0206305124f * fTemp118) + ((0.0138859218f * fTemp387) + ((0.0522476882f * fTemp446) + ((0.0587176122f * fTemp447) + ((0.0266121402f * fTemp448) + ((0.00119022187f * fTemp376) + ((0.0258491784f * fTemp449) + ((0.0319528803f * fTemp451) + ((0.0252388082f * fTemp452) + ((0.0199285876f * fTemp385) + ((0.0202337727f * fTemp373) + ((0.0357676931f * fTemp457) + ((0.0796533078f * fTemp364) + ((0.106875822f * fTemp394) + ((0.112735376f * fTemp458) + ((0.0947294533f * fTemp459) + ((0.0542619117f * fTemp460) + ((0.0532242805f * fTemp465) + ((0.074892424f * fTemp466) + ((0.0972319692f * fTemp467) + ((0.110995822f * fTemp468) + ((0.128543958f * fTemp368) + ((0.130924404f * fTemp181) + ((0.105685599f * fTemp86) + ((0.0817285702f * fTemp367) + ((0.0400097668f * fTemp141) + ((0.0720847175f * fTemp190) + ((0.0990936011f * fTemp191) + ((0.112155519f * fTemp192) + ((0.0709860548f * fTemp193) + ((0.02600177f * fTemp194) + ((0.127109587f * fTemp346) + ((0.129093289f * fTemp471) + ((0.0620441288f * fTemp472) + ((0.142002627f * fTemp476) + ((0.15491195f * fTemp197) + ((0.133518472f * fTemp198) + ((0.0332346559f * fTemp199) + ((0.173100993f * fTemp480) + ((0.396893203f * fTemp481) + ((0.640003681f * fTemp201) + ((0.74459058f * fTemp202) + ((0.609271526f * fTemp203) + ((0.193426311f * fTemp204) + ((0.0083925901f * fTemp486) + ((0.029175695f * fTemp487) + ((0.0383922867f * fTemp488) + ((0.0356151015f * fTemp489) + ((0.00054933317f * fTemp207) + (0.0248115491f * fTemp153)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.00106814783f * (fTemp247 + fTemp251))) + (0.000946073793f * (fTemp398 - (fTemp461 - fTemp132)))) + (0.00100711081f * (fTemp245 + fTemp244))) + (0.00137333293f * (fTemp513 - (fTemp155 - (fTemp167 - (fTemp267 - (fTemp434 + fTemp92))))))) + (0.00140385143f * (fTemp1 - (fTemp137 + fTemp269))))) : (iSlow7 ? (((0.000885036774f * (fTemp1 + (fTemp331 + (fTemp151 + fTemp386)))) + ((0.000152592547f * (fTemp244 - (fTemp25 - (fTemp33 + fTemp307)))) + ((0.000732444227f * (fTemp75 - fTemp245)) + ((0.00146488845f * (fTemp13 - fTemp302)) + ((0.000457777642f * (fTemp38 - fTemp309)) + ((0.000396740623f * (fTemp318 - (fTemp60 - (fTemp335 - fTemp317)))) + ((0.000640888698f * (fTemp284 + (fTemp278 - (fTemp28 - (fTemp258 + fTemp303))))) + ((0.000823999755f * (fTemp136 + fTemp324)) + ((0.000976592302f * (fTemp292 + (fTemp310 + (fTemp18 + (fTemp19 + (fTemp98 + (fTemp99 + (fTemp442 - fTemp149)))))))) + ((0.00103762932f * (fTemp330 + (fTemp316 - (fTemp66 - fTemp384)))) + ((0.000518814661f * (fTemp285 + (fTemp365 + fTemp105))) + ((0.000701925717f * (fTemp304 - (fTemp349 - (fTemp294 + fTemp128)))) + ((0.00125125889f * (fTemp518 - (fTemp37 - (fTemp372 - (fTemp57 + (fTemp455 - fTemp107)))))) + ((0.00137333293f * (fTemp332 + (fTemp271 - (fTemp110 - (fTemp3 + (fTemp248 - fTemp5)))))) + ((0.00115970336f * (fTemp337 - (fTemp293 + fTemp340))) + ((0.000854518265f * (fTemp11 + (fTemp339 - (fTemp2 + (fTemp348 + fTemp83))))) + ((0.000946073793f * (fTemp14 - (fTemp54 - (fTemp93 - fTemp170)))) + ((0.000274666585f * (fTemp274 + fTemp24)) + ((0.00180059206f * (fTemp155 - fTemp319)) + ((0.00167851802f * (fTemp72 - fTemp262)) + ((0.000671407208f * (fTemp513 + (fTemp404 - fTemp322))) + ((0.00131229591f * (fTemp67 + (fTemp164 + (fTemp127 + fTemp167)))) + ((9.15555283e-05f * (fTemp43 - (fTemp329 + fTemp351))) + ((0.00234992523f * (fTemp159 - (fTemp380 + fTemp290))) + ((0.00329599902f * (fTemp113 + (fTemp163 + (fTemp168 + (fTemp371 - fTemp27))))) + ((0.00494399853f * (fTemp119 - (fTemp263 - fTemp519))) + ((0.00134281442f * (fTemp7 - (fTemp250 + fTemp361))) + ((0.00164799951f * (fTemp123 + (fTemp406 - (fTemp416 + fTemp100)))) + ((0.00186162908f * (fTemp354 - fTemp402)) + ((0.00347911008f * (fTemp64 + fTemp108)) + ((0.00390636921f * (fTemp12 - fTemp326)) + ((0.00369273964f * (fTemp405 + fTemp85)) + ((0.00228888821f * (fTemp87 + fTemp343)) + ((0.00399792474f * (fTemp355 + fTemp70)) + ((0.00244148076f * (fTemp364 + fTemp130)) + ((0.0012817774f * (fTemp378 - (fTemp410 - fTemp289))) + ((0.00448622089f * (fTemp336 + fTemp40)) + ((0.000305185094f * (fTemp516 + (fTemp36 + fTemp4))) + ((0.00207525864f * (fTemp59 - fTemp268)) + ((0.00302133244f * (fTemp15 - fTemp133)) + ((0.0308847316f * (fTemp229 + fTemp463)) + ((3.05185094e-05f * fTemp270) + ((0.000610370189f * fTemp23) + ((0.00241096225f * fTemp157) + ((0.00292977691f * fTemp96) + ((0.004852443f * fTemp117) + ((0.00546281319f * fTemp161) + ((0.00881984923f * fTemp352) + ((0.0101931822f * fTemp166) + ((0.00659199804f * fTemp363) + ((0.00488296151f * fTemp73) + ((0.00466933195f * fTemp120) + ((0.00405896176f * fTemp20) + (fTemp520 + ((0.00305185094f * fTemp306) + ((0.00320444349f * fTemp144) + ((0.00411999878f * fTemp150) + ((0.00299081393f * fTemp282) + ((0.00204474013f * fTemp243) + ((0.00500503555f * fTemp49) + ((0.00540177617f * fTemp32) + ((0.0025940733f * fTemp327) + ((0.00375377666f * fTemp356) + ((0.00119022187f * fTemp139) + ((0.00662251655f * fTemp301) + ((0.00491348002f * fTemp281) + ((0.00497451704f * fTemp388) + ((0.00366222113f * fTemp412) + ((0.00335703604f * fTemp440) + ((0.00503555406f * fTemp392) + (fTemp521 + ((0.000366222113f * fTemp443) + ((0.0045167394f * fTemp522) + ((0.0101016266f * fTemp175) + ((0.0131839961f * fTemp176) + ((0.0132755516f * fTemp444) + ((0.0152592547f * fTemp445) + ((0.0168462172f * fTemp300) + ((0.0157170333f * fTemp116) + ((0.00994903408f * fTemp118) + ((0.011383404f * fTemp446) + ((0.0231330302f * fTemp447) + ((0.029175695f * fTemp448) + ((0.0292367321f * fTemp77) + ((0.0241401419f * fTemp179) + ((0.0160222184f * fTemp180) + ((0.0058290353f * fTemp376) + ((0.00378429517f * fTemp152) + ((0.0153508103f * fTemp362) + ((0.0230414756f * fTemp457) + ((0.00875881221f * fTemp460) + ((0.0173955504f * fTemp461) + ((0.0207831059f * fTemp462) + ((0.0433362834f * fTemp464) + ((0.0458082817f * fTemp389) + ((0.0316171758f * fTemp393) + ((0.01617481f * fTemp465) + ((0.0108645894f * fTemp466) + ((0.0189519953f * fTemp467) + ((0.0271004364f * fTemp468) + ((0.0249641407f * fTemp368) + ((0.0234992523f * fTemp181) + ((0.0252388082f * fTemp86) + ((0.0387890264f * fTemp367) + ((0.0479750969f * fTemp141) + ((0.0493179113f * fTemp182) + ((0.0417188033f * fTemp183) + ((0.0316782147f * fTemp184) + ((0.0304574724f * fTemp185) + ((0.0267036967f * fTemp186) + ((0.0267342143f * fTemp187) + ((0.0122074038f * fTemp188) + ((0.00570696127f * fTemp189) + ((0.00628681295f * fTemp190) + ((0.00897244178f * fTemp191) + ((0.0122379223f * fTemp192) + ((0.0284432508f * fTemp193) + ((0.0445265062f * fTemp194) + ((0.061403241f * fTemp195) + ((0.0559099093f * fTemp196) + ((0.0541093163f * fTemp469) + ((0.0450453199f * fTemp154) + ((0.0387585089f * fTemp470) + ((0.0131534776f * fTemp346) + ((0.0464186519f * fTemp489) + ((0.102847375f * fTemp153) + ((0.142582476f * fTemp205) + ((0.140202031f * fTemp206) + ((0.10177923f * fTemp207) + ((0.0467238389f * fTemp208) + ((0.00759910885f * fTemp501) + ((0.0500808731f * fTemp219) + ((0.113834038f * fTemp220) + ((0.168767363f * fTemp221) + ((0.183477283f * fTemp222) + ((0.16446425f * fTemp223) + ((0.106448561f * fTemp224) + ((0.0570696145f * fTemp22) + ((0.00802636798f * fTemp502) + ((0.0569475405f * fTemp503) + ((0.106326491f * fTemp504) + ((0.29261148f * fTemp505) + ((0.416150391f * fTemp512) + ((0.503128171f * fTemp225) + ((0.395886093f * fTemp226) + ((0.329660952f * fTemp227) + ((0.266762286f * fTemp228) + ((0.233191937f * fTemp241) + ((0.168980986f * fTemp16) + ((0.0689107925f * fTemp391) + ((0.055238504f * fTemp240) + ((0.0321665108f * fTemp238) + ((0.273689985f * fTemp511) + ((0.570207834f * fTemp232) + ((0.58861047f * fTemp230) + (0.697561562f * fTemp231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.00112918485f * (fTemp251 + (fTemp31 + (fTemp81 - fTemp90)))) + ((0.00143436994f * (fTemp254 + (fTemp47 - (fTemp71 - fTemp246)))) + ((0.00155644398f * (fTemp41 + fTemp260)) + ((0.001617481f * (fTemp265 + (fTemp172 + fTemp256))) + ((0.00158696249f * (fTemp255 + (fTemp261 + (fTemp269 + (fTemp297 + (fTemp126 - fTemp160)))))) + ((0.00170903653f * (fTemp276 + (fTemp370 + fTemp296))) + ((0.00177007355f * (fTemp283 + (fTemp291 - (fTemp514 - fTemp46)))) + ((0.000915555283f * (fTemp305 + (fTemp312 + (fTemp387 + fTemp65)))) + ((0.00100711081f * (fTemp407 - fTemp8)) + ((0.00149540696f * (fTemp311 + fTemp333)) + ((0.00213629566f * (fTemp34 + (fTemp325 + (fTemp252 - (fTemp383 + fTemp347))))) + ((0.00268562883f * (fTemp6 + fTemp286)) + ((0.00198370311f * (fTemp140 + fTemp45)) + ((0.00238044374f * (fTemp280 + (fTemp131 + fTemp275))) + ((0.00271614734f * (fTemp320 + (fTemp257 - fTemp91))) + ((0.000793481246f * (fTemp321 - (fTemp112 - (fTemp417 - fTemp9)))) + ((0.000335703604f * (fTemp48 + (fTemp82 + fTemp68))) + ((0.000183111057f * (fTemp21 + (fTemp62 + (fTemp287 - (fTemp52 - fTemp30))))) + ((0.00173955504f * (fTemp111 + fTemp55)) + ((0.00201422162f * (fTemp84 + fTemp61)) + ((0.00189214759f * (fTemp350 + fTemp345)) + ((0.00250251777f * (fTemp515 - fTemp156)) + ((0.000122074038f * (fTemp79 + (fTemp114 + (fTemp409 + fTemp403)))) + ((0.00222785119f * (fTemp115 - fTemp88)) + ((0.00308236945f * (fTemp259 - fTemp101)) + ((0.0028992584f * (fTemp247 - fTemp76)) + ((0.00152592547f * (fTemp323 + (fTemp272 + (fTemp146 - (fTemp267 + (fTemp148 + (fTemp177 - fTemp29))))))) + ((0.00262459181f * (fTemp399 + (fTemp104 - fTemp125))) + ((0.00256355479f * fTemp523) + ((0.0110171819f * (fTemp422 - fTemp165)) + ((0.00363170262f * (fTemp63 - (fTemp334 - (fTemp418 + (fTemp454 + fTemp420))))) + ((0.00332651753f * (fTemp401 + (fTemp341 + fTemp524))) + ((0.00439466536f * (fTemp95 - fTemp102)) + ((0.0022583697f * (fTemp78 - (fTemp134 - fTemp525))) + ((0.00314340647f * (fTemp171 + fTemp129)) + ((0.00317392498f * (fTemp50 - (fTemp288 - (fTemp377 - fTemp382)))) + ((0.003234962f * (fTemp132 + (fTemp273 + (fTemp369 - fTemp299)))) + ((0.00274666585f * (fTemp137 - (fTemp138 - fTemp53))) + ((0.00247199927f * (fTemp10 - (fTemp42 - fTemp315))) + ((0.00219733268f * (fTemp366 + (fTemp122 + fTemp358))) + ((0.00231940672f * (fTemp145 + (fTemp360 - fTemp359))) + ((6.10370189e-05f * (fTemp374 - (fTemp408 + fTemp103))) + ((0.00473036896f * (fTemp97 - fTemp169)) + ((0.00424207281f * (fTemp415 + fTemp147)) + ((0.0042115543f * (fTemp313 - (fTemp375 + fTemp314))) + ((0.00650044251f * (fTemp439 - fTemp379)) + ((0.00671407208f * (fTemp414 - fTemp411)) + ((0.00350962859f * (fTemp449 + fTemp421)) + ((0.0130314035f * (fTemp451 - fTemp328)) + ((0.0263069551f * (fTemp458 - fTemp456)) + ((0.000244148076f * fTemp398) + ((0.00122074038f * fTemp277) + ((0.00253303628f * fTemp279) + ((0.00280770287f * fTemp253) + ((0.00296029542f * fTemp264) + ((0.00265511032f * fTemp266) + ((0.00054933317f * fTemp51) + ((0.00106814783f * fTemp69) + ((0.00057985168f * fTemp109) + ((0.000488296151f * fTemp44) + (fTemp526 + ((0.006469924f * fTemp74) + ((0.00607318338f * fTemp400) + (fTemp527 + ((0.0019226661f * fTemp56) + ((0.00442518387f * fTemp295) + (fTemp528 + ((0.00109866634f * fTemp26) + (fTemp529 + ((0.00360118411f * fTemp530) + ((0.00592059083f * fTemp94) + ((0.00793481246f * fTemp89) + ((0.014496292f * fTemp423) + ((0.0164189581f * fTemp424) + ((0.0162053294f * fTemp425) + ((0.0143131809f * fTemp426) + ((0.0116275521f * fTemp17) + ((0.00982696004f * fTemp338) + ((0.00955229346f * fTemp427) + ((0.0117496261f * fTemp428) + ((0.0142826624f * fTemp429) + ((0.015991699f * fTemp430) + ((0.0154423658f * fTemp431) + ((0.0148930326f * fTemp432) + ((0.0149235511f * fTemp433) + ((0.016113773f * fTemp434) + ((0.0165410321f * fTemp435) + ((0.0150151066f * fTemp436) + ((0.0119632557f * fTemp437) + ((0.00845362712f * fTemp438) + ((0.00506607257f * fTemp381) + ((0.00372325815f * fTemp344) + ((0.00610370189f * fTemp178) + ((0.00772118289f * fTemp249) + ((0.0101626636f * fTemp450) + ((0.0139774773f * fTemp452) + (fTemp531 + ((0.0115970336f * fTemp373) + ((0.00906399731f * fTemp121) + ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((fTemp509 + (((0.0950956792f * fTemp0) + (0.36185798f * fTemp506)) + (0.798760951f * fTemp507))) + (0.650654614f * fTemp510)) + (0.0879848599f * fTemp233)) + (0.351451159f * fTemp234)) + (0.407086402f * fTemp235)) + (0.214575633f * fTemp236)) + (0.0857264921f * fTemp237)) + (0.00552385021f * fTemp239)) + (0.0183721427f * fTemp500)) + (0.0547807254f * fTemp499)) + (0.0787682757f * fTemp498)) + (0.119907223f * fTemp497)) + (0.134983361f * fTemp496)) + (0.134159371f * fTemp495)) + (0.119632557f * fTemp493)) + (0.104647972f * fTemp218)) + (0.0944242701f * fTemp217)) + (0.0766930133f * fTemp216)) + (0.0743430927f * fTemp215)) + (0.0694601312f * fTemp214)) + (0.0869472325f * fTemp213)) + (0.0716879815f * fTemp212)) + (0.0605792403f * fTemp211)) + (0.0351878405f * fTemp210)) + (0.0493789501f * fTemp209)) + (0.0661030933f * fTemp492)) + (0.0883816034f * fTemp491)) + (0.0658284277f * fTemp490)) + (0.0210272539f * fTemp135)) + (0.0187994018f * fTemp488)) + (0.0495620593f * fTemp487)) + (0.0656453148f * fTemp486)) + (0.0656758323f * fTemp485)) + (0.0741904974f * fTemp396)) + (0.0741599798f * fTemp484)) + (0.0704977587f * fTemp483)) + (0.0773033872f * fTemp397)) + (0.0935392305f * fTemp482)) + (0.105410933f * fTemp35)) + (0.0877101943f * fTemp204)) + (0.0444044322f * fTemp203)) + (0.0120242927f * fTemp202)) + (0.0145878475f * fTemp201)) + (0.0441908017f * fTemp481)) + (0.0679647177f * fTemp480)) + (0.0827661976f * fTemp479)) + (0.0951261967f * fTemp478)) + fTemp532) + (0.106997892f * fTemp58)) + (0.0892056003f * fTemp200)) + (0.0595416129f * fTemp199)) + (0.0352488793f * fTemp198)) + (0.0262459181f * fTemp197)) + (0.0271309558f * fTemp476)) + (0.0505691692f * fTemp475)) + (0.0723899081f * fTemp474)) + (0.086733602f * fTemp473)) + (0.0648213178f * fTemp472)) + (0.0274971779f * fTemp471)) + (0.0111697745f * fTemp459)) + (0.0215765871f * fTemp394)) + (0.00524918362f * fTemp453))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000427259132f * (fTemp39 - fTemp242)))) : (((0.000152592547f * (fTemp1 + (fTemp2 + (fTemp3 + (fTemp4 + fTemp5))))) + ((0.00149540696f * (fTemp6 + fTemp7)) + ((0.00216681417f * (fTemp8 - (fTemp9 - fTemp10))) + ((0.00207525864f * (fTemp11 + (fTemp12 + fTemp13))) + ((0.00189214759f * (fTemp14 - (fTemp15 - (fTemp16 - fTemp17)))) + ((0.00170903653f * (fTemp18 + (fTemp19 + (fTemp20 + fTemp21)))) + ((0.00198370311f * (fTemp22 + fTemp23)) + ((0.00213629566f * (fTemp24 + (fTemp25 - (fTemp26 - fTemp27)))) + ((0.00183111057f * (fTemp28 + (fTemp29 + fTemp30))) + ((0.00125125889f * (fTemp31 - (fTemp32 - fTemp33))) + ((0.000976592302f * (fTemp34 + (fTemp35 + fTemp36))) + ((6.10370189e-05f * (fTemp37 - (fTemp38 + (fTemp39 + fTemp40)))) + ((0.000274666585f * (fTemp41 - (fTemp42 - fTemp43))) + ((0.00057985168f * (fTemp44 + fTemp45)) + ((0.000366222113f * (fTemp46 + fTemp47)) + ((0.00137333293f * (fTemp48 - (fTemp49 - fTemp50))) + ((0.00155644398f * (fTemp51 - (fTemp52 + fTemp53))) + ((0.00109866634f * (fTemp54 + (fTemp55 + (fTemp56 + (fTemp57 + (fTemp58 - fTemp59)))))) + ((0.000427259132f * (fTemp60 + (fTemp61 + (fTemp62 + (fTemp63 - (fTemp64 + (fTemp65 + fTemp66))))))) + ((0.001617481f * (fTemp67 + fTemp68)) + ((0.00158696249f * (fTemp69 - (fTemp70 - fTemp71))) + ((0.00326548051f * (fTemp72 + (fTemp73 - fTemp74))) + ((0.00283822138f * (fTemp75 + (fTemp76 + (fTemp77 + fTemp78)))) + ((0.00231940672f * (fTemp79 + (fTemp80 - (fTemp81 + fTemp82)))) + ((0.000335703604f * (fTemp83 + (fTemp84 - (fTemp85 + (fTemp86 + fTemp87))))) + ((0.00100711081f * (fTemp88 - (fTemp89 + fTemp90))) + ((0.00115970336f * (fTemp91 + (fTemp92 - (fTemp93 - (fTemp94 + fTemp95))))) + ((0.00152592547f * (fTemp96 + (fTemp97 - (fTemp98 + (fTemp99 + fTemp100))))) + ((0.00219733268f * (fTemp101 + (fTemp102 + (fTemp103 - fTemp104)))) + ((0.00210577715f * (fTemp105 - (fTemp106 + fTemp107))) + ((0.00143436994f * (fTemp108 + fTemp109)) + ((0.000518814661f * (fTemp110 + (fTemp111 - fTemp112))) + ((0.0025940733f * (fTemp113 + (fTemp114 + fTemp115))) + ((0.00405896176f * (fTemp116 + fTemp117)) + ((0.00610370189f * (fTemp118 + fTemp119)) + ((0.00271614734f * (fTemp120 - (fTemp121 + fTemp122))) + ((0.0012817774f * (fTemp123 + fTemp124)) + ((0.00106814783f * (fTemp125 + (fTemp126 - (fTemp127 + fTemp128)))) + ((0.00268562883f * (fTemp129 - (fTemp130 - fTemp131))) + ((0.00054933317f * (fTemp132 - (fTemp133 - (fTemp134 + (fTemp135 - fTemp136))))) + ((0.00122074038f * (fTemp137 + (fTemp138 - fTemp139))) + ((0.00173955504f * (fTemp140 - fTemp143)) + ((0.00222785119f * (fTemp144 + fTemp145)) + ((0.00234992523f * (fTemp146 + (fTemp147 + fTemp148))) + ((0.00112918485f * (fTemp149 - fTemp150)) + ((0.00573747978f * (fTemp151 - fTemp152)) + ((0.00991851557f * (fTemp153 - fTemp154)) + ((0.00244148076f * fTemp155) + ((0.00350962859f * fTemp156) + (fTemp158 + ((0.00292977691f * fTemp159) + ((0.00265511032f * fTemp160) + (fTemp162 + ((0.00524918362f * fTemp163) + ((0.00317392498f * fTemp164) + ((0.00427259132f * fTemp165) + ((0.00674459059f * fTemp166) + ((0.00460829493f * fTemp167) + ((0.00238044374f * fTemp168) + ((0.00341807306f * fTemp169) + ((0.00253303628f * fTemp170) + ((0.00204474013f * fTemp171) + ((0.00314340647f * fTemp172) + (fTemp174 + ((0.00589007232f * fTemp175) + ((0.00497451704f * fTemp176) + ((0.00592059083f * fTemp177) + ((0.00393688772f * fTemp178) + ((0.00805688649f * fTemp179) + ((0.00650044251f * fTemp180) + ((0.00140385143f * fTemp181) + ((0.00402844325f * fTemp182) + ((0.0135502182f * fTemp183) + ((0.0261848811f * fTemp184) + ((0.0339060649f * fTemp185) + ((0.0357066579f * fTemp186) + ((0.0284432508f * fTemp187) + ((0.0179448836f * fTemp188) + ((0.00799584948f * fTemp189) + ((0.0127872555f * fTemp190) + ((0.0249946602f * fTemp191) + ((0.0361949541f * fTemp192) + ((0.0436414704f * fTemp193) + ((0.0445875414f * fTemp194) + ((0.0314340666f * fTemp195) + ((0.0101626636f * fTemp196) + ((0.0213019196f * fTemp197) + ((0.0529496148f * fTemp198) + ((0.0629291683f * fTemp199) + ((0.0422070995f * fTemp200) + ((0.00503555406f * fTemp201) + ((0.0116885891f * fTemp202) + ((0.0181890316f * fTemp203) + ((0.0141300699f * fTemp204) + ((0.0585955381f * fTemp205) + ((0.0892971605f * fTemp206) + ((0.0848719776f * fTemp207) + ((0.0473647267f * fTemp208) + ((0.019226661f * fTemp209) + ((0.0603350922f * fTemp210) + ((0.0752281249f * fTemp211) + ((0.0648823529f * fTemp212) + ((0.0487380587f * fTemp213) + ((0.0603045747f * fTemp214) + ((0.098178044f * fTemp215) + ((0.13794367f * fTemp216) + ((0.127445295f * fTemp217) + ((0.0601214655f * fTemp218) + ((0.00576799829f * fTemp219) + ((0.0625629425f * fTemp220) + ((0.077211827f * fTemp221) + ((0.0596942045f * fTemp222) + ((0.0472426526f * fTemp223) + ((0.0365916938f * fTemp224) + ((0.0572832413f * fTemp225) + ((0.251991332f * fTemp226) + ((0.338633388f * fTemp227) + ((0.27149266f * fTemp228) + (((((((((((((0.361003458f * fTemp229) + (0.673177302f * fTemp230)) + (0.45512253f * fTemp231)) + (0.133060709f * fTemp232)) + (0.0334482864f * fTemp233)) + (0.12103641f * fTemp234)) + (0.145207062f * fTemp235)) + (0.112735376f * fTemp236)) + (0.103854485f * fTemp237)) + (0.173436686f * fTemp238)) + (0.166234314f * fTemp239)) + (0.0970183387f * fTemp240)) + (0.122775964f * fTemp241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) - (((0.000305185094f * (fTemp242 + (fTemp243 + fTemp244))) + ((9.15555283e-05f * (fTemp245 + (fTemp246 - (fTemp247 - (fTemp248 - (fTemp249 + fTemp250)))))) + ((0.000244148076f * (fTemp251 - (fTemp252 + fTemp253))) + ((0.000396740623f * (fTemp254 + (fTemp255 - (fTemp256 + (fTemp257 - (fTemp258 - fTemp259)))))) + ((0.000488296151f * (fTemp260 + (fTemp261 - (fTemp262 + (fTemp263 - fTemp264))))) + ((0.000457777642f * (fTemp265 - (fTemp266 + (fTemp267 - fTemp268)))) + ((0.000640888698f * (fTemp269 + (fTemp270 - (fTemp271 + (fTemp272 - (fTemp273 + (fTemp274 + fTemp275))))))) + ((0.000823999755f * (fTemp276 + (fTemp277 + (fTemp278 - (fTemp279 + (fTemp280 + (fTemp281 + fTemp282))))))) + ((0.000915555283f * (fTemp283 + (fTemp284 + (fTemp285 + (fTemp286 - (fTemp287 - (fTemp288 + (fTemp289 - fTemp290)))))))) + ((0.000885036774f * (fTemp291 + (fTemp292 - (fTemp293 - (fTemp294 - fTemp295))))) + ((0.000793481246f * (fTemp296 + (fTemp297 + (fTemp298 + (fTemp299 + (fTemp300 + fTemp301)))))) + ((0.000854518265f * (fTemp302 - (fTemp303 - fTemp304))) + ((0.000701925717f * (fTemp305 - fTemp308)) + ((0.000610370189f * (fTemp309 + (fTemp310 + (fTemp311 - (fTemp312 + (fTemp313 + (fTemp314 - (fTemp315 + (fTemp316 + fTemp317))))))))) + ((0.000762962736f * (fTemp318 - (fTemp319 + (fTemp320 + (fTemp321 + (fTemp322 + fTemp323)))))) + ((0.000946073793f * (fTemp324 + (fTemp325 - (fTemp326 + (fTemp327 - (fTemp328 - fTemp329)))))) + ((0.000732444227f * (fTemp330 + (fTemp331 - (fTemp332 + (fTemp333 - (fTemp334 + fTemp335)))))) + ((0.00201422162f * (fTemp336 - fTemp337)) + ((0.00180059206f * (fTemp338 - fTemp339)) + ((0.000213629566f * (fTemp340 + (fTemp341 + (fTemp342 - fTemp343)))) + ((3.05185094e-05f * (fTemp344 + fTemp345)) + ((0.00308236945f * (fTemp346 - fTemp347)) + ((0.00167851802f * (fTemp348 - fTemp349)) + ((0.00146488845f * (fTemp350 + (fTemp351 - fTemp352))) + ((0.00262459181f * (fTemp353 - (fTemp354 - (fTemp355 + fTemp356)))) + ((0.00177007355f * (fTemp357 + (fTemp358 - (fTemp359 - (fTemp360 - fTemp361))))) + ((0.00704977568f * (fTemp362 - fTemp363)) + ((0.00186162908f * (fTemp364 - fTemp365)) + ((0.00250251777f * (fTemp366 + (fTemp367 + fTemp368))) + ((0.00247199927f * (fTemp369 + fTemp370)) + ((0.00103762932f * (fTemp371 - fTemp372)) + ((0.00241096225f * (fTemp373 - fTemp374)) + ((0.00131229591f * (fTemp375 + (fTemp376 + fTemp377))) + ((0.0019531846f * (fTemp378 + (fTemp379 + fTemp380))) + ((0.00338755455f * (fTemp381 + fTemp382)) + ((0.0019226661f * (fTemp383 + fTemp384)) + ((0.00619525742f * (fTemp385 + fTemp386)) + ((0.00482192449f * (fTemp387 + fTemp388)) + ((0.00762962736f * (fTemp389 + fTemp390)) + ((0.00988799706f * (fTemp391 + fTemp392)) + ((0.00753807183f * fTemp395) + ((0.0373851731f * (fTemp396 + fTemp397)) + ((0.000183111057f * fTemp398) + ((0.00256355479f * fTemp399) + ((0.00448622089f * fTemp400) + ((0.00299081393f * fTemp401) + ((0.0022583697f * fTemp402) + ((0.00286873989f * fTemp403) + ((0.00277718436f * fTemp404) + ((0.00320444349f * fTemp405) + ((0.003234962f * fTemp406) + ((0.0035401471f * fTemp407) + ((0.00305185094f * fTemp408) + ((0.00436414685f * fTemp409) + ((0.00622577593f * fTemp410) + ((0.00363170262f * fTemp411) + ((0.00390636921f * fTemp412) + ((0.00531022064f * fTemp413) + ((0.00686666463f * fTemp414) + ((0.00720236823f * fTemp415) + ((0.00540177617f * fTemp416) + ((0.00274666585f * fTemp417) + (fTemp419 + ((0.00585955381f * fTemp420) + ((0.00473036896f * fTemp421) + ((0.00488296151f * fTemp422) + ((0.0087282937f * fTemp423) + ((0.00997955259f * fTemp424) + ((0.008087405f * fTemp425) + ((0.0045167394f * fTemp426) + ((0.00375377666f * fTemp427) + ((0.00692770164f * fTemp428) + ((0.0100711081f * fTemp429) + ((0.0118717002f * fTemp430) + ((0.0114139225f * fTemp431) + ((0.0093691824f * fTemp432) + ((0.00708029419f * fTemp433) + ((0.0058290353f * fTemp434) + ((0.00659199804f * fTemp435) + ((0.00930814538f * fTemp436) + ((0.0120242927f * fTemp437) + ((0.0120548112f * fTemp438) + ((0.0083925901f * fTemp439) + ((0.00457777642f * fTemp440) + ((0.014557329f * fTemp441) + ((0.0147099216f * fTemp442) + ((0.00891140476f * fTemp443) + ((0.00604266487f * fTemp444) + ((0.00555436872f * fTemp445) + ((0.00878933072f * fTemp446) + ((0.00924710836f * fTemp447) + ((0.00479140598f * fTemp448) + ((0.0102847377f * fTemp449) + ((0.0165715516f * fTemp450) + ((0.0171208847f * fTemp451) + ((0.0126346629f * fTemp452) + ((0.00509659108f * fTemp453) + ((0.00598162785f * fTemp454) + ((0.00567644276f * fTemp455) + ((0.00634784997f * fTemp456) + ((0.00335703604f * fTemp457) + ((0.0204779208f * fTemp458) + ((0.0303048808f * fTemp459) + ((0.0289620664f * fTemp460) + ((0.0184636991f * fTemp461) + ((0.00875881221f * fTemp462) + ((0.0057985168f * fTemp463) + ((0.00689718314f * fTemp464) + ((0.00985747855f * fTemp465) + ((0.0148014771f * fTemp466) + ((0.0166631062f * fTemp467) + ((0.0120853297f * fTemp468) + ((0.00747703481f * fTemp469) + ((0.00527970213f * fTemp470) + ((0.0038758507f * fTemp471) + ((0.0127262184f * fTemp472) + ((0.0282601397f * fTemp473) + ((0.042115543f * fTemp474) + ((0.0376293212f * fTemp475) + ((0.0142826624f * fTemp476) + ((0.030915251f * fTemp477) + ((0.0390331745f * fTemp478) + ((0.0299996957f * fTemp479) + ((0.0165105145f * fTemp480) + ((0.00494399853f * fTemp481) + ((0.0212408826f * fTemp482) + ((0.0444959886f * fTemp483) + ((0.0408032462f * fTemp484) + ((0.0415356904f * fTemp485) + ((0.0546891689f * fTemp486) + ((0.0627155378f * fTemp487) + ((0.056184575f * fTemp488) + ((0.0307321399f * fTemp489) + ((0.040192876f * fTemp490) + ((0.0516068004f * fTemp491) + ((0.0281380657f * fTemp492) + (fTemp494 + ((0.102481157f * fTemp495) + ((0.0962858945f * fTemp496) + ((0.0492873937f * fTemp497) + ((0.0235908087f * fTemp498) + ((0.0511490218f * fTemp499) + ((0.0719626471f * fTemp500) + ((0.0510269478f * fTemp501) + ((0.0451979116f * fTemp502) + ((0.0950346366f * fTemp503) + ((0.175481424f * fTemp504) + ((0.218909264f * fTemp505) + (((((((0.162755206f * fTemp0) + (0.538529634f * fTemp506)) + (0.990935981f * fTemp507)) + fTemp509) + (0.393169969f * fTemp510)) + (0.0214850307f * fTemp511)) + (0.150425732f * fTemp512)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) + (0.000122074038f * (fTemp513 + (fTemp514 + fTemp517)))))))))))));
			fRec0[1] = fRec0[0];
			IOTA = (IOTA + 1);
		}
	}

};

//----------------------------------------------------------------------------
//  LV2 interface
//----------------------------------------------------------------------------

#line 286 "lv2.cpp"

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

#include <bitset>
#include <boost/circular_buffer.hpp>

#include <lv2/lv2plug.in/ns/lv2core/lv2.h>
#include <lv2/lv2plug.in/ns/ext/dynmanifest/dynmanifest.h>
#include <lv2/lv2plug.in/ns/ext/atom/util.h>
#include <lv2/lv2plug.in/ns/ext/urid/urid.h>

// Set this to the proper shared library extension for your system
#ifndef DLLEXT
#define DLLEXT ".so"
#endif

#ifndef URI_PREFIX
#define URI_PREFIX "https://faustlv2.bitbucket.io"
#endif

#ifndef PLUGIN_URI
#define PLUGIN_URI URI_PREFIX "/vintage_mics"
#endif

#define MIDI_EVENT_URI "http://lv2plug.in/ns/ext/midi#MidiEvent"

/* Setting NVOICES at compile time overrides meta data in the Faust source. If
   set, this must be an integer value >= 0. A nonzero value indicates an
   instrument (VSTi) plugin with the given maximum number of voices. Use 1 for
   a monophonic synthesizer, and 0 for a simple effect plugin. If NVOICES
   isn't defined at compile time then the number of voices of an instrument
   plugin can also be set with the global "nvoices" meta data key in the Faust
   source. This setting also adds a special "polyphony" control to the plugin
   which can be used to dynamically adjust the actual number of voices in the
   range 1..NVOICES. */
//#define NVOICES 16

/* This enables a special "tuning" control for instruments which lets you
   select the MTS tuning to be used for the synth. In order to use this, you
   just drop some sysex (.syx) files with MTS octave-based tunings in 1- or
   2-byte format into the ~/.fautvst/tuning directory (these can be generated
   with the author's sclsyx program, https://bitbucket.org/agraef/sclsyx).
   The control will only be shown if any .syx files were found at startup. 0
   selects the default tuning (standard 12-tone equal temperament), i>0 the
   tuning in the ith sysex file (in alphabetic order). */
#ifndef FAUST_MTS
#define FAUST_MTS 1
#endif

/* This allows various manifest data to be generated from the corresponding
   metadata (author, name, description, license) in the Faust source. */
#ifndef FAUST_META
#define FAUST_META 1
#endif

/* This enables automatic MIDI controller mapping based on the midi:ctrl
   attributes in the Faust source. We have this enabled by default, but you
   may have to disable it if the custom controller mapping gets in the way of
   the automation facilities that the host provides. (But then again if the
   host wants to do its own controller mapping then it probably won't, or at
   least shouldn't, send us the MIDI controllers in the first place.) */
#ifndef FAUST_MIDICC
#define FAUST_MIDICC 1
#endif

/* This enables or disables the plugin's custom Qt GUI (cf. lv2ui.cpp). Note
   that this only affects the plugin manifest, the GUI code itself is in a
   separate module created with the lv2ui.cpp architecture. Also, you'll have
   to use the alternative lv2ui manifest templates to tell the LV2 host about
   the GUI. */
#ifndef FAUST_UI
#define FAUST_UI 0
#endif

// You can define these for various debugging output items.
//#define DEBUG_META 1 // recognized MIDI controller metadata
//#define DEBUG_VOICES 1 // triggering of synth voices
//#define DEBUG_VOICE_ALLOC 1 // voice allocation
//#define DEBUG_MIDI 1 // incoming MIDI messages
//#define DEBUG_NOTES 1 // note messages
//#define DEBUG_MIDICC 1 // controller messages
//#define DEBUG_RPN 1 // RPN messages (pitch bend range, master tuning)
//#define DEBUG_MTS 1 // MTS messages (octave/scale tuning)

// Note and voice data structures.

struct NoteInfo {
  uint8_t ch;
  int8_t note;
};

struct VoiceData {
  // Octave tunings (offsets in semitones) per MIDI channel.
  float tuning[16][12];
  // Allocated voices per MIDI channel and note.
  int8_t notes[16][128];
  // Free and used voices.
  int n_free, n_used;
  boost::circular_buffer<int> free_voices;
  boost::circular_buffer<int> used_voices;
  NoteInfo *note_info;
  // Voices queued for note-offs (zero-length notes).
  set<int> queued;
  // Last gate value during run() for each voice. We need to keep track of
  // these so that we can force the Faust synth to retrigger a note when
  // needed.
  float *lastgate;
  // Current pitch bend and pitch bend range on each MIDI channel, in semitones.
  float bend[16], range[16];
  // Current coarse, fine and total master tuning on each MIDI channel (tuning
  // offset relative to A4 = 440 Hz, in semitones).
  float coarse[16], fine[16], tune[16];
  VoiceData(int n) : free_voices(n), used_voices(n) { }
};

#if FAUST_MTS

// Helper classes to read and store MTS tunings.

#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

#include <string>
#include <vector>

struct MTSTuning {
  char *name; // name of the tuning
  int len; // length of sysex data in bytes
  unsigned char *data; // sysex data
  MTSTuning() : name(0), len(0), data(0) {}
  MTSTuning& operator=(const MTSTuning &t)
  {
    if (this == &t) return *this;
    if (name) free(name); if (data) free(data);
    name = 0; data = 0; len = t.len;
    if (t.name) {
      name = strdup(t.name); assert(name);
    }
    if (t.data) {
      data = (unsigned char*)malloc(len); assert(data);
      memcpy(data, t.data, len);
    }
    return *this;
  }
  MTSTuning(const MTSTuning& t) : name(0), len(0), data(0)
  { *this = t; }
  MTSTuning(const char *filename);
  ~MTSTuning()
  { if (name) free(name); if (data) free(data); }
};

MTSTuning::MTSTuning(const char *filename)
{
  FILE *fp = fopen(filename, "rb");
  name = 0; len = 0; data = 0;
  if (!fp) return;
  struct stat st;
  if (fstat(fileno(fp), &st)) return;
  len = st.st_size;
  data = (unsigned char*)calloc(len, 1);
  if (!data) {
    len = 0; fclose(fp);
    return;
  }
  assert(len > 0);
  if (fread(data, 1, len, fp) < len) {
    free(data); len = 0; data = 0; fclose(fp);
    return;
  }
  fclose(fp);
  // Do some basic sanity checks.
  if (data[0] != 0xf0 || data[len-1] != 0xf7 || // not a sysex message
      (data[1] != 0x7e && data[1] != 0x7f) || data[3] != 8 || // not MTS
      !((len == 21 && data[4] == 8) ||
	(len == 33 && data[4] == 9))) { // no 1- or 2-byte tuning
    free(data); len = 0; data = 0;
    return;
  }
  // Name of the tuning is the basename of the file, without the trailing .syx
  // suffix.
  string nm = filename;
  size_t p = nm.rfind(".syx");
  if (p != string::npos) nm.erase(p);
  p = nm.rfind('/');
  if (p != string::npos) nm.erase(0, p+1);
  name = strdup(nm.c_str());
  assert(name);
}

struct MTSTunings {
  vector<MTSTuning> tuning;
  MTSTunings() {}
  MTSTunings(const char *path);
};

static bool compareByName(const MTSTuning &a, const MTSTuning &b)
{
  return strcmp(a.name, b.name) < 0;
}

MTSTunings::MTSTunings(const char *path)
{
  DIR *dp = opendir(path);
  if (!dp) return;
  struct dirent *d;
  while ((d = readdir(dp))) {
    string nm = d->d_name;
    if (nm.length() > 4 && nm.substr(nm.length()-4) == ".syx") {
      string pathname = path;
      pathname += "/";
      pathname += nm;
      MTSTuning t(pathname.c_str());
      if (t.data) tuning.push_back(t);
    }
  }
  closedir(dp);
  // sort found tunings by name
  sort(tuning.begin(), tuning.end(), compareByName);
}

#endif

#if FAUST_MIDICC
static float ctrlval(const ui_elem_t &el, uint8_t v)
{
  // Translate the given MIDI controller value to the range and stepsize
  // indicated by the Faust control.
  switch (el.type) {
  case UI_BUTTON: case UI_CHECK_BUTTON:
    return (float)(v>=64);
  default:
    /* Continuous controllers. The problem here is that the range 0..127 is
       not symmetric. We'd like to map 64 to the center of the range
       (max-min)/2 and at the same time retain the full control range
       min..max. So let's just pretend that there are 128 controller values
       and map value 127 to the max value anyway. */
    if (v==127)
      return el.max;
    else
      // XXXFIXME: We might want to add proper quantization according to
      // el.step here.
      return el.min+(el.max-el.min)*v/128;
  }
}
#endif

/***************************************************************************/

/* Polyphonic Faust plugin data structure. XXXTODO: At present this is just a
   big struct which exposes all requisite data. Some more work is needed to
   make the interface a bit more abstract and properly encapsulate the
   internal data structures, so that implementation details can be changed
   more easily. */

struct LV2Plugin {
  const int maxvoices;	// maximum number of voices (zero if not an instrument)
  const int ndsps;	// number of dsp instances (1 if maxvoices==0)
  bool active;		// activation status
  int rate;		// sampling rate
  int nvoices;		// current number of voices (<= maxvoices)
  int tuning_no;	// current tuning number (<= n_tunings)
  vintage_mics **dsp;		// the dsps
  LV2UI **ui;		// their Faust interface descriptions
  int n_in, n_out;	// number of input and output control ports
  int *ctrls;		// Faust ui elements (indices into ui->elems)
  float **ports;	// corresponding LV2 data
  float *portvals;	// cached port data from the last run
  float *midivals[16];	// per-midi channel data
  int *inctrls, *outctrls;	// indices for active and passive controls
  float **inputs, **outputs;	// audio buffers
  int freq, gain, gate;	// indices of voice controls
  unsigned n_samples;	// current block size
  float **outbuf;	// audio buffers for mixing down the voices
  float **inbuf;	// dummy input buffer
  LV2_Atom_Sequence* event_port; // midi input
  float *poly, *tuning;	// polyphony and tuning ports
  std::map<uint8_t,int> ctrlmap; // MIDI controller map
  // Needed host features.
  LV2_URID_Map* map;	// the urid extension
  LV2_URID midi_event;	// midi event uri
  // Current RPN MSB and LSB numbers, as set with controllers 101 and 100.
  uint8_t rpn_msb[16], rpn_lsb[16];
  // Current data entry MSB and LSB numbers, as set with controllers 6 and 38.
  uint8_t data_msb[16], data_lsb[16];
  // Synth voice data (instruments only).
  VoiceData *vd;

  // Static methods. These all use static data so they can be invoked before
  // instantiating a plugin.

  // Global meta data (dsp name, author, etc.).
  static Meta *meta;
  static void init_meta()
  {
    if (!meta && (meta = new Meta)) {
      // We allocate the temporary dsp object on the heap here, to prevent
      // large dsp objects from running out of stack in environments where
      // stack space is precious (e.g., Reaper). Note that if any of these
      // allocations fail then no meta data will be available, but at least we
      // won't make the host crash and burn.
      vintage_mics* tmp_dsp = new vintage_mics();
      if (tmp_dsp) {
	tmp_dsp->metadata(meta);
	delete tmp_dsp;
      }
    }
  }
  static const char *meta_get(const char *key, const char *deflt)
  {
    init_meta();
    return meta?meta->get(key, deflt):deflt;
  }

  static const char *pluginName()
  {
    return meta_get("name", "vintage_mics");
  }

  static const char *pluginAuthor()
  {
    return meta_get("author", "");
  }

  static const char *pluginDescription()
  {
    return meta_get("description", "");
  }

  static const char *pluginLicense()
  {
    return meta_get("license", "");
  }

  static const char *pluginVersion()
  {
    return meta_get("version", "");
  }

  // Load a collection of sysex files with MTS tunings in ~/.faust/tuning.
  static int n_tunings;
#if FAUST_MTS
  static MTSTunings *mts;

  static MTSTunings *load_sysex_data()
  {
    if (!mts) {
      string mts_path;
      // Look for FAUST_HOME. If that isn't set, try $HOME/.faust. If HOME
      // isn't set either, just assume a .faust subdir of the cwd.
      const char *home = getenv("FAUST_HOME");
      if (home)
	mts_path = home;
      else {
	home = getenv("HOME");
	if (home) {
	  mts_path = home;
	  mts_path += "/.faust";
	} else
	  mts_path = ".faust";
      }
      // MTS tunings are looked for in this subdir.
      mts_path += "/tuning";
      mts = new MTSTunings(mts_path.c_str());
#ifdef __APPLE__
      if (!mts || mts->tuning.size() == 0) {
	// Also check ~/Library/Faust/Tuning on the Mac.
	home = getenv("HOME");
	if (home) {
	  if (mts) delete mts;
	  mts_path = home;
	  mts_path += "/Library/Faust/Tuning";
	  mts = new MTSTunings(mts_path.c_str());
	}
      }
#endif
      n_tunings = mts->tuning.size();
    }
    return mts;
  }
#endif

  // The number of voices of an instrument plugin. We get this information
  // from the global meta data (nvoices key) of the dsp module if present, and
  // you can also override this setting at compile time by defining the
  // NVOICES macro. If neither is defined or the value is zero then the plugin
  // becomes a simple audio effect instead.
  static int numVoices()
  {
#ifdef NVOICES
    return NVOICES;
#else
    const char *numVoices = meta_get("nvoices", "0");
    int nvoices = atoi(numVoices);
    if (nvoices < 0 ) nvoices = 0;
    return nvoices;
#endif
  }

  // Instance methods.

  LV2Plugin(const int num_voices, const int sr)
    : maxvoices(num_voices), ndsps(num_voices<=0?1:num_voices),
      vd(num_voices>0?new VoiceData(num_voices):0)
  {
    // Initialize static data.
    init_meta();
#if FAUST_MTS
    // Synth: load tuning sysex data if present.
    if (num_voices>0) load_sysex_data();
#endif
    // Allocate data structures and set some reasonable defaults.
    dsp = (vintage_mics**)calloc(ndsps, sizeof(vintage_mics*));
    ui = (LV2UI**)calloc(ndsps, sizeof(LV2UI*));
    assert(dsp && ui);
    if (vd) {
      vd->note_info = (NoteInfo*)calloc(ndsps, sizeof(NoteInfo));
      vd->lastgate = (float*)calloc(ndsps, sizeof(float));
      assert(vd->note_info && vd->lastgate);
    }
    active = false;
    rate = sr;
    nvoices = maxvoices;
    tuning_no = 0;
    n_in = n_out = 0;
    map = NULL;
    midi_event = -1;
    event_port = NULL;
    poly = tuning = NULL;
    freq = gain = gate = -1;
    if (vd) {
      vd->n_free = maxvoices;
      for (int i = 0; i < maxvoices; i++) {
	vd->free_voices.push_back(i);
	vd->lastgate[i] = 0.0f;
      }
      for (int i = 0; i < 16; i++) {
	vd->bend[i] = 0.0f;
	vd->range[i] = 2.0f;
	vd->coarse[i] = vd->fine[i] = vd->tune[i] = 0.0f;
	for (int j = 0; j < 12; j++)
	  vd->tuning[i][j] = 0.0f;
      }
      vd->n_used = 0;
      memset(vd->notes, 0xff, sizeof(vd->notes));
    }
    n_samples = 0;
    ctrls = inctrls = outctrls = NULL;
    ports = inputs = outputs = inbuf = outbuf = NULL;
    portvals = NULL;
    memset(midivals, 0, sizeof(midivals));
    // Initialize the Faust DSPs.
    for (int i = 0; i < ndsps; i++) {
      dsp[i] = new vintage_mics();
      ui[i] = new LV2UI(num_voices);
      dsp[i]->init(rate);
      dsp[i]->buildUserInterface(ui[i]);
    }
    // The ports are numbered as follows: 0..k-1 are the control ports, then
    // come the n audio input ports, then the m audio output ports, and
    // finally the midi input port and the polyphony and tuning controls.
    int k = ui[0]->nports, p = 0, q = 0;
    int n = dsp[0]->getNumInputs(), m = dsp[0]->getNumOutputs();
    // Allocate tables for the built-in control elements and their ports.
    ctrls = (int*)calloc(k, sizeof(int));
    inctrls = (int*)calloc(k, sizeof(int));
    outctrls = (int*)calloc(k, sizeof(int));
    ports = (float**)calloc(k, sizeof(float*));
    portvals = (float*)calloc(k, sizeof(float));
    assert(k == 0 || (ctrls && inctrls && outctrls && ports && portvals));
    for (int ch = 0; ch < 16; ch++) {
      midivals[ch] = (float*)calloc(k, sizeof(float));
      assert(k == 0 || midivals[ch]);
    }
    // Scan the Faust UI for active and passive controls which become the
    // input and output control ports of the plugin, respectively.
    for (int i = 0, j = 0; i < ui[0]->nelems; i++) {
      switch (ui[0]->elems[i].type) {
      case UI_T_GROUP: case UI_H_GROUP: case UI_V_GROUP: case UI_END_GROUP:
	// control groups (ignored right now)
	break;
      case UI_H_BARGRAPH: case UI_V_BARGRAPH:
	// passive controls (output ports)
	ctrls[j++] = i;
	outctrls[q++] = i;
	break;
      default:
	// active controls (input ports)
	if (maxvoices == 0)
	  goto noinstr;
	else if (freq == -1 &&
		 !strcmp(ui[0]->elems[i].label, "freq"))
	  freq = i;
	else if (gain == -1 &&
		 !strcmp(ui[0]->elems[i].label, "gain"))
	  gain = i;
	else if (gate == -1 &&
		 !strcmp(ui[0]->elems[i].label, "gate"))
	  gate = i;
	else {
	noinstr:
#if FAUST_MIDICC
	  std::map< int, list<strpair> >::iterator it =
	    ui[0]->metadata.find(i);
	  if (it != ui[0]->metadata.end()) {
	    // Scan for controller mappings.
	    for (std::list<strpair>::iterator jt = it->second.begin();
		 jt != it->second.end(); jt++) {
	      const char *key = jt->first, *val = jt->second;
#if DEBUG_META
	      fprintf(stderr, "ctrl '%s' meta: '%s' -> '%s'\n",
		      ui[0]->elems[i].label, key, val);
#endif
	      if (strcmp(key, "midi") == 0) {
		unsigned num;
		if (sscanf(val, "ctrl %u", &num) < 1) continue;
#if 0 // enable this to get feedback about controller assignments
		fprintf(stderr, "%s: cc %d -> %s\n", PLUGIN_URI, num,
			ui[0]->elems[i].label);
#endif
		ctrlmap.insert(std::pair<uint8_t,int>(num, p));
	      }
	    }
	  }
#endif
	  ctrls[j++] = i;
	  inctrls[p++] = i;
	  int p = ui[0]->elems[i].port;
	  float val = ui[0]->elems[i].init;
	  assert(p>=0);
	  portvals[p] = val;
	  for (int ch = 0; ch < 16; ch++)
	    midivals[ch][p] = val;
	}
	break;
      }
    }
    // Realloc the inctrls and outctrls vectors to their appropriate sizes.
    inctrls = (int*)realloc(inctrls, p*sizeof(int));
    assert(p == 0 || inctrls);
    outctrls = (int*)realloc(outctrls, q*sizeof(int));
    assert(q == 0 || outctrls);
    n_in = p; n_out = q;
    // Allocate vectors for the audio input and output ports. Like
    // ports, these will be initialized in the connect_port callback.
    inputs = (float**)calloc(n, sizeof(float*));
    assert(n == 0 || inputs);
    outputs = (float**)calloc(m, sizeof(float*));
    assert(m == 0 || outputs);
    if (maxvoices > 0) {
      // Initialize the mixdown buffer.
      outbuf = (float**)calloc(m, sizeof(float*));
      assert(m == 0 || outbuf);
      // We start out with a blocksize of 512 samples here. Hopefully this is
      // enough for most realtime hosts so that we can avoid reallocations
      // later when we know what the actual blocksize is.
      n_samples = 512;
      for (int i = 0; i < m; i++) {
	outbuf[i] = (float*)malloc(n_samples*sizeof(float));
	assert(outbuf[i]);
      }
      // Initialize a 1-sample dummy input buffer used for retriggering notes.
      inbuf = (float**)calloc(n, sizeof(float*));
      assert(n == 0 || inbuf);
      for (int i = 0; i < m; i++) {
	inbuf[i] = (float*)malloc(sizeof(float));
	assert(inbuf[i]);
	*inbuf[i] = 0.0f;
      }
    }
  }

  ~LV2Plugin()
  {
    const int n = dsp[0]->getNumInputs();
    const int m = dsp[0]->getNumOutputs();
    for (int i = 0; i < ndsps; i++) {
      delete dsp[i];
      delete ui[i];
    }
    free(ctrls); free(inctrls); free(outctrls);
    free(ports); free(portvals);
    free(inputs); free(outputs);
    for (int ch = 0; ch < 16; ch++)
      free(midivals[ch]);
    if (inbuf) {
      for (int i = 0; i < n; i++)
	free(inbuf[i]);
      free(inbuf);
    }
    if (outbuf) {
      for (int i = 0; i < m; i++)
	free(outbuf[i]);
      free(outbuf);
    }
    free(dsp); free(ui);
    if (vd) {
      free(vd->note_info);
      free(vd->lastgate);
      delete vd;
    }
  }
  // Voice allocation.

#if DEBUG_VOICE_ALLOC
  void print_voices(const char *msg)
  {
    fprintf(stderr, "%s: notes =", msg);
    for (uint8_t ch = 0; ch < 16; ch++)
      for (int note = 0; note < 128; note++)
	if (vd->notes[ch][note] >= 0)
	  fprintf(stderr, " [%d] %d(#%d)", ch, note, vd->notes[ch][note]);
    fprintf(stderr, "\nqueued (%d):", vd->queued.size());
    for (int i = 0; i < nvoices; i++)
      if (vd->queued.find(i) != vd->queued.end()) fprintf(stderr, " #%d", i);
    fprintf(stderr, "\nused (%d):", vd->n_used);
    for (boost::circular_buffer<int>::iterator it = vd->used_voices.begin();
	 it != vd->used_voices.end(); it++)
      fprintf(stderr, " #%d->%d", *it, vd->note_info[*it].note);
    fprintf(stderr, "\nfree (%d):", vd->n_free);
    for (boost::circular_buffer<int>::iterator it = vd->free_voices.begin();
	 it != vd->free_voices.end(); it++)
      fprintf(stderr, " #%d", *it);
    fprintf(stderr, "\n");
  }
#endif

  int alloc_voice(uint8_t ch, int8_t note, int8_t vel)
  {
    int i = vd->notes[ch][note];
    if (i >= 0) {
      // note already playing on same channel, retrigger it
      voice_off(i);
      voice_on(i, note, vel, ch);
      // move this voice to the end of the used list
      for (boost::circular_buffer<int>::iterator it =
	     vd->used_voices.begin();
	   it != vd->used_voices.end(); it++) {
	if (*it == i) {
	  vd->used_voices.erase(it);
	  vd->used_voices.push_back(i);
	  break;
	}
      }
#if DEBUG_VOICE_ALLOC
      print_voices("retrigger");
#endif
      return i;
    } else if (vd->n_free > 0) {
      // take voice from free list
      int i = vd->free_voices.front();
      vd->free_voices.pop_front();
      vd->n_free--;
      vd->used_voices.push_back(i);
      vd->note_info[i].ch = ch;
      vd->note_info[i].note = note;
      vd->n_used++;
      voice_on(i, note, vel, ch);
      vd->notes[ch][note] = i;
#if DEBUG_VOICE_ALLOC
      print_voices("alloc");
#endif
      return i;
    } else {
      // steal a voice
      assert(vd->n_used > 0);
      // FIXME: Maybe we should look for the oldest note on the *current*
      // channel here, but this is faster.
      int i = vd->used_voices.front();
      int oldch = vd->note_info[i].ch;
      int oldnote = vd->note_info[i].note;
      voice_off(i);
      vd->notes[oldch][oldnote] = -1;
      vd->queued.erase(i);
      vd->used_voices.pop_front();
      vd->used_voices.push_back(i);
      vd->note_info[i].ch = ch;
      vd->note_info[i].note = note;
      voice_on(i, note, vel, ch);
      vd->notes[ch][note] = i;
#if DEBUG_VOICE_ALLOC
      print_voices("steal");
#endif
      return i;
    }
  }

  int dealloc_voice(uint8_t ch, int8_t note, int8_t vel)
  {
    int i = vd->notes[ch][note];
    if (i >= 0) {
      if (vd->lastgate[i] == 0.0f && gate >= 0) {
	// zero-length note, queued for later
	vd->queued.insert(i);
	vd->notes[ch][note] = -1;
#if DEBUG_VOICE_ALLOC
	print_voices("dealloc (queued)");
#endif
	return i;
      }
      assert(vd->n_free < nvoices);
      vd->free_voices.push_back(i);
      vd->n_free++;
      voice_off(i);
      vd->notes[ch][note] = -1;
      // erase this voice from the used list
      for (boost::circular_buffer<int>::iterator it =
	     vd->used_voices.begin();
	   it != vd->used_voices.end(); it++) {
	if (*it == i) {
	  vd->used_voices.erase(it);
	  vd->n_used--;
	  break;
	}
      }
#if DEBUG_VOICE_ALLOC
      print_voices("dealloc");
#endif
      return i;
    }
    return -1;
  }


  float midicps(int8_t note, uint8_t chan)
  {
    float pitch = note + vd->tune[chan] +
      vd->tuning[chan][note%12] + vd->bend[chan];
    return 440.0*pow(2, (pitch-69.0)/12.0);
  }

  void voice_on(int i, int8_t note, int8_t vel, uint8_t ch)
  {
    if (vd->lastgate[i] == 1.0f && gate >= 0) {
      // Make sure that the synth sees the 0.0f gate so that the voice is
      // properly retriggered.
      *ui[i]->elems[gate].zone = 0.0f;
      dsp[i]->compute(1, inbuf, outbuf);
    }
#if DEBUG_VOICES
    fprintf(stderr, "voice on: %d %d (%g Hz) %d (%g)\n", i,
	    note, midicps(note, ch), vel, vel/127.0);
#endif
    if (freq >= 0)
      *ui[i]->elems[freq].zone = midicps(note, ch);
    if (gate >= 0)
      *ui[i]->elems[gate].zone = 1.0f;
    if (gain >= 0)
      *ui[i]->elems[gain].zone = vel/127.0;
    // reinitialize the per-channel control data for this voice
    for (int idx = 0; idx < n_in; idx++) {
      int j = inctrls[idx], k = ui[0]->elems[j].port;
      *ui[i]->elems[j].zone = midivals[ch][k];
    }
  }

  void voice_off(int i)
  {
#if DEBUG_VOICES
    fprintf(stderr, "voice off: %d\n", i);
#endif
    if (gate >= 0)
      *ui[i]->elems[gate].zone = 0.0f;
  }

  void update_voices(uint8_t chan)
  {
    // update running voices on the given channel after tuning or pitch bend
    // changes
    for (boost::circular_buffer<int>::iterator it =
	   vd->used_voices.begin();
	 it != vd->used_voices.end(); it++) {
      int i = *it;
      if (vd->note_info[i].ch == chan && freq >= 0) {
	int note = vd->note_info[i].note;
	*ui[i]->elems[freq].zone = midicps(note, chan);
      }
    }
  }

  void all_notes_off()
  {
    for (int i = 0; i < nvoices; i++)
      voice_off(i);
    for (int i = 0; i < 16; i++)
      vd->bend[i] = 0.0f;
    memset(vd->notes, 0xff, sizeof(vd->notes));
    vd->free_voices.clear();
    vd->n_free = nvoices;
    for (int i = 0; i < nvoices; i++)
      vd->free_voices.push_back(i);
    vd->queued.clear();
    vd->used_voices.clear();
    vd->n_used = 0;
  }

  void all_notes_off(uint8_t chan)
  {
    for (boost::circular_buffer<int>::iterator it =
	   vd->used_voices.begin();
	 it != vd->used_voices.end(); ) {
      int i = *it;
      if (vd->note_info[i].ch == chan) {
	assert(vd->n_free < nvoices);
	vd->free_voices.push_back(i);
	vd->n_free++;
	voice_off(i);
	vd->notes[vd->note_info[i].ch][vd->note_info[i].note] = -1;
	vd->queued.erase(i);
	// erase this voice from the used list
	it = vd->used_voices.erase(it);
	vd->n_used--;
#if DEBUG_VOICE_ALLOC
	print_voices("dealloc (all-notes-off)");
#endif
      } else
	it++;
    }
    vd->bend[chan] = 0.0f;
  }

  void queued_notes_off()
  {
    if (vd->queued.empty()) return;
    for (int i = 0; i < nvoices; i++)
      if (vd->queued.find(i) != vd->queued.end()) {
	assert(vd->n_free < nvoices);
	vd->free_voices.push_back(i);
	vd->n_free++;
	voice_off(i);
	vd->notes[vd->note_info[i].ch][vd->note_info[i].note] = -1;
	vd->queued.erase(i);
	// erase this voice from the used list
	for (boost::circular_buffer<int>::iterator it =
	       vd->used_voices.begin();
	     it != vd->used_voices.end(); it++) {
	  if (*it == i) {
	    vd->used_voices.erase(it);
	    vd->n_used--;
	    break;
	  }
	}
#if DEBUG_VOICE_ALLOC
	print_voices("dealloc (unqueued)");
#endif
      }
  }

  // Plugin activation status. suspend() deactivates a plugin (disables audio
  // processing), resume() reactivates it. Also, set_rate() changes the sample
  // rate. Note that the audio and MIDI process functions (see below) can
  // still be called in deactivated state, but this is optional. The plugin
  // tries to do some reasonable processing in either case, no matter whether
  // the host plugin architecture actually executes callbacks in suspended
  // state or not.

  void suspend()
  {
    active = false;
    if (maxvoices > 0) all_notes_off();
  }

  void resume()
  {
    for (int i = 0; i < ndsps; i++)
      dsp[i]->init(rate);
    for (int i = 0, j = 0; i < ui[0]->nelems; i++) {
      int p = ui[0]->elems[i].port;
      if (p >= 0) {
	float val = ui[0]->elems[i].init;
	portvals[p] = val;
      }
    }
    active = true;
  }

  void set_rate(int sr)
  {
    rate = sr;
    for (int i = 0; i < ndsps; i++)
      dsp[i]->init(rate);
  }

  // Audio and MIDI process functions. The plugin should run these in the
  // appropriate real-time callbacks.

  void process_audio(int blocksz, float **inputs, float **outputs)
  {
    int n = dsp[0]->getNumInputs(), m = dsp[0]->getNumOutputs();
    AVOIDDENORMALS;
    if (maxvoices > 0) queued_notes_off();
    if (!active) {
      // Depending on the plugin architecture and host, this code might never
      // be invoked, since the plugin is deactivitated at this point. But
      // let's do something reasonable here anyway.
      if (n == m) {
	// copy inputs to outputs
	for (int i = 0; i < m; i++)
	  for (unsigned j = 0; j < blocksz; j++)
	    outputs[i][j] = inputs[i][j];
      } else {
	// silence
	for (int i = 0; i < m; i++)
	  for (unsigned j = 0; j < blocksz; j++)
	    outputs[i][j] = 0.0f;
      }
      return;
    }
    // Handle changes in the polyphony and tuning controls.
    bool is_instr = maxvoices > 0;
    if (is_instr) {
      if (!poly)
	; // this shouldn't happen but...
      else if (nvoices != (int)*poly &&
	       (int)*poly > 0 && (int)*poly <= maxvoices) {
	for (int i = 0; i < nvoices; i++)
	  voice_off(i);
        nvoices = (int)*poly;
	// Reset the voice allocation.
	memset(vd->notes, 0xff, sizeof(vd->notes));
	vd->free_voices.clear();
	vd->n_free = nvoices;
	for (int i = 0; i < nvoices; i++)
	  vd->free_voices.push_back(i);
	vd->used_voices.clear();
	vd->n_used = 0;
      } else
	*poly = nvoices;
#if FAUST_MTS
      if (tuning && tuning_no != (int)*tuning) change_tuning((int)*tuning);
#endif
    }
    // Only update the controls (of all voices simultaneously) if a port value
    // actually changed. This is necessary to allow MIDI controllers to modify
    // the values for individual MIDI channels (see processEvents below). Also
    // note that this will be done *after* processing the MIDI controller data
    // for the current audio block, so manual inputs can still override these.
    for (int i = 0; i < n_in; i++) {
      int j = inctrls[i], k = ui[0]->elems[j].port;
      float &oldval = portvals[k], newval = *ports[k];
      if (newval != oldval) {
	if (is_instr) {
	  // instrument: update running voices
	  for (boost::circular_buffer<int>::iterator it =
		 vd->used_voices.begin();
	       it != vd->used_voices.end(); it++) {
	    int i = *it;
	    *ui[i]->elems[j].zone = newval;
	  }
	} else {
	  // simple effect: here we only have a single dsp instance
	  *ui[0]->elems[j].zone = newval;
	}
	// also update the MIDI controller data for all channels (manual
	// control input is always omni)
	for (int ch = 0; ch < 16; ch++)
	  midivals[ch][k] = newval;
	// record the new value
	oldval = newval;
      }
    }
    // Initialize the output buffers.
    if (n_samples < blocksz) {
      // We need to enlarge the buffers. We're not officially allowed to do
      // this here (presumably in the realtime thread), but since we usually
      // don't know the hosts's block size beforehand, there's really nothing
      // else that we can do. Let's just hope that doing this once suffices,
      // then hopefully noone will notice.
      if (outbuf) {
	for (int i = 0; i < m; i++) {
	  outbuf[i] = (float*)realloc(outbuf[i],
				      blocksz*sizeof(float));
	  assert(outbuf[i]);
	}
      }
      n_samples = blocksz;
    }
    if (outbuf) {
      // Polyphonic instrument: Mix the voices down to one signal.
      for (int i = 0; i < m; i++)
	for (unsigned j = 0; j < blocksz; j++)
	  outputs[i][j] = 0.0f;
      for (int l = 0; l < nvoices; l++) {
	// Let Faust do all the hard work.
	dsp[l]->compute(blocksz, inputs, outbuf);
	for (int i = 0; i < m; i++)
	  for (unsigned j = 0; j < blocksz; j++)
	    outputs[i][j] += outbuf[i][j];
      }
    } else {
      // Simple effect: We can write directly to the output buffer.
      dsp[0]->compute(blocksz, inputs, outputs);
    }
    // Finally grab the passive controls and write them back to the
    // corresponding control ports. NOTE: Depending on the plugin
    // architecture, this might require a host call to get the control GUI
    // updated in real-time (if the host supports this at all).
    // FIXME: It's not clear how to aggregate the data of the different
    // voices. We compute the maximum of each control for now.
    for (int i = 0; i < n_out; i++) {
      int j = outctrls[i], k = ui[0]->elems[j].port;
      float *z = ui[0]->elems[j].zone;
      *ports[k] = *z;
      for (int l = 1; l < nvoices; l++) {
	float *z = ui[l]->elems[j].zone;
	if (*ports[k] < *z)
	  *ports[k] = *z;
      }
    }
    // Keep track of the last gates set for each voice, so that voices can be
    // forcibly retriggered if needed.
    if (gate >= 0)
      for (int i = 0; i < nvoices; i++)
	vd->lastgate[i] =
	  *ui[i]->elems[gate].zone;
  }

  // This processes just a single MIDI message, so to process an entire series
  // of MIDI events you'll have to loop over the event data in the plugin's
  // MIDI callback. XXXTODO: Sample-accurate processing of MIDI events.
  
  void process_midi(unsigned char *data, int sz)
  {
#if DEBUG_MIDI
    fprintf(stderr, "midi ev (%d bytes):", sz);
    for (int i = 0; i < sz; i++)
      fprintf(stderr, " 0x%0x", data[i]);
    fprintf(stderr, "\n");
#endif
    uint8_t status = data[0] & 0xf0, chan = data[0] & 0x0f;
    bool is_instr = maxvoices > 0;
    switch (status) {
    case 0x90: {
      if (!is_instr) break;
      // note on
#if DEBUG_NOTES
      fprintf(stderr, "note-on  chan %d, note %d, vel %d\n", chan+1,
	      data[1], data[2]);
#endif
      if (data[2] == 0) goto note_off;
      alloc_voice(chan, data[1], data[2]);
      break;
    }
    case 0x80: {
      if (!is_instr) break;
      // note off
#if DEBUG_NOTES
      fprintf(stderr, "note-off chan %d, note %d, vel %d\n", chan+1,
	      data[1], data[2]);
#endif
      note_off:
      dealloc_voice(chan, data[1], data[2]);
      break;
    }
    case 0xe0: {
      if (!is_instr) break;
      // pitch bend
      // data[1] is LSB, data[2] MSB, range is 0..0x3fff (which maps to
      // -2..+2 semitones by default), center point is 0x2000 = 8192
      int val = data[1] | (data[2]<<7);
      vd->bend[chan] =
	(val-0x2000)/8192.0f*vd->range[chan];
#if DEBUG_MIDICC
      fprintf(stderr, "pitch-bend (chan %d): %g cent\n", chan+1,
	      vd->bend[chan]*100.0);
#endif
      update_voices(chan);
      break;
    }
    case 0xb0: {
      // controller change
      switch (data[1]) {
      case 120: case 123:
	if (!is_instr) break;
	// all-sound-off and all-notes-off controllers (these are treated
	// the same in the current implementation)
	all_notes_off(chan);
#if DEBUG_MIDICC
	fprintf(stderr, "all-notes-off (chan %d)\n", chan+1);
#endif
	break;
      case 121:
	// all-controllers-off (in the current implementation, this just
	// resets the RPN-related controllers)
	data_msb[chan] = data_lsb[chan] = 0;
	rpn_msb[chan] = rpn_lsb[chan] = 0x7f;
#if DEBUG_MIDICC
	fprintf(stderr, "all-controllers-off (chan %d)\n", chan+1);
#endif
	break;
      case 101: case 100:
	// RPN MSB/LSB
	if (data[1] == 101)
	  rpn_msb[chan] = data[2];
	else
	  rpn_lsb[chan] = data[2];
	break;
      case 6: case 38:
	// data entry coarse/fine
	if (data[1] == 6)
	  data_msb[chan] = data[2];
	else
	  data_lsb[chan] = data[2];
	goto rpn;
      case 96: case 97:
	// data increment/decrement
	/* NOTE: The specification of these controllers is a complete
	   mess. Originally, the MIDI specification didn't have anything
	   to say about their exact behaviour at all. Nowadays, the
	   behaviour depends on which RPN or NRPN is being modified, which
	   is also rather confusing. Fortunately, as we only handle RPNs
	   0..2 here anyway, it's sufficient to assume the MSB for RPN #2
	   (channel coarse tuning) and the LSB otherwise. */
	if (rpn_msb[chan] == 0 && rpn_lsb[chan] == 2) {
	  // modify the MSB
	  if (data[1] == 96 && data_msb[chan] < 0x7f)
	    data_msb[chan]++;
	  else if (data[1] == 97 && data_msb[chan] > 0)
	    data_msb[chan]--;
	} else {
	  // modify the LSB
	  if (data[1] == 96 && data_lsb[chan] < 0x7f)
	    data_lsb[chan]++;
	  else if (data[1] == 97 && data_lsb[chan] > 0)
	    data_lsb[chan]--;
	}
      rpn:
	if (!is_instr) break;
	if (rpn_msb[chan] == 0) {
	  switch (rpn_lsb[chan]) {
	  case 0:
	    // pitch bend range, coarse value is in semitones, fine value
	    // in cents
	    vd->range[chan] = data_msb[chan]+
	      data_lsb[chan]/100.0;
#if DEBUG_RPN
	    fprintf(stderr, "pitch-bend-range (chan %d): %g cent\n", chan+1,
		    vd->range[chan]*100.0);
#endif
	    break;
	  case 1:
	    {
	      // channel fine tuning (14 bit value, range -100..+100 cents)
	      int value = (data_msb[chan]<<7) |
		data_lsb[chan];
	      vd->fine[chan] = (value-8192)/8192.0f;
	    }
	    goto master_tune;
	  case 2:
	    // channel coarse tuning (only msb is used, range -64..+63
	    // semitones)
	    vd->coarse[chan] = data_msb[chan]-64;
	  master_tune:
	    vd->tune[chan] = vd->coarse[chan]+
	      vd->fine[chan];
#if DEBUG_RPN
	    fprintf(stderr, "master-tuning (chan %d): %g cent\n", chan+1,
		    vd->tune[chan]*100.0);
#endif
	    update_voices(chan);
	    break;
	  default:
	    break;
	  }
	}
	break;
      default: {
#if FAUST_MIDICC
	// interpret all other controller changes according to the MIDI
	// controller map defined in the Faust plugin itself
	std::map<uint8_t,int>::iterator it = ctrlmap.find(data[1]);
	if (it != ctrlmap.end()) {
	  // defined MIDI controller
	  int j = inctrls[it->second],
	    k = ui[0]->elems[j].port;
	  float val = ctrlval(ui[0]->elems[j], data[2]);
	  midivals[chan][k] = val;
	  if (is_instr) {
	    // instrument: update running voices on this channel
	    for (boost::circular_buffer<int>::iterator it =
		   vd->used_voices.begin();
		 it != vd->used_voices.end(); it++) {
	      int i = *it;
	      if (vd->note_info[i].ch == chan)
		*ui[i]->elems[j].zone = val;
	    }
	  } else {
	    // simple effect: here we only have a single dsp instance and
	    // we're operating in omni mode, so we just update the control no
	    // matter what the midi channel is
	    *ui[0]->elems[j].zone = val;
	  }
#if DEBUG_MIDICC
	  fprintf(stderr, "ctrl-change chan %d, ctrl %d, val %d\n", chan+1,
		  data[1], data[2]);
#endif
	}
#endif
	break;
      }
      }
      break;
    }
    default:
      break;
    }
  }

  // Process an MTS sysex message and update the control values accordingly.

  void process_sysex(uint8_t *data, int sz)
  {
    if (!data || sz < 2) return;
#if DEBUG_MIDI
    fprintf(stderr, "midi sysex (%d bytes):", sz);
    for (int i = 0; i < sz; i++)
      fprintf(stderr, " 0x%0x", data[i]);
    fprintf(stderr, "\n");
#endif
    if (data[0] == 0xf0) {
      // Skip over the f0 and f7 status bytes in case they are included in the
      // dump.
      data++; sz--;
      if (data[sz-1] == 0xf7) sz--;
    }
    if ((data[0] == 0x7e || data[0] == 0x7f) && data[2] == 8) {
      // MIDI tuning standard
      bool realtime = data[0] == 0x7f;
      if ((sz == 19 && data[3] == 8) ||
	  (sz == 31 && data[3] == 9)) {
	// MTS scale/octave tuning 1- or 2-byte form
	bool onebyte = data[3] == 8;
	unsigned chanmsk = (data[4]<<14) | (data[5]<<7) | data[6];
	for (int i = 0; i < 12; i++) {
	  float t;
	  if (onebyte)
	    t = (data[i+7]-64)/100.0;
	  else
	    t = (((data[2*i+7]<<7)|data[2*i+8])-8192)/8192.0;
	  for (uint8_t ch = 0; ch < 16; ch++)
	    if (chanmsk & (1<<ch))
	      vd->tuning[ch][i] = t;
	}
	if (realtime) {
	  for (uint8_t ch = 0; ch < 16; ch++)
	    if (chanmsk & (1<<ch)) {
	      // update running voices on this channel
	      update_voices(ch);
	    }
	}
#if DEBUG_MTS
	fprintf(stderr, "octave-tuning-%s (chan ",
		realtime?"realtime":"non-realtime");
	bool first = true;
	for (uint8_t i = 0; i < 16; )
	  if (chanmsk & (1<<i)) {
	    uint8_t j;
	    for (j = i+1; j < 16 && (chanmsk&(1<<j)); )
	      j++;
	    if (first)
	      first = false;
	    else
	      fprintf(stderr, ",");
	    if (j > i+1)
	      fprintf(stderr, "%u-%u", i+1, j);
	    else
	      fprintf(stderr, "%u", i+1);
	    i = j;
	  } else
	    i++;
	fprintf(stderr, "):");
	if (onebyte) {
	  for (int i = 7; i < 19; i++) {
	    int val = data[i];
	    fprintf(stderr, " %d", val-64);
	  }
	} else {
	  for (int i = 7; i < 31; i++) {
	    int val = data[i++] << 7;
	    val |= data[i];
	    fprintf(stderr, " %g", ((double)val-8192.0)/8192.0*100.0);
	  }
	}
	fprintf(stderr, "\n");
#endif
      }
    }
  }

  // Change to a given preloaded tuning. The given tuning number may be in the
  // range 1..PFaustPlugin::n_tunings, zero denotes the default tuning (equal
  // temperament). This is only supported if FAUST_MTS is defined at compile
  // time.

  void change_tuning(int num)
  {
#if FAUST_MTS
    if (!mts || num == tuning_no) return;
    if (num < 0) num = 0;
    if (num > mts->tuning.size())
      num = mts->tuning.size();
    tuning_no = num;
    if (tuning_no > 0) {
      process_sysex(mts->tuning[tuning_no-1].data,
		    mts->tuning[tuning_no-1].len);
    } else {
      memset(vd->tuning, 0, sizeof(vd->tuning));
#if DEBUG_MTS
      fprintf(stderr,
	      "octave-tuning-default (chan 1-16): equal temperament\n");
#endif
    }
#endif
  }

};

Meta *LV2Plugin::meta = 0;
int LV2Plugin::n_tunings = 0;
#if FAUST_MTS
MTSTunings *LV2Plugin::mts = 0;
#endif

/* LV2-specific part starts here. ********************************************/

static LV2_Handle
instantiate(const LV2_Descriptor*     descriptor,
            double                    rate,
            const char*               bundle_path,
            const LV2_Feature* const* features)
{
  LV2Plugin* plugin =
    new LV2Plugin(LV2Plugin::numVoices(), (int)rate);
  // Scan host features for URID map.
  for (int i = 0; features[i]; i++) {
    if (!strcmp(features[i]->URI, LV2_URID_URI "#map")) {
      plugin->map = (LV2_URID_Map*)features[i]->data;
      plugin->midi_event =
	plugin->map->map(plugin->map->handle, MIDI_EVENT_URI);
    }
  }
  if (!plugin->map) {
    fprintf
      (stderr, "%s: host doesn't support urid:map, giving up\n",
       PLUGIN_URI);
    delete plugin;
    return 0;
  }
  return (LV2_Handle)plugin;
}

static void
cleanup(LV2_Handle instance)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  delete plugin;
}

static void
connect_port(LV2_Handle instance,
             uint32_t   port,
             void*      data)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  int i = port, k = plugin->ui[0]->nports;
  int n = plugin->dsp[0]->getNumInputs(), m = plugin->dsp[0]->getNumOutputs();
  if (i < k)
    plugin->ports[i] = (float*)data;
  else {
    i -= k;
    if (i < n)
      plugin->inputs[i] = (float*)data;
    else {
      i -= n;
      if (i < m)
	plugin->outputs[i] = (float*)data;
      else if (i == m)
	plugin->event_port = (LV2_Atom_Sequence*)data;
      else if (i == m+1)
	plugin->poly = (float*)data;
      else if (i == m+2)
	plugin->tuning = (float*)data;
      else
	fprintf(stderr, "%s: bad port number %u\n", PLUGIN_URI, port);
    }
  }
}

static void
run(LV2_Handle instance, uint32_t n_samples)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  // Process incoming MIDI events.
  if (plugin->event_port) {
    LV2_ATOM_SEQUENCE_FOREACH(plugin->event_port, ev) {
      if (ev->body.type == plugin->midi_event) {
	uint8_t *data = (uint8_t*)(ev+1);
#if 0
	// FIXME: Consider doing sample-accurate note onsets here. LV2 keeps
	// track of the exact onset in the frames and subframes fields
	// (http://lv2plug.in/ns/doc/html/structLV2__Atom__Event.html), but we
	// can't use that information at present, since our gate parameter is
	// a control variable which can only change at block boundaries. In
	// the future, the gate could be implemented as an audio signal to get
	// sample-accurate note onsets.
	uint32_t frames = ev->body.frames;
#endif
	if (data[0] == 0xf0)
	  plugin->process_sysex(data, ev->body.size);
	else
	  plugin->process_midi(data, ev->body.size);
      }
    }
  }
  // Process audio.
  plugin->process_audio(n_samples, plugin->inputs, plugin->outputs);
}

static void
activate(LV2_Handle instance)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  plugin->resume();
}

static void
deactivate(LV2_Handle instance)
{
  LV2Plugin* plugin = (LV2Plugin*)instance;
  plugin->suspend();
}

const void*
extension_data(const char* uri)
{
  return NULL;
}

static const LV2_Descriptor descriptor = {
  PLUGIN_URI,
  instantiate,
  connect_port,
  activate,
  run,
  deactivate,
  cleanup,
  extension_data
};

extern "C"
LV2_SYMBOL_EXPORT
const LV2_Descriptor*
lv2_descriptor(uint32_t index)
{
  switch (index) {
  case 0:
    return &descriptor;
  default:
    return NULL;
  }
}

//----------------------------------------------------------------------------
//  Dynamic manifest
//----------------------------------------------------------------------------

// NOTE: If your LV2 host doesn't offer this extension then you'll have to
// create a static ttl file with the descriptions of the ports. You can do
// this by compiling this code to a standalone executable. Running the
// executable then prints the manifest on stdout.

extern "C"
LV2_SYMBOL_EXPORT
int lv2_dyn_manifest_open(LV2_Dyn_Manifest_Handle *handle,
			  const LV2_Feature *const *features)
{
  LV2Plugin* plugin =
    new LV2Plugin(LV2Plugin::numVoices(), 48000);
  *handle = (LV2_Dyn_Manifest_Handle)plugin;
  return 0;
}

extern "C"
LV2_SYMBOL_EXPORT
int lv2_dyn_manifest_get_subjects(LV2_Dyn_Manifest_Handle handle,
				  FILE *fp)
{
  fprintf(fp, "@prefix lv2:  <http://lv2plug.in/ns/lv2core#> .\n\
<%s> a lv2:Plugin .\n", PLUGIN_URI);
  return 0;
}

#include <string>
#include <ctype.h>

static string mangle(const string &s)
{
  string t = s;
  size_t n = s.size();
  for (size_t i = 0; i < n; i++)
    if ((i == 0 && !isalpha(t[i]) && t[i] != '_') ||
	(!isalnum(t[i]) && t[i] != '_'))
      t[i] = '_';
  return t;
}

static unsigned steps(float min, float max, float step)
{
  if (step == 0.0) return 1;
  int n = (max-min)/step;
  if (n < 0) n = -n;
  if (n == 0) n = 1;
  return n;
}

#if FAUST_META
static bool is_xmlstring(const char *s)
{
  // This is just a basic sanity check. The string must not contain any
  // (unescaped) newlines, carriage returns or double quotes.
  return !strchr(s, '\n') && !strchr(s, '\r') && !strchr(s, '"');
}
#endif

extern "C"
LV2_SYMBOL_EXPORT
int lv2_dyn_manifest_get_data(LV2_Dyn_Manifest_Handle handle,
			      FILE *fp,
			      const char *uri)
{
  LV2Plugin* plugin = (LV2Plugin*)handle;
  int k = plugin->ui[0]->nports;
  int n = plugin->dsp[0]->getNumInputs(), m = plugin->dsp[0]->getNumOutputs();
  bool is_instr = plugin->maxvoices > 0, have_midi = is_instr;
  // Scan the global metadata for plugin name, description, license etc.
  const char *plugin_name = NULL, *plugin_author = NULL, *plugin_descr = NULL,
    *plugin_version = NULL, *plugin_license = NULL;
#if FAUST_META
  plugin_name = plugin->pluginName();
  plugin_descr = plugin->pluginDescription();
  plugin_author = plugin->pluginAuthor();
  plugin_version = plugin->pluginVersion();
  plugin_license = plugin->pluginLicense();
#endif
  if (!plugin_name || !*plugin_name) plugin_name = "vintage_mics";
  fprintf(fp, "@prefix doap:  <http://usefulinc.com/ns/doap#> .\n\
@prefix foaf:  <http://xmlns.com/foaf/0.1/> .\n\
@prefix lv2:   <http://lv2plug.in/ns/lv2core#> .\n\
@prefix ui:    <http://lv2plug.in/ns/extensions/ui#> .\n\
@prefix epp:   <http://lv2plug.in/ns/ext/port-props#> .\n\
@prefix atom:  <http://lv2plug.in/ns/ext/atom#> .\n\
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n\
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .\n\
@prefix units: <http://lv2plug.in/ns/extensions/units#> .\n\
<%s>\n\
       a lv2:Plugin%s ;\n\
       doap:name \"%s\" ;\n\
       lv2:binary <vintage_mics%s> ;\n\
       lv2:optionalFeature epp:supportsStrictBounds ;\n\
       lv2:optionalFeature lv2:hardRtCapable ;\n", PLUGIN_URI,
	  is_instr?", lv2:InstrumentPlugin":"",
	  plugin_name, DLLEXT);
  if (plugin_author && *plugin_author)
    fprintf(fp, "\
       doap:maintainer [ foaf:name \"%s\" ] ;\n", plugin_author);
  // doap:description just seems to be ignored by all LV2 hosts anyway, so we
  // rather use rdfs:comment now which works with Ardour at least.
  if (plugin_descr && *plugin_descr)
    fprintf(fp, "\
       rdfs:comment \"%s\" ;\n", plugin_descr);
  if (plugin_version && *plugin_version)
    fprintf(fp, "\
       doap:revision \"%s\" ;\n", plugin_version);
  if (plugin_license && *plugin_license)
    fprintf(fp, "\
       doap:license \"%s\" ;\n", plugin_license);
#if FAUST_UI
    fprintf(fp, "\
       ui:ui <%sui> ;\n", PLUGIN_URI);
#endif
  int idx = 0;
  // control ports
  for (int i = 0; i < k; i++, idx++) {
    int j = plugin->ctrls[i];
    assert(idx == plugin->ui[0]->elems[j].port);
    fprintf(fp, "%s [\n", idx==0?"    lv2:port":" ,");
    const char *label = plugin->ui[0]->elems[j].label;
    assert(label);
    string sym = mangle(plugin->ui[0]->elems[j].label);
    switch (plugin->ui[0]->elems[j].type) {
    // active controls (input ports)
    case UI_BUTTON: case UI_CHECK_BUTTON:
    fprintf(fp, "\
	a lv2:InputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"%s_%d\" ;\n\
	lv2:name \"%s\" ;\n\
        lv2:portProperty epp:hasStrictBounds ;\n\
        lv2:portProperty lv2:toggled ;\n\
	lv2:default 0.00000 ;\n\
	lv2:minimum 0.00000 ;\n\
	lv2:maximum 1.00000 ;\n", idx, sym.c_str(), idx, label);
      break;
    case UI_NUM_ENTRY: case UI_H_SLIDER: case UI_V_SLIDER:
    fprintf(fp, "\
	a lv2:InputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"%s_%d\" ;\n\
	lv2:name \"%s\" ;\n\
        lv2:portProperty epp:hasStrictBounds ;\n\
        epp:rangeSteps %u ;\n\
	lv2:default %g ;\n\
	lv2:minimum %g ;\n\
	lv2:maximum %g ;\n", idx, sym.c_str(), idx, label,
	    steps(plugin->ui[0]->elems[j].min,
		  plugin->ui[0]->elems[j].max,
		  plugin->ui[0]->elems[j].step),
	    plugin->ui[0]->elems[j].init,
	    plugin->ui[0]->elems[j].min,
	    plugin->ui[0]->elems[j].max);
      break;
    // passive controls (output ports)
    case UI_H_BARGRAPH: case UI_V_BARGRAPH:
    fprintf(fp, "\
	a lv2:OutputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"%s_%d\" ;\n\
	lv2:name \"%s\" ;\n\
	lv2:default %g ;\n\
	lv2:minimum %g ;\n\
	lv2:maximum %g ;\n", idx, sym.c_str(), idx, label,
	    plugin->ui[0]->elems[j].min,
	    plugin->ui[0]->elems[j].min,
	    plugin->ui[0]->elems[j].max);
      break;
    default:
      assert(0 && "this can't happen");
      break;
    }
    // Scan for Faust control metadata we understand and add corresponding
    // hints to the LV2 description of the port.
    std::map< int, list<strpair> >::iterator it =
      plugin->ui[0]->metadata.find(j);
    if (it != plugin->ui[0]->metadata.end()) {
      for (std::list<strpair>::iterator jt = it->second.begin();
	   jt != it->second.end(); jt++) {
	const char *key = jt->first, *val = jt->second;
#if FAUST_MIDICC
	unsigned num;
	if (!strcmp(key, "midi") && sscanf(val, "ctrl %u", &num) == 1)
	  have_midi = true;
#endif
	if (!strcmp(key, "unit"))
	  fprintf(fp, "\
	units:unit [\n\
            a            units:Unit ;\n\
            units:name   \"%s\" ;\n\
            units:symbol \"%s\" ;\n\
            units:render \"%%f %s\"\n\
	] ;\n", val, val, val);
	if (strcmp(key, "lv2")) continue;
	if (!strcmp(val, "integer"))
	  fprintf(fp, "\
	lv2:portProperty lv2:integer ;\n");
	else if (!strcmp(val, "reportsLatency"))
	  fprintf(fp, "\
	lv2:portProperty lv2:reportsLatency ;\n\
	lv2:designation lv2:latency ;\n");
	else if (!strcmp(val, "hidden") || !strcmp(val, "notOnGUI"))
	  fprintf(fp, "\
	lv2:portProperty epp:notOnGUI ;\n");
	else if (!strncmp(val, "scalepoint", 10) ||
		 !strncmp(val, "scalePoint", 10)) {
	  val += 10;
	  if (!isspace(*val)) continue;
	  char *label = (char*)malloc(strlen(val)+1);
	  float point;
	  int pos;
	  while (sscanf(val, "%s %g%n", label, &point, &pos) == 2) {
	    fprintf(fp, "\
	lv2:scalePoint [ rdfs:label \"%s\"; rdf:value %g ] ;\n",
		    label, point);
	    val += pos;
	  }
	  free(label);
	} else
	  fprintf(stderr, "%s: bad port property '%s:%s'\n", PLUGIN_URI,
		  key, val);
      }
    }
    fprintf(fp, "    ]");
  }
  // audio inputs
  for (int i = 0; i < n; i++, idx++)
    fprintf(fp, "%s [\n\
	a lv2:InputPort ;\n\
	a lv2:AudioPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"in%d\" ;\n\
	lv2:name \"in%d\" ;\n\
    ]", idx==0?"    lv2:port":" ,", idx, i, i);
  // audio outputs
  for (int i = 0; i < m; i++, idx++)
    fprintf(fp, "%s [\n\
	a lv2:OutputPort ;\n\
	a lv2:AudioPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"out%d\" ;\n\
	lv2:name \"out%d\" ;\n\
    ]", idx==0?"    lv2:port":" ,", idx, i, i);
  if (have_midi) {
    // midi input
    fprintf(fp, "%s [\n\
	a lv2:InputPort ;\n\
	a atom:AtomPort ;\n\
	atom:bufferType atom:Sequence ;\n\
	atom:supports <http://lv2plug.in/ns/ext/midi#MidiEvent> ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"midiin\" ;\n\
	lv2:name \"midiin\"\n\
    ]", idx==0?"    lv2:port":" ,", idx);
    idx++;
  }
  if (is_instr) {
    // polyphony control
    fprintf(fp, "%s [\n\
	a lv2:InputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"polyphony\" ;\n\
	lv2:name \"polyphony\" ;\n\
        lv2:portProperty epp:hasStrictBounds ;\n\
#       lv2:portProperty epp:expensive ;\n\
        lv2:portProperty lv2:integer ;\n\
        epp:rangeSteps %d ;\n\
	lv2:default %d ;\n\
	lv2:minimum 1 ;\n\
	lv2:maximum %d ;\n\
    ]", idx==0?"    lv2:port":" ,", idx, plugin->maxvoices-1,
      plugin->maxvoices>1?plugin->maxvoices/2:1,
      plugin->maxvoices);
    idx++;
#if FAUST_MTS
    if (plugin->n_tunings > 0) {
      // tuning control
      fprintf(fp, "%s [\n\
	a lv2:InputPort ;\n\
	a lv2:ControlPort ;\n\
	lv2:index %d ;\n\
	lv2:symbol \"tuning\" ;\n\
	lv2:name \"tuning\" ;\n\
        lv2:portProperty epp:hasStrictBounds ;\n\
        lv2:portProperty lv2:integer ;\n\
        epp:rangeSteps %d ;\n\
	lv2:default 0 ;\n\
	lv2:minimum 0 ;\n\
	lv2:maximum %d ;\n",
	idx==0?"    lv2:port":" ,", idx, plugin->n_tunings, plugin->n_tunings);
      for (int i = 0; i <= plugin->n_tunings; i++)
	fprintf(fp, "\
	lv2:scalePoint [ rdfs:label \"%s\"; rdf:value %d ] ;\n",
		(i>0)?plugin->mts->tuning[i-1].name:"default", i);
      fprintf(fp, "    ]");
      idx++;
    }
#endif
  }
  fprintf(fp, "\n.\n");
  return 0;
}

extern "C"
LV2_SYMBOL_EXPORT
void lv2_dyn_manifest_close(LV2_Dyn_Manifest_Handle handle)
{
  LV2Plugin* plugin = (LV2Plugin*)handle;
  delete plugin;
}

int main()
{
  LV2_Dyn_Manifest_Handle handle;
  LV2_Feature **features = { NULL };
  int res = lv2_dyn_manifest_open(&handle, features);
  if (res) return res;
  res = lv2_dyn_manifest_get_data(handle, stdout, PLUGIN_URI);
  return res;
}

#endif
