
an = library("analyzers.lib");
ba = library("basics.lib");
fi = library("filters.lib");
ma = library("maths.lib");
si = library("signals.lib");
no = library("noises.lib");
os = library("oscillators.lib");
de = library("delays.lib");
ef = library("misceffects.lib");

clamp(low, high, n) = min(max(n, low), high);

clamp_control(n) = clamp(0.0, 1.0, n);

scale(offset, mult, n) = (n + offset) * mult;

// scale from -1..1 to 0..1
scale_osc_control(n) = scale(1.0, 0.5, n);

gula_lf_tri(freq, shape) = ba.if(impulse_to_mid, sweep_up, sweep_down)
with {
    period = ma.SR / freq : int;

    mid_period = period * shape : int;
    after_mid_period = period - mid_period;

    impulse_to_mid = ba.pulsen(mid_period, period);
    impulse_after_mid = scale(-1.0, -1.0, impulse_to_mid);

    sweep_up = (ba.sweep(mid_period, impulse_to_mid) : float) / mid_period;
    sweep_down = 1.0 - (ba.sweep(after_mid_period, impulse_after_mid) : float) / after_mid_period;
};

gula_lf_impulse(freq, shape) = impulse_to_mid
with {
    period = ma.SR / freq : int;
    mid_period = period * shape : int;
    impulse_to_mid = ba.pulsen(mid_period, period);
};

gula_lf_osc(freq, depth, shape) = blend * (1 - depth_min) + depth_min
with {
    blend = gula_lf_osc_normal(freq, shape);
    depth_min = ba.lin2LogGain(1 - depth);
    depthed = blend * (1 - depth_min) + depth_min;
};

gula_lf_osc_normal(freq, shape) = blend
with {
    select = shape : int;
    b_amp = shape - floor(shape);
    a_amp = 1.0 - b_amp;

    sin_osc = os.oscsin(freq) : scale_osc_control;
    rand = no.lfnoiseN(1, freq) : scale_osc_control : clamp_control;
    rand_sin = (rand * a_amp) + (sin_osc * b_amp);

    impulse_shape = ba.if(select == 1, 0.5, a_amp);
    impulse = gula_lf_impulse(freq, impulse_shape) : si.smooth(0.99);
    sin_square = (sin_osc * a_amp) + (impulse * b_amp) : si.smooth(0.99);

    tri = gula_lf_tri(freq, a_amp) : si.smooth(0.99);

    blend = rand_sin, sin_square, impulse, tri, a_amp : ba.selectn(5, select);
};

gula_vibrato(freq, depth, offset) = de.fdelayltv(3, dmax, min(dmax, osc))
with {
    dmax = 1024;
    amp = ba.lin2LogGain(depth) * dmax : si.smooth(0.999);
    osc = (os.oscp(freq, 6.28318 * offset : si.smooth(0.999)) + 1.0) * amp / 2.0;
};

gula_fade_gain(split, spread, origin) = fade_gain
with {
    hspread_comp = ba.if(spread >= 1.0, 0.0, 0.5 - (spread / 2.0));

    // down slope linear interpololation
    down_start = origin + hspread_comp;
    down_end = down_start + spread;
    gain_down = 1.0 + (-1.0 / (down_end - down_start)) * (split - down_start);

    // up slope linear interpololation
    up_end = origin - hspread_comp;
    up_start = up_end - spread;
    gain_up = (1.0 / (up_end - up_start)) * (split - up_start);

    g = ba.if(split > origin, gain_down, gain_up);
    fade_gain = ba.log2LinGain(clamp_control(g));
};

gula_ab_filter(freq_a, gain_a, q_a, freq_b, gain_b, q_b, ab_sweep, n) = fi.peak_eq_cq(gain, freq, q, n)
with {
    q = q_a, q_b : si.interpolate(ab_sweep);
    gain = gain_a, gain_b : si.interpolate(ba.lin2LogGain(ab_sweep));
    freq = freq_a, freq_b : si.interpolate(ba.lin2LogGain(ab_sweep));
};

gula_ab_amp(attack, release, peak_decay, n) = ab_amp_scaled
with {
    ab_amp = an.amp_follower_ar(attack, release, n);
    range_max = an.amp_follower(peak_decay, n),0.01 : max : si.smooth(0.999) : hbargraph("range", 0, 1) ;
    ab_mult = 1.0 / range_max;
    ab_amp_scaled = scale(0, ab_mult, ab_amp) : clamp(0, 1) : hbargraph("sweep", 0, 1);
};

gula_amp = an.amp_follower(0.05) : si.smooth(0.95);

gula_freq(n) = pitch
with {
    pitch = ef.gate_mono(-30, 0, 0, 0, n) : an.pitchTracker(2, 0.03);
};